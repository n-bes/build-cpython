{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "GNU C11", "fullName": "GNU C11 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)", "version": "13.2.0", "informationUri": "https://gcc.gnu.org/gcc-13/", "rules": [{"id": "-Wanalyzer-null-dereference", "helpUri": "https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-dereference"}]}}, "taxonomies": [{"name": "CWE", "version": "4.7", "organization": "MITRE", "shortDescription": {"text": "The MITRE Common Weakness Enumeration"}, "taxa": [{"id": "476", "helpUri": "https://cwe.mitre.org/data/definitions/476.html"}]}], "invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}}, "artifacts": [{"location": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "contents": {"text": "#ifndef Py_OBJECT_H\n#define Py_OBJECT_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Object and type object interface */\n\n/*\nObjects are structures allocated on the heap.  Special rules apply to\nthe use of objects to ensure they are properly garbage-collected.\nObjects are never allocated statically or on the stack; they must be\naccessed through special macros and functions only.  (Type objects are\nexceptions to the first rule; the standard types are represented by\nstatically initialized type objects, although work on type/class unification\nfor Python 2.2 made it possible to have heap-allocated type objects too).\n\nAn object has a 'reference count' that is increased or decreased when a\npointer to the object is copied or deleted; when the reference count\nreaches zero there are no references to the object left and it can be\nremoved from the heap.\n\nAn object has a 'type' that determines what it represents and what kind\nof data it contains.  An object's type is fixed when it is created.\nTypes themselves are represented as objects; an object contains a\npointer to the corresponding type object.  The type itself has a type\npointer pointing to the object representing the type 'type', which\ncontains a pointer to itself!.\n\nObjects do not float around in memory; once allocated an object keeps\nthe same size and address.  Objects that must hold variable-size data\ncan contain pointers to variable-size parts of the object.  Not all\nobjects of the same type have the same size; but the size cannot change\nafter allocation.  (These restrictions are made so a reference to an\nobject can be simply a pointer -- moving an object would require\nupdating all the pointers, and changing an object's size would require\nmoving it if there was another object right next to it.)\n\nObjects are always accessed through pointers of the type 'PyObject *'.\nThe type 'PyObject' is a structure that only contains the reference count\nand the type pointer.  The actual memory allocated for an object\ncontains other data that can only be accessed after casting the pointer\nto a pointer to a longer structure type.  This longer type must start\nwith the reference count and type fields; the macro PyObject_HEAD should be\nused for this (to accommodate for future changes).  The implementation\nof a particular object type can cast the object pointer to the proper\ntype and back.\n\nA standard interface exists for objects that contain an array of items\nwhose size is determined when the object is allocated.\n*/\n\n/* Py_DEBUG implies Py_REF_DEBUG. */\n#if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)\n#  define Py_REF_DEBUG\n#endif\n\n/* PyObject_HEAD defines the initial segment of every PyObject. */\n#define PyObject_HEAD                   PyObject ob_base;\n\n/*\nImmortalization:\n\nThe following indicates the immortalization strategy depending on the amount\nof available bits in the reference count field. All strategies are backwards\ncompatible but the specific reference count value or immortalization check\nmight change depending on the specializations for the underlying system.\n\nProper deallocation of immortal instances requires distinguishing between\nstatically allocated immortal instances vs those promoted by the runtime to be\nimmortal. The latter should be the only instances that require\ncleanup during runtime finalization.\n*/\n\n#if SIZEOF_VOID_P > 4\n/*\nIn 64+ bit systems, an object will be marked as immortal by setting all of the\nlower 32 bits of the reference count field, which is equal to: 0xFFFFFFFF\n\nUsing the lower 32 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases will use saturated arithmetic, taking advantage of\nhaving all the lower 32 bits set, which will avoid the reference count to go\nbeyond the refcount limit. Immortality checks for reference count decreases will\nbe done by checking the bit sign flag in the lower 32 bits.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX)\n\n#else\n/*\nIn 32 bit systems, an object will be marked as immortal by setting all of the\nlower 30 bits of the reference count field, which is equal to: 0x3FFFFFFF\n\nUsing the lower 30 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases and decreases will first go through an immortality\ncheck by comparing the reference count field to the immortality reference count.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX >> 2)\n#endif\n\n// Py_GIL_DISABLED builds indicate immortal objects using `ob_ref_local`, which is\n// always 32-bits.\n#ifdef Py_GIL_DISABLED\n#define _Py_IMMORTAL_REFCNT_LOCAL UINT32_MAX\n#endif\n\n// Kept for backward compatibility. It was needed by Py_TRACE_REFS build.\n#define _PyObject_EXTRA_INIT\n\n/* Make all uses of PyObject_HEAD_INIT immortal.\n *\n * Statically allocated objects might be shared between\n * interpreters, so must be marked as immortal.\n */\n#if defined(Py_GIL_DISABLED)\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        0,                          \\\n        0,                          \\\n        { 0 },                      \\\n        0,                          \\\n        _Py_IMMORTAL_REFCNT_LOCAL,  \\\n        0,                          \\\n        (type),                     \\\n    },\n#else\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        { _Py_IMMORTAL_REFCNT },    \\\n        (type)                      \\\n    },\n#endif\n\n#define PyVarObject_HEAD_INIT(type, size) \\\n    {                                     \\\n        PyObject_HEAD_INIT(type)          \\\n        (size)                            \\\n    },\n\n/* PyObject_VAR_HEAD defines the initial segment of all variable-size\n * container objects.  These end with a declaration of an array with 1\n * element, but enough space is malloc'ed so that the array actually\n * has room for ob_size elements.  Note that ob_size is an element count,\n * not necessarily a byte count.\n */\n#define PyObject_VAR_HEAD      PyVarObject ob_base;\n#define Py_INVALID_SIZE (Py_ssize_t)-1\n\n/* Nothing is actually declared to be a PyObject, but every pointer to\n * a Python object can be cast to a PyObject*.  This is inheritance built\n * by hand.  Similarly every pointer to a variable-size Python object can,\n * in addition, be cast to PyVarObject*.\n */\n#ifndef Py_GIL_DISABLED\nstruct _object {\n#if (defined(__GNUC__) || defined(__clang__)) \\\n        && !(defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L)\n    // On C99 and older, anonymous union is a GCC and clang extension\n    __extension__\n#endif\n#ifdef _MSC_VER\n    // Ignore MSC warning C4201: \"nonstandard extension used:\n    // nameless struct/union\"\n    __pragma(warning(push))\n    __pragma(warning(disable: 4201))\n#endif\n    union {\n       Py_ssize_t ob_refcnt;\n#if SIZEOF_VOID_P > 4\n       PY_UINT32_T ob_refcnt_split[2];\n#endif\n    };\n#ifdef _MSC_VER\n    __pragma(warning(pop))\n#endif\n\n    PyTypeObject *ob_type;\n};\n#else\n// Objects that are not owned by any thread use a thread id (tid) of zero.\n// This includes both immortal objects and objects whose reference count\n// fields have been merged.\n#define _Py_UNOWNED_TID             0\n\n// The shared reference count uses the two least-significant bits to store\n// flags. The remaining bits are used to store the reference count.\n#define _Py_REF_SHARED_SHIFT        2\n#define _Py_REF_SHARED_FLAG_MASK    0x3\n\n// The shared flags are initialized to zero.\n#define _Py_REF_SHARED_INIT         0x0\n#define _Py_REF_MAYBE_WEAKREF       0x1\n#define _Py_REF_QUEUED              0x2\n#define _Py_REF_MERGED              0x3\n\n// Create a shared field from a refcnt and desired flags\n#define _Py_REF_SHARED(refcnt, flags) (((refcnt) << _Py_REF_SHARED_SHIFT) + (flags))\n\nstruct _object {\n    // ob_tid stores the thread id (or zero). It is also used by the GC and the\n    // trashcan mechanism as a linked list pointer and by the GC to store the\n    // computed \"gc_refs\" refcount.\n    uintptr_t ob_tid;\n    uint16_t _padding;\n    PyMutex ob_mutex;           // per-object lock\n    uint8_t ob_gc_bits;         // gc-related state\n    uint32_t ob_ref_local;      // local reference count\n    Py_ssize_t ob_ref_shared;   // shared (atomic) reference count\n    PyTypeObject *ob_type;\n};\n#endif\n\n/* Cast argument to PyObject* type. */\n#define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))\n\ntypedef struct {\n    PyObject ob_base;\n    Py_ssize_t ob_size; /* Number of items in variable part */\n} PyVarObject;\n\n/* Cast argument to PyVarObject* type. */\n#define _PyVarObject_CAST(op) _Py_CAST(PyVarObject*, (op))\n\n\n// Test if the 'x' object is the 'y' object, the same as \"x is y\" in Python.\nPyAPI_FUNC(int) Py_Is(PyObject *x, PyObject *y);\n#define Py_Is(x, y) ((x) == (y))\n\n#if defined(Py_GIL_DISABLED) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(uintptr_t) _Py_GetThreadLocal_Addr(void);\n\nstatic inline uintptr_t\n_Py_ThreadId(void)\n{\n    uintptr_t tid;\n#if defined(_MSC_VER) && defined(_M_X64)\n    tid = __readgsqword(48);\n#elif defined(_MSC_VER) && defined(_M_IX86)\n    tid = __readfsdword(24);\n#elif defined(_MSC_VER) && defined(_M_ARM64)\n    tid = __getReg(18);\n#elif defined(__i386__)\n    __asm__(\"movl %%gs:0, %0\" : \"=r\" (tid));  // 32-bit always uses GS\n#elif defined(__MACH__) && defined(__x86_64__)\n    __asm__(\"movq %%gs:0, %0\" : \"=r\" (tid));  // x86_64 macOSX uses GS\n#elif defined(__x86_64__)\n   __asm__(\"movq %%fs:0, %0\" : \"=r\" (tid));  // x86_64 Linux, BSD uses FS\n#elif defined(__arm__)\n    __asm__ (\"mrc p15, 0, %0, c13, c0, 3\\nbic %0, %0, #3\" : \"=r\" (tid));\n#elif defined(__aarch64__) && defined(__APPLE__)\n    __asm__ (\"mrs %0, tpidrro_el0\" : \"=r\" (tid));\n#elif defined(__aarch64__)\n    __asm__ (\"mrs %0, tpidr_el0\" : \"=r\" (tid));\n#elif defined(__powerpc64__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r13 is reserved for use as system thread ID by the Power 64-bit ABI.\n    register uintptr_t tp __asm__ (\"r13\");\n    __asm__(\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__powerpc__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r2 is reserved for use as system thread ID by the Power 32-bit ABI.\n    register uintptr_t tp __asm__ (\"r2\");\n    __asm__ (\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__s390__) && defined(__GNUC__)\n    // Both GCC and Clang have supported __builtin_thread_pointer\n    // for s390 from long time ago.\n    tid = (uintptr_t)__builtin_thread_pointer();\n#elif defined(__riscv)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // tp is Thread Pointer provided by the RISC-V ABI.\n    __asm__ (\"mv %0, tp\" : \"=r\" (tid));\n    #endif\n#else\n    // Fallback to a portable implementation if we do not have a faster\n    // platform-specific implementation.\n    tid = _Py_GetThreadLocal_Addr();\n#endif\n  return tid;\n}\n\nstatic inline Py_ALWAYS_INLINE int\n_Py_IsOwnedByCurrentThread(PyObject *ob)\n{\n#ifdef _Py_THREAD_SANITIZER\n    return _Py_atomic_load_uintptr_relaxed(&ob->ob_tid) == _Py_ThreadId();\n#else\n    return ob->ob_tid == _Py_ThreadId();\n#endif\n}\n#endif\n\nstatic inline Py_ssize_t Py_REFCNT(PyObject *ob) {\n#if !defined(Py_GIL_DISABLED)\n    return ob->ob_refcnt;\n#else\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&ob->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return _Py_IMMORTAL_REFCNT;\n    }\n    Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&ob->ob_ref_shared);\n    return _Py_STATIC_CAST(Py_ssize_t, local) +\n           Py_ARITHMETIC_RIGHT_SHIFT(Py_ssize_t, shared, _Py_REF_SHARED_SHIFT);\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_REFCNT(ob) Py_REFCNT(_PyObject_CAST(ob))\n#endif\n\n\n// bpo-39573: The Py_SET_TYPE() function must be used to set an object type.\nstatic inline PyTypeObject* Py_TYPE(PyObject *ob) {\n    return ob->ob_type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyLong_Type;\nPyAPI_DATA(PyTypeObject) PyBool_Type;\n\n// bpo-39573: The Py_SET_SIZE() function must be used to set an object size.\nstatic inline Py_ssize_t Py_SIZE(PyObject *ob) {\n    assert(ob->ob_type != &PyLong_Type);\n    assert(ob->ob_type != &PyBool_Type);\n    return  _PyVarObject_CAST(ob)->ob_size;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SIZE(ob) Py_SIZE(_PyObject_CAST(ob))\n#endif\n\nstatic inline Py_ALWAYS_INLINE int _Py_IsImmortal(PyObject *op)\n{\n#if defined(Py_GIL_DISABLED)\n    return (_Py_atomic_load_uint32_relaxed(&op->ob_ref_local) ==\n            _Py_IMMORTAL_REFCNT_LOCAL);\n#elif SIZEOF_VOID_P > 4\n    return (_Py_CAST(PY_INT32_T, op->ob_refcnt) < 0);\n#else\n    return (op->ob_refcnt == _Py_IMMORTAL_REFCNT);\n#endif\n}\n#define _Py_IsImmortal(op) _Py_IsImmortal(_PyObject_CAST(op))\n\nstatic inline int Py_IS_TYPE(PyObject *ob, PyTypeObject *type) {\n    return Py_TYPE(ob) == type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))\n#endif\n\n\n// Py_SET_REFCNT() implementation for stable ABI\nPyAPI_FUNC(void) _Py_SetRefcnt(PyObject *ob, Py_ssize_t refcnt);\n\nstatic inline void Py_SET_REFCNT(PyObject *ob, Py_ssize_t refcnt) {\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030d0000\n    // Stable ABI implements Py_SET_REFCNT() as a function call\n    // on limited C API version 3.13 and newer.\n    _Py_SetRefcnt(ob, refcnt);\n#else\n    // This immortal check is for code that is unaware of immortal objects.\n    // The runtime tracks these objects and we should avoid as much\n    // as possible having extensions inadvertently change the refcnt\n    // of an immortalized object.\n    if (_Py_IsImmortal(ob)) {\n        return;\n    }\n\n#ifndef Py_GIL_DISABLED\n    ob->ob_refcnt = refcnt;\n#else\n    if (_Py_IsOwnedByCurrentThread(ob)) {\n        if ((size_t)refcnt > (size_t)UINT32_MAX) {\n            // On overflow, make the object immortal\n            ob->ob_tid = _Py_UNOWNED_TID;\n            ob->ob_ref_local = _Py_IMMORTAL_REFCNT_LOCAL;\n            ob->ob_ref_shared = 0;\n        }\n        else {\n            // Set local refcount to desired refcount and shared refcount\n            // to zero, but preserve the shared refcount flags.\n            ob->ob_ref_local = _Py_STATIC_CAST(uint32_t, refcnt);\n            ob->ob_ref_shared &= _Py_REF_SHARED_FLAG_MASK;\n        }\n    }\n    else {\n        // Set local refcount to zero and shared refcount to desired refcount.\n        // Mark the object as merged.\n        ob->ob_tid = _Py_UNOWNED_TID;\n        ob->ob_ref_local = 0;\n        ob->ob_ref_shared = _Py_REF_SHARED(refcnt, _Py_REF_MERGED);\n    }\n#endif  // Py_GIL_DISABLED\n#endif  // Py_LIMITED_API+0 < 0x030d0000\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_REFCNT(ob, refcnt) Py_SET_REFCNT(_PyObject_CAST(ob), (refcnt))\n#endif\n\n\nstatic inline void Py_SET_TYPE(PyObject *ob, PyTypeObject *type) {\n    ob->ob_type = type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_TYPE(ob, type) Py_SET_TYPE(_PyObject_CAST(ob), type)\n#endif\n\nstatic inline void Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) {\n    assert(ob->ob_base.ob_type != &PyLong_Type);\n    assert(ob->ob_base.ob_type != &PyBool_Type);\n#ifdef Py_GIL_DISABLED\n    _Py_atomic_store_ssize_relaxed(&ob->ob_size, size);\n#else\n    ob->ob_size = size;\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_SIZE(ob, size) Py_SET_SIZE(_PyVarObject_CAST(ob), (size))\n#endif\n\n\n/*\nType objects contain a string containing the type name (to help somewhat\nin debugging), the allocation parameters (see PyObject_New() and\nPyObject_NewVar()),\nand methods for accessing objects of the type.  Methods are optional, a\nnil pointer meaning that particular kind of access is not available for\nthis type.  The Py_DECREF() macro uses the tp_dealloc method without\nchecking for a nil pointer; it should always be implemented except if\nthe implementation can guarantee that the reference count will never\nreach zero (e.g., for statically allocated type objects).\n\nNB: the methods for certain type groups are now contained in separate\nmethod blocks.\n*/\n\ntypedef PyObject * (*unaryfunc)(PyObject *);\ntypedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\ntypedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ntypedef int (*inquiry)(PyObject *);\ntypedef Py_ssize_t (*lenfunc)(PyObject *);\ntypedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\ntypedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\ntypedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\ntypedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\ntypedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);\n\ntypedef int (*objobjproc)(PyObject *, PyObject *);\ntypedef int (*visitproc)(PyObject *, void *);\ntypedef int (*traverseproc)(PyObject *, visitproc, void *);\n\n\ntypedef void (*freefunc)(void *);\ntypedef void (*destructor)(PyObject *);\ntypedef PyObject *(*getattrfunc)(PyObject *, char *);\ntypedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\ntypedef int (*setattrfunc)(PyObject *, char *, PyObject *);\ntypedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*reprfunc)(PyObject *);\ntypedef Py_hash_t (*hashfunc)(PyObject *);\ntypedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ntypedef PyObject *(*getiterfunc) (PyObject *);\ntypedef PyObject *(*iternextfunc) (PyObject *);\ntypedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*initproc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);\ntypedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030c0000 // 3.12\ntypedef PyObject *(*vectorcallfunc)(PyObject *callable, PyObject *const *args,\n                                    size_t nargsf, PyObject *kwnames);\n#endif\n\ntypedef struct{\n    int slot;    /* slot id, see below */\n    void *pfunc; /* function pointer */\n} PyType_Slot;\n\ntypedef struct{\n    const char* name;\n    int basicsize;\n    int itemsize;\n    unsigned int flags;\n    PyType_Slot *slots; /* terminated by slot==0. */\n} PyType_Spec;\n\nPyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000\nPyAPI_FUNC(void*) PyType_GetSlot(PyTypeObject*, int);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03090000\nPyAPI_FUNC(PyObject*) PyType_FromModuleAndSpec(PyObject *, PyType_Spec *, PyObject *);\nPyAPI_FUNC(PyObject *) PyType_GetModule(PyTypeObject *);\nPyAPI_FUNC(void *) PyType_GetModuleState(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030B0000\nPyAPI_FUNC(PyObject *) PyType_GetName(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GetQualName(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030D0000\nPyAPI_FUNC(PyObject *) PyType_GetFullyQualifiedName(PyTypeObject *type);\nPyAPI_FUNC(PyObject *) PyType_GetModuleName(PyTypeObject *type);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\nPyAPI_FUNC(PyObject *) PyType_FromMetaclass(PyTypeObject*, PyObject*, PyType_Spec*, PyObject*);\nPyAPI_FUNC(void *) PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls);\nPyAPI_FUNC(Py_ssize_t) PyType_GetTypeDataSize(PyTypeObject *cls);\n#endif\n\n/* Generic type check */\nPyAPI_FUNC(int) PyType_IsSubtype(PyTypeObject *, PyTypeObject *);\n\nstatic inline int PyObject_TypeCheck(PyObject *ob, PyTypeObject *type) {\n    return Py_IS_TYPE(ob, type) || PyType_IsSubtype(Py_TYPE(ob), type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyType_Type; /* built-in 'type' */\nPyAPI_DATA(PyTypeObject) PyBaseObject_Type; /* built-in 'object' */\nPyAPI_DATA(PyTypeObject) PySuper_Type; /* built-in 'super' */\n\nPyAPI_FUNC(unsigned long) PyType_GetFlags(PyTypeObject*);\n\nPyAPI_FUNC(int) PyType_Ready(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GenericAlloc(PyTypeObject *, Py_ssize_t);\nPyAPI_FUNC(PyObject *) PyType_GenericNew(PyTypeObject *,\n                                               PyObject *, PyObject *);\nPyAPI_FUNC(unsigned int) PyType_ClearCache(void);\nPyAPI_FUNC(void) PyType_Modified(PyTypeObject *);\n\n/* Generic operations on objects */\nPyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);\nPyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);\nPyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);\nPyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttrString(PyObject *v, const char *name);\nPyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);\nPyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_GetOptionalAttr(PyObject *, PyObject *, PyObject **);\nPyAPI_FUNC(int) PyObject_GetOptionalAttrString(PyObject *, const char *, PyObject **);\n#endif\nPyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttr(PyObject *v, PyObject *name);\nPyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_HasAttrWithError(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_HasAttrStringWithError(PyObject *, const char *);\n#endif\nPyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *, PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);\n#endif\nPyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);\nPyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);\nPyAPI_FUNC(int) PyObject_IsTrue(PyObject *);\nPyAPI_FUNC(int) PyObject_Not(PyObject *);\nPyAPI_FUNC(int) PyCallable_Check(PyObject *);\nPyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);\n\n/* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a\n   list of strings.  PyObject_Dir(NULL) is like builtins.dir(),\n   returning the names of the current locals.  In this case, if there are\n   no current locals, NULL is returned, and PyErr_Occurred() is false.\n*/\nPyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);\n\n/* Helpers for printing recursive container types */\nPyAPI_FUNC(int) Py_ReprEnter(PyObject *);\nPyAPI_FUNC(void) Py_ReprLeave(PyObject *);\n\n/* Flag bits for printing: */\n#define Py_PRINT_RAW    1       /* No string quotes etc. */\n\n/*\nType flags (tp_flags)\n\nThese flags are used to change expected features and behavior for a\nparticular type.\n\nArbitration of the flag bit positions will need to be coordinated among\nall extension writers who publicly release their extensions (this will\nbe fewer than you might expect!).\n\nMost flags were removed as of Python 3.0 to make room for new flags.  (Some\nflags are not for backwards compatibility but to indicate the presence of an\noptional feature; these flags remain of course.)\n\nType definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.\n\nCode can use PyType_HasFeature(type_ob, flag_value) to test whether the\ngiven type object has a specified feature.\n*/\n\n#ifndef Py_LIMITED_API\n\n/* Track types initialized using _PyStaticType_InitBuiltin(). */\n#define _Py_TPFLAGS_STATIC_BUILTIN (1 << 1)\n\n/* The values array is placed inline directly after the rest of\n * the object. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_INLINE_VALUES (1 << 2)\n\n/* Placement of weakref pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_weaklistoffset.\n */\n#define Py_TPFLAGS_MANAGED_WEAKREF (1 << 3)\n\n/* Placement of dict (and values) pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_dictoffset. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_MANAGED_DICT (1 << 4)\n\n#define Py_TPFLAGS_PREHEADER (Py_TPFLAGS_MANAGED_WEAKREF | Py_TPFLAGS_MANAGED_DICT)\n\n/* Set if instances of the type object are treated as sequences for pattern matching */\n#define Py_TPFLAGS_SEQUENCE (1 << 5)\n/* Set if instances of the type object are treated as mappings for pattern matching */\n#define Py_TPFLAGS_MAPPING (1 << 6)\n#endif\n\n/* Disallow creating instances of the type: set tp_new to NULL and don't create\n * the \"__new__\" key in the type dictionary. */\n#define Py_TPFLAGS_DISALLOW_INSTANTIATION (1UL << 7)\n\n/* Set if the type object is immutable: type attributes cannot be set nor deleted */\n#define Py_TPFLAGS_IMMUTABLETYPE (1UL << 8)\n\n/* Set if the type object is dynamically allocated */\n#define Py_TPFLAGS_HEAPTYPE (1UL << 9)\n\n/* Set if the type allows subclassing */\n#define Py_TPFLAGS_BASETYPE (1UL << 10)\n\n/* Set if the type implements the vectorcall protocol (PEP 590) */\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\n#define Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)\n#ifndef Py_LIMITED_API\n// Backwards compatibility alias for API that was provisional in Python 3.8\n#define _Py_TPFLAGS_HAVE_VECTORCALL Py_TPFLAGS_HAVE_VECTORCALL\n#endif\n#endif\n\n/* Set if the type is 'ready' -- fully initialized */\n#define Py_TPFLAGS_READY (1UL << 12)\n\n/* Set while the type is being 'readied', to prevent recursive ready calls */\n#define Py_TPFLAGS_READYING (1UL << 13)\n\n/* Objects support garbage collection (see objimpl.h) */\n#define Py_TPFLAGS_HAVE_GC (1UL << 14)\n\n/* These two bits are preserved for Stackless Python, next after this is 17 */\n#ifdef STACKLESS\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)\n#else\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0\n#endif\n\n/* Objects behave like an unbound method */\n#define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)\n\n/* Unused. Legacy flag */\n#define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)\n\n/* Type is abstract and cannot be instantiated */\n#define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)\n\n// This undocumented flag gives certain built-ins their unique pattern-matching\n// behavior, which allows a single positional subpattern to match against the\n// subject itself (rather than a mapped attribute on it):\n#define _Py_TPFLAGS_MATCH_SELF (1UL << 22)\n\n/* Items (ob_size*tp_itemsize) are found at the end of an instance's memory */\n#define Py_TPFLAGS_ITEMS_AT_END (1UL << 23)\n\n/* These flags are used to determine if a type is a subclass. */\n#define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)\n#define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)\n#define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)\n#define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)\n#define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)\n#define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)\n#define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)\n#define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)\n\n#define Py_TPFLAGS_DEFAULT  ( \\\n                 Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \\\n                0)\n\n/* NOTE: Some of the following flags reuse lower bits (removed as part of the\n * Python 3.0 transition). */\n\n/* The following flags are kept for compatibility; in previous\n * versions they indicated presence of newer tp_* fields on the\n * type struct.\n * Starting with 3.8, binary compatibility of C extensions across\n * feature releases of Python is not supported anymore (except when\n * using the stable ABI, in which all classes are created dynamically,\n * using the interpreter's memory layout.)\n * Note that older extensions using the stable ABI set these flags,\n * so the bits must not be repurposed.\n */\n#define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)\n#define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)\n\n\n/*\nThe macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement\nreference counts.  Py_DECREF calls the object's deallocator function when\nthe refcount falls to 0; for\nobjects that don't contain references to other objects or heap memory\nthis can be the standard function free().  Both macros can be used\nwherever a void expression is allowed.  The argument must not be a\nNULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.\nThe macro _Py_NewReference(op) initialize reference counts to 1, and\nin special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional\nbookkeeping appropriate to the special build.\n\nWe assume that the reference count field can never overflow; this can\nbe proven when the size of the field is the same as the pointer size, so\nwe ignore the possibility.  Provided a C int is at least 32 bits (which\nis implicitly assumed in many parts of this code), that's enough for\nabout 2**31 references to an object.\n\nXXX The following became out of date in Python 2.2, but I'm not sure\nXXX what the full truth is now.  Certainly, heap-allocated type objects\nXXX can and should be deallocated.\nType objects should never be deallocated; the type pointer in an object\nis not considered to be a reference to the type object, to save\ncomplications in the deallocation function.  (This is actually a\ndecision that's up to the implementer of each new type so if you want,\nyou can count such references to the type object.)\n*/\n\n#if defined(Py_REF_DEBUG) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,\n                                      PyObject *op);\nPyAPI_FUNC(void) _Py_INCREF_IncRefTotal(void);\nPyAPI_FUNC(void) _Py_DECREF_DecRefTotal(void);\n#endif  // Py_REF_DEBUG && !Py_LIMITED_API\n\nPyAPI_FUNC(void) _Py_Dealloc(PyObject *);\n\n/*\nThese are provided as conveniences to Python runtime embedders, so that\nthey can have object code that is not dependent on Python compilation flags.\n*/\nPyAPI_FUNC(void) Py_IncRef(PyObject *);\nPyAPI_FUNC(void) Py_DecRef(PyObject *);\n\n// Similar to Py_IncRef() and Py_DecRef() but the argument must be non-NULL.\n// Private functions used by Py_INCREF() and Py_DECREF().\nPyAPI_FUNC(void) _Py_IncRef(PyObject *);\nPyAPI_FUNC(void) _Py_DecRef(PyObject *);\n\nstatic inline Py_ALWAYS_INLINE void Py_INCREF(PyObject *op)\n{\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n    // Stable ABI implements Py_INCREF() as a function call on limited C API\n    // version 3.12 and newer, and on Python built in debug mode. _Py_IncRef()\n    // was added to Python 3.10.0a7, use Py_IncRef() on older Python versions.\n    // Py_IncRef() accepts NULL whereas _Py_IncRef() doesn't.\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_IncRef(op);\n#  else\n    Py_IncRef(op);\n#  endif\n#else\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n#if defined(Py_GIL_DISABLED)\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    uint32_t new_local = local + 1;\n    if (new_local == 0) {\n        // local is equal to _Py_IMMORTAL_REFCNT: do nothing\n        return;\n    }\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, new_local);\n    }\n    else {\n        _Py_atomic_add_ssize(&op->ob_ref_shared, (1 << _Py_REF_SHARED_SHIFT));\n    }\n#elif SIZEOF_VOID_P > 4\n    // Portable saturated add, branching on the carry flag and set low bits\n    PY_UINT32_T cur_refcnt = op->ob_refcnt_split[PY_BIG_ENDIAN];\n    PY_UINT32_T new_refcnt = cur_refcnt + 1;\n    if (new_refcnt == 0) {\n        // cur_refcnt is equal to _Py_IMMORTAL_REFCNT: the object is immortal,\n        // do nothing\n        return;\n    }\n    op->ob_refcnt_split[PY_BIG_ENDIAN] = new_refcnt;\n#else\n    // Explicitly check immortality against the immortal value\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    op->ob_refcnt++;\n#endif\n    _Py_INCREF_STAT_INC();\n#ifdef Py_REF_DEBUG\n    _Py_INCREF_IncRefTotal();\n#endif\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))\n#endif\n\n\n#if !defined(Py_LIMITED_API) && defined(Py_GIL_DISABLED)\n// Implements Py_DECREF on objects not owned by the current thread.\nPyAPI_FUNC(void) _Py_DecRefShared(PyObject *);\nPyAPI_FUNC(void) _Py_DecRefSharedDebug(PyObject *, const char *, int);\n\n// Called from Py_DECREF by the owning thread when the local refcount reaches\n// zero. The call will deallocate the object if the shared refcount is also\n// zero. Otherwise, the thread gives up ownership and merges the reference\n// count fields.\nPyAPI_FUNC(void) _Py_MergeZeroLocalRefcount(PyObject *);\n#endif\n\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n// Stable ABI implements Py_DECREF() as a function call on limited C API\n// version 3.12 and newer, and on Python built in debug mode. _Py_DecRef() was\n// added to Python 3.10.0a7, use Py_DecRef() on older Python versions.\n// Py_DecRef() accepts NULL whereas _Py_IncRef() doesn't.\nstatic inline void Py_DECREF(PyObject *op) {\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_DecRef(op);\n#  else\n    Py_DecRef(op);\n#  endif\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED) && defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        if (local == 0) {\n            _Py_NegativeRefcount(filename, lineno, op);\n        }\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefSharedDebug(op, filename, lineno);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED)\nstatic inline void Py_DECREF(PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefShared(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    if (op->ob_refcnt <= 0) {\n        _Py_NegativeRefcount(filename, lineno, op);\n    }\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#else\nstatic inline Py_ALWAYS_INLINE void Py_DECREF(PyObject *op)\n{\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n#endif\n\n\n/* Safely decref `op` and set `op` to NULL, especially useful in tp_clear\n * and tp_dealloc implementations.\n *\n * Note that \"the obvious\" code can be deadly:\n *\n *     Py_XDECREF(op);\n *     op = NULL;\n *\n * Typically, `op` is something like self->containee, and `self` is done\n * using its `containee` member.  In the code sequence above, suppose\n * `containee` is non-NULL with a refcount of 1.  Its refcount falls to\n * 0 on the first line, which can trigger an arbitrary amount of code,\n * possibly including finalizers (like __del__ methods or weakref callbacks)\n * coded in Python, which in turn can release the GIL and allow other threads\n * to run, etc.  Such code may even invoke methods of `self` again, or cause\n * cyclic gc to trigger, but-- oops! --self->containee still points to the\n * object being torn down, and it may be in an insane state while being torn\n * down.  This has in fact been a rich historic source of miserable (rare &\n * hard-to-diagnose) segfaulting (and other) bugs.\n *\n * The safe way is:\n *\n *      Py_CLEAR(op);\n *\n * That arranges to set `op` to NULL _before_ decref'ing, so that any code\n * triggered as a side-effect of `op` getting torn down no longer believes\n * `op` points to a valid object.\n *\n * There are cases where it's safe to use the naive code, but they're brittle.\n * For example, if `op` points to a Python integer, you know that destroying\n * one of those can't cause problems -- but in part that relies on that\n * Python integers aren't currently weakly referencable.  Best practice is\n * to use Py_CLEAR() even if you can't think of a reason for why you need to.\n *\n * gh-98724: Use a temporary variable to only evaluate the macro argument once,\n * to avoid the duplication of side effects if the argument has side effects.\n *\n * gh-99701: If the PyObject* type is used with casting arguments to PyObject*,\n * the code can be miscompiled with strict aliasing because of type punning.\n * With strict aliasing, a compiler considers that two pointers of different\n * types cannot read or write the same memory which enables optimization\n * opportunities.\n *\n * If available, use _Py_TYPEOF() to use the 'op' type for temporary variables,\n * and so avoid type punning. Otherwise, use memcpy() which causes type erasure\n * and so prevents the compiler to reuse an old cached 'op' value after\n * Py_CLEAR().\n */\n#ifdef _Py_TYPEOF\n#define Py_CLEAR(op) \\\n    do { \\\n        _Py_TYPEOF(op)* _tmp_op_ptr = &(op); \\\n        _Py_TYPEOF(op) _tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            *_tmp_op_ptr = _Py_NULL; \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#else\n#define Py_CLEAR(op) \\\n    do { \\\n        PyObject **_tmp_op_ptr = _Py_CAST(PyObject**, &(op)); \\\n        PyObject *_tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            PyObject *_null_ptr = _Py_NULL; \\\n            memcpy(_tmp_op_ptr, &_null_ptr, sizeof(PyObject*)); \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#endif\n\n\n/* Function to use in case the object pointer can be NULL: */\nstatic inline void Py_XINCREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_INCREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))\n#endif\n\nstatic inline void Py_XDECREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_DECREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XDECREF(op) Py_XDECREF(_PyObject_CAST(op))\n#endif\n\n// Create a new strong reference to an object:\n// increment the reference count of the object and return the object.\nPyAPI_FUNC(PyObject*) Py_NewRef(PyObject *obj);\n\n// Similar to Py_NewRef(), but the object can be NULL.\nPyAPI_FUNC(PyObject*) Py_XNewRef(PyObject *obj);\n\nstatic inline PyObject* _Py_NewRef(PyObject *obj)\n{\n    Py_INCREF(obj);\n    return obj;\n}\n\nstatic inline PyObject* _Py_XNewRef(PyObject *obj)\n{\n    Py_XINCREF(obj);\n    return obj;\n}\n\n// Py_NewRef() and Py_XNewRef() are exported as functions for the stable ABI.\n// Names overridden with macros by static inline functions for best\n// performances.\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_NewRef(obj) _Py_NewRef(_PyObject_CAST(obj))\n#  define Py_XNewRef(obj) _Py_XNewRef(_PyObject_CAST(obj))\n#else\n#  define Py_NewRef(obj) _Py_NewRef(obj)\n#  define Py_XNewRef(obj) _Py_XNewRef(obj)\n#endif\n\n\n#define Py_CONSTANT_NONE 0\n#define Py_CONSTANT_FALSE 1\n#define Py_CONSTANT_TRUE 2\n#define Py_CONSTANT_ELLIPSIS 3\n#define Py_CONSTANT_NOT_IMPLEMENTED 4\n#define Py_CONSTANT_ZERO 5\n#define Py_CONSTANT_ONE 6\n#define Py_CONSTANT_EMPTY_STR 7\n#define Py_CONSTANT_EMPTY_BYTES 8\n#define Py_CONSTANT_EMPTY_TUPLE 9\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject*) Py_GetConstant(unsigned int constant_id);\nPyAPI_FUNC(PyObject*) Py_GetConstantBorrowed(unsigned int constant_id);\n#endif\n\n\n/*\n_Py_NoneStruct is an object of undefined type which can be used in contexts\nwhere NULL (nil) is not suitable (since NULL often means 'error').\n*/\nPyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_None Py_GetConstantBorrowed(Py_CONSTANT_NONE)\n#else\n#  define Py_None (&_Py_NoneStruct)\n#endif\n\n// Test if an object is the None singleton, the same as \"x is None\" in Python.\nPyAPI_FUNC(int) Py_IsNone(PyObject *x);\n#define Py_IsNone(x) Py_Is((x), Py_None)\n\n/* Macro for returning Py_None from a function */\n#define Py_RETURN_NONE return Py_None\n\n/*\nPy_NotImplemented is a singleton used to signal that an operation is\nnot implemented for a given type combination.\n*/\nPyAPI_DATA(PyObject) _Py_NotImplementedStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_NotImplemented Py_GetConstantBorrowed(Py_CONSTANT_NOT_IMPLEMENTED)\n#else\n#  define Py_NotImplemented (&_Py_NotImplementedStruct)\n#endif\n\n/* Macro for returning Py_NotImplemented from a function */\n#define Py_RETURN_NOTIMPLEMENTED return Py_NotImplemented\n\n/* Rich comparison opcodes */\n#define Py_LT 0\n#define Py_LE 1\n#define Py_EQ 2\n#define Py_NE 3\n#define Py_GT 4\n#define Py_GE 5\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000\n/* Result of calling PyIter_Send */\ntypedef enum {\n    PYGEN_RETURN = 0,\n    PYGEN_ERROR = -1,\n    PYGEN_NEXT = 1,\n} PySendResult;\n#endif\n\n/*\n * Macro for implementing rich comparisons\n *\n * Needs to be a macro because any C-comparable type can be used.\n */\n#define Py_RETURN_RICHCOMPARE(val1, val2, op)                               \\\n    do {                                                                    \\\n        switch (op) {                                                       \\\n        case Py_EQ: if ((val1) == (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_NE: if ((val1) != (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_LT: if ((val1) < (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_GT: if ((val1) > (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_LE: if ((val1) <= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_GE: if ((val1) >= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        default:                                                            \\\n            Py_UNREACHABLE();                                               \\\n        }                                                                   \\\n    } while (0)\n\n\n/*\nMore conventions\n================\n\nArgument Checking\n-----------------\n\nFunctions that take objects as arguments normally don't check for nil\narguments, but they do check the type of the argument, and return an\nerror if the function doesn't apply to the type.\n\nFailure Modes\n-------------\n\nFunctions may fail for a variety of reasons, including running out of\nmemory.  This is communicated to the caller in two ways: an error string\nis set (see errors.h), and the function result differs: functions that\nnormally return a pointer return NULL for failure, functions returning\nan integer return -1 (which could be a legal return value too!), and\nother functions return 0 for success and -1 for failure.\nCallers should always check for errors before using the result.  If\nan error was set, the caller must either explicitly clear it, or pass\nthe error on to its caller.\n\nReference Counts\n----------------\n\nIt takes a while to get used to the proper usage of reference counts.\n\nFunctions that create an object set the reference count to 1; such new\nobjects must be stored somewhere or destroyed again with Py_DECREF().\nSome functions that 'store' objects, such as PyTuple_SetItem() and\nPyList_SetItem(),\ndon't increment the reference count of the object, since the most\nfrequent use is to store a fresh object.  Functions that 'retrieve'\nobjects, such as PyTuple_GetItem() and PyDict_GetItemString(), also\ndon't increment\nthe reference count, since most frequently the object is only looked at\nquickly.  Thus, to retrieve an object and store it again, the caller\nmust call Py_INCREF() explicitly.\n\nNOTE: functions that 'consume' a reference count, like\nPyList_SetItem(), consume the reference even if the object wasn't\nsuccessfully stored, to simplify error handling.\n\nIt seems attractive to make other functions that take an object as\nargument consume a reference count; however, this may quickly get\nconfusing (even the current practice is already confusing).  Consider\nit carefully, it may save lots of calls to Py_INCREF() and Py_DECREF() at\ntimes.\n*/\n\n#ifndef Py_LIMITED_API\n#  define Py_CPYTHON_OBJECT_H\n#  include \"cpython/object.h\"\n#  undef Py_CPYTHON_OBJECT_H\n#endif\n\n\nstatic inline int\nPyType_HasFeature(PyTypeObject *type, unsigned long feature)\n{\n    unsigned long flags;\n#ifdef Py_LIMITED_API\n    // PyTypeObject is opaque in the limited C API\n    flags = PyType_GetFlags(type);\n#else\n#   ifdef Py_GIL_DISABLED\n        flags = _Py_atomic_load_ulong_relaxed(&type->tp_flags);\n#   else\n        flags = type->tp_flags;\n#   endif\n#endif\n    return ((flags & feature) != 0);\n}\n\n#define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))\n\nstatic inline int PyType_Check(PyObject *op) {\n    return PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))\n#endif\n\n#define _PyType_CAST(op) \\\n    (assert(PyType_Check(op)), _Py_CAST(PyTypeObject*, (op)))\n\nstatic inline int PyType_CheckExact(PyObject *op) {\n    return Py_IS_TYPE(op, &PyType_Type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_CheckExact(op) PyType_CheckExact(_PyObject_CAST(op))\n#endif\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject *) PyType_GetModuleByDef(PyTypeObject *, PyModuleDef *);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n#endif   // !Py_OBJECT_H\n"}, "sourceLanguage": "c"}, {"location": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "contents": {"text": "\n/* API for managing interactions between isolated interpreters */\n\n#include \"Python.h\"\n#include \"pycore_ceval.h\"         // _Py_simple_func\n#include \"pycore_crossinterp.h\"   // struct _xid\n#include \"pycore_initconfig.h\"    // _PyStatus_OK()\n#include \"pycore_namespace.h\"     //_PyNamespace_New()\n#include \"pycore_pyerrors.h\"      // _PyErr_Clear()\n#include \"pycore_weakref.h\"       // _PyWeakref_GET_REF()\n\n\n/**************/\n/* exceptions */\n/**************/\n\nstatic int init_exceptions(PyInterpreterState *);\nstatic void fini_exceptions(PyInterpreterState *);\nstatic int _init_not_shareable_error_type(PyInterpreterState *);\nstatic void _fini_not_shareable_error_type(PyInterpreterState *);\nstatic PyObject * _get_not_shareable_error_type(PyInterpreterState *);\n#include \"crossinterp_exceptions.h\"\n\n\n/***************************/\n/* cross-interpreter calls */\n/***************************/\n\nint\n_Py_CallInInterpreter(PyInterpreterState *interp,\n                      _Py_simple_func func, void *arg)\n{\n    if (interp == PyInterpreterState_Get()) {\n        return func(arg);\n    }\n    // XXX Emit a warning if this fails?\n    _PyEval_AddPendingCall(interp, (_Py_pending_call_func)func, arg, 0);\n    return 0;\n}\n\nint\n_Py_CallInInterpreterAndRawFree(PyInterpreterState *interp,\n                                _Py_simple_func func, void *arg)\n{\n    if (interp == PyInterpreterState_Get()) {\n        int res = func(arg);\n        PyMem_RawFree(arg);\n        return res;\n    }\n    // XXX Emit a warning if this fails?\n    _PyEval_AddPendingCall(interp, func, arg, _Py_PENDING_RAWFREE);\n    return 0;\n}\n\n\n/**************************/\n/* cross-interpreter data */\n/**************************/\n\n/* registry of {type -> crossinterpdatafunc} */\n\n/* For now we use a global registry of shareable classes.  An\n   alternative would be to add a tp_* slot for a class's\n   crossinterpdatafunc. It would be simpler and more efficient. */\n\nstatic void xid_lookup_init(PyInterpreterState *);\nstatic void xid_lookup_fini(PyInterpreterState *);\nstatic crossinterpdatafunc lookup_getdata(PyInterpreterState *, PyObject *);\n#include \"crossinterp_data_lookup.h\"\n\n\n/* lifecycle */\n\n_PyCrossInterpreterData *\n_PyCrossInterpreterData_New(void)\n{\n    _PyCrossInterpreterData *xid = PyMem_RawMalloc(\n                                            sizeof(_PyCrossInterpreterData));\n    if (xid == NULL) {\n        PyErr_NoMemory();\n    }\n    return xid;\n}\n\nvoid\n_PyCrossInterpreterData_Free(_PyCrossInterpreterData *xid)\n{\n    PyInterpreterState *interp = PyInterpreterState_Get();\n    _PyCrossInterpreterData_Clear(interp, xid);\n    PyMem_RawFree(xid);\n}\n\n\n/* defining cross-interpreter data */\n\nstatic inline void\n_xidata_init(_PyCrossInterpreterData *data)\n{\n    // If the value is being reused\n    // then _xidata_clear() should have been called already.\n    assert(data->data == NULL);\n    assert(data->obj == NULL);\n    *data = (_PyCrossInterpreterData){0};\n    _PyCrossInterpreterData_INTERPID(data) = -1;\n}\n\nstatic inline void\n_xidata_clear(_PyCrossInterpreterData *data)\n{\n    // _PyCrossInterpreterData only has two members that need to be\n    // cleaned up, if set: \"data\" must be freed and \"obj\" must be decref'ed.\n    // In both cases the original (owning) interpreter must be used,\n    // which is the caller's responsibility to ensure.\n    if (data->data != NULL) {\n        if (data->free != NULL) {\n            data->free(data->data);\n        }\n        data->data = NULL;\n    }\n    Py_CLEAR(data->obj);\n}\n\nvoid\n_PyCrossInterpreterData_Init(_PyCrossInterpreterData *data,\n                             PyInterpreterState *interp,\n                             void *shared, PyObject *obj,\n                             xid_newobjectfunc new_object)\n{\n    assert(data != NULL);\n    assert(new_object != NULL);\n    _xidata_init(data);\n    data->data = shared;\n    if (obj != NULL) {\n        assert(interp != NULL);\n        // released in _PyCrossInterpreterData_Clear()\n        data->obj = Py_NewRef(obj);\n    }\n    // Ideally every object would know its owning interpreter.\n    // Until then, we have to rely on the caller to identify it\n    // (but we don't need it in all cases).\n    _PyCrossInterpreterData_INTERPID(data) = (interp != NULL)\n        ? PyInterpreterState_GetID(interp)\n        : -1;\n    data->new_object = new_object;\n}\n\nint\n_PyCrossInterpreterData_InitWithSize(_PyCrossInterpreterData *data,\n                                     PyInterpreterState *interp,\n                                     const size_t size, PyObject *obj,\n                                     xid_newobjectfunc new_object)\n{\n    assert(size > 0);\n    // For now we always free the shared data in the same interpreter\n    // where it was allocated, so the interpreter is required.\n    assert(interp != NULL);\n    _PyCrossInterpreterData_Init(data, interp, NULL, obj, new_object);\n    data->data = PyMem_RawMalloc(size);\n    if (data->data == NULL) {\n        return -1;\n    }\n    data->free = PyMem_RawFree;\n    return 0;\n}\n\nvoid\n_PyCrossInterpreterData_Clear(PyInterpreterState *interp,\n                              _PyCrossInterpreterData *data)\n{\n    assert(data != NULL);\n    // This must be called in the owning interpreter.\n    assert(interp == NULL\n           || _PyCrossInterpreterData_INTERPID(data) == -1\n           || _PyCrossInterpreterData_INTERPID(data) == PyInterpreterState_GetID(interp));\n    _xidata_clear(data);\n}\n\n\n/* using cross-interpreter data */\n\nstatic int\n_check_xidata(PyThreadState *tstate, _PyCrossInterpreterData *data)\n{\n    // data->data can be anything, including NULL, so we don't check it.\n\n    // data->obj may be NULL, so we don't check it.\n\n    if (_PyCrossInterpreterData_INTERPID(data) < 0) {\n        PyErr_SetString(PyExc_SystemError, \"missing interp\");\n        return -1;\n    }\n\n    if (data->new_object == NULL) {\n        PyErr_SetString(PyExc_SystemError, \"missing new_object func\");\n        return -1;\n    }\n\n    // data->free may be NULL, so we don't check it.\n\n    return 0;\n}\n\nstatic inline void\n_set_xid_lookup_failure(PyInterpreterState *interp,\n                        PyObject *obj, const char *msg)\n{\n    PyObject *exctype = _get_not_shareable_error_type(interp);\n    assert(exctype != NULL);\n    if (msg != NULL) {\n        assert(obj == NULL);\n        PyErr_SetString(exctype, msg);\n    }\n    else if (obj == NULL) {\n        PyErr_SetString(exctype,\n                        \"object does not support cross-interpreter data\");\n    }\n    else {\n        PyErr_Format(exctype,\n                     \"%S does not support cross-interpreter data\", obj);\n    }\n}\n\nint\n_PyObject_CheckCrossInterpreterData(PyObject *obj)\n{\n    PyInterpreterState *interp = PyInterpreterState_Get();\n    crossinterpdatafunc getdata = lookup_getdata(interp, obj);\n    if (getdata == NULL) {\n        if (!PyErr_Occurred()) {\n            _set_xid_lookup_failure(interp, obj, NULL);\n        }\n        return -1;\n    }\n    return 0;\n}\n\nint\n_PyObject_GetCrossInterpreterData(PyObject *obj, _PyCrossInterpreterData *data)\n{\n    PyThreadState *tstate = PyThreadState_Get();\n    PyInterpreterState *interp = tstate->interp;\n\n    // Reset data before re-populating.\n    *data = (_PyCrossInterpreterData){0};\n    _PyCrossInterpreterData_INTERPID(data) = -1;\n\n    // Call the \"getdata\" func for the object.\n    Py_INCREF(obj);\n    crossinterpdatafunc getdata = lookup_getdata(interp, obj);\n    if (getdata == NULL) {\n        Py_DECREF(obj);\n        if (!PyErr_Occurred()) {\n            _set_xid_lookup_failure(interp, obj, NULL);\n        }\n        return -1;\n    }\n    int res = getdata(tstate, obj, data);\n    Py_DECREF(obj);\n    if (res != 0) {\n        return -1;\n    }\n\n    // Fill in the blanks and validate the result.\n    _PyCrossInterpreterData_INTERPID(data) = PyInterpreterState_GetID(interp);\n    if (_check_xidata(tstate, data) != 0) {\n        (void)_PyCrossInterpreterData_Release(data);\n        return -1;\n    }\n\n    return 0;\n}\n\nPyObject *\n_PyCrossInterpreterData_NewObject(_PyCrossInterpreterData *data)\n{\n    return data->new_object(data);\n}\n\nstatic int\n_call_clear_xidata(void *data)\n{\n    _xidata_clear((_PyCrossInterpreterData *)data);\n    return 0;\n}\n\nstatic int\n_xidata_release(_PyCrossInterpreterData *data, int rawfree)\n{\n    if ((data->data == NULL || data->free == NULL) && data->obj == NULL) {\n        // Nothing to release!\n        if (rawfree) {\n            PyMem_RawFree(data);\n        }\n        else {\n            data->data = NULL;\n        }\n        return 0;\n    }\n\n    // Switch to the original interpreter.\n    PyInterpreterState *interp = _PyInterpreterState_LookUpID(\n                                    _PyCrossInterpreterData_INTERPID(data));\n    if (interp == NULL) {\n        // The interpreter was already destroyed.\n        // This function shouldn't have been called.\n        // XXX Someone leaked some memory...\n        assert(PyErr_Occurred());\n        if (rawfree) {\n            PyMem_RawFree(data);\n        }\n        return -1;\n    }\n\n    // \"Release\" the data and/or the object.\n    if (rawfree) {\n        return _Py_CallInInterpreterAndRawFree(interp, _call_clear_xidata, data);\n    }\n    else {\n        return _Py_CallInInterpreter(interp, _call_clear_xidata, data);\n    }\n}\n\nint\n_PyCrossInterpreterData_Release(_PyCrossInterpreterData *data)\n{\n    return _xidata_release(data, 0);\n}\n\nint\n_PyCrossInterpreterData_ReleaseAndRawFree(_PyCrossInterpreterData *data)\n{\n    return _xidata_release(data, 1);\n}\n\n\n/*************************/\n/* convenience utilities */\n/*************************/\n\nstatic const char *\n_copy_string_obj_raw(PyObject *strobj, Py_ssize_t *p_size)\n{\n    Py_ssize_t size = -1;\n    const char *str = PyUnicode_AsUTF8AndSize(strobj, &size);\n    if (str == NULL) {\n        return NULL;\n    }\n\n    char *copied = PyMem_RawMalloc(size+1);\n    if (copied == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    strcpy(copied, str);\n    if (p_size != NULL) {\n        *p_size = size;\n    }\n    return copied;\n}\n\n\nstatic int\n_convert_exc_to_TracebackException(PyObject *exc, PyObject **p_tbexc)\n{\n    PyObject *args = NULL;\n    PyObject *kwargs = NULL;\n    PyObject *create = NULL;\n\n    // This is inspired by _PyErr_Display().\n    PyObject *tbmod = PyImport_ImportModule(\"traceback\");\n    if (tbmod == NULL) {\n        return -1;\n    }\n    PyObject *tbexc_type = PyObject_GetAttrString(tbmod, \"TracebackException\");\n    Py_DECREF(tbmod);\n    if (tbexc_type == NULL) {\n        return -1;\n    }\n    create = PyObject_GetAttrString(tbexc_type, \"from_exception\");\n    Py_DECREF(tbexc_type);\n    if (create == NULL) {\n        return -1;\n    }\n\n    args = PyTuple_Pack(1, exc);\n    if (args == NULL) {\n        goto error;\n    }\n\n    kwargs = PyDict_New();\n    if (kwargs == NULL) {\n        goto error;\n    }\n    if (PyDict_SetItemString(kwargs, \"save_exc_type\", Py_False) < 0) {\n        goto error;\n    }\n    if (PyDict_SetItemString(kwargs, \"lookup_lines\", Py_False) < 0) {\n        goto error;\n    }\n\n    PyObject *tbexc = PyObject_Call(create, args, kwargs);\n    Py_DECREF(args);\n    Py_DECREF(kwargs);\n    Py_DECREF(create);\n    if (tbexc == NULL) {\n        goto error;\n    }\n\n    *p_tbexc = tbexc;\n    return 0;\n\nerror:\n    Py_XDECREF(args);\n    Py_XDECREF(kwargs);\n    Py_XDECREF(create);\n    return -1;\n}\n\n// We accommodate backports here.\n#ifndef _Py_EMPTY_STR\n# define _Py_EMPTY_STR &_Py_STR(empty)\n#endif\n\nstatic const char *\n_format_TracebackException(PyObject *tbexc)\n{\n    PyObject *lines = PyObject_CallMethod(tbexc, \"format\", NULL);\n    if (lines == NULL) {\n        return NULL;\n    }\n    assert(_Py_EMPTY_STR != NULL);\n    PyObject *formatted_obj = PyUnicode_Join(_Py_EMPTY_STR, lines);\n    Py_DECREF(lines);\n    if (formatted_obj == NULL) {\n        return NULL;\n    }\n\n    Py_ssize_t size = -1;\n    const char *formatted = _copy_string_obj_raw(formatted_obj, &size);\n    Py_DECREF(formatted_obj);\n    // We remove trailing the newline added by TracebackException.format().\n    assert(formatted[size-1] == '\\n');\n    ((char *)formatted)[size-1] = '\\0';\n    return formatted;\n}\n\n\nstatic int\n_release_xid_data(_PyCrossInterpreterData *data, int rawfree)\n{\n    PyObject *exc = PyErr_GetRaisedException();\n    int res = rawfree\n        ? _PyCrossInterpreterData_Release(data)\n        : _PyCrossInterpreterData_ReleaseAndRawFree(data);\n    if (res < 0) {\n        /* The owning interpreter is already destroyed. */\n        _PyCrossInterpreterData_Clear(NULL, data);\n        // XXX Emit a warning?\n        PyErr_Clear();\n    }\n    PyErr_SetRaisedException(exc);\n    return res;\n}\n\n\n/***********************/\n/* exception snapshots */\n/***********************/\n\nstatic int\n_excinfo_init_type_from_exception(struct _excinfo_type *info, PyObject *exc)\n{\n    /* Note that this copies directly rather than into an intermediate\n       struct and does not clear on error.  If we need that then we\n       should have a separate function to wrap this one\n       and do all that there. */\n    PyObject *strobj = NULL;\n\n    PyTypeObject *type = Py_TYPE(exc);\n    if (type->tp_flags & _Py_TPFLAGS_STATIC_BUILTIN) {\n        assert(_Py_IsImmortal((PyObject *)type));\n        info->builtin = type;\n    }\n    else {\n        // Only builtin types are preserved.\n        info->builtin = NULL;\n    }\n\n    // __name__\n    strobj = PyType_GetName(type);\n    if (strobj == NULL) {\n        return -1;\n    }\n    info->name = _copy_string_obj_raw(strobj, NULL);\n    Py_DECREF(strobj);\n    if (info->name == NULL) {\n        return -1;\n    }\n\n    // __qualname__\n    strobj = PyType_GetQualName(type);\n    if (strobj == NULL) {\n        return -1;\n    }\n    info->qualname = _copy_string_obj_raw(strobj, NULL);\n    Py_DECREF(strobj);\n    if (info->qualname == NULL) {\n        return -1;\n    }\n\n    // __module__\n    strobj = PyType_GetModuleName(type);\n    if (strobj == NULL) {\n        return -1;\n    }\n    info->module = _copy_string_obj_raw(strobj, NULL);\n    Py_DECREF(strobj);\n    if (info->module == NULL) {\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic int\n_excinfo_init_type_from_object(struct _excinfo_type *info, PyObject *exctype)\n{\n    PyObject *strobj = NULL;\n\n    // __name__\n    strobj = PyObject_GetAttrString(exctype, \"__name__\");\n    if (strobj == NULL) {\n        return -1;\n    }\n    info->name = _copy_string_obj_raw(strobj, NULL);\n    Py_DECREF(strobj);\n    if (info->name == NULL) {\n        return -1;\n    }\n\n    // __qualname__\n    strobj = PyObject_GetAttrString(exctype, \"__qualname__\");\n    if (strobj == NULL) {\n        return -1;\n    }\n    info->qualname = _copy_string_obj_raw(strobj, NULL);\n    Py_DECREF(strobj);\n    if (info->qualname == NULL) {\n        return -1;\n    }\n\n    // __module__\n    strobj = PyObject_GetAttrString(exctype, \"__module__\");\n    if (strobj == NULL) {\n        return -1;\n    }\n    info->module = _copy_string_obj_raw(strobj, NULL);\n    Py_DECREF(strobj);\n    if (info->module == NULL) {\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic void\n_excinfo_clear_type(struct _excinfo_type *info)\n{\n    if (info->builtin != NULL) {\n        assert(info->builtin->tp_flags & _Py_TPFLAGS_STATIC_BUILTIN);\n        assert(_Py_IsImmortal((PyObject *)info->builtin));\n    }\n    if (info->name != NULL) {\n        PyMem_RawFree((void *)info->name);\n    }\n    if (info->qualname != NULL) {\n        PyMem_RawFree((void *)info->qualname);\n    }\n    if (info->module != NULL) {\n        PyMem_RawFree((void *)info->module);\n    }\n    *info = (struct _excinfo_type){NULL};\n}\n\nstatic void\n_excinfo_normalize_type(struct _excinfo_type *info,\n                        const char **p_module, const char **p_qualname)\n{\n    if (info->name == NULL) {\n        assert(info->builtin == NULL);\n        assert(info->qualname == NULL);\n        assert(info->module == NULL);\n        // This is inspired by TracebackException.format_exception_only().\n        *p_module = NULL;\n        *p_qualname = NULL;\n        return;\n    }\n\n    const char *module = info->module;\n    const char *qualname = info->qualname;\n    if (qualname == NULL) {\n        qualname = info->name;\n    }\n    assert(module != NULL);\n    if (strcmp(module, \"builtins\") == 0) {\n        module = NULL;\n    }\n    else if (strcmp(module, \"__main__\") == 0) {\n        module = NULL;\n    }\n    *p_qualname = qualname;\n    *p_module = module;\n}\n\nstatic void\n_PyXI_excinfo_Clear(_PyXI_excinfo *info)\n{\n    _excinfo_clear_type(&info->type);\n    if (info->msg != NULL) {\n        PyMem_RawFree((void *)info->msg);\n    }\n    if (info->errdisplay != NULL) {\n        PyMem_RawFree((void *)info->errdisplay);\n    }\n    *info = (_PyXI_excinfo){{NULL}};\n}\n\nPyObject *\n_PyXI_excinfo_format(_PyXI_excinfo *info)\n{\n    const char *module, *qualname;\n    _excinfo_normalize_type(&info->type, &module, &qualname);\n    if (qualname != NULL) {\n        if (module != NULL) {\n            if (info->msg != NULL) {\n                return PyUnicode_FromFormat(\"%s.%s: %s\",\n                                            module, qualname, info->msg);\n            }\n            else {\n                return PyUnicode_FromFormat(\"%s.%s\", module, qualname);\n            }\n        }\n        else {\n            if (info->msg != NULL) {\n                return PyUnicode_FromFormat(\"%s: %s\", qualname, info->msg);\n            }\n            else {\n                return PyUnicode_FromString(qualname);\n            }\n        }\n    }\n    else if (info->msg != NULL) {\n        return PyUnicode_FromString(info->msg);\n    }\n    else {\n        Py_RETURN_NONE;\n    }\n}\n\nstatic const char *\n_PyXI_excinfo_InitFromException(_PyXI_excinfo *info, PyObject *exc)\n{\n    assert(exc != NULL);\n\n    if (PyErr_GivenExceptionMatches(exc, PyExc_MemoryError)) {\n        _PyXI_excinfo_Clear(info);\n        return NULL;\n    }\n    const char *failure = NULL;\n\n    if (_excinfo_init_type_from_exception(&info->type, exc) < 0) {\n        failure = \"error while initializing exception type snapshot\";\n        goto error;\n    }\n\n    // Extract the exception message.\n    PyObject *msgobj = PyObject_Str(exc);\n    if (msgobj == NULL) {\n        failure = \"error while formatting exception\";\n        goto error;\n    }\n    info->msg = _copy_string_obj_raw(msgobj, NULL);\n    Py_DECREF(msgobj);\n    if (info->msg == NULL) {\n        failure = \"error while copying exception message\";\n        goto error;\n    }\n\n    // Pickle a traceback.TracebackException.\n    PyObject *tbexc = NULL;\n    if (_convert_exc_to_TracebackException(exc, &tbexc) < 0) {\n#ifdef Py_DEBUG\n        PyErr_FormatUnraisable(\"Exception ignored while creating TracebackException\");\n#endif\n        PyErr_Clear();\n    }\n    else {\n        info->errdisplay = _format_TracebackException(tbexc);\n        Py_DECREF(tbexc);\n        if (info->errdisplay == NULL) {\n#ifdef Py_DEBUG\n            PyErr_FormatUnraisable(\"Exception ignored while formating TracebackException\");\n#endif\n            PyErr_Clear();\n        }\n    }\n\n    return NULL;\n\nerror:\n    assert(failure != NULL);\n    _PyXI_excinfo_Clear(info);\n    return failure;\n}\n\nstatic const char *\n_PyXI_excinfo_InitFromObject(_PyXI_excinfo *info, PyObject *obj)\n{\n    const char *failure = NULL;\n\n    PyObject *exctype = PyObject_GetAttrString(obj, \"type\");\n    if (exctype == NULL) {\n        failure = \"exception snapshot missing 'type' attribute\";\n        goto error;\n    }\n    int res = _excinfo_init_type_from_object(&info->type, exctype);\n    Py_DECREF(exctype);\n    if (res < 0) {\n        failure = \"error while initializing exception type snapshot\";\n        goto error;\n    }\n\n    // Extract the exception message.\n    PyObject *msgobj = PyObject_GetAttrString(obj, \"msg\");\n    if (msgobj == NULL) {\n        failure = \"exception snapshot missing 'msg' attribute\";\n        goto error;\n    }\n    info->msg = _copy_string_obj_raw(msgobj, NULL);\n    Py_DECREF(msgobj);\n    if (info->msg == NULL) {\n        failure = \"error while copying exception message\";\n        goto error;\n    }\n\n    // Pickle a traceback.TracebackException.\n    PyObject *errdisplay = PyObject_GetAttrString(obj, \"errdisplay\");\n    if (errdisplay == NULL) {\n        failure = \"exception snapshot missing 'errdisplay' attribute\";\n        goto error;\n    }\n    info->errdisplay = _copy_string_obj_raw(errdisplay, NULL);\n    Py_DECREF(errdisplay);\n    if (info->errdisplay == NULL) {\n        failure = \"error while copying exception error display\";\n        goto error;\n    }\n\n    return NULL;\n\nerror:\n    assert(failure != NULL);\n    _PyXI_excinfo_Clear(info);\n    return failure;\n}\n\nstatic void\n_PyXI_excinfo_Apply(_PyXI_excinfo *info, PyObject *exctype)\n{\n    PyObject *tbexc = NULL;\n    if (info->errdisplay != NULL) {\n        tbexc = PyUnicode_FromString(info->errdisplay);\n        if (tbexc == NULL) {\n            PyErr_Clear();\n        }\n    }\n\n    PyObject *formatted = _PyXI_excinfo_format(info);\n    PyErr_SetObject(exctype, formatted);\n    Py_DECREF(formatted);\n\n    if (tbexc != NULL) {\n        PyObject *exc = PyErr_GetRaisedException();\n        if (PyObject_SetAttrString(exc, \"_errdisplay\", tbexc) < 0) {\n#ifdef Py_DEBUG\n            PyErr_FormatUnraisable(\"Exception ignored when setting _errdisplay\");\n#endif\n            PyErr_Clear();\n        }\n        Py_DECREF(tbexc);\n        PyErr_SetRaisedException(exc);\n    }\n}\n\nstatic PyObject *\n_PyXI_excinfo_TypeAsObject(_PyXI_excinfo *info)\n{\n    PyObject *ns = _PyNamespace_New(NULL);\n    if (ns == NULL) {\n        return NULL;\n    }\n    int empty = 1;\n\n    if (info->type.name != NULL) {\n        PyObject *name = PyUnicode_FromString(info->type.name);\n        if (name == NULL) {\n            goto error;\n        }\n        int res = PyObject_SetAttrString(ns, \"__name__\", name);\n        Py_DECREF(name);\n        if (res < 0) {\n            goto error;\n        }\n        empty = 0;\n    }\n\n    if (info->type.qualname != NULL) {\n        PyObject *qualname = PyUnicode_FromString(info->type.qualname);\n        if (qualname == NULL) {\n            goto error;\n        }\n        int res = PyObject_SetAttrString(ns, \"__qualname__\", qualname);\n        Py_DECREF(qualname);\n        if (res < 0) {\n            goto error;\n        }\n        empty = 0;\n    }\n\n    if (info->type.module != NULL) {\n        PyObject *module = PyUnicode_FromString(info->type.module);\n        if (module == NULL) {\n            goto error;\n        }\n        int res = PyObject_SetAttrString(ns, \"__module__\", module);\n        Py_DECREF(module);\n        if (res < 0) {\n            goto error;\n        }\n        empty = 0;\n    }\n\n    if (empty) {\n        Py_CLEAR(ns);\n    }\n\n    return ns;\n\nerror:\n    Py_DECREF(ns);\n    return NULL;\n}\n\nstatic PyObject *\n_PyXI_excinfo_AsObject(_PyXI_excinfo *info)\n{\n    PyObject *ns = _PyNamespace_New(NULL);\n    if (ns == NULL) {\n        return NULL;\n    }\n    int res;\n\n    PyObject *type = _PyXI_excinfo_TypeAsObject(info);\n    if (type == NULL) {\n        if (PyErr_Occurred()) {\n            goto error;\n        }\n        type = Py_NewRef(Py_None);\n    }\n    res = PyObject_SetAttrString(ns, \"type\", type);\n    Py_DECREF(type);\n    if (res < 0) {\n        goto error;\n    }\n\n    PyObject *msg = info->msg != NULL\n        ? PyUnicode_FromString(info->msg)\n        : Py_NewRef(Py_None);\n    if (msg == NULL) {\n        goto error;\n    }\n    res = PyObject_SetAttrString(ns, \"msg\", msg);\n    Py_DECREF(msg);\n    if (res < 0) {\n        goto error;\n    }\n\n    PyObject *formatted = _PyXI_excinfo_format(info);\n    if (formatted == NULL) {\n        goto error;\n    }\n    res = PyObject_SetAttrString(ns, \"formatted\", formatted);\n    Py_DECREF(formatted);\n    if (res < 0) {\n        goto error;\n    }\n\n    if (info->errdisplay != NULL) {\n        PyObject *tbexc = PyUnicode_FromString(info->errdisplay);\n        if (tbexc == NULL) {\n            PyErr_Clear();\n        }\n        else {\n            res = PyObject_SetAttrString(ns, \"errdisplay\", tbexc);\n            Py_DECREF(tbexc);\n            if (res < 0) {\n                goto error;\n            }\n        }\n    }\n\n    return ns;\n\nerror:\n    Py_DECREF(ns);\n    return NULL;\n}\n\n\nint\n_PyXI_InitExcInfo(_PyXI_excinfo *info, PyObject *exc)\n{\n    assert(!PyErr_Occurred());\n    if (exc == NULL || exc == Py_None) {\n        PyErr_SetString(PyExc_ValueError, \"missing exc\");\n        return -1;\n    }\n    const char *failure;\n    if (PyExceptionInstance_Check(exc) || PyExceptionClass_Check(exc)) {\n        failure = _PyXI_excinfo_InitFromException(info, exc);\n    }\n    else {\n        failure = _PyXI_excinfo_InitFromObject(info, exc);\n    }\n    if (failure != NULL) {\n        PyErr_SetString(PyExc_Exception, failure);\n        return -1;\n    }\n    return 0;\n}\n\nPyObject *\n_PyXI_FormatExcInfo(_PyXI_excinfo *info)\n{\n    return _PyXI_excinfo_format(info);\n}\n\nPyObject *\n_PyXI_ExcInfoAsObject(_PyXI_excinfo *info)\n{\n    return _PyXI_excinfo_AsObject(info);\n}\n\nvoid\n_PyXI_ClearExcInfo(_PyXI_excinfo *info)\n{\n    _PyXI_excinfo_Clear(info);\n}\n\n\n/***************************/\n/* short-term data sharing */\n/***************************/\n\n/* error codes */\n\nstatic int\n_PyXI_ApplyErrorCode(_PyXI_errcode code, PyInterpreterState *interp)\n{\n    assert(!PyErr_Occurred());\n    switch (code) {\n    case _PyXI_ERR_NO_ERROR:  // fall through\n    case _PyXI_ERR_UNCAUGHT_EXCEPTION:\n        // There is nothing to apply.\n#ifdef Py_DEBUG\n        Py_UNREACHABLE();\n#endif\n        return 0;\n    case _PyXI_ERR_OTHER:\n        // XXX msg?\n        PyErr_SetNone(PyExc_InterpreterError);\n        break;\n    case _PyXI_ERR_NO_MEMORY:\n        PyErr_NoMemory();\n        break;\n    case _PyXI_ERR_ALREADY_RUNNING:\n        assert(interp != NULL);\n        assert(_PyInterpreterState_IsRunningMain(interp));\n        _PyInterpreterState_FailIfRunningMain(interp);\n        break;\n    case _PyXI_ERR_MAIN_NS_FAILURE:\n        PyErr_SetString(PyExc_InterpreterError,\n                        \"failed to get __main__ namespace\");\n        break;\n    case _PyXI_ERR_APPLY_NS_FAILURE:\n        PyErr_SetString(PyExc_InterpreterError,\n                        \"failed to apply namespace to __main__\");\n        break;\n    case _PyXI_ERR_NOT_SHAREABLE:\n        _set_xid_lookup_failure(interp, NULL, NULL);\n        break;\n    default:\n#ifdef Py_DEBUG\n        Py_UNREACHABLE();\n#else\n        PyErr_Format(PyExc_RuntimeError, \"unsupported error code %d\", code);\n#endif\n    }\n    assert(PyErr_Occurred());\n    return -1;\n}\n\n/* shared exceptions */\n\nstatic const char *\n_PyXI_InitError(_PyXI_error *error, PyObject *excobj, _PyXI_errcode code)\n{\n    if (error->interp == NULL) {\n        error->interp = PyInterpreterState_Get();\n    }\n\n    const char *failure = NULL;\n    if (code == _PyXI_ERR_UNCAUGHT_EXCEPTION) {\n        // There is an unhandled exception we need to propagate.\n        failure = _PyXI_excinfo_InitFromException(&error->uncaught, excobj);\n        if (failure != NULL) {\n            // We failed to initialize error->uncaught.\n            // XXX Print the excobj/traceback?  Emit a warning?\n            // XXX Print the current exception/traceback?\n            if (PyErr_ExceptionMatches(PyExc_MemoryError)) {\n                error->code = _PyXI_ERR_NO_MEMORY;\n            }\n            else {\n                error->code = _PyXI_ERR_OTHER;\n            }\n            PyErr_Clear();\n        }\n        else {\n            error->code = code;\n        }\n        assert(error->code != _PyXI_ERR_NO_ERROR);\n    }\n    else {\n        // There is an error code we need to propagate.\n        assert(excobj == NULL);\n        assert(code != _PyXI_ERR_NO_ERROR);\n        error->code = code;\n        _PyXI_excinfo_Clear(&error->uncaught);\n    }\n    return failure;\n}\n\nPyObject *\n_PyXI_ApplyError(_PyXI_error *error)\n{\n    if (error->code == _PyXI_ERR_UNCAUGHT_EXCEPTION) {\n        // Raise an exception that proxies the propagated exception.\n       return _PyXI_excinfo_AsObject(&error->uncaught);\n    }\n    else if (error->code == _PyXI_ERR_NOT_SHAREABLE) {\n        // Propagate the exception directly.\n        _set_xid_lookup_failure(error->interp, NULL, error->uncaught.msg);\n    }\n    else {\n        // Raise an exception corresponding to the code.\n        assert(error->code != _PyXI_ERR_NO_ERROR);\n        (void)_PyXI_ApplyErrorCode(error->code, error->interp);\n        if (error->uncaught.type.name != NULL || error->uncaught.msg != NULL) {\n            // __context__ will be set to a proxy of the propagated exception.\n            PyObject *exc = PyErr_GetRaisedException();\n            _PyXI_excinfo_Apply(&error->uncaught, PyExc_InterpreterError);\n            PyObject *exc2 = PyErr_GetRaisedException();\n            PyException_SetContext(exc, exc2);\n            PyErr_SetRaisedException(exc);\n        }\n    }\n    assert(PyErr_Occurred());\n    return NULL;\n}\n\n/* shared namespaces */\n\n/* Shared namespaces are expected to have relatively short lifetimes.\n   This means dealloc of a shared namespace will normally happen \"soon\".\n   Namespace items hold cross-interpreter data, which must get released.\n   If the namespace/items are cleared in a different interpreter than\n   where the items' cross-interpreter data was set then that will cause\n   pending calls to be used to release the cross-interpreter data.\n   The tricky bit is that the pending calls can happen sufficiently\n   later that the namespace/items might already be deallocated.  This is\n   a problem if the cross-interpreter data is allocated as part of a\n   namespace item.  If that's the case then we must ensure the shared\n   namespace is only cleared/freed *after* that data has been released. */\n\ntypedef struct _sharednsitem {\n    const char *name;\n    _PyCrossInterpreterData *data;\n    // We could have a \"PyCrossInterpreterData _data\" field, so it would\n    // be allocated as part of the item and avoid an extra allocation.\n    // However, doing so adds a bunch of complexity because we must\n    // ensure the item isn't freed before a pending call might happen\n    // in a different interpreter to release the XI data.\n} _PyXI_namespace_item;\n\nstatic int\n_sharednsitem_is_initialized(_PyXI_namespace_item *item)\n{\n    if (item->name != NULL) {\n        return 1;\n    }\n    return 0;\n}\n\nstatic int\n_sharednsitem_init(_PyXI_namespace_item *item, PyObject *key)\n{\n    item->name = _copy_string_obj_raw(key, NULL);\n    if (item->name == NULL) {\n        assert(!_sharednsitem_is_initialized(item));\n        return -1;\n    }\n    item->data = NULL;\n    assert(_sharednsitem_is_initialized(item));\n    return 0;\n}\n\nstatic int\n_sharednsitem_has_value(_PyXI_namespace_item *item, int64_t *p_interpid)\n{\n    if (item->data == NULL) {\n        return 0;\n    }\n    if (p_interpid != NULL) {\n        *p_interpid = _PyCrossInterpreterData_INTERPID(item->data);\n    }\n    return 1;\n}\n\nstatic int\n_sharednsitem_set_value(_PyXI_namespace_item *item, PyObject *value)\n{\n    assert(_sharednsitem_is_initialized(item));\n    assert(item->data == NULL);\n    item->data = PyMem_RawMalloc(sizeof(_PyCrossInterpreterData));\n    if (item->data == NULL) {\n        PyErr_NoMemory();\n        return -1;\n    }\n    if (_PyObject_GetCrossInterpreterData(value, item->data) != 0) {\n        PyMem_RawFree(item->data);\n        item->data = NULL;\n        // The caller may want to propagate PyExc_NotShareableError\n        // if currently switched between interpreters.\n        return -1;\n    }\n    return 0;\n}\n\nstatic void\n_sharednsitem_clear_value(_PyXI_namespace_item *item)\n{\n    _PyCrossInterpreterData *data = item->data;\n    if (data != NULL) {\n        item->data = NULL;\n        int rawfree = 1;\n        (void)_release_xid_data(data, rawfree);\n    }\n}\n\nstatic void\n_sharednsitem_clear(_PyXI_namespace_item *item)\n{\n    if (item->name != NULL) {\n        PyMem_RawFree((void *)item->name);\n        item->name = NULL;\n    }\n    _sharednsitem_clear_value(item);\n}\n\nstatic int\n_sharednsitem_copy_from_ns(struct _sharednsitem *item, PyObject *ns)\n{\n    assert(item->name != NULL);\n    assert(item->data == NULL);\n    PyObject *value = PyDict_GetItemString(ns, item->name);  // borrowed\n    if (value == NULL) {\n        if (PyErr_Occurred()) {\n            return -1;\n        }\n        // When applied, this item will be set to the default (or fail).\n        return 0;\n    }\n    if (_sharednsitem_set_value(item, value) < 0) {\n        return -1;\n    }\n    return 0;\n}\n\nstatic int\n_sharednsitem_apply(_PyXI_namespace_item *item, PyObject *ns, PyObject *dflt)\n{\n    PyObject *name = PyUnicode_FromString(item->name);\n    if (name == NULL) {\n        return -1;\n    }\n    PyObject *value;\n    if (item->data != NULL) {\n        value = _PyCrossInterpreterData_NewObject(item->data);\n        if (value == NULL) {\n            Py_DECREF(name);\n            return -1;\n        }\n    }\n    else {\n        value = Py_NewRef(dflt);\n    }\n    int res = PyDict_SetItem(ns, name, value);\n    Py_DECREF(name);\n    Py_DECREF(value);\n    return res;\n}\n\nstruct _sharedns {\n    Py_ssize_t len;\n    _PyXI_namespace_item *items;\n};\n\nstatic _PyXI_namespace *\n_sharedns_new(void)\n{\n    _PyXI_namespace *ns = PyMem_RawCalloc(sizeof(_PyXI_namespace), 1);\n    if (ns == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    *ns = (_PyXI_namespace){ 0 };\n    return ns;\n}\n\nstatic int\n_sharedns_is_initialized(_PyXI_namespace *ns)\n{\n    if (ns->len == 0) {\n        assert(ns->items == NULL);\n        return 0;\n    }\n\n    assert(ns->len > 0);\n    assert(ns->items != NULL);\n    assert(_sharednsitem_is_initialized(&ns->items[0]));\n    assert(ns->len == 1\n           || _sharednsitem_is_initialized(&ns->items[ns->len - 1]));\n    return 1;\n}\n\n#define HAS_COMPLETE_DATA 1\n#define HAS_PARTIAL_DATA 2\n\nstatic int\n_sharedns_has_xidata(_PyXI_namespace *ns, int64_t *p_interpid)\n{\n    // We expect _PyXI_namespace to always be initialized.\n    assert(_sharedns_is_initialized(ns));\n    int res = 0;\n    _PyXI_namespace_item *item0 = &ns->items[0];\n    if (!_sharednsitem_is_initialized(item0)) {\n        return 0;\n    }\n    int64_t interpid0 = -1;\n    if (!_sharednsitem_has_value(item0, &interpid0)) {\n        return 0;\n    }\n    if (ns->len > 1) {\n        // At this point we know it is has at least partial data.\n        _PyXI_namespace_item *itemN = &ns->items[ns->len-1];\n        if (!_sharednsitem_is_initialized(itemN)) {\n            res = HAS_PARTIAL_DATA;\n            goto finally;\n        }\n        int64_t interpidN = -1;\n        if (!_sharednsitem_has_value(itemN, &interpidN)) {\n            res = HAS_PARTIAL_DATA;\n            goto finally;\n        }\n        assert(interpidN == interpid0);\n    }\n    res = HAS_COMPLETE_DATA;\n    *p_interpid = interpid0;\n\nfinally:\n    return res;\n}\n\nstatic void\n_sharedns_clear(_PyXI_namespace *ns)\n{\n    if (!_sharedns_is_initialized(ns)) {\n        return;\n    }\n\n    // If the cross-interpreter data were allocated as part of\n    // _PyXI_namespace_item (instead of dynamically), this is where\n    // we would need verify that we are clearing the items in the\n    // correct interpreter, to avoid a race with releasing the XI data\n    // via a pending call.  See _sharedns_has_xidata().\n    for (Py_ssize_t i=0; i < ns->len; i++) {\n        _sharednsitem_clear(&ns->items[i]);\n    }\n    PyMem_RawFree(ns->items);\n    ns->items = NULL;\n    ns->len = 0;\n}\n\nstatic void\n_sharedns_free(_PyXI_namespace *ns)\n{\n    _sharedns_clear(ns);\n    PyMem_RawFree(ns);\n}\n\nstatic int\n_sharedns_init(_PyXI_namespace *ns, PyObject *names)\n{\n    assert(!_sharedns_is_initialized(ns));\n    assert(names != NULL);\n    Py_ssize_t len = PyDict_CheckExact(names)\n        ? PyDict_Size(names)\n        : PySequence_Size(names);\n    if (len < 0) {\n        return -1;\n    }\n    if (len == 0) {\n        PyErr_SetString(PyExc_ValueError, \"empty namespaces not allowed\");\n        return -1;\n    }\n    assert(len > 0);\n\n    // Allocate the items.\n    _PyXI_namespace_item *items =\n            PyMem_RawCalloc(sizeof(struct _sharednsitem), len);\n    if (items == NULL) {\n        PyErr_NoMemory();\n        return -1;\n    }\n\n    // Fill in the names.\n    Py_ssize_t i = -1;\n    if (PyDict_CheckExact(names)) {\n        Py_ssize_t pos = 0;\n        for (i=0; i < len; i++) {\n            PyObject *key;\n            if (!PyDict_Next(names, &pos, &key, NULL)) {\n                // This should not be possible.\n                assert(0);\n                goto error;\n            }\n            if (_sharednsitem_init(&items[i], key) < 0) {\n                goto error;\n            }\n        }\n    }\n    else if (PySequence_Check(names)) {\n        for (i=0; i < len; i++) {\n            PyObject *key = PySequence_GetItem(names, i);\n            if (key == NULL) {\n                goto error;\n            }\n            int res = _sharednsitem_init(&items[i], key);\n            Py_DECREF(key);\n            if (res < 0) {\n                goto error;\n            }\n        }\n    }\n    else {\n        PyErr_SetString(PyExc_NotImplementedError,\n                        \"non-sequence namespace not supported\");\n        goto error;\n    }\n\n    ns->items = items;\n    ns->len = len;\n    assert(_sharedns_is_initialized(ns));\n    return 0;\n\nerror:\n    for (Py_ssize_t j=0; j < i; j++) {\n        _sharednsitem_clear(&items[j]);\n    }\n    PyMem_RawFree(items);\n    assert(!_sharedns_is_initialized(ns));\n    return -1;\n}\n\nvoid\n_PyXI_FreeNamespace(_PyXI_namespace *ns)\n{\n    if (!_sharedns_is_initialized(ns)) {\n        return;\n    }\n\n    int64_t interpid = -1;\n    if (!_sharedns_has_xidata(ns, &interpid)) {\n        _sharedns_free(ns);\n        return;\n    }\n\n    if (interpid == PyInterpreterState_GetID(PyInterpreterState_Get())) {\n        _sharedns_free(ns);\n    }\n    else {\n        // If we weren't always dynamically allocating the cross-interpreter\n        // data in each item then we would need to using a pending call\n        // to call _sharedns_free(), to avoid the race between freeing\n        // the shared namespace and releasing the XI data.\n        _sharedns_free(ns);\n    }\n}\n\n_PyXI_namespace *\n_PyXI_NamespaceFromNames(PyObject *names)\n{\n    if (names == NULL || names == Py_None) {\n        return NULL;\n    }\n\n    _PyXI_namespace *ns = _sharedns_new();\n    if (ns == NULL) {\n        return NULL;\n    }\n\n    if (_sharedns_init(ns, names) < 0) {\n        PyMem_RawFree(ns);\n        if (PySequence_Size(names) == 0) {\n            PyErr_Clear();\n        }\n        return NULL;\n    }\n\n    return ns;\n}\n\n#ifndef NDEBUG\nstatic int _session_is_active(_PyXI_session *);\n#endif\nstatic void _propagate_not_shareable_error(_PyXI_session *);\n\nint\n_PyXI_FillNamespaceFromDict(_PyXI_namespace *ns, PyObject *nsobj,\n                            _PyXI_session *session)\n{\n    // session must be entered already, if provided.\n    assert(session == NULL || _session_is_active(session));\n    assert(_sharedns_is_initialized(ns));\n    for (Py_ssize_t i=0; i < ns->len; i++) {\n        _PyXI_namespace_item *item = &ns->items[i];\n        if (_sharednsitem_copy_from_ns(item, nsobj) < 0) {\n            _propagate_not_shareable_error(session);\n            // Clear out the ones we set so far.\n            for (Py_ssize_t j=0; j < i; j++) {\n                _sharednsitem_clear_value(&ns->items[j]);\n            }\n            return -1;\n        }\n    }\n    return 0;\n}\n\n// All items are expected to be shareable.\nstatic _PyXI_namespace *\n_PyXI_NamespaceFromDict(PyObject *nsobj, _PyXI_session *session)\n{\n    // session must be entered already, if provided.\n    assert(session == NULL || _session_is_active(session));\n    if (nsobj == NULL || nsobj == Py_None) {\n        return NULL;\n    }\n    if (!PyDict_CheckExact(nsobj)) {\n        PyErr_SetString(PyExc_TypeError, \"expected a dict\");\n        return NULL;\n    }\n\n    _PyXI_namespace *ns = _sharedns_new();\n    if (ns == NULL) {\n        return NULL;\n    }\n\n    if (_sharedns_init(ns, nsobj) < 0) {\n        if (PyDict_Size(nsobj) == 0) {\n            PyMem_RawFree(ns);\n            PyErr_Clear();\n            return NULL;\n        }\n        goto error;\n    }\n\n    if (_PyXI_FillNamespaceFromDict(ns, nsobj, session) < 0) {\n        goto error;\n    }\n\n    return ns;\n\nerror:\n    assert(PyErr_Occurred()\n           || (session != NULL && session->error_override != NULL));\n    _sharedns_free(ns);\n    return NULL;\n}\n\nint\n_PyXI_ApplyNamespace(_PyXI_namespace *ns, PyObject *nsobj, PyObject *dflt)\n{\n    for (Py_ssize_t i=0; i < ns->len; i++) {\n        if (_sharednsitem_apply(&ns->items[i], nsobj, dflt) != 0) {\n            return -1;\n        }\n    }\n    return 0;\n}\n\n\n/**********************/\n/* high-level helpers */\n/**********************/\n\n/* enter/exit a cross-interpreter session */\n\nstatic void\n_enter_session(_PyXI_session *session, PyInterpreterState *interp)\n{\n    // Set here and cleared in _exit_session().\n    assert(!session->own_init_tstate);\n    assert(session->init_tstate == NULL);\n    assert(session->prev_tstate == NULL);\n    // Set elsewhere and cleared in _exit_session().\n    assert(!session->running);\n    assert(session->main_ns == NULL);\n    // Set elsewhere and cleared in _capture_current_exception().\n    assert(session->error_override == NULL);\n    // Set elsewhere and cleared in _PyXI_ApplyCapturedException().\n    assert(session->error == NULL);\n\n    // Switch to interpreter.\n    PyThreadState *tstate = PyThreadState_Get();\n    PyThreadState *prev = tstate;\n    if (interp != tstate->interp) {\n        tstate = _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_EXEC);\n        // XXX Possible GILState issues?\n        session->prev_tstate = PyThreadState_Swap(tstate);\n        assert(session->prev_tstate == prev);\n        session->own_init_tstate = 1;\n    }\n    session->init_tstate = tstate;\n    session->prev_tstate = prev;\n}\n\nstatic void\n_exit_session(_PyXI_session *session)\n{\n    PyThreadState *tstate = session->init_tstate;\n    assert(tstate != NULL);\n    assert(PyThreadState_Get() == tstate);\n\n    // Release any of the entered interpreters resources.\n    if (session->main_ns != NULL) {\n        Py_CLEAR(session->main_ns);\n    }\n\n    // Ensure this thread no longer owns __main__.\n    if (session->running) {\n        _PyInterpreterState_SetNotRunningMain(tstate->interp);\n        assert(!PyErr_Occurred());\n        session->running = 0;\n    }\n\n    // Switch back.\n    assert(session->prev_tstate != NULL);\n    if (session->prev_tstate != session->init_tstate) {\n        assert(session->own_init_tstate);\n        session->own_init_tstate = 0;\n        PyThreadState_Clear(tstate);\n        PyThreadState_Swap(session->prev_tstate);\n        PyThreadState_Delete(tstate);\n    }\n    else {\n        assert(!session->own_init_tstate);\n    }\n    session->prev_tstate = NULL;\n    session->init_tstate = NULL;\n}\n\n#ifndef NDEBUG\nstatic int\n_session_is_active(_PyXI_session *session)\n{\n    return (session->init_tstate != NULL);\n}\n#endif\n\nstatic void\n_propagate_not_shareable_error(_PyXI_session *session)\n{\n    if (session == NULL) {\n        return;\n    }\n    PyInterpreterState *interp = PyInterpreterState_Get();\n    if (PyErr_ExceptionMatches(_get_not_shareable_error_type(interp))) {\n        // We want to propagate the exception directly.\n        session->_error_override = _PyXI_ERR_NOT_SHAREABLE;\n        session->error_override = &session->_error_override;\n    }\n}\n\nstatic void\n_capture_current_exception(_PyXI_session *session)\n{\n    assert(session->error == NULL);\n    if (!PyErr_Occurred()) {\n        assert(session->error_override == NULL);\n        return;\n    }\n\n    // Handle the exception override.\n    _PyXI_errcode *override = session->error_override;\n    session->error_override = NULL;\n    _PyXI_errcode errcode = override != NULL\n        ? *override\n        : _PyXI_ERR_UNCAUGHT_EXCEPTION;\n\n    // Pop the exception object.\n    PyObject *excval = NULL;\n    if (errcode == _PyXI_ERR_UNCAUGHT_EXCEPTION) {\n        // We want to actually capture the current exception.\n        excval = PyErr_GetRaisedException();\n    }\n    else if (errcode == _PyXI_ERR_ALREADY_RUNNING) {\n        // We don't need the exception info.\n        PyErr_Clear();\n    }\n    else {\n        // We could do a variety of things here, depending on errcode.\n        // However, for now we simply capture the exception and save\n        // the errcode.\n        excval = PyErr_GetRaisedException();\n    }\n\n    // Capture the exception.\n    _PyXI_error *err = &session->_error;\n    *err = (_PyXI_error){\n        .interp = session->init_tstate->interp,\n    };\n    const char *failure;\n    if (excval == NULL) {\n        failure = _PyXI_InitError(err, NULL, errcode);\n    }\n    else {\n        failure = _PyXI_InitError(err, excval, _PyXI_ERR_UNCAUGHT_EXCEPTION);\n        Py_DECREF(excval);\n        if (failure == NULL && override != NULL) {\n            err->code = errcode;\n        }\n    }\n\n    // Handle capture failure.\n    if (failure != NULL) {\n        // XXX Make this error message more generic.\n        fprintf(stderr,\n                \"RunFailedError: script raised an uncaught exception (%s)\",\n                failure);\n        err = NULL;\n    }\n\n    // Finished!\n    assert(!PyErr_Occurred());\n    session->error  = err;\n}\n\nPyObject *\n_PyXI_ApplyCapturedException(_PyXI_session *session)\n{\n    assert(!PyErr_Occurred());\n    assert(session->error != NULL);\n    PyObject *res = _PyXI_ApplyError(session->error);\n    assert((res == NULL) != (PyErr_Occurred() == NULL));\n    session->error = NULL;\n    return res;\n}\n\nint\n_PyXI_HasCapturedException(_PyXI_session *session)\n{\n    return session->error != NULL;\n}\n\nint\n_PyXI_Enter(_PyXI_session *session,\n            PyInterpreterState *interp, PyObject *nsupdates)\n{\n    // Convert the attrs for cross-interpreter use.\n    _PyXI_namespace *sharedns = NULL;\n    if (nsupdates != NULL) {\n        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n        if (sharedns == NULL && PyErr_Occurred()) {\n            assert(session->error == NULL);\n            return -1;\n        }\n    }\n\n    // Switch to the requested interpreter (if necessary).\n    _enter_session(session, interp);\n    _PyXI_errcode errcode = _PyXI_ERR_UNCAUGHT_EXCEPTION;\n\n    // Ensure this thread owns __main__.\n    if (_PyInterpreterState_SetRunningMain(interp) < 0) {\n        // In the case where we didn't switch interpreters, it would\n        // be more efficient to leave the exception in place and return\n        // immediately.  However, life is simpler if we don't.\n        errcode = _PyXI_ERR_ALREADY_RUNNING;\n        goto error;\n    }\n    session->running = 1;\n\n    // Cache __main__.__dict__.\n    PyObject *main_mod = PyUnstable_InterpreterState_GetMainModule(interp);\n    if (main_mod == NULL) {\n        errcode = _PyXI_ERR_MAIN_NS_FAILURE;\n        goto error;\n    }\n    PyObject *ns = PyModule_GetDict(main_mod);  // borrowed\n    Py_DECREF(main_mod);\n    if (ns == NULL) {\n        errcode = _PyXI_ERR_MAIN_NS_FAILURE;\n        goto error;\n    }\n    session->main_ns = Py_NewRef(ns);\n\n    // Apply the cross-interpreter data.\n    if (sharedns != NULL) {\n        if (_PyXI_ApplyNamespace(sharedns, ns, NULL) < 0) {\n            errcode = _PyXI_ERR_APPLY_NS_FAILURE;\n            goto error;\n        }\n        _PyXI_FreeNamespace(sharedns);\n    }\n\n    errcode = _PyXI_ERR_NO_ERROR;\n    assert(!PyErr_Occurred());\n    return 0;\n\nerror:\n    assert(PyErr_Occurred());\n    // We want to propagate all exceptions here directly (best effort).\n    assert(errcode != _PyXI_ERR_UNCAUGHT_EXCEPTION);\n    session->error_override = &errcode;\n    _capture_current_exception(session);\n    _exit_session(session);\n    if (sharedns != NULL) {\n        _PyXI_FreeNamespace(sharedns);\n    }\n    return -1;\n}\n\nvoid\n_PyXI_Exit(_PyXI_session *session)\n{\n    _capture_current_exception(session);\n    _exit_session(session);\n}\n\n\n/*********************/\n/* runtime lifecycle */\n/*********************/\n\nPyStatus\n_PyXI_Init(PyInterpreterState *interp)\n{\n    // Initialize the XID lookup state (e.g. registry).\n    xid_lookup_init(interp);\n\n    // Initialize exceptions (heap types).\n    if (_init_not_shareable_error_type(interp) < 0) {\n        return _PyStatus_ERR(\"failed to initialize NotShareableError\");\n    }\n\n    return _PyStatus_OK();\n}\n\n// _PyXI_Fini() must be called before the interpreter is cleared,\n// since we must clear some heap objects.\n\nvoid\n_PyXI_Fini(PyInterpreterState *interp)\n{\n    // Finalize exceptions (heap types).\n    _fini_not_shareable_error_type(interp);\n\n    // Finalize the XID lookup state (e.g. registry).\n    xid_lookup_fini(interp);\n}\n\nPyStatus\n_PyXI_InitTypes(PyInterpreterState *interp)\n{\n    if (init_exceptions(interp) < 0) {\n        PyErr_PrintEx(0);\n        return _PyStatus_ERR(\"failed to initialize an exception type\");\n    }\n    return _PyStatus_OK();\n}\n\nvoid\n_PyXI_FiniTypes(PyInterpreterState *interp)\n{\n    fini_exceptions(interp);\n}\n\n\n/*************/\n/* other API */\n/*************/\n\nPyInterpreterState *\n_PyXI_NewInterpreter(PyInterpreterConfig *config, long *maybe_whence,\n                     PyThreadState **p_tstate, PyThreadState **p_save_tstate)\n{\n    PyThreadState *save_tstate = PyThreadState_Swap(NULL);\n    assert(save_tstate != NULL);\n\n    PyThreadState *tstate;\n    PyStatus status = Py_NewInterpreterFromConfig(&tstate, config);\n    if (PyStatus_Exception(status)) {\n        // Since no new thread state was created, there is no exception\n        // to propagate; raise a fresh one after swapping back in the\n        // old thread state.\n        PyThreadState_Swap(save_tstate);\n        _PyErr_SetFromPyStatus(status);\n        PyObject *exc = PyErr_GetRaisedException();\n        PyErr_SetString(PyExc_InterpreterError,\n                        \"sub-interpreter creation failed\");\n        _PyErr_ChainExceptions1(exc);\n        return NULL;\n    }\n    assert(tstate != NULL);\n    PyInterpreterState *interp = PyThreadState_GetInterpreter(tstate);\n\n    long whence = _PyInterpreterState_WHENCE_XI;\n    if (maybe_whence != NULL) {\n        whence = *maybe_whence;\n    }\n    _PyInterpreterState_SetWhence(interp, whence);\n\n    if (p_tstate != NULL) {\n        // We leave the new thread state as the current one.\n        *p_tstate = tstate;\n    }\n    else {\n        // Throw away the initial tstate.\n        PyThreadState_Clear(tstate);\n        PyThreadState_Swap(save_tstate);\n        PyThreadState_Delete(tstate);\n        save_tstate = NULL;\n    }\n    if (p_save_tstate != NULL) {\n        *p_save_tstate = save_tstate;\n    }\n    return interp;\n}\n\nvoid\n_PyXI_EndInterpreter(PyInterpreterState *interp,\n                     PyThreadState *tstate, PyThreadState **p_save_tstate)\n{\n#ifndef NDEBUG\n    long whence = _PyInterpreterState_GetWhence(interp);\n#endif\n    assert(whence != _PyInterpreterState_WHENCE_RUNTIME);\n\n    if (!_PyInterpreterState_IsReady(interp)) {\n        assert(whence == _PyInterpreterState_WHENCE_UNKNOWN);\n        // PyInterpreterState_Clear() requires the GIL,\n        // which a not-ready does not have, so we don't clear it.\n        // That means there may be leaks here until clearing the\n        // interpreter is fixed.\n        PyInterpreterState_Delete(interp);\n        return;\n    }\n    assert(whence != _PyInterpreterState_WHENCE_UNKNOWN);\n\n    PyThreadState *save_tstate = NULL;\n    PyThreadState *cur_tstate = PyThreadState_GET();\n    if (tstate == NULL) {\n        if (PyThreadState_GetInterpreter(cur_tstate) == interp) {\n            tstate = cur_tstate;\n        }\n        else {\n            tstate = _PyThreadState_NewBound(interp, _PyThreadState_WHENCE_FINI);\n            assert(tstate != NULL);\n            save_tstate = PyThreadState_Swap(tstate);\n        }\n    }\n    else {\n        assert(PyThreadState_GetInterpreter(tstate) == interp);\n        if (tstate != cur_tstate) {\n            assert(PyThreadState_GetInterpreter(cur_tstate) != interp);\n            save_tstate = PyThreadState_Swap(tstate);\n        }\n    }\n\n    Py_EndInterpreter(tstate);\n\n    if (p_save_tstate != NULL) {\n        save_tstate = *p_save_tstate;\n    }\n    PyThreadState_Swap(save_tstate);\n}\n"}, "sourceLanguage": "c"}], "results": [{"ruleId": "-Wanalyzer-null-dereference", "taxa": [{"id": "476", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "dereference of NULL 'obj'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 305, "startColumn": 12, "endColumn": 22}, "contextRegion": {"startLine": 305, "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}}, "logicalLocations": [{"name": "_Py_NewRef", "fullyQualifiedName": "_Py_NewRef", "decoratedName": "_Py_NewRef", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1696, "startColumn": 1, "endColumn": 12}, "contextRegion": {"startLine": 1696, "snippet": {"text": "_PyXI_Enter(_PyXI_session *session,\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "entry to '_PyXI_Enter'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1701, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1701, "snippet": {"text": "    if (nsupdates != NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'true' branch (when 'nsupdates' is non-NULL)..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1702, "startColumn": 9, "endColumn": 17}, "contextRegion": {"startLine": 1702, "snippet": {"text": "        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1702, "startColumn": 20, "endColumn": 60}, "contextRegion": {"startLine": 1702, "snippet": {"text": "        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "calling '_PyXI_NamespaceFromDict' from '_PyXI_Enter'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1471, "startColumn": 1, "endColumn": 24}, "contextRegion": {"startLine": 1471, "snippet": {"text": "_PyXI_NamespaceFromDict(PyObject *nsobj, _PyXI_session *session)\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "entry to '_PyXI_NamespaceFromDict'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1475, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1475, "snippet": {"text": "    if (nsobj == NULL || nsobj == Py_None) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1478, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1478, "snippet": {"text": "    if (!PyDict_CheckExact(nsobj)) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1478, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1478, "snippet": {"text": "    if (!PyDict_CheckExact(nsobj)) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1483, "startColumn": 5, "endColumn": 20}, "contextRegion": {"startLine": 1483, "snippet": {"text": "    _PyXI_namespace *ns = _sharedns_new();\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1484, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1484, "snippet": {"text": "    if (ns == NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch (when 'ns' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1488, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1488, "snippet": {"text": "    if (_sharedns_init(ns, nsobj) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1488, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1488, "snippet": {"text": "    if (_sharedns_init(ns, nsobj) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1497, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1497, "snippet": {"text": "    if (_PyXI_FillNamespaceFromDict(ns, nsobj, session) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1497, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1497, "snippet": {"text": "    if (_PyXI_FillNamespaceFromDict(ns, nsobj, session) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1702, "startColumn": 20, "endColumn": 60}, "contextRegion": {"startLine": 1702, "snippet": {"text": "        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "returning to '_PyXI_Enter' from '_PyXI_NamespaceFromDict'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1703, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 1703, "snippet": {"text": "        if (sharedns == NULL && PyErr_Occurred()) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch (when 'sharedns' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1710, "startColumn": 5, "endColumn": 19}, "contextRegion": {"startLine": 1710, "snippet": {"text": "    _enter_session(session, interp);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1714, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1714, "snippet": {"text": "    if (_PyInterpreterState_SetRunningMain(interp) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1721, "startColumn": 5, "endColumn": 12}, "contextRegion": {"startLine": 1721, "snippet": {"text": "    session->running = 1;\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1725, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1725, "snippet": {"text": "    if (main_mod == NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch (when 'main_mod' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1729, "startColumn": 5, "endColumn": 13}, "contextRegion": {"startLine": 1729, "snippet": {"text": "    PyObject *ns = PyModule_GetDict(main_mod);  // borrowed\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1731, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1731, "snippet": {"text": "    if (ns == NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch (when 'ns' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1735, "startColumn": 5, "endColumn": 12}, "contextRegion": {"startLine": 1735, "snippet": {"text": "    session->main_ns = Py_NewRef(ns);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1738, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1738, "snippet": {"text": "    if (sharedns != NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'true' branch (when 'sharedns' is non-NULL)..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1739, "startColumn": 9, "endColumn": 11}, "contextRegion": {"startLine": 1739, "snippet": {"text": "        if (_PyXI_ApplyNamespace(sharedns, ns, NULL) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1739, "startColumn": 13, "endColumn": 53}, "contextRegion": {"startLine": 1739, "snippet": {"text": "        if (_PyXI_ApplyNamespace(sharedns, ns, NULL) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "calling '_PyXI_ApplyNamespace' from '_PyXI_Enter'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1511, "startColumn": 1, "endColumn": 21}, "contextRegion": {"startLine": 1511, "snippet": {"text": "_PyXI_ApplyNamespace(_PyXI_namespace *ns, PyObject *nsobj, PyObject *dflt)\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "entry to '_PyXI_ApplyNamespace'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1513, "startColumn": 26, "endColumn": 37}, "contextRegion": {"startLine": 1513, "snippet": {"text": "    for (Py_ssize_t i=0; i < ns->len; i++) {\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1514, "startColumn": 9, "endColumn": 11}, "contextRegion": {"startLine": 1514, "snippet": {"text": "        if (_sharednsitem_apply(&ns->items[i], nsobj, dflt) != 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1514, "startColumn": 13, "endColumn": 60}, "contextRegion": {"startLine": 1514, "snippet": {"text": "        if (_sharednsitem_apply(&ns->items[i], nsobj, dflt) != 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "calling '_sharednsitem_apply' from '_PyXI_ApplyNamespace'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1200, "startColumn": 1, "endColumn": 20}, "contextRegion": {"startLine": 1200, "snippet": {"text": "_sharednsitem_apply(_PyXI_namespace_item *item, PyObject *ns, PyObject *dflt)\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "entry to '_sharednsitem_apply'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1203, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1203, "snippet": {"text": "    if (name == NULL) {\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "following 'false' branch (when 'name' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1206, "startColumn": 5, "endColumn": 13}, "contextRegion": {"startLine": 1206, "snippet": {"text": "    PyObject *value;\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1207, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1207, "snippet": {"text": "    if (item->data != NULL) {\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1215, "startColumn": 9, "endColumn": 14}, "contextRegion": {"startLine": 1215, "snippet": {"text": "        value = Py_NewRef(dflt);\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1215, "startColumn": 17, "endColumn": 18}, "contextRegion": {"startLine": 1215, "snippet": {"text": "        value = Py_NewRef(dflt);\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "calling '_Py_NewRef' from '_sharednsitem_apply'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 1050, "startColumn": 25, "endColumn": 35}, "contextRegion": {"startLine": 1050, "snippet": {"text": "static inline PyObject* _Py_NewRef(PyObject *obj)\n"}}}, "logicalLocations": [{"name": "_Py_NewRef", "fullyQualifiedName": "_Py_NewRef", "decoratedName": "_Py_NewRef", "kind": "function"}], "message": {"text": "entry to '_Py_NewRef'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 1052, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 1052, "snippet": {"text": "    Py_INCREF(obj);\n"}}}, "logicalLocations": [{"name": "_Py_NewRef", "fullyQualifiedName": "_Py_NewRef", "decoratedName": "_Py_NewRef", "kind": "function"}], "message": {"text": "inlined call to 'Py_INCREF' from '_Py_NewRef'"}}, "kinds": ["call", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 806, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 806, "snippet": {"text": "    if (new_local == 0) {\n"}}}, "logicalLocations": [{"name": "Py_INCREF", "fullyQualifiedName": "Py_INCREF", "decoratedName": "Py_INCREF", "kind": "function"}], "message": {"text": "following 'false' branch (when 'new_local != 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 810, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 810, "snippet": {"text": "    if (_Py_IsOwnedByCurrentThread(op)) {\n"}}}, "logicalLocations": [{"name": "Py_INCREF", "fullyQualifiedName": "Py_INCREF", "decoratedName": "Py_INCREF", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 810, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 810, "snippet": {"text": "    if (_Py_IsOwnedByCurrentThread(op)) {\n"}}}, "logicalLocations": [{"name": "Py_INCREF", "fullyQualifiedName": "Py_INCREF", "decoratedName": "Py_INCREF", "kind": "function"}], "message": {"text": "inlined call to '_Py_IsOwnedByCurrentThread' from 'Py_INCREF'"}}, "kinds": ["call", "function"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 305, "startColumn": 12, "endColumn": 22}, "contextRegion": {"startLine": 305, "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}}, "logicalLocations": [{"name": "_Py_IsOwnedByCurrentThread", "fullyQualifiedName": "_Py_IsOwnedByCurrentThread", "decoratedName": "_Py_IsOwnedByCurrentThread", "kind": "function"}], "message": {"text": "dereference of NULL 'obj'"}}, "kinds": ["danger"], "nestingLevel": 6}]}]}]}, {"ruleId": "-Wanalyzer-null-dereference", "taxa": [{"id": "476", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "dereference of NULL 'op'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 305, "startColumn": 12, "endColumn": 22}, "contextRegion": {"startLine": 305, "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}}, "logicalLocations": [{"name": "Py_DECREF", "fullyQualifiedName": "Py_DECREF", "decoratedName": "Py_DECREF", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1696, "startColumn": 1, "endColumn": 12}, "contextRegion": {"startLine": 1696, "snippet": {"text": "_PyXI_Enter(_PyXI_session *session,\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "entry to '_PyXI_Enter'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1701, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1701, "snippet": {"text": "    if (nsupdates != NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'true' branch (when 'nsupdates' is non-NULL)..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1702, "startColumn": 9, "endColumn": 17}, "contextRegion": {"startLine": 1702, "snippet": {"text": "        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1702, "startColumn": 20, "endColumn": 60}, "contextRegion": {"startLine": 1702, "snippet": {"text": "        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "calling '_PyXI_NamespaceFromDict' from '_PyXI_Enter'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1471, "startColumn": 1, "endColumn": 24}, "contextRegion": {"startLine": 1471, "snippet": {"text": "_PyXI_NamespaceFromDict(PyObject *nsobj, _PyXI_session *session)\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "entry to '_PyXI_NamespaceFromDict'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1475, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1475, "snippet": {"text": "    if (nsobj == NULL || nsobj == Py_None) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1478, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1478, "snippet": {"text": "    if (!PyDict_CheckExact(nsobj)) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1478, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1478, "snippet": {"text": "    if (!PyDict_CheckExact(nsobj)) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1483, "startColumn": 5, "endColumn": 20}, "contextRegion": {"startLine": 1483, "snippet": {"text": "    _PyXI_namespace *ns = _sharedns_new();\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1484, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1484, "snippet": {"text": "    if (ns == NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch (when 'ns' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1488, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1488, "snippet": {"text": "    if (_sharedns_init(ns, nsobj) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1488, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1488, "snippet": {"text": "    if (_sharedns_init(ns, nsobj) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1497, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1497, "snippet": {"text": "    if (_PyXI_FillNamespaceFromDict(ns, nsobj, session) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1497, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1497, "snippet": {"text": "    if (_PyXI_FillNamespaceFromDict(ns, nsobj, session) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"logicalLocations": [{"name": "_PyXI_NamespaceFromDict", "fullyQualifiedName": "_PyXI_NamespaceFromDict", "decoratedName": "_PyXI_NamespaceFromDict", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1702, "startColumn": 20, "endColumn": 60}, "contextRegion": {"startLine": 1702, "snippet": {"text": "        sharedns = _PyXI_NamespaceFromDict(nsupdates, NULL);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "returning to '_PyXI_Enter' from '_PyXI_NamespaceFromDict'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1703, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 1703, "snippet": {"text": "        if (sharedns == NULL && PyErr_Occurred()) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch (when 'sharedns' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1710, "startColumn": 5, "endColumn": 19}, "contextRegion": {"startLine": 1710, "snippet": {"text": "    _enter_session(session, interp);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1714, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1714, "snippet": {"text": "    if (_PyInterpreterState_SetRunningMain(interp) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1721, "startColumn": 5, "endColumn": 12}, "contextRegion": {"startLine": 1721, "snippet": {"text": "    session->running = 1;\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1725, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1725, "snippet": {"text": "    if (main_mod == NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch (when 'main_mod' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1729, "startColumn": 5, "endColumn": 13}, "contextRegion": {"startLine": 1729, "snippet": {"text": "    PyObject *ns = PyModule_GetDict(main_mod);  // borrowed\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1731, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1731, "snippet": {"text": "    if (ns == NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'false' branch (when 'ns' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1735, "startColumn": 5, "endColumn": 12}, "contextRegion": {"startLine": 1735, "snippet": {"text": "    session->main_ns = Py_NewRef(ns);\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1738, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1738, "snippet": {"text": "    if (sharedns != NULL) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "following 'true' branch (when 'sharedns' is non-NULL)..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1739, "startColumn": 9, "endColumn": 11}, "contextRegion": {"startLine": 1739, "snippet": {"text": "        if (_PyXI_ApplyNamespace(sharedns, ns, NULL) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1739, "startColumn": 13, "endColumn": 53}, "contextRegion": {"startLine": 1739, "snippet": {"text": "        if (_PyXI_ApplyNamespace(sharedns, ns, NULL) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_Enter", "fullyQualifiedName": "_PyXI_Enter", "decoratedName": "_PyXI_Enter", "kind": "function"}], "message": {"text": "calling '_PyXI_ApplyNamespace' from '_PyXI_Enter'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1511, "startColumn": 1, "endColumn": 21}, "contextRegion": {"startLine": 1511, "snippet": {"text": "_PyXI_ApplyNamespace(_PyXI_namespace *ns, PyObject *nsobj, PyObject *dflt)\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "entry to '_PyXI_ApplyNamespace'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1513, "startColumn": 26, "endColumn": 37}, "contextRegion": {"startLine": 1513, "snippet": {"text": "    for (Py_ssize_t i=0; i < ns->len; i++) {\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1514, "startColumn": 9, "endColumn": 11}, "contextRegion": {"startLine": 1514, "snippet": {"text": "        if (_sharednsitem_apply(&ns->items[i], nsobj, dflt) != 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1514, "startColumn": 13, "endColumn": 60}, "contextRegion": {"startLine": 1514, "snippet": {"text": "        if (_sharednsitem_apply(&ns->items[i], nsobj, dflt) != 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_ApplyNamespace", "fullyQualifiedName": "_PyXI_ApplyNamespace", "decoratedName": "_PyXI_ApplyNamespace", "kind": "function"}], "message": {"text": "calling '_sharednsitem_apply' from '_PyXI_ApplyNamespace'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1200, "startColumn": 1, "endColumn": 20}, "contextRegion": {"startLine": 1200, "snippet": {"text": "_sharednsitem_apply(_PyXI_namespace_item *item, PyObject *ns, PyObject *dflt)\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "entry to '_sharednsitem_apply'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1203, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1203, "snippet": {"text": "    if (name == NULL) {\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "following 'false' branch (when 'name' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1206, "startColumn": 5, "endColumn": 13}, "contextRegion": {"startLine": 1206, "snippet": {"text": "    PyObject *value;\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1207, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1207, "snippet": {"text": "    if (item->data != NULL) {\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1215, "startColumn": 9, "endColumn": 14}, "contextRegion": {"startLine": 1215, "snippet": {"text": "        value = Py_NewRef(dflt);\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1215, "startColumn": 17, "endColumn": 18}, "contextRegion": {"startLine": 1215, "snippet": {"text": "        value = Py_NewRef(dflt);\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "calling '_Py_NewRef' from '_sharednsitem_apply'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 1050, "startColumn": 25, "endColumn": 35}, "contextRegion": {"startLine": 1050, "snippet": {"text": "static inline PyObject* _Py_NewRef(PyObject *obj)\n"}}}, "logicalLocations": [{"name": "_Py_NewRef", "fullyQualifiedName": "_Py_NewRef", "decoratedName": "_Py_NewRef", "kind": "function"}], "message": {"text": "entry to '_Py_NewRef'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 1052, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 1052, "snippet": {"text": "    Py_INCREF(obj);\n"}}}, "logicalLocations": [{"name": "_Py_NewRef", "fullyQualifiedName": "_Py_NewRef", "decoratedName": "_Py_NewRef", "kind": "function"}], "message": {"text": "inlined call to 'Py_INCREF' from '_Py_NewRef'"}}, "kinds": ["call", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 806, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 806, "snippet": {"text": "    if (new_local == 0) {\n"}}}, "logicalLocations": [{"name": "Py_INCREF", "fullyQualifiedName": "Py_INCREF", "decoratedName": "Py_INCREF", "kind": "function"}], "message": {"text": "following 'true' branch (when 'new_local == 0')..."}}, "kinds": ["branch", "true"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 833, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 833, "snippet": {"text": "    _Py_INCREF_STAT_INC();\n"}}}, "logicalLocations": [{"name": "Py_INCREF", "fullyQualifiedName": "Py_INCREF", "decoratedName": "Py_INCREF", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1215, "startColumn": 17, "endColumn": 18}, "contextRegion": {"startLine": 1215, "snippet": {"text": "        value = Py_NewRef(dflt);\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "return of NULL to '_sharednsitem_apply' from '_Py_NewRef'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1219, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 1219, "snippet": {"text": "    Py_DECREF(value);\n"}}}, "logicalLocations": [{"name": "_sharednsitem_apply", "fullyQualifiedName": "_sharednsitem_apply", "decoratedName": "_sharednsitem_apply", "kind": "function"}], "message": {"text": "calling 'Py_DECREF' from '_sharednsitem_apply'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 896, "startColumn": 20, "endColumn": 29}, "contextRegion": {"startLine": 896, "snippet": {"text": "static inline void Py_DECREF(PyObject *op)\n"}}}, "logicalLocations": [{"name": "Py_DECREF", "fullyQualifiedName": "Py_DECREF", "decoratedName": "Py_DECREF", "kind": "function"}], "message": {"text": "entry to 'Py_DECREF'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 899, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 899, "snippet": {"text": "    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n"}}}, "logicalLocations": [{"name": "Py_DECREF", "fullyQualifiedName": "Py_DECREF", "decoratedName": "Py_DECREF", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 902, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 902, "snippet": {"text": "    _Py_DECREF_STAT_INC();\n"}}}, "logicalLocations": [{"name": "Py_DECREF", "fullyQualifiedName": "Py_DECREF", "decoratedName": "Py_DECREF", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 903, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 903, "snippet": {"text": "    if (_Py_IsOwnedByCurrentThread(op)) {\n"}}}, "logicalLocations": [{"name": "Py_DECREF", "fullyQualifiedName": "Py_DECREF", "decoratedName": "Py_DECREF", "kind": "function"}], "message": {"text": "inlined call to '_Py_IsOwnedByCurrentThread' from 'Py_DECREF'"}}, "kinds": ["call", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 305, "startColumn": 12, "endColumn": 22}, "contextRegion": {"startLine": 305, "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}}, "logicalLocations": [{"name": "_Py_IsOwnedByCurrentThread", "fullyQualifiedName": "_Py_IsOwnedByCurrentThread", "decoratedName": "_Py_IsOwnedByCurrentThread", "kind": "function"}], "message": {"text": "dereference of NULL 'op'"}}, "kinds": ["danger"], "nestingLevel": 5}]}]}]}, {"ruleId": "-Wanalyzer-null-dereference", "taxa": [{"id": "476", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "dereference of NULL 'exc'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 330, "startColumn": 12, "endColumn": 23}, "contextRegion": {"startLine": 330, "snippet": {"text": "    return ob->ob_type;\n"}}}, "logicalLocations": [{"name": "_excinfo_init_type_from_exception", "fullyQualifiedName": "_excinfo_init_type_from_exception", "decoratedName": "_excinfo_init_type_from_exception", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1764, "startColumn": 1, "endColumn": 11}, "contextRegion": {"startLine": 1764, "snippet": {"text": "_PyXI_Exit(_PyXI_session *session)\n"}}}, "logicalLocations": [{"name": "_PyXI_Exit", "fullyQualifiedName": "_PyXI_Exit", "decoratedName": "_PyXI_Exit", "kind": "function"}], "message": {"text": "entry to '_PyXI_Exit'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1766, "startColumn": 5, "endColumn": 40}, "contextRegion": {"startLine": 1766, "snippet": {"text": "    _capture_current_exception(session);\n"}}}, "logicalLocations": [{"name": "_PyXI_Exit", "fullyQualifiedName": "_PyXI_Exit", "decoratedName": "_PyXI_Exit", "kind": "function"}], "message": {"text": "calling '_capture_current_exception' from '_PyXI_Exit'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1615, "startColumn": 1, "endColumn": 27}, "contextRegion": {"startLine": 1615, "snippet": {"text": "_capture_current_exception(_PyXI_session *session)\n"}}}, "logicalLocations": [{"name": "_capture_current_exception", "fullyQualifiedName": "_capture_current_exception", "decoratedName": "_capture_current_exception", "kind": "function"}], "message": {"text": "entry to '_capture_current_exception'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1618, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1618, "snippet": {"text": "    if (!PyErr_Occurred()) {\n"}}}, "logicalLocations": [{"name": "_capture_current_exception", "fullyQualifiedName": "_capture_current_exception", "decoratedName": "_capture_current_exception", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1624, "startColumn": 5, "endColumn": 18}, "contextRegion": {"startLine": 1624, "snippet": {"text": "    _PyXI_errcode *override = session->error_override;\n"}}}, "logicalLocations": [{"name": "_capture_current_exception", "fullyQualifiedName": "_capture_current_exception", "decoratedName": "_capture_current_exception", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1653, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1653, "snippet": {"text": "    if (excval == NULL) {\n"}}}, "logicalLocations": [{"name": "_capture_current_exception", "fullyQualifiedName": "_capture_current_exception", "decoratedName": "_capture_current_exception", "kind": "function"}], "message": {"text": "following 'true' branch (when 'excval' is NULL)..."}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1654, "startColumn": 9, "endColumn": 16}, "contextRegion": {"startLine": 1654, "snippet": {"text": "        failure = _PyXI_InitError(err, NULL, errcode);\n"}}}, "logicalLocations": [{"name": "_capture_current_exception", "fullyQualifiedName": "_capture_current_exception", "decoratedName": "_capture_current_exception", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1654, "startColumn": 19, "endColumn": 54}, "contextRegion": {"startLine": 1654, "snippet": {"text": "        failure = _PyXI_InitError(err, NULL, errcode);\n"}}}, "logicalLocations": [{"name": "_capture_current_exception", "fullyQualifiedName": "_capture_current_exception", "decoratedName": "_capture_current_exception", "kind": "function"}], "message": {"text": "calling '_PyXI_InitError' from '_capture_current_exception'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1016, "startColumn": 1, "endColumn": 16}, "contextRegion": {"startLine": 1016, "snippet": {"text": "_PyXI_InitError(_PyXI_error *error, PyObject *excobj, _PyXI_errcode code)\n"}}}, "logicalLocations": [{"name": "_PyXI_InitError", "fullyQualifiedName": "_PyXI_InitError", "decoratedName": "_PyXI_InitError", "kind": "function"}], "message": {"text": "entry to '_PyXI_InitError'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1023, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1023, "snippet": {"text": "    if (code == _PyXI_ERR_UNCAUGHT_EXCEPTION) {\n"}}}, "logicalLocations": [{"name": "_PyXI_InitError", "fullyQualifiedName": "_PyXI_InitError", "decoratedName": "_PyXI_InitError", "kind": "function"}], "message": {"text": "following 'true' branch (when 'code == -1')..."}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1025, "startColumn": 9, "endColumn": 16}, "contextRegion": {"startLine": 1025, "snippet": {"text": "        failure = _PyXI_excinfo_InitFromException(&error->uncaught, excobj);\n"}}}, "logicalLocations": [{"name": "_PyXI_InitError", "fullyQualifiedName": "_PyXI_InitError", "decoratedName": "_PyXI_InitError", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 1025, "startColumn": 19, "endColumn": 76}, "contextRegion": {"startLine": 1025, "snippet": {"text": "        failure = _PyXI_excinfo_InitFromException(&error->uncaught, excobj);\n"}}}, "logicalLocations": [{"name": "_PyXI_InitError", "fullyQualifiedName": "_PyXI_InitError", "decoratedName": "_PyXI_InitError", "kind": "function"}], "message": {"text": "calling '_PyXI_excinfo_InitFromException' from '_PyXI_InitError'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 661, "startColumn": 1, "endColumn": 32}, "contextRegion": {"startLine": 661, "snippet": {"text": "_PyXI_excinfo_InitFromException(_PyXI_excinfo *info, PyObject *exc)\n"}}}, "logicalLocations": [{"name": "_PyXI_excinfo_InitFromException", "fullyQualifiedName": "_PyXI_excinfo_InitFromException", "decoratedName": "_PyXI_excinfo_InitFromException", "kind": "function"}], "message": {"text": "entry to '_PyXI_excinfo_InitFromException'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 665, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 665, "snippet": {"text": "    if (PyErr_GivenExceptionMatches(exc, PyExc_MemoryError)) {\n"}}}, "logicalLocations": [{"name": "_PyXI_excinfo_InitFromException", "fullyQualifiedName": "_PyXI_excinfo_InitFromException", "decoratedName": "_PyXI_excinfo_InitFromException", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 669, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 669, "snippet": {"text": "    const char *failure = NULL;\n"}}}, "logicalLocations": [{"name": "_PyXI_excinfo_InitFromException", "fullyQualifiedName": "_PyXI_excinfo_InitFromException", "decoratedName": "_PyXI_excinfo_InitFromException", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 671, "startColumn": 9, "endColumn": 60}, "contextRegion": {"startLine": 671, "snippet": {"text": "    if (_excinfo_init_type_from_exception(&info->type, exc) < 0) {\n"}}}, "logicalLocations": [{"name": "_PyXI_excinfo_InitFromException", "fullyQualifiedName": "_PyXI_excinfo_InitFromException", "decoratedName": "_PyXI_excinfo_InitFromException", "kind": "function"}], "message": {"text": "calling '_excinfo_init_type_from_exception' from '_PyXI_excinfo_InitFromException'"}}, "kinds": ["call", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 471, "startColumn": 1, "endColumn": 34}, "contextRegion": {"startLine": 471, "snippet": {"text": "_excinfo_init_type_from_exception(struct _excinfo_type *info, PyObject *exc)\n"}}}, "logicalLocations": [{"name": "_excinfo_init_type_from_exception", "fullyQualifiedName": "_excinfo_init_type_from_exception", "decoratedName": "_excinfo_init_type_from_exception", "kind": "function"}], "message": {"text": "entry to '_excinfo_init_type_from_exception'"}}, "kinds": ["enter", "function"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Python/crossinterp.c", "uriBaseId": "PWD"}, "region": {"startLine": 479, "startColumn": 26, "endColumn": 27}, "contextRegion": {"startLine": 479, "snippet": {"text": "    PyTypeObject *type = Py_TYPE(exc);\n"}}}, "logicalLocations": [{"name": "_excinfo_init_type_from_exception", "fullyQualifiedName": "_excinfo_init_type_from_exception", "decoratedName": "_excinfo_init_type_from_exception", "kind": "function"}], "message": {"text": "inlined call to 'Py_TYPE' from '_excinfo_init_type_from_exception'"}}, "kinds": ["call", "function"], "nestingLevel": 5}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 330, "startColumn": 12, "endColumn": 23}, "contextRegion": {"startLine": 330, "snippet": {"text": "    return ob->ob_type;\n"}}}, "logicalLocations": [{"name": "Py_TYPE", "fullyQualifiedName": "Py_TYPE", "decoratedName": "Py_TYPE", "kind": "function"}], "message": {"text": "dereference of NULL 'exc'"}}, "kinds": ["danger"], "nestingLevel": 6}]}]}]}]}]}
