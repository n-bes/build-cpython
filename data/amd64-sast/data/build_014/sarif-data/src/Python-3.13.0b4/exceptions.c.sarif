{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "GNU C11", "fullName": "GNU C11 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)", "version": "13.2.0", "informationUri": "https://gcc.gnu.org/gcc-13/", "rules": [{"id": "-Wanalyzer-allocation-size", "helpUri": "https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-allocation-size"}]}}, "taxonomies": [{"name": "CWE", "version": "4.7", "organization": "MITRE", "shortDescription": {"text": "The MITRE Common Weakness Enumeration"}, "taxa": [{"id": "131", "helpUri": "https://cwe.mitre.org/data/definitions/131.html"}]}], "invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}}, "artifacts": [{"location": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "contents": {"text": "#define NULLABLE(x) do {                    \\\n        if (x == Py_None) {                 \\\n            x = NULL;                       \\\n        }                                   \\\n    } while (0);\n\n#define RETURN_INT(value) do {              \\\n        int _ret = (value);                 \\\n        if (_ret == -1) {                   \\\n            assert(PyErr_Occurred());       \\\n            return NULL;                    \\\n        }                                   \\\n        assert(!PyErr_Occurred());          \\\n        return PyLong_FromLong(_ret);       \\\n    } while (0)\n\n#define RETURN_SIZE(value) do {             \\\n        Py_ssize_t _ret = (value);          \\\n        if (_ret == -1) {                   \\\n            assert(PyErr_Occurred());       \\\n            return NULL;                    \\\n        }                                   \\\n        assert(!PyErr_Occurred());          \\\n        return PyLong_FromSsize_t(_ret);    \\\n    } while (0)\n\n/* Marker to check that pointer value was set. */\nstatic const char uninitialized[] = \"uninitialized\";\n#define UNINITIALIZED_PTR ((void *)uninitialized)\n/* Marker to check that Py_ssize_t value was set. */\n#define UNINITIALIZED_SIZE ((Py_ssize_t)236892191)\n/* Marker to check that integer value was set. */\n#define UNINITIALIZED_INT (63256717)\n"}, "sourceLanguage": "c"}, {"location": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "contents": {"text": "/*[clinic input]\npreserve\n[clinic start generated code]*/\n\n#if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)\n#  include \"pycore_gc.h\"          // PyGC_Head\n#  include \"pycore_runtime.h\"     // _Py_ID()\n#endif\n#include \"pycore_modsupport.h\"    // _PyArg_CheckPositional()\n\nPyDoc_STRVAR(_testcapi_err_set_raised__doc__,\n\"err_set_raised($module, exception, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_ERR_SET_RAISED_METHODDEF    \\\n    {\"err_set_raised\", (PyCFunction)_testcapi_err_set_raised, METH_O, _testcapi_err_set_raised__doc__},\n\nPyDoc_STRVAR(_testcapi_exception_print__doc__,\n\"exception_print($module, exception, legacy=False, /)\\n\"\n\"--\\n\"\n\"\\n\"\n\"To test the format of exceptions as printed out.\");\n\n#define _TESTCAPI_EXCEPTION_PRINT_METHODDEF    \\\n    {\"exception_print\", _PyCFunction_CAST(_testcapi_exception_print), METH_FASTCALL, _testcapi_exception_print__doc__},\n\nstatic PyObject *\n_testcapi_exception_print_impl(PyObject *module, PyObject *exc, int legacy);\n\nstatic PyObject *\n_testcapi_exception_print(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *exc;\n    int legacy = 0;\n\n    if (!_PyArg_CheckPositional(\"exception_print\", nargs, 1, 2)) {\n        goto exit;\n    }\n    exc = args[0];\n    if (nargs < 2) {\n        goto skip_optional;\n    }\n    legacy = PyObject_IsTrue(args[1]);\n    if (legacy < 0) {\n        goto exit;\n    }\nskip_optional:\n    return_value = _testcapi_exception_print_impl(module, exc, legacy);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_make_exception_with_doc__doc__,\n\"make_exception_with_doc($module, /, name, doc=<unrepresentable>,\\n\"\n\"                        base=<unrepresentable>, dict=<unrepresentable>)\\n\"\n\"--\\n\"\n\"\\n\"\n\"Test PyErr_NewExceptionWithDoc (also exercise PyErr_NewException). Run via Lib/test/test_exceptions.py\");\n\n#define _TESTCAPI_MAKE_EXCEPTION_WITH_DOC_METHODDEF    \\\n    {\"make_exception_with_doc\", _PyCFunction_CAST(_testcapi_make_exception_with_doc), METH_FASTCALL|METH_KEYWORDS, _testcapi_make_exception_with_doc__doc__},\n\nstatic PyObject *\n_testcapi_make_exception_with_doc_impl(PyObject *module, const char *name,\n                                       const char *doc, PyObject *base,\n                                       PyObject *dict);\n\nstatic PyObject *\n_testcapi_make_exception_with_doc(PyObject *module, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames)\n{\n    PyObject *return_value = NULL;\n    #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)\n\n    #define NUM_KEYWORDS 4\n    static struct {\n        PyGC_Head _this_is_not_used;\n        PyObject_VAR_HEAD\n        PyObject *ob_item[NUM_KEYWORDS];\n    } _kwtuple = {\n        .ob_base = PyVarObject_HEAD_INIT(&PyTuple_Type, NUM_KEYWORDS)\n        .ob_item = { &_Py_ID(name), &_Py_ID(doc), &_Py_ID(base), &_Py_ID(dict), },\n    };\n    #undef NUM_KEYWORDS\n    #define KWTUPLE (&_kwtuple.ob_base.ob_base)\n\n    #else  // !Py_BUILD_CORE\n    #  define KWTUPLE NULL\n    #endif  // !Py_BUILD_CORE\n\n    static const char * const _keywords[] = {\"name\", \"doc\", \"base\", \"dict\", NULL};\n    static _PyArg_Parser _parser = {\n        .keywords = _keywords,\n        .fname = \"make_exception_with_doc\",\n        .kwtuple = KWTUPLE,\n    };\n    #undef KWTUPLE\n    PyObject *argsbuf[4];\n    Py_ssize_t noptargs = nargs + (kwnames ? PyTuple_GET_SIZE(kwnames) : 0) - 1;\n    const char *name;\n    const char *doc = NULL;\n    PyObject *base = NULL;\n    PyObject *dict = NULL;\n\n    args = _PyArg_UnpackKeywords(args, nargs, NULL, kwnames, &_parser, 1, 4, 0, argsbuf);\n    if (!args) {\n        goto exit;\n    }\n    if (!PyUnicode_Check(args[0])) {\n        _PyArg_BadArgument(\"make_exception_with_doc\", \"argument 'name'\", \"str\", args[0]);\n        goto exit;\n    }\n    Py_ssize_t name_length;\n    name = PyUnicode_AsUTF8AndSize(args[0], &name_length);\n    if (name == NULL) {\n        goto exit;\n    }\n    if (strlen(name) != (size_t)name_length) {\n        PyErr_SetString(PyExc_ValueError, \"embedded null character\");\n        goto exit;\n    }\n    if (!noptargs) {\n        goto skip_optional_pos;\n    }\n    if (args[1]) {\n        if (!PyUnicode_Check(args[1])) {\n            _PyArg_BadArgument(\"make_exception_with_doc\", \"argument 'doc'\", \"str\", args[1]);\n            goto exit;\n        }\n        Py_ssize_t doc_length;\n        doc = PyUnicode_AsUTF8AndSize(args[1], &doc_length);\n        if (doc == NULL) {\n            goto exit;\n        }\n        if (strlen(doc) != (size_t)doc_length) {\n            PyErr_SetString(PyExc_ValueError, \"embedded null character\");\n            goto exit;\n        }\n        if (!--noptargs) {\n            goto skip_optional_pos;\n        }\n    }\n    if (args[2]) {\n        base = args[2];\n        if (!--noptargs) {\n            goto skip_optional_pos;\n        }\n    }\n    dict = args[3];\nskip_optional_pos:\n    return_value = _testcapi_make_exception_with_doc_impl(module, name, doc, base, dict);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_exc_set_object__doc__,\n\"exc_set_object($module, exception, obj, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_EXC_SET_OBJECT_METHODDEF    \\\n    {\"exc_set_object\", _PyCFunction_CAST(_testcapi_exc_set_object), METH_FASTCALL, _testcapi_exc_set_object__doc__},\n\nstatic PyObject *\n_testcapi_exc_set_object_impl(PyObject *module, PyObject *exc, PyObject *obj);\n\nstatic PyObject *\n_testcapi_exc_set_object(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *exc;\n    PyObject *obj;\n\n    if (!_PyArg_CheckPositional(\"exc_set_object\", nargs, 2, 2)) {\n        goto exit;\n    }\n    exc = args[0];\n    obj = args[1];\n    return_value = _testcapi_exc_set_object_impl(module, exc, obj);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_exc_set_object_fetch__doc__,\n\"exc_set_object_fetch($module, exception, obj, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_EXC_SET_OBJECT_FETCH_METHODDEF    \\\n    {\"exc_set_object_fetch\", _PyCFunction_CAST(_testcapi_exc_set_object_fetch), METH_FASTCALL, _testcapi_exc_set_object_fetch__doc__},\n\nstatic PyObject *\n_testcapi_exc_set_object_fetch_impl(PyObject *module, PyObject *exc,\n                                    PyObject *obj);\n\nstatic PyObject *\n_testcapi_exc_set_object_fetch(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *exc;\n    PyObject *obj;\n\n    if (!_PyArg_CheckPositional(\"exc_set_object_fetch\", nargs, 2, 2)) {\n        goto exit;\n    }\n    exc = args[0];\n    obj = args[1];\n    return_value = _testcapi_exc_set_object_fetch_impl(module, exc, obj);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_err_setstring__doc__,\n\"err_setstring($module, exc, value, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_ERR_SETSTRING_METHODDEF    \\\n    {\"err_setstring\", _PyCFunction_CAST(_testcapi_err_setstring), METH_FASTCALL, _testcapi_err_setstring__doc__},\n\nstatic PyObject *\n_testcapi_err_setstring_impl(PyObject *module, PyObject *exc,\n                             const char *value, Py_ssize_t value_length);\n\nstatic PyObject *\n_testcapi_err_setstring(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *exc;\n    const char *value;\n    Py_ssize_t value_length;\n\n    if (!_PyArg_ParseStack(args, nargs, \"Oz#:err_setstring\",\n        &exc, &value, &value_length)) {\n        goto exit;\n    }\n    return_value = _testcapi_err_setstring_impl(module, exc, value, value_length);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_err_setfromerrnowithfilename__doc__,\n\"err_setfromerrnowithfilename($module, error, exc, value, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_ERR_SETFROMERRNOWITHFILENAME_METHODDEF    \\\n    {\"err_setfromerrnowithfilename\", _PyCFunction_CAST(_testcapi_err_setfromerrnowithfilename), METH_FASTCALL, _testcapi_err_setfromerrnowithfilename__doc__},\n\nstatic PyObject *\n_testcapi_err_setfromerrnowithfilename_impl(PyObject *module, int error,\n                                            PyObject *exc, const char *value,\n                                            Py_ssize_t value_length);\n\nstatic PyObject *\n_testcapi_err_setfromerrnowithfilename(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    int error;\n    PyObject *exc;\n    const char *value;\n    Py_ssize_t value_length;\n\n    if (!_PyArg_ParseStack(args, nargs, \"iOz#:err_setfromerrnowithfilename\",\n        &error, &exc, &value, &value_length)) {\n        goto exit;\n    }\n    return_value = _testcapi_err_setfromerrnowithfilename_impl(module, error, exc, value, value_length);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_raise_exception__doc__,\n\"raise_exception($module, exception, num_args, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_RAISE_EXCEPTION_METHODDEF    \\\n    {\"raise_exception\", _PyCFunction_CAST(_testcapi_raise_exception), METH_FASTCALL, _testcapi_raise_exception__doc__},\n\nstatic PyObject *\n_testcapi_raise_exception_impl(PyObject *module, PyObject *exc, int num_args);\n\nstatic PyObject *\n_testcapi_raise_exception(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *exc;\n    int num_args;\n\n    if (!_PyArg_CheckPositional(\"raise_exception\", nargs, 2, 2)) {\n        goto exit;\n    }\n    exc = args[0];\n    num_args = PyLong_AsInt(args[1]);\n    if (num_args == -1 && PyErr_Occurred()) {\n        goto exit;\n    }\n    return_value = _testcapi_raise_exception_impl(module, exc, num_args);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_raise_memoryerror__doc__,\n\"raise_memoryerror($module, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_RAISE_MEMORYERROR_METHODDEF    \\\n    {\"raise_memoryerror\", (PyCFunction)_testcapi_raise_memoryerror, METH_NOARGS, _testcapi_raise_memoryerror__doc__},\n\nstatic PyObject *\n_testcapi_raise_memoryerror_impl(PyObject *module);\n\nstatic PyObject *\n_testcapi_raise_memoryerror(PyObject *module, PyObject *Py_UNUSED(ignored))\n{\n    return _testcapi_raise_memoryerror_impl(module);\n}\n\nPyDoc_STRVAR(_testcapi_fatal_error__doc__,\n\"fatal_error($module, message, release_gil=False, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_FATAL_ERROR_METHODDEF    \\\n    {\"fatal_error\", _PyCFunction_CAST(_testcapi_fatal_error), METH_FASTCALL, _testcapi_fatal_error__doc__},\n\nstatic PyObject *\n_testcapi_fatal_error_impl(PyObject *module, const char *message,\n                           int release_gil);\n\nstatic PyObject *\n_testcapi_fatal_error(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    const char *message;\n    int release_gil = 0;\n\n    if (!_PyArg_ParseStack(args, nargs, \"y|p:fatal_error\",\n        &message, &release_gil)) {\n        goto exit;\n    }\n    return_value = _testcapi_fatal_error_impl(module, message, release_gil);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_set_exc_info__doc__,\n\"set_exc_info($module, new_type, new_value, new_tb, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_SET_EXC_INFO_METHODDEF    \\\n    {\"set_exc_info\", _PyCFunction_CAST(_testcapi_set_exc_info), METH_FASTCALL, _testcapi_set_exc_info__doc__},\n\nstatic PyObject *\n_testcapi_set_exc_info_impl(PyObject *module, PyObject *new_type,\n                            PyObject *new_value, PyObject *new_tb);\n\nstatic PyObject *\n_testcapi_set_exc_info(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *new_type;\n    PyObject *new_value;\n    PyObject *new_tb;\n\n    if (!_PyArg_CheckPositional(\"set_exc_info\", nargs, 3, 3)) {\n        goto exit;\n    }\n    new_type = args[0];\n    new_value = args[1];\n    new_tb = args[2];\n    return_value = _testcapi_set_exc_info_impl(module, new_type, new_value, new_tb);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_set_exception__doc__,\n\"set_exception($module, new_exc, /)\\n\"\n\"--\\n\"\n\"\\n\");\n\n#define _TESTCAPI_SET_EXCEPTION_METHODDEF    \\\n    {\"set_exception\", (PyCFunction)_testcapi_set_exception, METH_O, _testcapi_set_exception__doc__},\n\nPyDoc_STRVAR(_testcapi_traceback_print__doc__,\n\"traceback_print($module, traceback, file, /)\\n\"\n\"--\\n\"\n\"\\n\"\n\"To test the format of tracebacks as printed out.\");\n\n#define _TESTCAPI_TRACEBACK_PRINT_METHODDEF    \\\n    {\"traceback_print\", _PyCFunction_CAST(_testcapi_traceback_print), METH_FASTCALL, _testcapi_traceback_print__doc__},\n\nstatic PyObject *\n_testcapi_traceback_print_impl(PyObject *module, PyObject *traceback,\n                               PyObject *file);\n\nstatic PyObject *\n_testcapi_traceback_print(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *traceback;\n    PyObject *file;\n\n    if (!_PyArg_CheckPositional(\"traceback_print\", nargs, 2, 2)) {\n        goto exit;\n    }\n    traceback = args[0];\n    file = args[1];\n    return_value = _testcapi_traceback_print_impl(module, traceback, file);\n\nexit:\n    return return_value;\n}\n\nPyDoc_STRVAR(_testcapi_unstable_exc_prep_reraise_star__doc__,\n\"unstable_exc_prep_reraise_star($module, orig, excs, /)\\n\"\n\"--\\n\"\n\"\\n\"\n\"To test PyUnstable_Exc_PrepReraiseStar.\");\n\n#define _TESTCAPI_UNSTABLE_EXC_PREP_RERAISE_STAR_METHODDEF    \\\n    {\"unstable_exc_prep_reraise_star\", _PyCFunction_CAST(_testcapi_unstable_exc_prep_reraise_star), METH_FASTCALL, _testcapi_unstable_exc_prep_reraise_star__doc__},\n\nstatic PyObject *\n_testcapi_unstable_exc_prep_reraise_star_impl(PyObject *module,\n                                              PyObject *orig, PyObject *excs);\n\nstatic PyObject *\n_testcapi_unstable_exc_prep_reraise_star(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n{\n    PyObject *return_value = NULL;\n    PyObject *orig;\n    PyObject *excs;\n\n    if (!_PyArg_CheckPositional(\"unstable_exc_prep_reraise_star\", nargs, 2, 2)) {\n        goto exit;\n    }\n    orig = args[0];\n    excs = args[1];\n    return_value = _testcapi_unstable_exc_prep_reraise_star_impl(module, orig, excs);\n\nexit:\n    return return_value;\n}\n/*[clinic end generated code: output=0b11ef105030a48e input=a9049054013a1b77]*/\n"}, "sourceLanguage": "c"}, {"location": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "contents": {"text": "// clinic/exceptions.c.h uses internal pycore_modsupport.h API\n#define PYTESTCAPI_NEED_INTERNAL_API\n\n#include \"parts.h\"\n#include \"util.h\"\n#include \"clinic/exceptions.c.h\"\n\n\n/*[clinic input]\nmodule _testcapi\n[clinic start generated code]*/\n/*[clinic end generated code: output=da39a3ee5e6b4b0d input=6361033e795369fc]*/\n\n/*[clinic input]\n_testcapi.err_set_raised\n    exception as exc: object\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_err_set_raised(PyObject *module, PyObject *exc)\n/*[clinic end generated code: output=0a0c7743961fcae5 input=c5f7331864a94df9]*/\n{\n    Py_INCREF(exc);\n    PyErr_SetRaisedException(exc);\n    assert(PyErr_Occurred());\n    return NULL;\n}\n\nstatic PyObject *\nerr_restore(PyObject *self, PyObject *args) {\n    PyObject *type = NULL, *value = NULL, *traceback = NULL;\n    switch(PyTuple_Size(args)) {\n        case 3:\n            traceback = PyTuple_GetItem(args, 2);\n            Py_INCREF(traceback);\n            /* fall through */\n        case 2:\n            value = PyTuple_GetItem(args, 1);\n            Py_INCREF(value);\n            /* fall through */\n        case 1:\n            type = PyTuple_GetItem(args, 0);\n            Py_INCREF(type);\n            break;\n        default:\n            PyErr_SetString(PyExc_TypeError,\n                        \"wrong number of arguments\");\n            return NULL;\n    }\n    PyErr_Restore(type, value, traceback);\n    assert(PyErr_Occurred());\n    return NULL;\n}\n\n/*[clinic input]\n_testcapi.exception_print\n    exception as exc: object\n    legacy: bool = False\n    /\n\nTo test the format of exceptions as printed out.\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_exception_print_impl(PyObject *module, PyObject *exc, int legacy)\n/*[clinic end generated code: output=3f04fe0c18412ae0 input=c76f42cb94136dbf]*/\n{\n    if (legacy) {\n        PyObject *tb = NULL;\n        if (PyExceptionInstance_Check(exc)) {\n            tb = PyException_GetTraceback(exc);\n        }\n        PyErr_Display((PyObject *) Py_TYPE(exc), exc, tb);\n        Py_XDECREF(tb);\n    }\n    else {\n        PyErr_DisplayException(exc);\n    }\n    Py_RETURN_NONE;\n}\n\n/*[clinic input]\n_testcapi.make_exception_with_doc\n    name: str\n    doc: str = NULL\n    base: object = NULL\n    dict: object = NULL\n\nTest PyErr_NewExceptionWithDoc (also exercise PyErr_NewException). Run via Lib/test/test_exceptions.py\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_make_exception_with_doc_impl(PyObject *module, const char *name,\n                                       const char *doc, PyObject *base,\n                                       PyObject *dict)\n/*[clinic end generated code: output=439f0d963c1ce2c4 input=23a73013f8a8795a]*/\n{\n    return PyErr_NewExceptionWithDoc(name, doc, base, dict);\n}\n\n/*[clinic input]\n_testcapi.exc_set_object\n    exception as exc: object\n    obj: object\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_exc_set_object_impl(PyObject *module, PyObject *exc, PyObject *obj)\n/*[clinic end generated code: output=34c8c7c83e5c8463 input=fc530aafb1b0a360]*/\n{\n    PyErr_SetObject(exc, obj);\n    return NULL;\n}\n\n/*[clinic input]\n_testcapi.exc_set_object_fetch = _testcapi.exc_set_object\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_exc_set_object_fetch_impl(PyObject *module, PyObject *exc,\n                                    PyObject *obj)\n/*[clinic end generated code: output=7a5ff5f6d3cf687f input=77ec686f1f95fa38]*/\n{\n    PyObject *type = UNINITIALIZED_PTR;\n    PyObject *value = UNINITIALIZED_PTR;\n    PyObject *tb = UNINITIALIZED_PTR;\n\n    PyErr_SetObject(exc, obj);\n    PyErr_Fetch(&type, &value, &tb);\n    assert(type != UNINITIALIZED_PTR);\n    assert(value != UNINITIALIZED_PTR);\n    assert(tb != UNINITIALIZED_PTR);\n    Py_XDECREF(type);\n    Py_XDECREF(tb);\n    return value;\n}\n\n/*[clinic input]\n_testcapi.err_setstring\n    exc: object\n    value: str(zeroes=True, accept={robuffer, str, NoneType})\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_err_setstring_impl(PyObject *module, PyObject *exc,\n                             const char *value, Py_ssize_t value_length)\n/*[clinic end generated code: output=fba8705e5703dd3f input=e8a95fad66d9004b]*/\n{\n    NULLABLE(exc);\n    PyErr_SetString(exc, value);\n    return NULL;\n}\n\n/*[clinic input]\n_testcapi.err_setfromerrnowithfilename\n    error: int\n    exc: object\n    value: str(zeroes=True, accept={robuffer, str, NoneType})\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_err_setfromerrnowithfilename_impl(PyObject *module, int error,\n                                            PyObject *exc, const char *value,\n                                            Py_ssize_t value_length)\n/*[clinic end generated code: output=d02df5749a01850e input=ff7c384234bf097f]*/\n{\n    NULLABLE(exc);\n    errno = error;\n    PyErr_SetFromErrnoWithFilename(exc, value);\n    return NULL;\n}\n\n/*[clinic input]\n_testcapi.raise_exception\n    exception as exc: object\n    num_args: int\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_raise_exception_impl(PyObject *module, PyObject *exc, int num_args)\n/*[clinic end generated code: output=eb0a9c5d69e0542d input=83d6262c3829d088]*/\n{\n    PyObject *exc_args = PyTuple_New(num_args);\n    if (exc_args == NULL) {\n        return NULL;\n    }\n    for (int i = 0; i < num_args; ++i) {\n        PyObject *v = PyLong_FromLong(i);\n        if (v == NULL) {\n            Py_DECREF(exc_args);\n            return NULL;\n        }\n        PyTuple_SET_ITEM(exc_args, i, v);\n    }\n    PyErr_SetObject(exc, exc_args);\n    Py_DECREF(exc_args);\n    return NULL;\n}\n\n/*[clinic input]\n_testcapi.raise_memoryerror\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_raise_memoryerror_impl(PyObject *module)\n/*[clinic end generated code: output=dd057803fb0131e6 input=6ca521bd07fb73cb]*/\n{\n    return PyErr_NoMemory();\n}\n\n/*[clinic input]\n_testcapi.fatal_error\n    message: str(accept={robuffer})\n    release_gil: bool = False\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_fatal_error_impl(PyObject *module, const char *message,\n                           int release_gil)\n/*[clinic end generated code: output=9c3237116e6a03e8 input=1be357a2ccb04c8c]*/\n{\n    if (release_gil) {\n        Py_BEGIN_ALLOW_THREADS\n        Py_FatalError(message);\n        Py_END_ALLOW_THREADS\n    }\n    else {\n        Py_FatalError(message);\n    }\n    // Py_FatalError() does not return, but exits the process.\n    Py_RETURN_NONE;\n}\n\n/*[clinic input]\n_testcapi.set_exc_info\n    new_type: object\n    new_value: object\n    new_tb: object\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_set_exc_info_impl(PyObject *module, PyObject *new_type,\n                            PyObject *new_value, PyObject *new_tb)\n/*[clinic end generated code: output=b55fa35dec31300e input=ea9f19e0f55fe5b3]*/\n{\n    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n    PyErr_GetExcInfo(&type, &value, &tb);\n\n    Py_INCREF(new_type);\n    Py_INCREF(new_value);\n    Py_INCREF(new_tb);\n    PyErr_SetExcInfo(new_type, new_value, new_tb);\n\n    PyObject *orig_exc = PyTuple_Pack(3,\n            type  ? type  : Py_None,\n            value ? value : Py_None,\n            tb    ? tb    : Py_None);\n    Py_XDECREF(type);\n    Py_XDECREF(value);\n    Py_XDECREF(tb);\n    return orig_exc;\n}\n\n/*[clinic input]\n_testcapi.set_exception\n    new_exc: object\n    /\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_set_exception(PyObject *module, PyObject *new_exc)\n/*[clinic end generated code: output=8b969b35d029e96d input=c89d4ca966c69738]*/\n{\n    PyObject *exc = PyErr_GetHandledException();\n    assert(PyExceptionInstance_Check(exc) || exc == NULL);\n    PyErr_SetHandledException(new_exc);\n    return exc;\n}\n\n/*[clinic input]\n_testcapi.traceback_print\n    traceback: object\n    file: object\n    /\nTo test the format of tracebacks as printed out.\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_traceback_print_impl(PyObject *module, PyObject *traceback,\n                               PyObject *file)\n/*[clinic end generated code: output=17074ecf9d95cf30 input=9423f2857b008ca8]*/\n{\n    if (PyTraceBack_Print(traceback, file) < 0) {\n        return NULL;\n    }\n    Py_RETURN_NONE;\n}\n\nstatic PyObject *\nerr_writeunraisable(PyObject *Py_UNUSED(module), PyObject *args)\n{\n    PyObject *exc, *obj;\n    if (!PyArg_ParseTuple(args, \"OO\", &exc, &obj)) {\n        return NULL;\n    }\n    NULLABLE(exc);\n    NULLABLE(obj);\n    if (exc) {\n        PyErr_SetRaisedException(Py_NewRef(exc));\n    }\n    PyErr_WriteUnraisable(obj);\n    Py_RETURN_NONE;\n}\n\nstatic PyObject *\nerr_formatunraisable(PyObject *Py_UNUSED(module), PyObject *args)\n{\n    PyObject *exc;\n    const char *fmt;\n    Py_ssize_t fmtlen;\n    PyObject *objs[10] = {NULL};\n\n    if (!PyArg_ParseTuple(args, \"Oz#|OOOOOOOOOO\", &exc, &fmt, &fmtlen,\n            &objs[0], &objs[1], &objs[2], &objs[3], &objs[4],\n            &objs[5], &objs[6], &objs[7], &objs[8], &objs[9]))\n    {\n        return NULL;\n    }\n    NULLABLE(exc);\n    if (exc) {\n        PyErr_SetRaisedException(Py_NewRef(exc));\n    }\n    PyErr_FormatUnraisable(fmt,\n            objs[0], objs[1], objs[2], objs[3], objs[4],\n            objs[5], objs[6], objs[7], objs[8], objs[9]);\n    Py_RETURN_NONE;\n}\n\n/*[clinic input]\n_testcapi.unstable_exc_prep_reraise_star\n    orig: object\n    excs: object\n    /\nTo test PyUnstable_Exc_PrepReraiseStar.\n[clinic start generated code]*/\n\nstatic PyObject *\n_testcapi_unstable_exc_prep_reraise_star_impl(PyObject *module,\n                                              PyObject *orig, PyObject *excs)\n/*[clinic end generated code: output=850cf008e0563c77 input=27fbcda2203eb301]*/\n{\n    return PyUnstable_Exc_PrepReraiseStar(orig, excs);\n}\n\n\n/*\n * Define the PyRecurdingInfinitelyError_Type\n */\n\nstatic PyTypeObject PyRecursingInfinitelyError_Type;\n\nstatic int\nrecurse_infinitely_error_init(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    PyObject *type = (PyObject *)&PyRecursingInfinitelyError_Type;\n\n    /* Instantiating this exception starts infinite recursion. */\n    Py_INCREF(type);\n    PyErr_SetObject(type, NULL);\n    return -1;\n}\n\nstatic PyTypeObject PyRecursingInfinitelyError_Type = {\n    .tp_name = \"RecursingInfinitelyError\",\n    .tp_basicsize = sizeof(PyBaseExceptionObject),\n    .tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,\n    .tp_doc = PyDoc_STR(\"Instantiating this exception starts infinite recursion.\"),\n    .tp_init = (initproc)recurse_infinitely_error_init,\n};\n\nstatic PyMethodDef test_methods[] = {\n    {\"err_restore\",             err_restore,                     METH_VARARGS},\n    {\"err_writeunraisable\",     err_writeunraisable,             METH_VARARGS},\n    {\"err_formatunraisable\",    err_formatunraisable,            METH_VARARGS},\n    _TESTCAPI_ERR_SET_RAISED_METHODDEF\n    _TESTCAPI_EXCEPTION_PRINT_METHODDEF\n    _TESTCAPI_FATAL_ERROR_METHODDEF\n    _TESTCAPI_MAKE_EXCEPTION_WITH_DOC_METHODDEF\n    _TESTCAPI_EXC_SET_OBJECT_METHODDEF\n    _TESTCAPI_EXC_SET_OBJECT_FETCH_METHODDEF\n    _TESTCAPI_ERR_SETSTRING_METHODDEF\n    _TESTCAPI_ERR_SETFROMERRNOWITHFILENAME_METHODDEF\n    _TESTCAPI_RAISE_EXCEPTION_METHODDEF\n    _TESTCAPI_RAISE_MEMORYERROR_METHODDEF\n    _TESTCAPI_SET_EXC_INFO_METHODDEF\n    _TESTCAPI_SET_EXCEPTION_METHODDEF\n    _TESTCAPI_TRACEBACK_PRINT_METHODDEF\n    _TESTCAPI_UNSTABLE_EXC_PREP_RERAISE_STAR_METHODDEF\n    {NULL},\n};\n\nint\n_PyTestCapi_Init_Exceptions(PyObject *mod)\n{\n    PyRecursingInfinitelyError_Type.tp_base = (PyTypeObject *)PyExc_Exception;\n    if (PyType_Ready(&PyRecursingInfinitelyError_Type) < 0) {\n        return -1;\n    }\n    if (PyModule_AddObjectRef(mod, \"RecursingInfinitelyError\",\n                              (PyObject *)&PyRecursingInfinitelyError_Type) < 0)\n    {\n        return -1;\n    }\n\n    if (PyModule_AddFunctions(mod, test_methods) < 0) {\n        return -1;\n    }\n\n    return 0;\n}\n"}, "sourceLanguage": "c"}], "results": [{"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 126, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 126, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 126, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 126, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 126, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 126, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 201, "startColumn": 1, "endColumn": 31}, "contextRegion": {"startLine": 201, "snippet": {"text": "_testcapi_exc_set_object_fetch(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch", "fullyQualifiedName": "_testcapi_exc_set_object_fetch", "decoratedName": "_testcapi_exc_set_object_fetch", "kind": "function"}], "message": {"text": "entry to '_testcapi_exc_set_object_fetch'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 20, "endColumn": 73}, "contextRegion": {"startLine": 212, "snippet": {"text": "    return_value = _testcapi_exc_set_object_fetch_impl(module, exc, obj);\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch", "fullyQualifiedName": "_testcapi_exc_set_object_fetch", "decoratedName": "_testcapi_exc_set_object_fetch", "kind": "function"}], "message": {"text": "calling '_testcapi_exc_set_object_fetch_impl' from '_testcapi_exc_set_object_fetch'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 122, "startColumn": 1, "endColumn": 36}, "contextRegion": {"startLine": 122, "snippet": {"text": "_testcapi_exc_set_object_fetch_impl(PyObject *module, PyObject *exc,\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "entry to '_testcapi_exc_set_object_fetch_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 126, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 126, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 127, "startColumn": 15, "endColumn": 20}, "contextRegion": {"startLine": 127, "snippet": {"text": "    PyObject *value = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 127, "startColumn": 15, "endColumn": 20}, "contextRegion": {"startLine": 127, "snippet": {"text": "    PyObject *value = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 127, "startColumn": 15, "endColumn": 20}, "contextRegion": {"startLine": 127, "snippet": {"text": "    PyObject *value = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 201, "startColumn": 1, "endColumn": 31}, "contextRegion": {"startLine": 201, "snippet": {"text": "_testcapi_exc_set_object_fetch(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch", "fullyQualifiedName": "_testcapi_exc_set_object_fetch", "decoratedName": "_testcapi_exc_set_object_fetch", "kind": "function"}], "message": {"text": "entry to '_testcapi_exc_set_object_fetch'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 20, "endColumn": 73}, "contextRegion": {"startLine": 212, "snippet": {"text": "    return_value = _testcapi_exc_set_object_fetch_impl(module, exc, obj);\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch", "fullyQualifiedName": "_testcapi_exc_set_object_fetch", "decoratedName": "_testcapi_exc_set_object_fetch", "kind": "function"}], "message": {"text": "calling '_testcapi_exc_set_object_fetch_impl' from '_testcapi_exc_set_object_fetch'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 122, "startColumn": 1, "endColumn": 36}, "contextRegion": {"startLine": 122, "snippet": {"text": "_testcapi_exc_set_object_fetch_impl(PyObject *module, PyObject *exc,\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "entry to '_testcapi_exc_set_object_fetch_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 127, "startColumn": 15, "endColumn": 20}, "contextRegion": {"startLine": 127, "snippet": {"text": "    PyObject *value = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 128, "startColumn": 15, "endColumn": 17}, "contextRegion": {"startLine": 128, "snippet": {"text": "    PyObject *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 128, "startColumn": 15, "endColumn": 17}, "contextRegion": {"startLine": 128, "snippet": {"text": "    PyObject *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 128, "startColumn": 15, "endColumn": 17}, "contextRegion": {"startLine": 128, "snippet": {"text": "    PyObject *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 201, "startColumn": 1, "endColumn": 31}, "contextRegion": {"startLine": 201, "snippet": {"text": "_testcapi_exc_set_object_fetch(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch", "fullyQualifiedName": "_testcapi_exc_set_object_fetch", "decoratedName": "_testcapi_exc_set_object_fetch", "kind": "function"}], "message": {"text": "entry to '_testcapi_exc_set_object_fetch'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 20, "endColumn": 73}, "contextRegion": {"startLine": 212, "snippet": {"text": "    return_value = _testcapi_exc_set_object_fetch_impl(module, exc, obj);\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch", "fullyQualifiedName": "_testcapi_exc_set_object_fetch", "decoratedName": "_testcapi_exc_set_object_fetch", "kind": "function"}], "message": {"text": "calling '_testcapi_exc_set_object_fetch_impl' from '_testcapi_exc_set_object_fetch'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 122, "startColumn": 1, "endColumn": 36}, "contextRegion": {"startLine": 122, "snippet": {"text": "_testcapi_exc_set_object_fetch_impl(PyObject *module, PyObject *exc,\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "entry to '_testcapi_exc_set_object_fetch_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 128, "startColumn": 15, "endColumn": 17}, "contextRegion": {"startLine": 128, "snippet": {"text": "    PyObject *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_exc_set_object_fetch_impl", "fullyQualifiedName": "_testcapi_exc_set_object_fetch_impl", "decoratedName": "_testcapi_exc_set_object_fetch_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 371, "startColumn": 1, "endColumn": 23}, "contextRegion": {"startLine": 371, "snippet": {"text": "_testcapi_set_exc_info(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info", "fullyQualifiedName": "_testcapi_set_exc_info", "decoratedName": "_testcapi_set_exc_info", "kind": "function"}], "message": {"text": "entry to '_testcapi_set_exc_info'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 384, "startColumn": 20, "endColumn": 84}, "contextRegion": {"startLine": 384, "snippet": {"text": "    return_value = _testcapi_set_exc_info_impl(module, new_type, new_value, new_tb);\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info", "fullyQualifiedName": "_testcapi_set_exc_info", "decoratedName": "_testcapi_set_exc_info", "kind": "function"}], "message": {"text": "calling '_testcapi_set_exc_info_impl' from '_testcapi_set_exc_info'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 249, "startColumn": 1, "endColumn": 28}, "contextRegion": {"startLine": 249, "snippet": {"text": "_testcapi_set_exc_info_impl(PyObject *module, PyObject *new_type,\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "entry to '_testcapi_set_exc_info_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 15, "endColumn": 19}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 42, "endColumn": 47}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 42, "endColumn": 47}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 42, "endColumn": 47}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 371, "startColumn": 1, "endColumn": 23}, "contextRegion": {"startLine": 371, "snippet": {"text": "_testcapi_set_exc_info(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info", "fullyQualifiedName": "_testcapi_set_exc_info", "decoratedName": "_testcapi_set_exc_info", "kind": "function"}], "message": {"text": "entry to '_testcapi_set_exc_info'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 384, "startColumn": 20, "endColumn": 84}, "contextRegion": {"startLine": 384, "snippet": {"text": "    return_value = _testcapi_set_exc_info_impl(module, new_type, new_value, new_tb);\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info", "fullyQualifiedName": "_testcapi_set_exc_info", "decoratedName": "_testcapi_set_exc_info", "kind": "function"}], "message": {"text": "calling '_testcapi_set_exc_info_impl' from '_testcapi_set_exc_info'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 249, "startColumn": 1, "endColumn": 28}, "contextRegion": {"startLine": 249, "snippet": {"text": "_testcapi_set_exc_info_impl(PyObject *module, PyObject *new_type,\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "entry to '_testcapi_set_exc_info_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 42, "endColumn": 47}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 70, "endColumn": 72}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 70, "endColumn": 72}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-allocation-size", "taxa": [{"id": "131", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "allocated buffer size is not a multiple of the pointee's size"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 70, "endColumn": 72}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/util.h", "uriBaseId": "PWD"}, "region": {"startLine": 28, "startColumn": 19, "endColumn": 32}, "contextRegion": {"startLine": 28, "snippet": {"text": "static const char uninitialized[] = \"uninitialized\";\n"}}}, "message": {"text": "allocated here"}}, "nestingLevel": 0}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 371, "startColumn": 1, "endColumn": 23}, "contextRegion": {"startLine": 371, "snippet": {"text": "_testcapi_set_exc_info(PyObject *module, PyObject *const *args, Py_ssize_t nargs)\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info", "fullyQualifiedName": "_testcapi_set_exc_info", "decoratedName": "_testcapi_set_exc_info", "kind": "function"}], "message": {"text": "entry to '_testcapi_set_exc_info'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/clinic/exceptions.c.h", "uriBaseId": "PWD"}, "region": {"startLine": 384, "startColumn": 20, "endColumn": 84}, "contextRegion": {"startLine": 384, "snippet": {"text": "    return_value = _testcapi_set_exc_info_impl(module, new_type, new_value, new_tb);\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info", "fullyQualifiedName": "_testcapi_set_exc_info", "decoratedName": "_testcapi_set_exc_info", "kind": "function"}], "message": {"text": "calling '_testcapi_set_exc_info_impl' from '_testcapi_set_exc_info'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 249, "startColumn": 1, "endColumn": 28}, "contextRegion": {"startLine": 249, "snippet": {"text": "_testcapi_set_exc_info_impl(PyObject *module, PyObject *new_type,\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "entry to '_testcapi_set_exc_info_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testcapi/exceptions.c", "uriBaseId": "PWD"}, "region": {"startLine": 253, "startColumn": 70, "endColumn": 72}, "contextRegion": {"startLine": 253, "snippet": {"text": "    PyObject *type = UNINITIALIZED_PTR, *value = UNINITIALIZED_PTR, *tb = UNINITIALIZED_PTR;\n"}}}, "logicalLocations": [{"name": "_testcapi_set_exc_info_impl", "fullyQualifiedName": "_testcapi_set_exc_info_impl", "decoratedName": "_testcapi_set_exc_info_impl", "kind": "function"}], "message": {"text": "assigned to 'PyObject *' {aka 'struct _object *'} here; 'sizeof (PyObject {aka struct _object})' is '32'"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}]}]}
