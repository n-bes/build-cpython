{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "GNU C11", "fullName": "GNU C11 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)", "version": "13.2.0", "informationUri": "https://gcc.gnu.org/gcc-13/", "rules": [{"id": "-Wstringop-overflow=", "helpUri": "https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wstringop-overflow="}]}}, "invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}}, "artifacts": [{"location": {"uri": "./Include/cpython/pyatomic_gcc.h", "uriBaseId": "PWD"}, "contents": {"text": "// This is the implementation of Python atomic operations using GCC's built-in\n// functions that match the C+11 memory model. This implementation is preferred\n// for GCC compatible compilers, such as Clang. These functions are available\n// in GCC 4.8+ without needing to compile with --std=c11 or --std=gnu11.\n\n#ifndef Py_ATOMIC_GCC_H\n#  error \"this header file must not be included directly\"\n#endif\n\n\n// --- _Py_atomic_add --------------------------------------------------------\n\nstatic inline int\n_Py_atomic_add_int(int *obj, int value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int8_t\n_Py_atomic_add_int8(int8_t *obj, int8_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int16_t\n_Py_atomic_add_int16(int16_t *obj, int16_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int32_t\n_Py_atomic_add_int32(int32_t *obj, int32_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int64_t\n_Py_atomic_add_int64(int64_t *obj, int64_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline intptr_t\n_Py_atomic_add_intptr(intptr_t *obj, intptr_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline unsigned int\n_Py_atomic_add_uint(unsigned int *obj, unsigned int value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint8_t\n_Py_atomic_add_uint8(uint8_t *obj, uint8_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint16_t\n_Py_atomic_add_uint16(uint16_t *obj, uint16_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint32_t\n_Py_atomic_add_uint32(uint32_t *obj, uint32_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint64_t\n_Py_atomic_add_uint64(uint64_t *obj, uint64_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uintptr_t\n_Py_atomic_add_uintptr(uintptr_t *obj, uintptr_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline Py_ssize_t\n_Py_atomic_add_ssize(Py_ssize_t *obj, Py_ssize_t value)\n{ return __atomic_fetch_add(obj, value, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_compare_exchange -------------------------------------------\n\nstatic inline int\n_Py_atomic_compare_exchange_int(int *obj, int *expected, int desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_int8(int8_t *obj, int8_t *expected, int8_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_int16(int16_t *obj, int16_t *expected, int16_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_int32(int32_t *obj, int32_t *expected, int32_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_int64(int64_t *obj, int64_t *expected, int64_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_intptr(intptr_t *obj, intptr_t *expected, intptr_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_uint(unsigned int *obj, unsigned int *expected, unsigned int desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_uint8(uint8_t *obj, uint8_t *expected, uint8_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_uint16(uint16_t *obj, uint16_t *expected, uint16_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_uint32(uint32_t *obj, uint32_t *expected, uint32_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_uint64(uint64_t *obj, uint64_t *expected, uint64_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_uintptr(uintptr_t *obj, uintptr_t *expected, uintptr_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_ssize(Py_ssize_t *obj, Py_ssize_t *expected, Py_ssize_t desired)\n{ return __atomic_compare_exchange_n(obj, expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\nstatic inline int\n_Py_atomic_compare_exchange_ptr(void *obj, void *expected, void *desired)\n{ return __atomic_compare_exchange_n((void **)obj, (void **)expected, desired, 0,\n                                     __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_exchange ---------------------------------------------------\n\nstatic inline int\n_Py_atomic_exchange_int(int *obj, int value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int8_t\n_Py_atomic_exchange_int8(int8_t *obj, int8_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int16_t\n_Py_atomic_exchange_int16(int16_t *obj, int16_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int32_t\n_Py_atomic_exchange_int32(int32_t *obj, int32_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline int64_t\n_Py_atomic_exchange_int64(int64_t *obj, int64_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline intptr_t\n_Py_atomic_exchange_intptr(intptr_t *obj, intptr_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline unsigned int\n_Py_atomic_exchange_uint(unsigned int *obj, unsigned int value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint8_t\n_Py_atomic_exchange_uint8(uint8_t *obj, uint8_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint16_t\n_Py_atomic_exchange_uint16(uint16_t *obj, uint16_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint32_t\n_Py_atomic_exchange_uint32(uint32_t *obj, uint32_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint64_t\n_Py_atomic_exchange_uint64(uint64_t *obj, uint64_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uintptr_t\n_Py_atomic_exchange_uintptr(uintptr_t *obj, uintptr_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline Py_ssize_t\n_Py_atomic_exchange_ssize(Py_ssize_t *obj, Py_ssize_t value)\n{ return __atomic_exchange_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void *\n_Py_atomic_exchange_ptr(void *obj, void *value)\n{ return __atomic_exchange_n((void **)obj, value, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_and --------------------------------------------------------\n\nstatic inline uint8_t\n_Py_atomic_and_uint8(uint8_t *obj, uint8_t value)\n{ return __atomic_fetch_and(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint16_t\n_Py_atomic_and_uint16(uint16_t *obj, uint16_t value)\n{ return __atomic_fetch_and(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint32_t\n_Py_atomic_and_uint32(uint32_t *obj, uint32_t value)\n{ return __atomic_fetch_and(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint64_t\n_Py_atomic_and_uint64(uint64_t *obj, uint64_t value)\n{ return __atomic_fetch_and(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uintptr_t\n_Py_atomic_and_uintptr(uintptr_t *obj, uintptr_t value)\n{ return __atomic_fetch_and(obj, value, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_or ---------------------------------------------------------\n\nstatic inline uint8_t\n_Py_atomic_or_uint8(uint8_t *obj, uint8_t value)\n{ return __atomic_fetch_or(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint16_t\n_Py_atomic_or_uint16(uint16_t *obj, uint16_t value)\n{ return __atomic_fetch_or(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint32_t\n_Py_atomic_or_uint32(uint32_t *obj, uint32_t value)\n{ return __atomic_fetch_or(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uint64_t\n_Py_atomic_or_uint64(uint64_t *obj, uint64_t value)\n{ return __atomic_fetch_or(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline uintptr_t\n_Py_atomic_or_uintptr(uintptr_t *obj, uintptr_t value)\n{ return __atomic_fetch_or(obj, value, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_load -------------------------------------------------------\n\nstatic inline int\n_Py_atomic_load_int(const int *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline int8_t\n_Py_atomic_load_int8(const int8_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline int16_t\n_Py_atomic_load_int16(const int16_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline int32_t\n_Py_atomic_load_int32(const int32_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline int64_t\n_Py_atomic_load_int64(const int64_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline intptr_t\n_Py_atomic_load_intptr(const intptr_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline uint8_t\n_Py_atomic_load_uint8(const uint8_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline uint16_t\n_Py_atomic_load_uint16(const uint16_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline uint32_t\n_Py_atomic_load_uint32(const uint32_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline uint64_t\n_Py_atomic_load_uint64(const uint64_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline uintptr_t\n_Py_atomic_load_uintptr(const uintptr_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline unsigned int\n_Py_atomic_load_uint(const unsigned int *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline Py_ssize_t\n_Py_atomic_load_ssize(const Py_ssize_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_SEQ_CST); }\n\nstatic inline void *\n_Py_atomic_load_ptr(const void *obj)\n{ return (void *)__atomic_load_n((void * const *)obj, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_load_relaxed -----------------------------------------------\n\nstatic inline int\n_Py_atomic_load_int_relaxed(const int *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline int8_t\n_Py_atomic_load_int8_relaxed(const int8_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline int16_t\n_Py_atomic_load_int16_relaxed(const int16_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline int32_t\n_Py_atomic_load_int32_relaxed(const int32_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline int64_t\n_Py_atomic_load_int64_relaxed(const int64_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline intptr_t\n_Py_atomic_load_intptr_relaxed(const intptr_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline uint8_t\n_Py_atomic_load_uint8_relaxed(const uint8_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline uint16_t\n_Py_atomic_load_uint16_relaxed(const uint16_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline uint32_t\n_Py_atomic_load_uint32_relaxed(const uint32_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline uint64_t\n_Py_atomic_load_uint64_relaxed(const uint64_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline uintptr_t\n_Py_atomic_load_uintptr_relaxed(const uintptr_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline unsigned int\n_Py_atomic_load_uint_relaxed(const unsigned int *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline Py_ssize_t\n_Py_atomic_load_ssize_relaxed(const Py_ssize_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\nstatic inline void *\n_Py_atomic_load_ptr_relaxed(const void *obj)\n{ return (void *)__atomic_load_n((void * const *)obj, __ATOMIC_RELAXED); }\n\nstatic inline unsigned long long\n_Py_atomic_load_ullong_relaxed(const unsigned long long *obj)\n{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n\n\n// --- _Py_atomic_store ------------------------------------------------------\n\nstatic inline void\n_Py_atomic_store_int(int *obj, int value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_int8(int8_t *obj, int8_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_int16(int16_t *obj, int16_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_int32(int32_t *obj, int32_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_int64(int64_t *obj, int64_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_intptr(intptr_t *obj, intptr_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_uint8(uint8_t *obj, uint8_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_uint16(uint16_t *obj, uint16_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_uint32(uint32_t *obj, uint32_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_uint64(uint64_t *obj, uint64_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_uintptr(uintptr_t *obj, uintptr_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_uint(unsigned int *obj, unsigned int value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_ptr(void *obj, void *value)\n{ __atomic_store_n((void **)obj, value, __ATOMIC_SEQ_CST); }\n\nstatic inline void\n_Py_atomic_store_ssize(Py_ssize_t *obj, Py_ssize_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_SEQ_CST); }\n\n\n// --- _Py_atomic_store_relaxed ----------------------------------------------\n\nstatic inline void\n_Py_atomic_store_int_relaxed(int *obj, int value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_int8_relaxed(int8_t *obj, int8_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_int16_relaxed(int16_t *obj, int16_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_int32_relaxed(int32_t *obj, int32_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_int64_relaxed(int64_t *obj, int64_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_intptr_relaxed(intptr_t *obj, intptr_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_uint8_relaxed(uint8_t *obj, uint8_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_uint16_relaxed(uint16_t *obj, uint16_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_uint32_relaxed(uint32_t *obj, uint32_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_uint64_relaxed(uint64_t *obj, uint64_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_uintptr_relaxed(uintptr_t *obj, uintptr_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_uint_relaxed(unsigned int *obj, unsigned int value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_ptr_relaxed(void *obj, void *value)\n{ __atomic_store_n((void **)obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_ssize_relaxed(Py_ssize_t *obj, Py_ssize_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\nstatic inline void\n_Py_atomic_store_ullong_relaxed(unsigned long long *obj,\n                                unsigned long long value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELAXED); }\n\n\n// --- _Py_atomic_load_ptr_acquire / _Py_atomic_store_ptr_release ------------\n\nstatic inline void *\n_Py_atomic_load_ptr_acquire(const void *obj)\n{ return (void *)__atomic_load_n((void * const *)obj, __ATOMIC_ACQUIRE); }\n\nstatic inline uintptr_t\n_Py_atomic_load_uintptr_acquire(const uintptr_t *obj)\n{ return (uintptr_t)__atomic_load_n(obj, __ATOMIC_ACQUIRE); }\n\nstatic inline void\n_Py_atomic_store_ptr_release(void *obj, void *value)\n{ __atomic_store_n((void **)obj, value, __ATOMIC_RELEASE); }\n\nstatic inline void\n_Py_atomic_store_uintptr_release(uintptr_t *obj, uintptr_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELEASE); }\n\nstatic inline void\n_Py_atomic_store_int_release(int *obj, int value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELEASE); }\n\nstatic inline void\n_Py_atomic_store_ssize_release(Py_ssize_t *obj, Py_ssize_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELEASE); }\n\nstatic inline int\n_Py_atomic_load_int_acquire(const int *obj)\n{ return __atomic_load_n(obj, __ATOMIC_ACQUIRE); }\n\nstatic inline void\n_Py_atomic_store_uint32_release(uint32_t *obj, uint32_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELEASE); }\n\nstatic inline void\n_Py_atomic_store_uint64_release(uint64_t *obj, uint64_t value)\n{ __atomic_store_n(obj, value, __ATOMIC_RELEASE); }\n\nstatic inline uint64_t\n_Py_atomic_load_uint64_acquire(const uint64_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_ACQUIRE); }\n\nstatic inline uint32_t\n_Py_atomic_load_uint32_acquire(const uint32_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_ACQUIRE); }\n\nstatic inline Py_ssize_t\n_Py_atomic_load_ssize_acquire(const Py_ssize_t *obj)\n{ return __atomic_load_n(obj, __ATOMIC_ACQUIRE); }\n\n// --- _Py_atomic_fence ------------------------------------------------------\n\nstatic inline void\n_Py_atomic_fence_seq_cst(void)\n{ __atomic_thread_fence(__ATOMIC_SEQ_CST); }\n\n static inline void\n_Py_atomic_fence_acquire(void)\n{ __atomic_thread_fence(__ATOMIC_ACQUIRE); }\n\n static inline void\n_Py_atomic_fence_release(void)\n{ __atomic_thread_fence(__ATOMIC_RELEASE); }\n"}, "sourceLanguage": "c"}], "results": [{"ruleId": "-Wstringop-overflow=", "level": "warning", "message": {"text": "'__atomic_load_4' writing 4 bytes into a region of size 0 overflows the destination"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/pyatomic_gcc.h", "uriBaseId": "PWD"}, "region": {"startLine": 339, "startColumn": 10, "endColumn": 48}, "contextRegion": {"startLine": 339, "snippet": {"text": "{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n"}}}, "logicalLocations": [{"name": "framelocalsproxy_get", "fullyQualifiedName": "framelocalsproxy_get", "decoratedName": "framelocalsproxy_get", "kind": "function"}]}], "relatedLocations": [{"message": {"text": "destination object is likely at address zero"}}]}, {"ruleId": "-Wstringop-overflow=", "level": "warning", "message": {"text": "'__atomic_load_4' writing 4 bytes into a region of size 0 overflows the destination"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/pyatomic_gcc.h", "uriBaseId": "PWD"}, "region": {"startLine": 339, "startColumn": 10, "endColumn": 48}, "contextRegion": {"startLine": 339, "snippet": {"text": "{ return __atomic_load_n(obj, __ATOMIC_RELAXED); }\n"}}}, "logicalLocations": [{"name": "framelocalsproxy_setdefault", "fullyQualifiedName": "framelocalsproxy_setdefault", "decoratedName": "framelocalsproxy_setdefault", "kind": "function"}]}], "relatedLocations": [{"message": {"text": "destination object is likely at address zero"}}]}]}]}
