{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-null-dereference",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-dereference"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "476",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/476.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "./Modules/_ctypes/ctypes.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#if defined (__SVR4) && defined (__sun)\n#   include <alloca.h>\n#endif\n\n#include \"pycore_moduleobject.h\"  // _PyModule_GetState()\n#include \"pycore_typeobject.h\"    // _PyType_GetModuleState()\n\n#ifndef MS_WIN32\n#define max(a, b) ((a) > (b) ? (a) : (b))\n#define min(a, b) ((a) < (b) ? (a) : (b))\n\n#define PARAMFLAG_FIN 0x1\n#define PARAMFLAG_FOUT 0x2\n#define PARAMFLAG_FLCID 0x4\n#endif\n\n/*\n * bpo-13097: Max number of arguments CFuncPtr._argtypes_ and\n * _ctypes_callproc() will accept.\n *\n * This limit is enforced for the `alloca()` call in `_ctypes_callproc`,\n * to avoid allocating a massive buffer on the stack.\n */\n#ifndef CTYPES_MAX_ARGCOUNT\n  #ifdef __EMSCRIPTEN__\n    #define CTYPES_MAX_ARGCOUNT 1000\n  #else\n    #define CTYPES_MAX_ARGCOUNT 1024\n  #endif\n#endif\n\n#if defined(__has_builtin)\n#if __has_builtin(__builtin_available)\n#define HAVE_BUILTIN_AVAILABLE 1\n#endif\n#endif\n\n#ifdef MS_WIN32\n#include <Unknwn.h> // for IUnknown interface\n#endif\n\ntypedef struct {\n    PyTypeObject *DictRemover_Type;\n    PyTypeObject *PyCArg_Type;\n    PyTypeObject *PyCField_Type;\n    PyTypeObject *PyCThunk_Type;\n    PyTypeObject *StructParam_Type;\n    PyTypeObject *PyCType_Type;\n    PyTypeObject *PyCStructType_Type;\n    PyTypeObject *UnionType_Type;\n    PyTypeObject *PyCPointerType_Type;\n    PyTypeObject *PyCArrayType_Type;\n    PyTypeObject *PyCSimpleType_Type;\n    PyTypeObject *PyCFuncPtrType_Type;\n    PyTypeObject *PyCData_Type;\n    PyTypeObject *Struct_Type;\n    PyTypeObject *Union_Type;\n    PyTypeObject *PyCArray_Type;\n    PyTypeObject *Simple_Type;\n    PyTypeObject *PyCPointer_Type;\n    PyTypeObject *PyCFuncPtr_Type;\n#ifdef MS_WIN32\n    PyTypeObject *PyComError_Type;\n#endif\n    /* This dict maps ctypes types to POINTER types */\n    PyObject *_ctypes_ptrtype_cache;\n    /* a callable object used for unpickling:\n       strong reference to _ctypes._unpickle() function */\n    PyObject *_unpickle;\n    PyObject *array_cache;\n    PyObject *error_object_name;  // callproc.c\n    PyObject *PyExc_ArgError;\n    PyObject *swapped_suffix;\n} ctypes_state;\n\n\nextern struct PyModuleDef _ctypesmodule;\n\n\nstatic inline ctypes_state *\nget_module_state(PyObject *module)\n{\n    void *state = _PyModule_GetState(module);\n    assert(state != NULL);\n    return (ctypes_state *)state;\n}\n\nstatic inline ctypes_state *\nget_module_state_by_class(PyTypeObject *cls)\n{\n    ctypes_state *state = (ctypes_state *)_PyType_GetModuleState(cls);\n    assert(state != NULL);\n    return state;\n}\n\nstatic inline ctypes_state *\nget_module_state_by_def(PyTypeObject *cls)\n{\n    PyObject *mod = PyType_GetModuleByDef(cls, &_ctypesmodule);\n    assert(mod != NULL);\n    return get_module_state(mod);\n}\n\n\nextern PyType_Spec carg_spec;\nextern PyType_Spec cfield_spec;\nextern PyType_Spec cthunk_spec;\n\ntypedef struct tagPyCArgObject PyCArgObject;\ntypedef struct tagCDataObject CDataObject;\ntypedef PyObject *(* GETFUNC)(void *, Py_ssize_t size);\ntypedef PyObject *(* SETFUNC)(void *, PyObject *value, Py_ssize_t size);\ntypedef PyCArgObject *(* PARAMFUNC)(ctypes_state *st, CDataObject *obj);\n\n/* A default buffer in CDataObject, which can be used for small C types.  If\nthis buffer is too small, PyMem_Malloc will be called to create a larger one,\nand this one is not used.\n\nMaking CDataObject a variable size object would be a better solution, but more\ndifficult in the presence of PyCFuncPtrObject.  Maybe later.\n*/\nunion value {\n                char c[16];\n                short s;\n                int i;\n                long l;\n                float f;\n                double d;\n                long long ll;\n                long double D;\n};\n\n/*\n  Hm. Are there CDataObject's which do not need the b_objects member?  In\n  this case we probably should introduce b_flags to mark it as present...  If\n  b_objects is not present/unused b_length is unneeded as well.\n*/\n\nstruct tagCDataObject {\n    PyObject_HEAD\n    char *b_ptr;                /* pointer to memory block */\n    int  b_needsfree;           /* need _we_ free the memory? */\n    CDataObject *b_base;        /* pointer to base object or NULL */\n    Py_ssize_t b_size;          /* size of memory block in bytes */\n    Py_ssize_t b_length;        /* number of references we need */\n    Py_ssize_t b_index;         /* index of this object into base's\n                               b_object list */\n    PyObject *b_objects;        /* dictionary of references we need to keep, or Py_None */\n    union value b_value;\n};\n\ntypedef struct {\n    PyObject_VAR_HEAD\n    ffi_closure *pcl_write; /* the C callable, writeable */\n    void *pcl_exec;         /* the C callable, executable */\n    ffi_cif cif;\n    int flags;\n    PyObject *converters;\n    PyObject *callable;\n    PyObject *restype;\n    SETFUNC setfunc;\n    ffi_type *ffi_restype;\n    ffi_type *atypes[1];\n} CThunkObject;\n#define CThunk_CheckExact(st, v)        Py_IS_TYPE(v, st->PyCThunk_Type)\n\ntypedef struct {\n    /* First part identical to tagCDataObject */\n    PyObject_HEAD\n    char *b_ptr;                /* pointer to memory block */\n    int  b_needsfree;           /* need _we_ free the memory? */\n    CDataObject *b_base;        /* pointer to base object or NULL */\n    Py_ssize_t b_size;          /* size of memory block in bytes */\n    Py_ssize_t b_length;        /* number of references we need */\n    Py_ssize_t b_index;         /* index of this object into base's\n                                   b_object list */\n    PyObject *b_objects;        /* list of references we need to keep */\n    union value b_value;\n    /* end of tagCDataObject, additional fields follow */\n\n    CThunkObject *thunk;\n    PyObject *callable;\n\n    /* These two fields will override the ones in the type's stginfo if\n       they are set */\n    PyObject *converters;\n    PyObject *argtypes;\n    PyObject *restype;\n    PyObject *checker;\n    PyObject *errcheck;\n#ifdef MS_WIN32\n    int index;\n    GUID *iid;\n#endif\n    PyObject *paramflags;\n} PyCFuncPtrObject;\n\nextern int PyCStructUnionType_update_stginfo(PyObject *fields, PyObject *type, int isStruct);\nextern int PyType_stginfo(PyTypeObject *self, Py_ssize_t *psize, Py_ssize_t *palign, Py_ssize_t *plength);\nextern int PyObject_stginfo(PyObject *self, Py_ssize_t *psize, Py_ssize_t *palign, Py_ssize_t *plength);\n\n\n\n#define CDataObject_CheckExact(st, v)  Py_IS_TYPE((v), (st)->PyCData_Type)\n#define CDataObject_Check(st, v)       PyObject_TypeCheck((v), (st)->PyCData_Type)\n#define _CDataObject_HasExternalBuffer(v)  ((v)->b_ptr != (char *)&(v)->b_value)\n\n#define PyCSimpleTypeObject_CheckExact(st, v)  Py_IS_TYPE((v), (st)->PyCSimpleType_Type)\n#define PyCSimpleTypeObject_Check(st, v)       PyObject_TypeCheck((v), (st)->PyCSimpleType_Type)\n\nextern struct fielddesc *_ctypes_get_fielddesc(const char *fmt);\n\n\nextern PyObject *\nPyCField_FromDesc(ctypes_state *st, PyObject *desc, Py_ssize_t index,\n                Py_ssize_t *pfield_size, int bitsize, int *pbitofs,\n                Py_ssize_t *psize, Py_ssize_t *poffset, Py_ssize_t *palign,\n                int pack, int is_big_endian);\n\nextern PyObject *PyCData_AtAddress(ctypes_state *st, PyObject *type, void *buf);\nextern PyObject *PyCData_FromBytes(ctypes_state *st, PyObject *type, char *data, Py_ssize_t length);\n\n#define PyCArrayTypeObject_Check(st, v)   PyObject_TypeCheck((v), (st)->PyCArrayType_Type)\n#define ArrayObject_Check(st, v)          PyObject_TypeCheck((v), (st)->PyCArray_Type)\n#define PointerObject_Check(st, v)        PyObject_TypeCheck((v), (st)->PyCPointer_Type)\n#define PyCPointerTypeObject_Check(st, v) PyObject_TypeCheck((v), (st)->PyCPointerType_Type)\n#define PyCFuncPtrObject_Check(st,v)      PyObject_TypeCheck((v), (st)->PyCFuncPtr_Type)\n#define PyCFuncPtrTypeObject_Check(st, v) PyObject_TypeCheck((v), (st)->PyCFuncPtrType_Type)\n#define PyCStructTypeObject_Check(st, v)  PyObject_TypeCheck((v), (st)->PyCStructType_Type)\n\nextern PyObject *\nPyCArrayType_from_ctype(ctypes_state *st, PyObject *itemtype, Py_ssize_t length);\n\nextern PyMethodDef _ctypes_module_methods[];\n\nextern CThunkObject *_ctypes_alloc_callback(ctypes_state *st,\n                                           PyObject *callable,\n                                           PyObject *converters,\n                                           PyObject *restype,\n                                           int flags);\n/* a table entry describing a predefined ctypes type */\nstruct fielddesc {\n    char code;\n    SETFUNC setfunc;\n    GETFUNC getfunc;\n    ffi_type *pffi_type; /* always statically allocated */\n    SETFUNC setfunc_swapped;\n    GETFUNC getfunc_swapped;\n};\n\ntypedef struct {\n    PyObject_HEAD\n    Py_ssize_t offset;\n    Py_ssize_t size;\n    Py_ssize_t index;                   /* Index into CDataObject's\n                                       object array */\n    PyObject *proto;                    /* a type or NULL */\n    GETFUNC getfunc;                    /* getter function if proto is NULL */\n    SETFUNC setfunc;                    /* setter function if proto is NULL */\n    int anonymous;\n} CFieldObject;\n\n/****************************************************************\n StgInfo\n\n Since Python 3.13, ctypes-specific type information is stored in the\n corresponding type object, in a `StgInfo` struct accessed by the helpers\n below.\n Before that, each type's `tp_dict` was set to a dict *subclass* that included\n the fields that are now in StgInfo. The mechanism was called \"StgDict\"; a few\n references to that name might remain.\n\n Functions for accessing StgInfo are `static inline` for performance;\n see later in this file.\n\n ****************************************************************\n\n StgInfo fields\n\n setfunc and getfunc is only set for simple data types, it is copied from the\n corresponding fielddesc entry.  These are functions to set and get the value\n in a memory block.\n They should probably by used by other types as well.\n\n proto is only used for Pointer and Array types - it points to the item type\n object.\n\n Probably all the magic ctypes methods (like from_param) should have C\n callable wrappers in the StgInfo.  For simple data type, for example,\n the fielddesc table could have entries for C codec from_param functions or\n other methods as well, if a subtype overrides this method in Python at\n construction time, or assigns to it later, tp_setattro should update the\n StgInfo function to a generic one.\n\n Currently, PyCFuncPtr types have 'converters' and 'checker' entries in their\n type dict.  They are only used to cache attributes from other entries, which\n is wrong.\n\n One use case is the .value attribute that all simple types have.  But some\n complex structures, like VARIANT, represent a single value also, and should\n have this attribute.\n\n Another use case is a _check_retval_ function, which is called when a ctypes\n type is used as return type of a function to validate and compute the return\n value.\n\n Common ctypes protocol:\n\n  - setfunc: store a python value in a memory block\n  - getfunc: convert data from a memory block into a python value\n\n  - checkfunc: validate and convert a return value from a function call\n  - toparamfunc: convert a python value into a function argument\n\n*****************************************************************/\n\ntypedef struct {\n    int initialized;\n    Py_ssize_t size;            /* number of bytes */\n    Py_ssize_t align;           /* alignment requirements */\n    Py_ssize_t length;          /* number of fields */\n    ffi_type ffi_type_pointer;\n    PyObject *proto;            /* Only for Pointer/ArrayObject */\n    SETFUNC setfunc;            /* Only for simple objects */\n    GETFUNC getfunc;            /* Only for simple objects */\n    PARAMFUNC paramfunc;\n\n    /* Following fields only used by PyCFuncPtrType_Type instances */\n    PyObject *argtypes;         /* tuple of CDataObjects */\n    PyObject *converters;       /* tuple([t.from_param for t in argtypes]) */\n    PyObject *restype;          /* CDataObject or NULL */\n    PyObject *checker;\n    PyObject *module;\n    int flags;                  /* calling convention and such */\n\n    /* pep3118 fields, pointers need PyMem_Free */\n    char *format;\n    int ndim;\n    Py_ssize_t *shape;\n/*      Py_ssize_t *strides;    */ /* unused in ctypes */\n/*      Py_ssize_t *suboffsets; */ /* unused in ctypes */\n} StgInfo;\n\nextern int PyCStgInfo_clone(StgInfo *dst_info, StgInfo *src_info);\nextern void ctype_clear_stginfo(StgInfo *info);\n\ntypedef int(* PPROC)(void);\n\nPyObject *_ctypes_callproc(ctypes_state *st,\n                    PPROC pProc,\n                    PyObject *arguments,\n#ifdef MS_WIN32\n                    IUnknown *pIUnk,\n                    GUID *iid,\n#endif\n                    int flags,\n                    PyObject *argtypes,\n                    PyObject *restype,\n                    PyObject *checker);\n\n\n#define FUNCFLAG_STDCALL 0x0\n#define FUNCFLAG_CDECL   0x1\n#define FUNCFLAG_HRESULT 0x2\n#define FUNCFLAG_PYTHONAPI 0x4\n#define FUNCFLAG_USE_ERRNO 0x8\n#define FUNCFLAG_USE_LASTERROR 0x10\n\n#define TYPEFLAG_ISPOINTER 0x100\n#define TYPEFLAG_HASPOINTER 0x200\n#define TYPEFLAG_HASUNION 0x400\n#define TYPEFLAG_HASBITFIELD 0x800\n\n#define DICTFLAG_FINAL 0x1000\n\nstruct tagPyCArgObject {\n    PyObject_HEAD\n    ffi_type *pffi_type;\n    char tag;\n    union {\n        char c;\n        char b;\n        short h;\n        int i;\n        long l;\n        long long q;\n        long double D;\n        double d;\n        float f;\n        void *p;\n    } value;\n    PyObject *obj;\n    Py_ssize_t size; /* for the 'V' tag */\n};\n\n#define PyCArg_CheckExact(st, v)        Py_IS_TYPE(v, st->PyCArg_Type)\nextern PyCArgObject *PyCArgObject_new(ctypes_state *st);\n\nextern PyObject *\nPyCData_get(ctypes_state *st, PyObject *type, GETFUNC getfunc, PyObject *src,\n          Py_ssize_t index, Py_ssize_t size, char *ptr);\n\nextern int\nPyCData_set(ctypes_state *st,\n          PyObject *dst, PyObject *type, SETFUNC setfunc, PyObject *value,\n          Py_ssize_t index, Py_ssize_t size, char *ptr);\n\nextern void _ctypes_extend_error(PyObject *exc_class, const char *fmt, ...);\n\nstruct basespec {\n    CDataObject *base;\n    Py_ssize_t index;\n    char *adr;\n};\n\nextern char basespec_string[];\n\nextern ffi_type *_ctypes_get_ffi_type(ctypes_state *st, PyObject *obj);\n\nextern char *_ctypes_conversion_encoding;\nextern char *_ctypes_conversion_errors;\n\n\nextern void _ctypes_free_closure(void *);\nextern void *_ctypes_alloc_closure(void);\n\nextern PyObject *PyCData_FromBaseObj(ctypes_state *st, PyObject *type,\n                                     PyObject *base, Py_ssize_t index, char *adr);\nextern char *_ctypes_alloc_format_string(const char *prefix, const char *suffix);\nextern char *_ctypes_alloc_format_string_with_shape(int ndim,\n                                                const Py_ssize_t *shape,\n                                                const char *prefix, const char *suffix);\n\nextern int _ctypes_simple_instance(ctypes_state *st, PyObject *obj);\n\nPyObject *_ctypes_get_errobj(ctypes_state *st, int **pspace);\n\n#ifdef USING_MALLOC_CLOSURE_DOT_C\nvoid Py_ffi_closure_free(void *p);\nvoid *Py_ffi_closure_alloc(size_t size, void** codeloc);\n#else\n#define Py_ffi_closure_free ffi_closure_free\n#define Py_ffi_closure_alloc ffi_closure_alloc\n#endif\n\n\n/****************************************************************\n * Accessing StgInfo -- these are inlined for performance reasons.\n */\n\n// `PyStgInfo_From**` functions get a PyCTypeDataObject.\n// These return -1 on error, 0 if \"not found\", 1 on OK.\n// (Currently, these do not return -1 in practice. This might change\n// in the future.)\n\n//\n// Common helper:\nstatic inline int\n_stginfo_from_type(ctypes_state *state, PyTypeObject *type, StgInfo **result)\n{\n    *result = NULL;\n    if (!PyObject_IsInstance((PyObject *)type, (PyObject *)state->PyCType_Type)) {\n        // not a ctypes class.\n        return 0;\n    }\n    StgInfo *info = PyObject_GetTypeData((PyObject *)type, state->PyCType_Type);\n    assert(info != NULL);\n    if (!info->initialized) {\n        // StgInfo is not initialized. This happens in abstract classes.\n        return 0;\n    }\n    *result = info;\n    return 1;\n}\n// from a type:\nstatic inline int\nPyStgInfo_FromType(ctypes_state *state, PyObject *type, StgInfo **result)\n{\n    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n}\n// from an instance:\nstatic inline int\nPyStgInfo_FromObject(ctypes_state *state, PyObject *obj, StgInfo **result)\n{\n    return _stginfo_from_type(state, Py_TYPE(obj), result);\n}\n// from either a type or an instance:\nstatic inline int\nPyStgInfo_FromAny(ctypes_state *state, PyObject *obj, StgInfo **result)\n{\n    if (PyType_Check(obj)) {\n        return _stginfo_from_type(state, (PyTypeObject *)obj, result);\n    }\n    return _stginfo_from_type(state, Py_TYPE(obj), result);\n}\n\n/* A variant of PyStgInfo_FromType that doesn't need the state,\n * so it can be called from finalization functions when the module\n * state is torn down. Does no checks; cannot fail.\n * This inlines the current implementation PyObject_GetTypeData,\n * so it might break in the future.\n */\nstatic inline StgInfo *\n_PyStgInfo_FromType_NoState(PyObject *type)\n{\n    size_t type_basicsize =_Py_SIZE_ROUND_UP(PyType_Type.tp_basicsize,\n                                             ALIGNOF_MAX_ALIGN_T);\n    return (StgInfo *)((char *)type + type_basicsize);\n}\n\n// Initialize StgInfo on a newly created type\nstatic inline StgInfo *\nPyStgInfo_Init(ctypes_state *state, PyTypeObject *type)\n{\n    if (!PyObject_IsInstance((PyObject *)type, (PyObject *)state->PyCType_Type)) {\n        PyErr_Format(PyExc_SystemError,\n                     \"'%s' is not a ctypes class.\",\n                     type->tp_name);\n        return NULL;\n    }\n    StgInfo *info = PyObject_GetTypeData((PyObject *)type, state->PyCType_Type);\n    if (info->initialized) {\n        PyErr_Format(PyExc_SystemError,\n                     \"StgInfo of '%s' is already initialized.\",\n                     type->tp_name);\n        return NULL;\n    }\n    PyObject *module = PyType_GetModule(state->PyCType_Type);\n    if (!module) {\n        return NULL;\n    }\n    info->module = Py_NewRef(module);\n\n    info->initialized = 1;\n    return info;\n}\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "./Modules/_ctypes/cfield.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_BUILD_CORE_BUILTIN\n#  define Py_BUILD_CORE_MODULE 1\n#endif\n\n#include \"Python.h\"\n// windows.h must be included before pycore internal headers\n#ifdef MS_WIN32\n#  include <windows.h>\n#endif\n\n#include \"pycore_bitutils.h\"      // _Py_bswap32()\n#include \"pycore_call.h\"          // _PyObject_CallNoArgs()\n\n#include <ffi.h>\n#include \"ctypes.h\"\n\n\n#define CTYPES_CFIELD_CAPSULE_NAME_PYMEM \"_ctypes/cfield.c pymem\"\n\nstatic void pymem_destructor(PyObject *ptr)\n{\n    void *p = PyCapsule_GetPointer(ptr, CTYPES_CFIELD_CAPSULE_NAME_PYMEM);\n    if (p) {\n        PyMem_Free(p);\n    }\n}\n\n\n/******************************************************************/\n/*\n  PyCField_Type\n*/\n\n/*\n * Expects the size, index and offset for the current field in *psize and\n * *poffset, stores the total size so far in *psize, the offset for the next\n * field in *poffset, the alignment requirements for the current field in\n * *palign, and returns a field descriptor for this field.\n */\n/*\n * bitfields extension:\n * bitsize != 0: this is a bit field.\n * pbitofs points to the current bit offset, this will be updated.\n * prev_desc points to the type of the previous bitfield, if any.\n */\nPyObject *\nPyCField_FromDesc(ctypes_state *st, PyObject *desc, Py_ssize_t index,\n                Py_ssize_t *pfield_size, int bitsize, int *pbitofs,\n                Py_ssize_t *psize, Py_ssize_t *poffset, Py_ssize_t *palign,\n                int pack, int big_endian)\n{\n    CFieldObject *self;\n    PyObject *proto;\n    Py_ssize_t size, align;\n    SETFUNC setfunc = NULL;\n    GETFUNC getfunc = NULL;\n    int fieldtype;\n#define NO_BITFIELD 0\n#define NEW_BITFIELD 1\n#define CONT_BITFIELD 2\n#define EXPAND_BITFIELD 3\n\n    PyTypeObject *tp = st->PyCField_Type;\n    self = (CFieldObject *)tp->tp_alloc(tp, 0);\n    if (self == NULL)\n        return NULL;\n\n    StgInfo *info;\n    if (PyStgInfo_FromType(st, desc, &info) < 0) {\n        Py_DECREF(self);\n        return NULL;\n    }\n    if (!info) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"has no _stginfo_\");\n        Py_DECREF(self);\n        return NULL;\n    }\n\n    if (bitsize /* this is a bitfield request */\n        && *pfield_size /* we have a bitfield open */\n#ifdef MS_WIN32\n        /* MSVC, GCC with -mms-bitfields */\n        && info->size * 8 == *pfield_size\n#else\n        /* GCC */\n        && info->size * 8 <= *pfield_size\n#endif\n        && (*pbitofs + bitsize) <= *pfield_size) {\n        /* continue bit field */\n        fieldtype = CONT_BITFIELD;\n#ifndef MS_WIN32\n    } else if (bitsize /* this is a bitfield request */\n        && *pfield_size /* we have a bitfield open */\n        && info->size * 8 >= *pfield_size\n        && (*pbitofs + bitsize) <= info->size * 8) {\n        /* expand bit field */\n        fieldtype = EXPAND_BITFIELD;\n#endif\n    } else if (bitsize) {\n        /* start new bitfield */\n        fieldtype = NEW_BITFIELD;\n        *pbitofs = 0;\n        *pfield_size = info->size * 8;\n    } else {\n        /* not a bit field */\n        fieldtype = NO_BITFIELD;\n        *pbitofs = 0;\n        *pfield_size = 0;\n    }\n\n    size = info->size;\n    proto = desc;\n\n    /*  Field descriptors for 'c_char * n' are be scpecial cased to\n        return a Python string instead of an Array object instance...\n    */\n    if (PyCArrayTypeObject_Check(st, proto)) {\n        StgInfo *ainfo;\n        if (PyStgInfo_FromType(st, proto, &ainfo) < 0) {\n            Py_DECREF(self);\n            return NULL;\n        }\n\n        if (ainfo && ainfo->proto) {\n            StgInfo *iinfo;\n            if (PyStgInfo_FromType(st, ainfo->proto, &iinfo) < 0) {\n                Py_DECREF(self);\n                return NULL;\n            }\n            if (!iinfo) {\n                PyErr_SetString(PyExc_TypeError,\n                                \"has no _stginfo_\");\n                Py_DECREF(self);\n                return NULL;\n            }\n            if (iinfo->getfunc == _ctypes_get_fielddesc(\"c\")->getfunc) {\n                struct fielddesc *fd = _ctypes_get_fielddesc(\"s\");\n                getfunc = fd->getfunc;\n                setfunc = fd->setfunc;\n            }\n            if (iinfo->getfunc == _ctypes_get_fielddesc(\"u\")->getfunc) {\n                struct fielddesc *fd = _ctypes_get_fielddesc(\"U\");\n                getfunc = fd->getfunc;\n                setfunc = fd->setfunc;\n            }\n        }\n    }\n\n    self->setfunc = setfunc;\n    self->getfunc = getfunc;\n    self->index = index;\n\n    self->proto = Py_NewRef(proto);\n\n    switch (fieldtype) {\n    case NEW_BITFIELD:\n        if (big_endian)\n            self->size = (bitsize << 16) + *pfield_size - *pbitofs - bitsize;\n        else\n            self->size = (bitsize << 16) + *pbitofs;\n        *pbitofs = bitsize;\n        /* fall through */\n    case NO_BITFIELD:\n        if (pack)\n            align = min(pack, info->align);\n        else\n            align = info->align;\n        if (align && *poffset % align) {\n            Py_ssize_t delta = align - (*poffset % align);\n            *psize += delta;\n            *poffset += delta;\n        }\n\n        if (bitsize == 0)\n            self->size = size;\n        *psize += size;\n\n        self->offset = *poffset;\n        *poffset += size;\n\n        *palign = align;\n        break;\n\n    case EXPAND_BITFIELD:\n        *poffset += info->size - *pfield_size/8;\n        *psize += info->size - *pfield_size/8;\n\n        *pfield_size = info->size * 8;\n\n        if (big_endian)\n            self->size = (bitsize << 16) + *pfield_size - *pbitofs - bitsize;\n        else\n            self->size = (bitsize << 16) + *pbitofs;\n\n        self->offset = *poffset - size; /* poffset is already updated for the NEXT field */\n        *pbitofs += bitsize;\n        break;\n\n    case CONT_BITFIELD:\n        if (big_endian)\n            self->size = (bitsize << 16) + *pfield_size - *pbitofs - bitsize;\n        else\n            self->size = (bitsize << 16) + *pbitofs;\n\n        self->offset = *poffset - size; /* poffset is already updated for the NEXT field */\n        *pbitofs += bitsize;\n        break;\n    }\n\n    return (PyObject *)self;\n}\n\nstatic int\nPyCField_set(CFieldObject *self, PyObject *inst, PyObject *value)\n{\n    CDataObject *dst;\n    char *ptr;\n    ctypes_state *st = get_module_state_by_class(Py_TYPE(self));\n    if (!CDataObject_Check(st, inst)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"not a ctype instance\");\n        return -1;\n    }\n    dst = (CDataObject *)inst;\n    ptr = dst->b_ptr + self->offset;\n    if (value == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"can't delete attribute\");\n        return -1;\n    }\n    return PyCData_set(st, inst, self->proto, self->setfunc, value,\n                     self->index, self->size, ptr);\n}\n\nstatic PyObject *\nPyCField_get(CFieldObject *self, PyObject *inst, PyTypeObject *type)\n{\n    CDataObject *src;\n    if (inst == NULL) {\n        return Py_NewRef(self);\n    }\n    ctypes_state *st = get_module_state_by_class(Py_TYPE(self));\n    if (!CDataObject_Check(st, inst)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"not a ctype instance\");\n        return NULL;\n    }\n    src = (CDataObject *)inst;\n    return PyCData_get(st, self->proto, self->getfunc, inst,\n                     self->index, self->size, src->b_ptr + self->offset);\n}\n\nstatic PyObject *\nPyCField_get_offset(PyObject *self, void *data)\n{\n    return PyLong_FromSsize_t(((CFieldObject *)self)->offset);\n}\n\nstatic PyObject *\nPyCField_get_size(PyObject *self, void *data)\n{\n    return PyLong_FromSsize_t(((CFieldObject *)self)->size);\n}\n\nstatic PyGetSetDef PyCField_getset[] = {\n    { \"offset\", PyCField_get_offset, NULL, PyDoc_STR(\"offset in bytes of this field\") },\n    { \"size\", PyCField_get_size, NULL, PyDoc_STR(\"size in bytes of this field\") },\n    { NULL, NULL, NULL, NULL },\n};\n\nstatic int\nPyCField_traverse(CFieldObject *self, visitproc visit, void *arg)\n{\n    Py_VISIT(Py_TYPE(self));\n    Py_VISIT(self->proto);\n    return 0;\n}\n\nstatic int\nPyCField_clear(CFieldObject *self)\n{\n    Py_CLEAR(self->proto);\n    return 0;\n}\n\nstatic void\nPyCField_dealloc(PyObject *self)\n{\n    PyTypeObject *tp = Py_TYPE(self);\n    PyObject_GC_UnTrack(self);\n    (void)PyCField_clear((CFieldObject *)self);\n    Py_TYPE(self)->tp_free((PyObject *)self);\n    Py_DECREF(tp);\n}\n\nstatic PyObject *\nPyCField_repr(CFieldObject *self)\n{\n    PyObject *result;\n    Py_ssize_t bits = self->size >> 16;\n    Py_ssize_t size = self->size & 0xFFFF;\n    const char *name;\n\n    name = ((PyTypeObject *)self->proto)->tp_name;\n\n    if (bits)\n        result = PyUnicode_FromFormat(\n            \"<Field type=%s, ofs=%zd:%zd, bits=%zd>\",\n            name, self->offset, size, bits);\n    else\n        result = PyUnicode_FromFormat(\n            \"<Field type=%s, ofs=%zd, size=%zd>\",\n            name, self->offset, size);\n    return result;\n}\n\nstatic PyType_Slot cfield_slots[] = {\n    {Py_tp_dealloc, PyCField_dealloc},\n    {Py_tp_repr, PyCField_repr},\n    {Py_tp_doc, (void *)PyDoc_STR(\"Structure/Union member\")},\n    {Py_tp_traverse, PyCField_traverse},\n    {Py_tp_clear, PyCField_clear},\n    {Py_tp_getset, PyCField_getset},\n    {Py_tp_descr_get, PyCField_get},\n    {Py_tp_descr_set, PyCField_set},\n    {0, NULL},\n};\n\nPyType_Spec cfield_spec = {\n    .name = \"_ctypes.CField\",\n    .basicsize = sizeof(CFieldObject),\n    .flags = (Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |\n              Py_TPFLAGS_IMMUTABLETYPE | Py_TPFLAGS_DISALLOW_INSTANTIATION),\n    .slots = cfield_slots,\n};\n\n\n/******************************************************************/\n/*\n  Accessor functions\n*/\n\n/* Derived from Modules/structmodule.c:\n   Helper routine to get a Python integer and raise the appropriate error\n   if it isn't one */\n\nstatic int\nget_long(PyObject *v, long *p)\n{\n    long x = PyLong_AsUnsignedLongMask(v);\n    if (x == -1 && PyErr_Occurred())\n        return -1;\n    *p = x;\n    return 0;\n}\n\n/* Same, but handling unsigned long */\n\nstatic int\nget_ulong(PyObject *v, unsigned long *p)\n{\n    unsigned long x = PyLong_AsUnsignedLongMask(v);\n    if (x == (unsigned long)-1 && PyErr_Occurred())\n        return -1;\n    *p = x;\n    return 0;\n}\n\n/* Same, but handling native long long. */\n\nstatic int\nget_longlong(PyObject *v, long long *p)\n{\n    long long x = PyLong_AsUnsignedLongLongMask(v);\n    if (x == -1 && PyErr_Occurred())\n        return -1;\n    *p = x;\n    return 0;\n}\n\n/* Same, but handling native unsigned long long. */\n\nstatic int\nget_ulonglong(PyObject *v, unsigned long long *p)\n{\n    unsigned long long x = PyLong_AsUnsignedLongLongMask(v);\n    if (x == (unsigned long long)-1 && PyErr_Occurred())\n        return -1;\n    *p = x;\n    return 0;\n}\n\n/*****************************************************************\n * Integer fields, with bitfield support\n */\n\n/* how to decode the size field, for integer get/set functions */\n#define LOW_BIT(x)  ((x) & 0xFFFF)\n#define NUM_BITS(x) ((x) >> 16)\n\n/* Doesn't work if NUM_BITS(size) == 0, but it never happens in SET() call. */\n#define BIT_MASK(type, size) (((((type)1 << (NUM_BITS(size) - 1)) - 1) << 1) + 1)\n\n/* This macro CHANGES the first parameter IN PLACE. For proper sign handling,\n   we must first shift left, then right.\n*/\n#define GET_BITFIELD(v, size)                                           \\\n    if (NUM_BITS(size)) {                                               \\\n        v <<= (sizeof(v)*8 - LOW_BIT(size) - NUM_BITS(size));           \\\n        v >>= (sizeof(v)*8 - NUM_BITS(size));                           \\\n    }\n\n/* This macro RETURNS the first parameter with the bit field CHANGED. */\n#define SET(type, x, v, size)                                                 \\\n    (NUM_BITS(size) ?                                                   \\\n     ( ( (type)x & ~(BIT_MASK(type, size) << LOW_BIT(size)) ) | ( ((type)v & BIT_MASK(type, size)) << LOW_BIT(size) ) ) \\\n     : (type)v)\n\n#if SIZEOF_SHORT == 2\n#  define SWAP_SHORT _Py_bswap16\n#else\n#  error \"unsupported short size\"\n#endif\n\n#if SIZEOF_INT == 4\n#  define SWAP_INT _Py_bswap32\n#else\n#  error \"unsupported int size\"\n#endif\n\n#if SIZEOF_LONG == 4\n#  define SWAP_LONG _Py_bswap32\n#elif SIZEOF_LONG == 8\n#  define SWAP_LONG _Py_bswap64\n#else\n#  error \"unsupported long size\"\n#endif\n\n#if SIZEOF_LONG_LONG == 8\n#  define SWAP_LONG_LONG _Py_bswap64\n#else\n#  error \"unsupported long long size\"\n#endif\n\n/*****************************************************************\n * The setter methods return an object which must be kept alive, to keep the\n * data valid which has been stored in the memory block.  The ctypes object\n * instance inserts this object into its 'b_objects' list.\n *\n * For simple Python types like integers or characters, there is nothing that\n * has to been kept alive, so Py_None is returned in these cases.  But this\n * makes inspecting the 'b_objects' list, which is accessible from Python for\n * debugging, less useful.\n *\n * So, defining the _CTYPES_DEBUG_KEEP symbol returns the original value\n * instead of Py_None.\n */\n\n#ifdef _CTYPES_DEBUG_KEEP\n#define _RET(x) Py_INCREF(x); return x\n#else\n#define _RET(X) Py_RETURN_NONE\n#endif\n\n/*****************************************************************\n * integer accessor methods, supporting bit fields\n */\n\nstatic PyObject *\nb_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    if (get_long(value, &val) < 0)\n        return NULL;\n    *(signed char *)ptr = SET(signed char, *(signed char *)ptr, val, size);\n    _RET(value);\n}\n\n\nstatic PyObject *\nb_get(void *ptr, Py_ssize_t size)\n{\n    signed char val = *(signed char *)ptr;\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\nB_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    if (get_ulong(value, &val) < 0)\n        return NULL;\n    *(unsigned char *)ptr = SET(unsigned char, *(unsigned char*)ptr, val, size);\n    _RET(value);\n}\n\n\nstatic PyObject *\nB_get(void *ptr, Py_ssize_t size)\n{\n    unsigned char val = *(unsigned char *)ptr;\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\nh_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    short x;\n    if (get_long(value, &val) < 0)\n        return NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(short, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\n\nstatic PyObject *\nh_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    short field;\n    if (get_long(value, &val) < 0) {\n        return NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_SHORT(field);\n    field = SET(short, field, val, size);\n    field = SWAP_SHORT(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\nstatic PyObject *\nh_get(void *ptr, Py_ssize_t size)\n{\n    short val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong((long)val);\n}\n\nstatic PyObject *\nh_get_sw(void *ptr, Py_ssize_t size)\n{\n    short val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_SHORT(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\nH_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    unsigned short x;\n    if (get_ulong(value, &val) < 0)\n        return NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(unsigned short, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nH_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    unsigned short field;\n    if (get_ulong(value, &val) < 0) {\n        return NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_SHORT(field);\n    field = SET(unsigned short, field, val, size);\n    field = SWAP_SHORT(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\n\nstatic PyObject *\nH_get(void *ptr, Py_ssize_t size)\n{\n    unsigned short val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\nH_get_sw(void *ptr, Py_ssize_t size)\n{\n    unsigned short val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_SHORT(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\ni_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    int x;\n    if (get_long(value, &val) < 0)\n        return NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(int, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\ni_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    int field;\n    if (get_long(value, &val) < 0) {\n        return NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_INT(field);\n    field = SET(int, field, val, size);\n    field = SWAP_INT(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\n\nstatic PyObject *\ni_get(void *ptr, Py_ssize_t size)\n{\n    int val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\ni_get_sw(void *ptr, Py_ssize_t size)\n{\n    int val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_INT(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\n#ifndef MS_WIN32\n/* http://msdn.microsoft.com/en-us/library/cc237864.aspx */\n#define VARIANT_FALSE 0x0000\n#define VARIANT_TRUE 0xFFFF\n#endif\n/* short BOOL - VARIANT_BOOL */\nstatic PyObject *\nvBOOL_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    switch (PyObject_IsTrue(value)) {\n    case -1:\n        return NULL;\n    case 0:\n        *(short int *)ptr = VARIANT_FALSE;\n        _RET(value);\n    default:\n        *(short int *)ptr = VARIANT_TRUE;\n        _RET(value);\n    }\n}\n\nstatic PyObject *\nvBOOL_get(void *ptr, Py_ssize_t size)\n{\n    return PyBool_FromLong((long)*(short int *)ptr);\n}\n\nstatic PyObject *\nbool_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    switch (PyObject_IsTrue(value)) {\n    case -1:\n        return NULL;\n    case 0:\n        *(_Bool *)ptr = 0;\n        _RET(value);\n    default:\n        *(_Bool *)ptr = 1;\n        _RET(value);\n    }\n}\n\nstatic PyObject *\nbool_get(void *ptr, Py_ssize_t size)\n{\n    return PyBool_FromLong((long)*(_Bool *)ptr);\n}\n\nstatic PyObject *\nI_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    unsigned int x;\n    if (get_ulong(value, &val) < 0)\n        return  NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(unsigned int, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nI_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    unsigned int field;\n    if (get_ulong(value, &val) < 0) {\n        return  NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_INT(field);\n    field = SET(unsigned int, field, (unsigned int)val, size);\n    field = SWAP_INT(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\n\nstatic PyObject *\nI_get(void *ptr, Py_ssize_t size)\n{\n    unsigned int val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromUnsignedLong(val);\n}\n\nstatic PyObject *\nI_get_sw(void *ptr, Py_ssize_t size)\n{\n    unsigned int val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_INT(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromUnsignedLong(val);\n}\n\nstatic PyObject *\nl_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    long x;\n    if (get_long(value, &val) < 0)\n        return NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(long, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nl_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long val;\n    long field;\n    if (get_long(value, &val) < 0) {\n        return NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_LONG(field);\n    field = SET(long, field, val, size);\n    field = SWAP_LONG(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\n\nstatic PyObject *\nl_get(void *ptr, Py_ssize_t size)\n{\n    long val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\nl_get_sw(void *ptr, Py_ssize_t size)\n{\n    long val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_LONG(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromLong(val);\n}\n\nstatic PyObject *\nL_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    unsigned long x;\n    if (get_ulong(value, &val) < 0)\n        return  NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(unsigned long, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nL_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long val;\n    unsigned long field;\n    if (get_ulong(value, &val) < 0) {\n        return  NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_LONG(field);\n    field = SET(unsigned long, field, val, size);\n    field = SWAP_LONG(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\n\nstatic PyObject *\nL_get(void *ptr, Py_ssize_t size)\n{\n    unsigned long val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromUnsignedLong(val);\n}\n\nstatic PyObject *\nL_get_sw(void *ptr, Py_ssize_t size)\n{\n    unsigned long val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_LONG(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromUnsignedLong(val);\n}\n\nstatic PyObject *\nq_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long long val;\n    long long x;\n    if (get_longlong(value, &val) < 0)\n        return NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(long long, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nq_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long long val;\n    long long field;\n    if (get_longlong(value, &val) < 0) {\n        return NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_LONG_LONG(field);\n    field = SET(long long, field, val, size);\n    field = SWAP_LONG_LONG(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\nstatic PyObject *\nq_get(void *ptr, Py_ssize_t size)\n{\n    long long val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromLongLong(val);\n}\n\nstatic PyObject *\nq_get_sw(void *ptr, Py_ssize_t size)\n{\n    long long val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_LONG_LONG(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromLongLong(val);\n}\n\nstatic PyObject *\nQ_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long long val;\n    unsigned long long x;\n    if (get_ulonglong(value, &val) < 0)\n        return NULL;\n    memcpy(&x, ptr, sizeof(x));\n    x = SET(long long, x, val, size);\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nQ_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    unsigned long long val;\n    unsigned long long field;\n    if (get_ulonglong(value, &val) < 0) {\n        return NULL;\n    }\n    memcpy(&field, ptr, sizeof(field));\n    field = SWAP_LONG_LONG(field);\n    field = SET(unsigned long long, field, val, size);\n    field = SWAP_LONG_LONG(field);\n    memcpy(ptr, &field, sizeof(field));\n    _RET(value);\n}\n\nstatic PyObject *\nQ_get(void *ptr, Py_ssize_t size)\n{\n    unsigned long long val;\n    memcpy(&val, ptr, sizeof(val));\n    GET_BITFIELD(val, size);\n    return PyLong_FromUnsignedLongLong(val);\n}\n\nstatic PyObject *\nQ_get_sw(void *ptr, Py_ssize_t size)\n{\n    unsigned long long val;\n    memcpy(&val, ptr, sizeof(val));\n    val = SWAP_LONG_LONG(val);\n    GET_BITFIELD(val, size);\n    return PyLong_FromUnsignedLongLong(val);\n}\n\n/*****************************************************************\n * non-integer accessor methods, not supporting bit fields\n */\n\n\nstatic PyObject *\ng_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    long double x;\n\n    x = PyFloat_AsDouble(value);\n    if (x == -1 && PyErr_Occurred())\n        return NULL;\n    memcpy(ptr, &x, sizeof(long double));\n    _RET(value);\n}\n\nstatic PyObject *\ng_get(void *ptr, Py_ssize_t size)\n{\n    long double val;\n    memcpy(&val, ptr, sizeof(long double));\n    return PyFloat_FromDouble(val);\n}\n\nstatic PyObject *\nd_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    double x;\n\n    x = PyFloat_AsDouble(value);\n    if (x == -1 && PyErr_Occurred())\n        return NULL;\n    memcpy(ptr, &x, sizeof(double));\n    _RET(value);\n}\n\nstatic PyObject *\nd_get(void *ptr, Py_ssize_t size)\n{\n    double val;\n    memcpy(&val, ptr, sizeof(val));\n    return PyFloat_FromDouble(val);\n}\n\nstatic PyObject *\nd_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    double x;\n\n    x = PyFloat_AsDouble(value);\n    if (x == -1 && PyErr_Occurred())\n        return NULL;\n#ifdef WORDS_BIGENDIAN\n    if (PyFloat_Pack8(x, ptr, 1))\n        return NULL;\n#else\n    if (PyFloat_Pack8(x, ptr, 0))\n        return NULL;\n#endif\n    _RET(value);\n}\n\nstatic PyObject *\nd_get_sw(void *ptr, Py_ssize_t size)\n{\n#ifdef WORDS_BIGENDIAN\n    return PyFloat_FromDouble(PyFloat_Unpack8(ptr, 1));\n#else\n    return PyFloat_FromDouble(PyFloat_Unpack8(ptr, 0));\n#endif\n}\n\nstatic PyObject *\nf_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    float x;\n\n    x = (float)PyFloat_AsDouble(value);\n    if (x == -1 && PyErr_Occurred())\n        return NULL;\n    memcpy(ptr, &x, sizeof(x));\n    _RET(value);\n}\n\nstatic PyObject *\nf_get(void *ptr, Py_ssize_t size)\n{\n    float val;\n    memcpy(&val, ptr, sizeof(val));\n    return PyFloat_FromDouble(val);\n}\n\nstatic PyObject *\nf_set_sw(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    float x;\n\n    x = (float)PyFloat_AsDouble(value);\n    if (x == -1 && PyErr_Occurred())\n        return NULL;\n#ifdef WORDS_BIGENDIAN\n    if (PyFloat_Pack4(x, ptr, 1))\n        return NULL;\n#else\n    if (PyFloat_Pack4(x, ptr, 0))\n        return NULL;\n#endif\n    _RET(value);\n}\n\nstatic PyObject *\nf_get_sw(void *ptr, Py_ssize_t size)\n{\n#ifdef WORDS_BIGENDIAN\n    return PyFloat_FromDouble(PyFloat_Unpack4(ptr, 1));\n#else\n    return PyFloat_FromDouble(PyFloat_Unpack4(ptr, 0));\n#endif\n}\n\n/*\n  py_object refcounts:\n\n  1. If we have a py_object instance, O_get must Py_INCREF the returned\n  object, of course.  If O_get is called from a function result, no py_object\n  instance is created - so callproc.c::GetResult has to call Py_DECREF.\n\n  2. The memory block in py_object owns a refcount.  So, py_object must call\n  Py_DECREF on destruction.  Maybe only when b_needsfree is non-zero.\n*/\nstatic PyObject *\nO_get(void *ptr, Py_ssize_t size)\n{\n    PyObject *ob = *(PyObject **)ptr;\n    if (ob == NULL) {\n        if (!PyErr_Occurred())\n            /* Set an error if not yet set */\n            PyErr_SetString(PyExc_ValueError,\n                            \"PyObject is NULL\");\n        return NULL;\n    }\n    return Py_NewRef(ob);\n}\n\nstatic PyObject *\nO_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    /* Hm, does the memory block need it's own refcount or not? */\n    *(PyObject **)ptr = value;\n    return Py_NewRef(value);\n}\n\n\nstatic PyObject *\nc_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    if (PyBytes_Check(value) && PyBytes_GET_SIZE(value) == 1) {\n        *(char *)ptr = PyBytes_AS_STRING(value)[0];\n        _RET(value);\n    }\n    if (PyByteArray_Check(value) && PyByteArray_GET_SIZE(value) == 1) {\n        *(char *)ptr = PyByteArray_AS_STRING(value)[0];\n        _RET(value);\n    }\n    if (PyLong_Check(value))\n    {\n        long longval = PyLong_AsLong(value);\n        if (longval < 0 || longval >= 256)\n            goto error;\n        *(char *)ptr = (char)longval;\n        _RET(value);\n    }\n  error:\n    PyErr_Format(PyExc_TypeError,\n                 \"one character bytes, bytearray or integer expected\");\n    return NULL;\n}\n\n\nstatic PyObject *\nc_get(void *ptr, Py_ssize_t size)\n{\n    return PyBytes_FromStringAndSize((char *)ptr, 1);\n}\n\n/* u - a single wchar_t character */\nstatic PyObject *\nu_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    Py_ssize_t len;\n    wchar_t chars[2];\n    if (!PyUnicode_Check(value)) {\n        PyErr_Format(PyExc_TypeError,\n                        \"unicode string expected instead of %s instance\",\n                        Py_TYPE(value)->tp_name);\n        return NULL;\n    } else\n        Py_INCREF(value);\n\n    len = PyUnicode_AsWideChar(value, chars, 2);\n    if (len != 1) {\n        Py_DECREF(value);\n        PyErr_SetString(PyExc_TypeError,\n                        \"one character unicode string expected\");\n        return NULL;\n    }\n\n    *(wchar_t *)ptr = chars[0];\n    Py_DECREF(value);\n\n    _RET(value);\n}\n\n\nstatic PyObject *\nu_get(void *ptr, Py_ssize_t size)\n{\n    return PyUnicode_FromWideChar((wchar_t *)ptr, 1);\n}\n\n/* U - a unicode string */\nstatic PyObject *\nU_get(void *ptr, Py_ssize_t size)\n{\n    Py_ssize_t len;\n    wchar_t *p;\n\n    size /= sizeof(wchar_t); /* we count character units here, not bytes */\n\n    /* We need 'result' to be able to count the characters with wcslen,\n       since ptr may not be NUL terminated.  If the length is smaller (if\n       it was actually NUL terminated, we construct a new one and throw\n       away the result.\n    */\n    /* chop off at the first NUL character, if any. */\n    p = (wchar_t*)ptr;\n    for (len = 0; len < size; ++len) {\n        if (!p[len])\n            break;\n    }\n\n    return PyUnicode_FromWideChar((wchar_t *)ptr, len);\n}\n\nstatic PyObject *\nU_set(void *ptr, PyObject *value, Py_ssize_t length)\n{\n    /* It's easier to calculate in characters than in bytes */\n    length /= sizeof(wchar_t);\n\n    if (!PyUnicode_Check(value)) {\n        PyErr_Format(PyExc_TypeError,\n                        \"unicode string expected instead of %s instance\",\n                        Py_TYPE(value)->tp_name);\n        return NULL;\n    }\n\n    Py_ssize_t size = PyUnicode_AsWideChar(value, NULL, 0);\n    if (size < 0) {\n        return NULL;\n    }\n    // PyUnicode_AsWideChar() returns number of wchars including trailing null byte,\n    // when it is called with NULL.\n    size--;\n    assert(size >= 0);\n    if (size > length) {\n        PyErr_Format(PyExc_ValueError,\n                     \"string too long (%zd, maximum length %zd)\",\n                     size, length);\n        return NULL;\n    }\n    if (PyUnicode_AsWideChar(value, (wchar_t *)ptr, length) == -1) {\n        return NULL;\n    }\n\n    return Py_NewRef(value);\n}\n\n\nstatic PyObject *\ns_get(void *ptr, Py_ssize_t size)\n{\n    Py_ssize_t i;\n    char *p;\n\n    p = (char *)ptr;\n    for (i = 0; i < size; ++i) {\n        if (*p++ == '\\0')\n            break;\n    }\n\n    return PyBytes_FromStringAndSize((char *)ptr, (Py_ssize_t)i);\n}\n\nstatic PyObject *\ns_set(void *ptr, PyObject *value, Py_ssize_t length)\n{\n    const char *data;\n    Py_ssize_t size;\n\n    if(!PyBytes_Check(value)) {\n        PyErr_Format(PyExc_TypeError,\n                     \"expected bytes, %s found\",\n                     Py_TYPE(value)->tp_name);\n        return NULL;\n    }\n\n    data = PyBytes_AS_STRING(value);\n    // bpo-39593: Use strlen() to truncate the string at the first null character.\n    size = strlen(data);\n\n    if (size < length) {\n        /* This will copy the terminating NUL character\n         * if there is space for it.\n         */\n        ++size;\n    } else if (size > length) {\n        PyErr_Format(PyExc_ValueError,\n                     \"bytes too long (%zd, maximum length %zd)\",\n                     size, length);\n        return NULL;\n    }\n    /* Also copy the terminating NUL character if there is space */\n    memcpy((char *)ptr, data, size);\n\n    _RET(value);\n}\n\nstatic PyObject *\nz_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    if (value == Py_None) {\n        *(char **)ptr = NULL;\n        return Py_NewRef(value);\n    }\n    if (PyBytes_Check(value)) {\n        *(const char **)ptr = PyBytes_AsString(value);\n        return Py_NewRef(value);\n    } else if (PyLong_Check(value)) {\n#if SIZEOF_VOID_P == SIZEOF_LONG_LONG\n        *(char **)ptr = (char *)PyLong_AsUnsignedLongLongMask(value);\n#else\n        *(char **)ptr = (char *)PyLong_AsUnsignedLongMask(value);\n#endif\n        _RET(value);\n    }\n    PyErr_Format(PyExc_TypeError,\n                 \"bytes or integer address expected instead of %s instance\",\n                 Py_TYPE(value)->tp_name);\n    return NULL;\n}\n\nstatic PyObject *\nz_get(void *ptr, Py_ssize_t size)\n{\n    /* XXX What about invalid pointers ??? */\n    if (*(void **)ptr) {\n        return PyBytes_FromStringAndSize(*(char **)ptr,\n                                         strlen(*(char **)ptr));\n    } else {\n        Py_RETURN_NONE;\n    }\n}\n\nstatic PyObject *\nZ_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    PyObject *keep;\n    wchar_t *buffer;\n    Py_ssize_t bsize;\n\n    if (value == Py_None) {\n        *(wchar_t **)ptr = NULL;\n        return Py_NewRef(value);\n    }\n    if (PyLong_Check(value)) {\n#if SIZEOF_VOID_P == SIZEOF_LONG_LONG\n        *(wchar_t **)ptr = (wchar_t *)PyLong_AsUnsignedLongLongMask(value);\n#else\n        *(wchar_t **)ptr = (wchar_t *)PyLong_AsUnsignedLongMask(value);\n#endif\n        Py_RETURN_NONE;\n    }\n    if (!PyUnicode_Check(value)) {\n        PyErr_Format(PyExc_TypeError,\n                     \"unicode string or integer address expected instead of %s instance\",\n                     Py_TYPE(value)->tp_name);\n        return NULL;\n    }\n\n    /* We must create a wchar_t* buffer from the unicode object,\n       and keep it alive */\n    buffer = PyUnicode_AsWideCharString(value, &bsize);\n    if (!buffer)\n        return NULL;\n    keep = PyCapsule_New(buffer, CTYPES_CFIELD_CAPSULE_NAME_PYMEM, pymem_destructor);\n    if (!keep) {\n        PyMem_Free(buffer);\n        return NULL;\n    }\n    *(wchar_t **)ptr = buffer;\n    return keep;\n}\n\nstatic PyObject *\nZ_get(void *ptr, Py_ssize_t size)\n{\n    wchar_t *p;\n    p = *(wchar_t **)ptr;\n    if (p) {\n        return PyUnicode_FromWideChar(p, wcslen(p));\n    } else {\n        Py_RETURN_NONE;\n    }\n}\n\n\n#ifdef MS_WIN32\nstatic PyObject *\nBSTR_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    BSTR bstr;\n\n    /* convert value into a PyUnicodeObject or NULL */\n    if (Py_None == value) {\n        value = NULL;\n    } else if (!PyUnicode_Check(value)) {\n        PyErr_Format(PyExc_TypeError,\n                        \"unicode string expected instead of %s instance\",\n                        Py_TYPE(value)->tp_name);\n        return NULL;\n    }\n\n    /* create a BSTR from value */\n    if (value) {\n        Py_ssize_t wsize;\n        wchar_t *wvalue = PyUnicode_AsWideCharString(value, &wsize);\n        if (wvalue == NULL) {\n            return NULL;\n        }\n        if ((unsigned) wsize != wsize) {\n            PyErr_SetString(PyExc_ValueError, \"String too long for BSTR\");\n            PyMem_Free(wvalue);\n            return NULL;\n        }\n        bstr = SysAllocStringLen(wvalue, (unsigned)wsize);\n        PyMem_Free(wvalue);\n    } else\n        bstr = NULL;\n\n    /* free the previous contents, if any */\n    if (*(BSTR *)ptr)\n        SysFreeString(*(BSTR *)ptr);\n\n    /* and store it */\n    *(BSTR *)ptr = bstr;\n\n    /* We don't need to keep any other object */\n    _RET(value);\n}\n\n\nstatic PyObject *\nBSTR_get(void *ptr, Py_ssize_t size)\n{\n    BSTR p;\n    p = *(BSTR *)ptr;\n    if (p)\n        return PyUnicode_FromWideChar(p, SysStringLen(p));\n    else {\n        /* Hm, it seems NULL pointer and zero length string are the\n           same in BSTR, see Don Box, p 81\n        */\n        Py_RETURN_NONE;\n    }\n}\n#endif\n\nstatic PyObject *\nP_set(void *ptr, PyObject *value, Py_ssize_t size)\n{\n    void *v;\n    if (value == Py_None) {\n        *(void **)ptr = NULL;\n        _RET(value);\n    }\n\n    if (!PyLong_Check(value)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"cannot be converted to pointer\");\n        return NULL;\n    }\n\n#if SIZEOF_VOID_P <= SIZEOF_LONG\n    v = (void *)PyLong_AsUnsignedLongMask(value);\n#else\n#if SIZEOF_LONG_LONG < SIZEOF_VOID_P\n#   error \"PyLong_AsVoidPtr: sizeof(long long) < sizeof(void*)\"\n#endif\n    v = (void *)PyLong_AsUnsignedLongLongMask(value);\n#endif\n\n    if (PyErr_Occurred())\n        return NULL;\n\n    *(void **)ptr = v;\n    _RET(value);\n}\n\nstatic PyObject *\nP_get(void *ptr, Py_ssize_t size)\n{\n    if (*(void **)ptr == NULL) {\n        Py_RETURN_NONE;\n    }\n    return PyLong_FromVoidPtr(*(void **)ptr);\n}\n\nstatic struct fielddesc formattable[] = {\n    { 's', s_set, s_get, NULL},\n    { 'b', b_set, b_get, NULL},\n    { 'B', B_set, B_get, NULL},\n    { 'c', c_set, c_get, NULL},\n    { 'd', d_set, d_get, NULL, d_set_sw, d_get_sw},\n    { 'g', g_set, g_get, NULL},\n    { 'f', f_set, f_get, NULL, f_set_sw, f_get_sw},\n    { 'h', h_set, h_get, NULL, h_set_sw, h_get_sw},\n    { 'H', H_set, H_get, NULL, H_set_sw, H_get_sw},\n    { 'i', i_set, i_get, NULL, i_set_sw, i_get_sw},\n    { 'I', I_set, I_get, NULL, I_set_sw, I_get_sw},\n    { 'l', l_set, l_get, NULL, l_set_sw, l_get_sw},\n    { 'L', L_set, L_get, NULL, L_set_sw, L_get_sw},\n    { 'q', q_set, q_get, NULL, q_set_sw, q_get_sw},\n    { 'Q', Q_set, Q_get, NULL, Q_set_sw, Q_get_sw},\n    { 'P', P_set, P_get, NULL},\n    { 'z', z_set, z_get, NULL},\n    { 'u', u_set, u_get, NULL},\n    { 'U', U_set, U_get, NULL},\n    { 'Z', Z_set, Z_get, NULL},\n#ifdef MS_WIN32\n    { 'X', BSTR_set, BSTR_get, NULL},\n#endif\n    { 'v', vBOOL_set, vBOOL_get, NULL},\n#if SIZEOF__BOOL == SIZEOF_INT\n    { '?', bool_set, bool_get, NULL, I_set_sw, I_get_sw},\n#elif SIZEOF__BOOL == SIZEOF_LONG\n    { '?', bool_set, bool_get, NULL, L_set_sw, L_get_sw},\n#elif SIZEOF__BOOL == SIZEOF_LONG_LONG\n    { '?', bool_set, bool_get, NULL, Q_set_sw, Q_get_sw},\n#else\n    { '?', bool_set, bool_get, NULL},\n#endif /* SIZEOF__BOOL */\n    { 'O', O_set, O_get, NULL},\n    { 0, NULL, NULL, NULL},\n};\n\n/*\n  Ideas: Implement VARIANT in this table, using 'V' code.\n  Use '?' as code for BOOL.\n*/\n\n/* Delayed initialization. Windows cannot statically reference dynamically\n   loaded addresses from DLLs. */\nvoid\n_ctypes_init_fielddesc(void)\n{\n    struct fielddesc *fd = formattable;\n    for (; fd->code; ++fd) {\n        switch (fd->code) {\n        case 's': fd->pffi_type = &ffi_type_pointer; break;\n        case 'b': fd->pffi_type = &ffi_type_schar; break;\n        case 'B': fd->pffi_type = &ffi_type_uchar; break;\n        case 'c': fd->pffi_type = &ffi_type_schar; break;\n        case 'd': fd->pffi_type = &ffi_type_double; break;\n        case 'g': fd->pffi_type = &ffi_type_longdouble; break;\n        case 'f': fd->pffi_type = &ffi_type_float; break;\n        case 'h': fd->pffi_type = &ffi_type_sshort; break;\n        case 'H': fd->pffi_type = &ffi_type_ushort; break;\n        case 'i': fd->pffi_type = &ffi_type_sint; break;\n        case 'I': fd->pffi_type = &ffi_type_uint; break;\n        /* XXX Hm, sizeof(int) == sizeof(long) doesn't hold on every platform */\n        /* As soon as we can get rid of the type codes, this is no longer a problem */\n    #if SIZEOF_LONG == 4\n        case 'l': fd->pffi_type = &ffi_type_sint32; break;\n        case 'L': fd->pffi_type = &ffi_type_uint32; break;\n    #elif SIZEOF_LONG == 8\n        case 'l': fd->pffi_type = &ffi_type_sint64; break;\n        case 'L': fd->pffi_type = &ffi_type_uint64; break;\n    #else\n        #error\n    #endif\n    #if SIZEOF_LONG_LONG == 8\n        case 'q': fd->pffi_type = &ffi_type_sint64; break;\n        case 'Q': fd->pffi_type = &ffi_type_uint64; break;\n    #else\n        #error\n    #endif\n        case 'P': fd->pffi_type = &ffi_type_pointer; break;\n        case 'z': fd->pffi_type = &ffi_type_pointer; break;\n        case 'u':\n            if (sizeof(wchar_t) == sizeof(short))\n                fd->pffi_type = &ffi_type_sshort;\n            else if (sizeof(wchar_t) == sizeof(int))\n                fd->pffi_type = &ffi_type_sint;\n            else if (sizeof(wchar_t) == sizeof(long))\n                fd->pffi_type = &ffi_type_slong;\n            else\n                Py_UNREACHABLE();\n            break;\n        case 'U': fd->pffi_type = &ffi_type_pointer; break;\n        case 'Z': fd->pffi_type = &ffi_type_pointer; break;\n    #ifdef MS_WIN32\n        case 'X': fd->pffi_type = &ffi_type_pointer; break;\n    #endif\n        case 'v': fd->pffi_type = &ffi_type_sshort; break;\n    #if SIZEOF__BOOL == 1\n        case '?': fd->pffi_type = &ffi_type_uchar; break; /* Also fallback for no native _Bool support */\n    #elif SIZEOF__BOOL == SIZEOF_SHORT\n        case '?': fd->pffi_type = &ffi_type_ushort; break;\n    #elif SIZEOF__BOOL == SIZEOF_INT\n        case '?': fd->pffi_type = &ffi_type_uint; break;\n    #elif SIZEOF__BOOL == SIZEOF_LONG\n        case '?': fd->pffi_type = &ffi_type_ulong; break;\n    #elif SIZEOF__BOOL == SIZEOF_LONG_LONG\n        case '?': fd->pffi_type = &ffi_type_ulong; break;\n    #endif /* SIZEOF__BOOL */\n        case 'O': fd->pffi_type = &ffi_type_pointer; break;\n        default:\n            Py_UNREACHABLE();\n        }\n    }\n\n}\n\nstruct fielddesc *\n_ctypes_get_fielddesc(const char *fmt)\n{\n    static int initialized = 0;\n    struct fielddesc *table = formattable;\n\n    if (!initialized) {\n        initialized = 1;\n        _ctypes_init_fielddesc();\n    }\n\n    for (; table->code; ++table) {\n        if (table->code == fmt[0])\n            return table;\n    }\n    return NULL;\n}\n\n/*---------------- EOF ----------------*/\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 4987,
                                       "gcc/analyzer/saved_diagnostic/snode": 638,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct fielddesc *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 1},
                        "level": "warning",
                        "message": {"text": "dereference of NULL '0'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 137,
                                                                       "startColumn": 35,
                                                                       "endColumn": 70},
                                                            "contextRegion": {"startLine": 137,
                                                                              "snippet": {"text": "            if (iinfo->getfunc == _ctypes_get_fielddesc(\"c\")->getfunc) {\n"}}},
                                       "logicalLocations": [{"name": "PyCField_FromDesc",
                                                             "fullyQualifiedName": "PyCField_FromDesc",
                                                             "decoratedName": "PyCField_FromDesc",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 47,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 47,
                                                                                                                           "snippet": {"text": "PyCField_FromDesc(ctypes_state *st, PyObject *desc, Py_ssize_t index,\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'PyCField_FromDesc'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 612,
                                                                                                                                 "dst_idx": 614,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 65,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 65,
                                                                                                                           "snippet": {"text": "    if (self == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'self' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 69,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 69,
                                                                                                                           "snippet": {"text": "    if (PyStgInfo_FromType(st, desc, &info) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyStgInfo_FromType' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 612,
                                                                                                                                 "dst_idx": 614,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 614,
                                                                                                                                 "dst_idx": 678,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_stginfo_from_type' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 459,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 459,
                                                                                                                           "snippet": {"text": "_stginfo_from_type(ctypes_state *state, PyTypeObject *type, StgInfo **result)\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_stginfo_from_type'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 679,
                                                                                                                                 "dst_idx": 681,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 462,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 462,
                                                                                                                           "snippet": {"text": "    if (!PyObject_IsInstance((PyObject *)type, (PyObject *)state->PyCType_Type)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 679,
                                                                                                                                 "dst_idx": 681,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 466,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 80},
                                                                                                         "contextRegion": {"startLine": 466,
                                                                                                                           "snippet": {"text": "    StgInfo *info = PyObject_GetTypeData((PyObject *)type, state->PyCType_Type);\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 681,
                                                                                                                                 "dst_idx": 682,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 468,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 468,
                                                                                                                           "snippet": {"text": "    if (!info->initialized) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 681,
                                                                                                                                 "dst_idx": 682,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 472,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 472,
                                                                                                                           "snippet": {"text": "    *result = info;\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 69,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 69,
                                                                                                                           "snippet": {"text": "    if (PyStgInfo_FromType(st, desc, &info) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyStgInfo_FromType' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 684,
                                                                                                                                 "dst_idx": 615,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'PyCField_FromDesc' from '_stginfo_from_type'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 615,
                                                                                                                                 "dst_idx": 618,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 73,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 73,
                                                                                                                           "snippet": {"text": "    if (!info) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 615,
                                                                                                                                 "dst_idx": 618,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 80,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 80,
                                                                                                                           "snippet": {"text": "    if (bitsize /* this is a bitfield request */\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 625,
                                                                                                                                 "dst_idx": 627,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 100,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 100,
                                                                                                                           "snippet": {"text": "    } else if (bitsize) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'bitsize == 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 625,
                                                                                                                                 "dst_idx": 627,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 108,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 108,
                                                                                                                           "snippet": {"text": "        *pbitofs = 0;\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 120,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 120,
                                                                                                                           "snippet": {"text": "        if (PyStgInfo_FromType(st, proto, &ainfo) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyStgInfo_FromType' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 630,
                                                                                                                                 "dst_idx": 678,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_stginfo_from_type' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 459,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 459,
                                                                                                                           "snippet": {"text": "_stginfo_from_type(ctypes_state *state, PyTypeObject *type, StgInfo **result)\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_stginfo_from_type'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 679,
                                                                                                                                 "dst_idx": 681,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 462,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 462,
                                                                                                                           "snippet": {"text": "    if (!PyObject_IsInstance((PyObject *)type, (PyObject *)state->PyCType_Type)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 679,
                                                                                                                                 "dst_idx": 681,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 466,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 80},
                                                                                                         "contextRegion": {"startLine": 466,
                                                                                                                           "snippet": {"text": "    StgInfo *info = PyObject_GetTypeData((PyObject *)type, state->PyCType_Type);\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 681,
                                                                                                                                 "dst_idx": 682,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 468,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 468,
                                                                                                                           "snippet": {"text": "    if (!info->initialized) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 681,
                                                                                                                                 "dst_idx": 682,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 472,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 472,
                                                                                                                           "snippet": {"text": "    *result = info;\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 120,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 120,
                                                                                                                           "snippet": {"text": "        if (PyStgInfo_FromType(st, proto, &ainfo) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyStgInfo_FromType' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 684,
                                                                                                                                 "dst_idx": 631,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'PyCField_FromDesc' from '_stginfo_from_type'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 125,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 125,
                                                                                                                           "snippet": {"text": "        if (ainfo && ainfo->proto) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 127,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 127,
                                                                                                                           "snippet": {"text": "            if (PyStgInfo_FromType(st, ainfo->proto, &iinfo) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyStgInfo_FromType' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES",
                                                                                      "gcc/analyzer/checker_event/original_depth": 2},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 633,
                                                                                                                                 "dst_idx": 678,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_stginfo_from_type' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 459,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 459,
                                                                                                                           "snippet": {"text": "_stginfo_from_type(ctypes_state *state, PyTypeObject *type, StgInfo **result)\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_stginfo_from_type'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 679,
                                                                                                                                 "dst_idx": 681,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 462,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 462,
                                                                                                                           "snippet": {"text": "    if (!PyObject_IsInstance((PyObject *)type, (PyObject *)state->PyCType_Type)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 679,
                                                                                                                                 "dst_idx": 681,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 466,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 80},
                                                                                                         "contextRegion": {"startLine": 466,
                                                                                                                           "snippet": {"text": "    StgInfo *info = PyObject_GetTypeData((PyObject *)type, state->PyCType_Type);\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 681,
                                                                                                                                 "dst_idx": 682,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 468,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 468,
                                                                                                                           "snippet": {"text": "    if (!info->initialized) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 681,
                                                                                                                                 "dst_idx": 682,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 472,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 472,
                                                                                                                           "snippet": {"text": "    *result = info;\n"}}},
                                                                                    "logicalLocations": [{"name": "_stginfo_from_type",
                                                                                                          "fullyQualifiedName": "_stginfo_from_type",
                                                                                                          "decoratedName": "_stginfo_from_type",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 127,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 127,
                                                                                                                           "snippet": {"text": "            if (PyStgInfo_FromType(st, ainfo->proto, &iinfo) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyStgInfo_FromType' from 'PyCField_FromDesc'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyCField_FromDesc",
                                                                                                                                     "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                                                     "decoratedName": "PyCField_FromDesc",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 684,
                                                                                                                                 "dst_idx": 634,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/ctypes.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    return _stginfo_from_type(state, (PyTypeObject *)type, result);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyStgInfo_FromType",
                                                                                                          "fullyQualifiedName": "PyStgInfo_FromType",
                                                                                                          "decoratedName": "PyStgInfo_FromType",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'PyCField_FromDesc' from '_stginfo_from_type'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 634,
                                                                                                                                 "dst_idx": 637,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 131,
                                                                                                                    "startColumn": 16,
                                                                                                                    "endColumn": 17},
                                                                                                         "contextRegion": {"startLine": 131,
                                                                                                                           "snippet": {"text": "            if (!iinfo) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 634,
                                                                                                                                 "dst_idx": 637,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 137,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 31},
                                                                                                         "contextRegion": {"startLine": 137,
                                                                                                                           "snippet": {"text": "            if (iinfo->getfunc == _ctypes_get_fielddesc(\"c\")->getfunc) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 38},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(39)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_ctypes/cfield.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 137,
                                                                                                                    "startColumn": 35,
                                                                                                                    "endColumn": 70},
                                                                                                         "contextRegion": {"startLine": 137,
                                                                                                                           "snippet": {"text": "            if (iinfo->getfunc == _ctypes_get_fielddesc(\"c\")->getfunc) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyCField_FromDesc",
                                                                                                          "fullyQualifiedName": "PyCField_FromDesc",
                                                                                                          "decoratedName": "PyCField_FromDesc",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL '_ctypes_get_fielddesc(\"c\")'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 39}]}]}]}]}]}
