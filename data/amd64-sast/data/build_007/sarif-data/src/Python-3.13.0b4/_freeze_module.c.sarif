{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-possible-null-argument",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-possible-null-argument"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "690",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/690.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "Programs/_freeze_module.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/* This is built as a stand-alone executable by the Makefile, and helps turn\n   modules into frozen modules.\n\n   This is used directly by Tools/build/freeze_modules.py, and indirectly by \"make regen-frozen\".\n\n   See Python/frozen.c for more info.\n\n   Keep this file in sync with Programs/_freeze_module.py.\n*/\n\n\n#include <Python.h>\n#include <marshal.h>\n#include \"pycore_fileutils.h\"     // _Py_stat_struct\n#include <pycore_import.h>\n\n#include <stdio.h>\n#include <stdlib.h>               // malloc()\n#include <sys/types.h>\n#include <sys/stat.h>\n#ifndef MS_WINDOWS\n#  include <unistd.h>\n#endif\n\n/* To avoid a circular dependency on frozen.o, we create our own structure\n   of frozen modules instead, left deliberately blank so as to avoid\n   unintentional import of a stale version of _frozen_importlib. */\n\nstatic const struct _frozen no_modules[] = {\n    {0, 0, 0} /* sentinel */\n};\nstatic const struct _module_alias aliases[] = {\n    {0, 0} /* sentinel */\n};\n\nconst struct _frozen *_PyImport_FrozenBootstrap;\nconst struct _frozen *_PyImport_FrozenStdlib;\nconst struct _frozen *_PyImport_FrozenTest;\nconst struct _frozen *PyImport_FrozenModules;\nconst struct _module_alias *_PyImport_FrozenAliases;\n\nstatic const char header[] =\n    \"/* Auto-generated by Programs/_freeze_module.c */\";\n\nstatic void\nruntime_init(void)\n{\n    PyConfig config;\n    PyConfig_InitIsolatedConfig(&config);\n\n    config.site_import = 0;\n\n    PyStatus status;\n    status = PyConfig_SetString(&config, &config.program_name,\n                                L\"./_freeze_module\");\n    if (PyStatus_Exception(status)) {\n        PyConfig_Clear(&config);\n        Py_ExitStatusException(status);\n    }\n\n    /* Don't install importlib, since it could execute outdated bytecode. */\n    config._install_importlib = 0;\n    config._init_main = 0;\n\n    status = Py_InitializeFromConfig(&config);\n    PyConfig_Clear(&config);\n    if (PyStatus_Exception(status)) {\n        Py_ExitStatusException(status);\n    }\n}\n\nstatic const char *\nread_text(const char *inpath)\n{\n    FILE *infile = fopen(inpath, \"rb\");\n    if (infile == NULL) {\n        fprintf(stderr, \"cannot open '%s' for reading\\n\", inpath);\n        return NULL;\n    }\n\n    struct _Py_stat_struct stat;\n    if (_Py_fstat_noraise(fileno(infile), &stat)) {\n        fprintf(stderr, \"cannot fstat '%s'\\n\", inpath);\n        fclose(infile);\n        return NULL;\n    }\n    size_t text_size = (size_t)stat.st_size;\n\n    char *text = (char *) malloc(text_size + 1);\n    if (text == NULL) {\n        fprintf(stderr, \"could not allocate %ld bytes\\n\", (long) text_size);\n        fclose(infile);\n        return NULL;\n    }\n    size_t n = fread(text, 1, text_size, infile);\n    fclose(infile);\n\n    if (n < text_size) {\n        fprintf(stderr, \"read too short: got %ld instead of %ld bytes\\n\",\n                (long) n, (long) text_size);\n        free(text);\n        return NULL;\n    }\n\n    text[text_size] = '\\0';\n    return (const char *)text;\n}\n\nstatic PyObject *\ncompile_and_marshal(const char *name, const char *text)\n{\n    char *filename = (char *) malloc(strlen(name) + 10);\n    sprintf(filename, \"<frozen %s>\", name);\n    PyObject *code = Py_CompileStringExFlags(text, filename,\n                                             Py_file_input, NULL, 0);\n    free(filename);\n    if (code == NULL) {\n        return NULL;\n    }\n\n    PyObject *marshalled = PyMarshal_WriteObjectToString(code, Py_MARSHAL_VERSION);\n    Py_CLEAR(code);\n    if (marshalled == NULL) {\n        return NULL;\n    }\n    assert(PyBytes_CheckExact(marshalled));\n\n    return marshalled;\n}\n\nstatic char *\nget_varname(const char *name, const char *prefix)\n{\n    size_t n = strlen(prefix);\n    char *varname = (char *) malloc(strlen(name) + n + 1);\n    (void)strcpy(varname, prefix);\n    for (size_t i = 0; name[i] != '\\0'; i++) {\n        if (name[i] == '.') {\n            varname[n++] = '_';\n        }\n        else {\n            varname[n++] = name[i];\n        }\n    }\n    varname[n] = '\\0';\n    return varname;\n}\n\nstatic void\nwrite_code(FILE *outfile, PyObject *marshalled, const char *varname)\n{\n    unsigned char *data = (unsigned char *) PyBytes_AS_STRING(marshalled);\n    size_t data_size = PyBytes_GET_SIZE(marshalled);\n\n    fprintf(outfile, \"const unsigned char %s[] = {\\n\", varname);\n    for (size_t n = 0; n < data_size; n += 16) {\n        size_t i, end = Py_MIN(n + 16, data_size);\n        fprintf(outfile, \"    \");\n        for (i = n; i < end; i++) {\n            fprintf(outfile, \"%u,\", (unsigned int) data[i]);\n        }\n        fprintf(outfile, \"\\n\");\n    }\n    fprintf(outfile, \"};\\n\");\n}\n\nstatic int\nwrite_frozen(const char *outpath, const char *inpath, const char *name,\n             PyObject *marshalled)\n{\n    /* Open the file in text mode. The hg checkout should be using the eol extension,\n       which in turn should cause the EOL style match the C library's text mode */\n    FILE *outfile = fopen(outpath, \"w\");\n    if (outfile == NULL) {\n        fprintf(stderr, \"cannot open '%s' for writing\\n\", outpath);\n        return -1;\n    }\n\n    fprintf(outfile, \"%s\\n\", header);\n    char *arrayname = get_varname(name, \"_Py_M__\");\n    write_code(outfile, marshalled, arrayname);\n    free(arrayname);\n\n    if (ferror(outfile)) {\n        fprintf(stderr, \"error when writing to '%s'\\n\", outpath);\n        fclose(outfile);\n        return -1;\n    }\n    fclose(outfile);\n    return 0;\n}\n\nint\nmain(int argc, char *argv[])\n{\n    const char *name, *inpath, *outpath;\n\n    _PyImport_FrozenBootstrap = no_modules;\n    _PyImport_FrozenStdlib = no_modules;\n    _PyImport_FrozenTest = no_modules;\n    PyImport_FrozenModules = NULL;\n    _PyImport_FrozenAliases = aliases;\n\n    if (argc != 4) {\n        fprintf(stderr, \"need to specify the name, input and output paths\\n\");\n        return 2;\n    }\n    name = argv[1];\n    inpath = argv[2];\n    outpath = argv[3];\n\n    runtime_init();\n\n    const char *text = read_text(inpath);\n    if (text == NULL) {\n        goto error;\n    }\n\n    PyObject *marshalled = compile_and_marshal(name, text);\n    free((char *)text);\n    if (marshalled == NULL) {\n        goto error;\n    }\n\n    int res = write_frozen(outpath, inpath, name, marshalled);\n    Py_DECREF(marshalled);\n    if (res != 0) {\n        goto error;\n    }\n\n    Py_Finalize();\n    return 0;\n\nerror:\n    PyErr_Print();\n    Py_Finalize();\n    return 1;\n}\n\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-possible-null-argument",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 841,
                                       "gcc/analyzer/saved_diagnostic/snode": 48,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(337)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 4},
                        "level": "warning",
                        "message": {"text": "use of possibly-NULL 'filename' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Programs/_freeze_module.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 113,
                                                                       "startColumn": 5,
                                                                       "endColumn": 43},
                                                            "contextRegion": {"startLine": 113,
                                                                              "snippet": {"text": "    sprintf(filename, \"<frozen %s>\", name);\n"}}},
                                       "logicalLocations": [{"name": "compile_and_marshal",
                                                             "fullyQualifiedName": "compile_and_marshal",
                                                             "decoratedName": "compile_and_marshal",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Programs/_freeze_module.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 112,
                                                                                                                    "startColumn": 31,
                                                                                                                    "endColumn": 56},
                                                                                                         "contextRegion": {"startLine": 112,
                                                                                                                           "snippet": {"text": "    char *filename = (char *) malloc(strlen(name) + 10);\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_and_marshal",
                                                                                                          "fullyQualifiedName": "compile_and_marshal",
                                                                                                          "decoratedName": "compile_and_marshal",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Programs/_freeze_module.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 113,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 43},
                                                                                                         "contextRegion": {"startLine": 113,
                                                                                                                           "snippet": {"text": "    sprintf(filename, \"<frozen %s>\", name);\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_and_marshal",
                                                                                                          "fullyQualifiedName": "compile_and_marshal",
                                                                                                          "decoratedName": "compile_and_marshal",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('filename') from (1) could be NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_sprintf' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-possible-null-argument",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 793,
                                       "gcc/analyzer/saved_diagnostic/snode": 39,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(337)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 3},
                        "level": "warning",
                        "message": {"text": "use of possibly-NULL 'varname' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Programs/_freeze_module.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 136,
                                                                       "startColumn": 11,
                                                                       "endColumn": 34},
                                                            "contextRegion": {"startLine": 136,
                                                                              "snippet": {"text": "    (void)strcpy(varname, prefix);\n"}}},
                                       "logicalLocations": [{"name": "get_varname",
                                                             "fullyQualifiedName": "get_varname",
                                                             "decoratedName": "get_varname",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Programs/_freeze_module.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 135,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 58},
                                                                                                         "contextRegion": {"startLine": 135,
                                                                                                                           "snippet": {"text": "    char *varname = (char *) malloc(strlen(name) + n + 1);\n"}}},
                                                                                    "logicalLocations": [{"name": "get_varname",
                                                                                                          "fullyQualifiedName": "get_varname",
                                                                                                          "decoratedName": "get_varname",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Programs/_freeze_module.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 136,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endColumn": 34},
                                                                                                         "contextRegion": {"startLine": 136,
                                                                                                                           "snippet": {"text": "    (void)strcpy(varname, prefix);\n"}}},
                                                                                    "logicalLocations": [{"name": "get_varname",
                                                                                                          "fullyQualifiedName": "get_varname",
                                                                                                          "decoratedName": "get_varname",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('varname') from (1) could be NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_strcpy' must be non-null"}}]}]}]}
