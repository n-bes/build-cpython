{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-null-dereference",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-dereference"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "476",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/476.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "./Modules/_datetimemodule.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/*  C implementation for the date/time type documented at\n *  https://www.zope.dev/Members/fdrake/DateTimeWiki/FrontPage\n */\n\n/* bpo-35081: Defining this prevents including the C API capsule;\n * internal versions of the  Py*_Check macros which do not require\n * the capsule are defined below */\n#define _PY_DATETIME_IMPL\n\n#ifndef Py_BUILD_CORE_BUILTIN\n#  define Py_BUILD_CORE_MODULE 1\n#endif\n\n#include \"Python.h\"\n#include \"pycore_long.h\"          // _PyLong_GetOne()\n#include \"pycore_object.h\"        // _PyObject_Init()\n#include \"pycore_time.h\"          // _PyTime_ObjectToTime_t()\n\n#include \"datetime.h\"\n\n\n#include <time.h>\n\n#ifdef MS_WINDOWS\n#  include <winsock2.h>         /* struct timeval */\n#endif\n\n\n/* forward declarations */\nstatic PyTypeObject PyDateTime_DateType;\nstatic PyTypeObject PyDateTime_DateTimeType;\nstatic PyTypeObject PyDateTime_TimeType;\nstatic PyTypeObject PyDateTime_DeltaType;\nstatic PyTypeObject PyDateTime_TZInfoType;\nstatic PyTypeObject PyDateTime_TimeZoneType;\n\n\ntypedef struct {\n    /* Module heap types. */\n    PyTypeObject *isocalendar_date_type;\n\n    /* Conversion factors. */\n    PyObject *us_per_ms;       // 1_000\n    PyObject *us_per_second;   // 1_000_000\n    PyObject *us_per_minute;   // 1e6 * 60 as Python int\n    PyObject *us_per_hour;     // 1e6 * 3600 as Python int\n    PyObject *us_per_day;      // 1e6 * 3600 * 24 as Python int\n    PyObject *us_per_week;     // 1e6 * 3600 * 24 * 7 as Python int\n    PyObject *seconds_per_day; // 3600 * 24 as Python int\n\n    /* The interned Unix epoch datetime instance */\n    PyObject *epoch;\n} datetime_state;\n\n/* The module has a fixed number of static objects, due to being exposed\n * through the datetime C-API.  There are five types exposed directly,\n * one type exposed indirectly, and one singleton constant (UTC).\n *\n * Each of these objects is hidden behind a macro in the same way as\n * the per-module objects stored in module state.  The macros for the\n * static objects don't need to be passed a state, but the consistency\n * of doing so is more clear.  We use a dedicated noop macro, NO_STATE,\n * to make the special case obvious. */\n\n#define NO_STATE NULL\n\n#define DATE_TYPE(st) &PyDateTime_DateType\n#define DATETIME_TYPE(st) &PyDateTime_DateTimeType\n#define TIME_TYPE(st) &PyDateTime_TimeType\n#define DELTA_TYPE(st) &PyDateTime_DeltaType\n#define TZINFO_TYPE(st) &PyDateTime_TZInfoType\n#define TIMEZONE_TYPE(st) &PyDateTime_TimeZoneType\n#define ISOCALENDAR_DATE_TYPE(st) st->isocalendar_date_type\n\n#define PyDate_Check(op) PyObject_TypeCheck(op, DATE_TYPE(NO_STATE))\n#define PyDate_CheckExact(op) Py_IS_TYPE(op, DATE_TYPE(NO_STATE))\n\n#define PyDateTime_Check(op) PyObject_TypeCheck(op, DATETIME_TYPE(NO_STATE))\n#define PyDateTime_CheckExact(op) Py_IS_TYPE(op, DATETIME_TYPE(NO_STATE))\n\n#define PyTime_Check(op) PyObject_TypeCheck(op, TIME_TYPE(NO_STATE))\n#define PyTime_CheckExact(op) Py_IS_TYPE(op, TIME_TYPE(NO_STATE))\n\n#define PyDelta_Check(op) PyObject_TypeCheck(op, DELTA_TYPE(NO_STATE))\n#define PyDelta_CheckExact(op) Py_IS_TYPE(op, DELTA_TYPE(NO_STATE))\n\n#define PyTZInfo_Check(op) PyObject_TypeCheck(op, TZINFO_TYPE(NO_STATE))\n#define PyTZInfo_CheckExact(op) Py_IS_TYPE(op, TZINFO_TYPE(NO_STATE))\n\n#define PyTimezone_Check(op) PyObject_TypeCheck(op, TIMEZONE_TYPE(NO_STATE))\n\n#define CONST_US_PER_MS(st) st->us_per_ms\n#define CONST_US_PER_SECOND(st) st->us_per_second\n#define CONST_US_PER_MINUTE(st) st->us_per_minute\n#define CONST_US_PER_HOUR(st) st->us_per_hour\n#define CONST_US_PER_DAY(st) st->us_per_day\n#define CONST_US_PER_WEEK(st) st->us_per_week\n#define CONST_SEC_PER_DAY(st) st->seconds_per_day\n#define CONST_EPOCH(st) st->epoch\n#define CONST_UTC(st) ((PyObject *)&utc_timezone)\n\nstatic datetime_state *\nget_module_state(PyObject *module)\n{\n    void *state = _PyModule_GetState(module);\n    assert(state != NULL);\n    return (datetime_state *)state;\n}\n\n\n#define INTERP_KEY ((PyObject *)&_Py_ID(cached_datetime_module))\n\nstatic PyObject *\nget_current_module(PyInterpreterState *interp, int *p_reloading)\n{\n    PyObject *mod = NULL;\n    int reloading = 0;\n\n    PyObject *dict = PyInterpreterState_GetDict(interp);\n    if (dict == NULL) {\n        goto error;\n    }\n    PyObject *ref = NULL;\n    if (PyDict_GetItemRef(dict, INTERP_KEY, &ref) < 0) {\n        goto error;\n    }\n    if (ref != NULL) {\n        reloading = 1;\n        if (ref != Py_None) {\n            (void)PyWeakref_GetRef(ref, &mod);\n            if (mod == Py_None) {\n                Py_CLEAR(mod);\n            }\n            Py_DECREF(ref);\n        }\n    }\n    if (p_reloading != NULL) {\n        *p_reloading = reloading;\n    }\n    return mod;\n\nerror:\n    assert(PyErr_Occurred());\n    return NULL;\n}\n\nstatic PyModuleDef datetimemodule;\n\nstatic datetime_state *\n_get_current_state(PyObject **p_mod)\n{\n    PyInterpreterState *interp = PyInterpreterState_Get();\n    PyObject *mod = get_current_module(interp, NULL);\n    if (mod == NULL) {\n        assert(!PyErr_Occurred());\n        if (PyErr_Occurred()) {\n            return NULL;\n        }\n        /* The static types can outlive the module,\n         * so we must re-import the module. */\n        mod = PyImport_ImportModule(\"_datetime\");\n        if (mod == NULL) {\n            return NULL;\n        }\n    }\n    datetime_state *st = get_module_state(mod);\n    *p_mod = mod;\n    return st;\n}\n\n#define GET_CURRENT_STATE(MOD_VAR)  \\\n    _get_current_state(&MOD_VAR)\n#define RELEASE_CURRENT_STATE(ST_VAR, MOD_VAR)  \\\n    Py_DECREF(MOD_VAR)\n\nstatic int\nset_current_module(PyInterpreterState *interp, PyObject *mod)\n{\n    assert(mod != NULL);\n    PyObject *dict = PyInterpreterState_GetDict(interp);\n    if (dict == NULL) {\n        return -1;\n    }\n    PyObject *ref = PyWeakref_NewRef(mod, NULL);\n    if (ref == NULL) {\n        return -1;\n    }\n    int rc = PyDict_SetItem(dict, INTERP_KEY, ref);\n    Py_DECREF(ref);\n    return rc;\n}\n\nstatic void\nclear_current_module(PyInterpreterState *interp, PyObject *expected)\n{\n    PyObject *exc = PyErr_GetRaisedException();\n\n    PyObject *dict = PyInterpreterState_GetDict(interp);\n    if (dict == NULL) {\n        goto error;\n    }\n\n    if (expected != NULL) {\n        PyObject *ref = NULL;\n        if (PyDict_GetItemRef(dict, INTERP_KEY, &ref) < 0) {\n            goto error;\n        }\n        if (ref != NULL) {\n            PyObject *current = NULL;\n            int rc = PyWeakref_GetRef(ref, &current);\n            /* We only need \"current\" for pointer comparison. */\n            Py_XDECREF(current);\n            Py_DECREF(ref);\n            if (rc < 0) {\n                goto error;\n            }\n            if (current != expected) {\n                goto finally;\n            }\n        }\n    }\n\n    /* We use None to identify that the module was previously loaded. */\n    if (PyDict_SetItem(dict, INTERP_KEY, Py_None) < 0) {\n        goto error;\n    }\n\n    goto finally;\n\nerror:\n    PyErr_WriteUnraisable(NULL);\n\nfinally:\n    PyErr_SetRaisedException(exc);\n}\n\n\n/* We require that C int be at least 32 bits, and use int virtually\n * everywhere.  In just a few cases we use a temp long, where a Python\n * API returns a C long.  In such cases, we have to ensure that the\n * final result fits in a C int (this can be an issue on 64-bit boxes).\n */\n#if SIZEOF_INT < 4\n#       error \"_datetime.c requires that C int have at least 32 bits\"\n#endif\n\n#define MINYEAR 1\n#define MAXYEAR 9999\n#define MAXORDINAL 3652059 /* date(9999,12,31).toordinal() */\n\n/* Nine decimal digits is easy to communicate, and leaves enough room\n * so that two delta days can be added w/o fear of overflowing a signed\n * 32-bit int, and with plenty of room left over to absorb any possible\n * carries from adding seconds.\n */\n#define MAX_DELTA_DAYS 999999999\n\n/* Rename the long macros in datetime.h to more reasonable short names. */\n#define GET_YEAR                PyDateTime_GET_YEAR\n#define GET_MONTH               PyDateTime_GET_MONTH\n#define GET_DAY                 PyDateTime_GET_DAY\n#define DATE_GET_HOUR           PyDateTime_DATE_GET_HOUR\n#define DATE_GET_MINUTE         PyDateTime_DATE_GET_MINUTE\n#define DATE_GET_SECOND         PyDateTime_DATE_GET_SECOND\n#define DATE_GET_MICROSECOND    PyDateTime_DATE_GET_MICROSECOND\n#define DATE_GET_FOLD           PyDateTime_DATE_GET_FOLD\n\n/* Date accessors for date and datetime. */\n#define SET_YEAR(o, v)          (((o)->data[0] = ((v) & 0xff00) >> 8), \\\n                 ((o)->data[1] = ((v) & 0x00ff)))\n#define SET_MONTH(o, v)         (PyDateTime_GET_MONTH(o) = (v))\n#define SET_DAY(o, v)           (PyDateTime_GET_DAY(o) = (v))\n\n/* Date/Time accessors for datetime. */\n#define DATE_SET_HOUR(o, v)     (PyDateTime_DATE_GET_HOUR(o) = (v))\n#define DATE_SET_MINUTE(o, v)   (PyDateTime_DATE_GET_MINUTE(o) = (v))\n#define DATE_SET_SECOND(o, v)   (PyDateTime_DATE_GET_SECOND(o) = (v))\n#define DATE_SET_MICROSECOND(o, v)      \\\n    (((o)->data[7] = ((v) & 0xff0000) >> 16), \\\n     ((o)->data[8] = ((v) & 0x00ff00) >> 8), \\\n     ((o)->data[9] = ((v) & 0x0000ff)))\n#define DATE_SET_FOLD(o, v)   (PyDateTime_DATE_GET_FOLD(o) = (v))\n\n/* Time accessors for time. */\n#define TIME_GET_HOUR           PyDateTime_TIME_GET_HOUR\n#define TIME_GET_MINUTE         PyDateTime_TIME_GET_MINUTE\n#define TIME_GET_SECOND         PyDateTime_TIME_GET_SECOND\n#define TIME_GET_MICROSECOND    PyDateTime_TIME_GET_MICROSECOND\n#define TIME_GET_FOLD           PyDateTime_TIME_GET_FOLD\n#define TIME_SET_HOUR(o, v)     (PyDateTime_TIME_GET_HOUR(o) = (v))\n#define TIME_SET_MINUTE(o, v)   (PyDateTime_TIME_GET_MINUTE(o) = (v))\n#define TIME_SET_SECOND(o, v)   (PyDateTime_TIME_GET_SECOND(o) = (v))\n#define TIME_SET_MICROSECOND(o, v)      \\\n    (((o)->data[3] = ((v) & 0xff0000) >> 16), \\\n     ((o)->data[4] = ((v) & 0x00ff00) >> 8), \\\n     ((o)->data[5] = ((v) & 0x0000ff)))\n#define TIME_SET_FOLD(o, v)   (PyDateTime_TIME_GET_FOLD(o) = (v))\n\n/* Delta accessors for timedelta. */\n#define GET_TD_DAYS(o)          (((PyDateTime_Delta *)(o))->days)\n#define GET_TD_SECONDS(o)       (((PyDateTime_Delta *)(o))->seconds)\n#define GET_TD_MICROSECONDS(o)  (((PyDateTime_Delta *)(o))->microseconds)\n\n#define SET_TD_DAYS(o, v)       ((o)->days = (v))\n#define SET_TD_SECONDS(o, v)    ((o)->seconds = (v))\n#define SET_TD_MICROSECONDS(o, v) ((o)->microseconds = (v))\n\n#define HASTZINFO               _PyDateTime_HAS_TZINFO\n#define GET_TIME_TZINFO         PyDateTime_TIME_GET_TZINFO\n#define GET_DT_TZINFO           PyDateTime_DATE_GET_TZINFO\n/* M is a char or int claiming to be a valid month.  The macro is equivalent\n * to the two-sided Python test\n *      1 <= M <= 12\n */\n#define MONTH_IS_SANE(M) ((unsigned int)(M) - 1 < 12)\n\nstatic int check_tzinfo_subclass(PyObject *p);\n\n/*[clinic input]\nmodule datetime\nclass datetime.datetime \"PyDateTime_DateTime *\" \"get_datetime_state()->datetime_type\"\nclass datetime.date \"PyDateTime_Date *\" \"get_datetime_state()->date_type\"\nclass datetime.time \"PyDateTime_Time *\" \"get_datetime_state()->time_type\"\nclass datetime.IsoCalendarDate \"PyDateTime_IsoCalendarDate *\" \"get_datetime_state()->isocalendar_date_type\"\n[clinic start generated code]*/\n/*[clinic end generated code: output=da39a3ee5e6b4b0d input=c8f3d834a860d50a]*/\n\n#include \"clinic/_datetimemodule.c.h\"\n\n\n/* ---------------------------------------------------------------------------\n * Math utilities.\n */\n\n/* k = i+j overflows iff k differs in sign from both inputs,\n * iff k^i has sign bit set and k^j has sign bit set,\n * iff (k^i)&(k^j) has sign bit set.\n */\n#define SIGNED_ADD_OVERFLOWED(RESULT, I, J) \\\n    ((((RESULT) ^ (I)) & ((RESULT) ^ (J))) < 0)\n\n/* Compute Python divmod(x, y), returning the quotient and storing the\n * remainder into *r.  The quotient is the floor of x/y, and that's\n * the real point of this.  C will probably truncate instead (C99\n * requires truncation; C89 left it implementation-defined).\n * Simplification:  we *require* that y > 0 here.  That's appropriate\n * for all the uses made of it.  This simplifies the code and makes\n * the overflow case impossible (divmod(LONG_MIN, -1) is the only\n * overflow case).\n */\nstatic int\ndivmod(int x, int y, int *r)\n{\n    int quo;\n\n    assert(y > 0);\n    quo = x / y;\n    *r = x - quo * y;\n    if (*r < 0) {\n        --quo;\n        *r += y;\n    }\n    assert(0 <= *r && *r < y);\n    return quo;\n}\n\n/* Nearest integer to m / n for integers m and n. Half-integer results\n * are rounded to even.\n */\nstatic PyObject *\ndivide_nearest(PyObject *m, PyObject *n)\n{\n    PyObject *result;\n    PyObject *temp;\n\n    temp = _PyLong_DivmodNear(m, n);\n    if (temp == NULL)\n        return NULL;\n    result = Py_NewRef(PyTuple_GET_ITEM(temp, 0));\n    Py_DECREF(temp);\n\n    return result;\n}\n\n/* ---------------------------------------------------------------------------\n * General calendrical helper functions\n */\n\n/* For each month ordinal in 1..12, the number of days in that month,\n * and the number of days before that month in the same year.  These\n * are correct for non-leap years only.\n */\nstatic const int _days_in_month[] = {\n    0, /* unused; this vector uses 1-based indexing */\n    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n};\n\nstatic const int _days_before_month[] = {\n    0, /* unused; this vector uses 1-based indexing */\n    0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334\n};\n\n/* year -> 1 if leap year, else 0. */\nstatic int\nis_leap(int year)\n{\n    /* Cast year to unsigned.  The result is the same either way, but\n     * C can generate faster code for unsigned mod than for signed\n     * mod (especially for % 4 -- a good compiler should just grab\n     * the last 2 bits when the LHS is unsigned).\n     */\n    const unsigned int ayear = (unsigned int)year;\n    return ayear % 4 == 0 && (ayear % 100 != 0 || ayear % 400 == 0);\n}\n\n/* year, month -> number of days in that month in that year */\nstatic int\ndays_in_month(int year, int month)\n{\n    assert(month >= 1);\n    assert(month <= 12);\n    if (month == 2 && is_leap(year))\n        return 29;\n    else\n        return _days_in_month[month];\n}\n\n/* year, month -> number of days in year preceding first day of month */\nstatic int\ndays_before_month(int year, int month)\n{\n    int days;\n\n    assert(month >= 1);\n    assert(month <= 12);\n    days = _days_before_month[month];\n    if (month > 2 && is_leap(year))\n        ++days;\n    return days;\n}\n\n/* year -> number of days before January 1st of year.  Remember that we\n * start with year 1, so days_before_year(1) == 0.\n */\nstatic int\ndays_before_year(int year)\n{\n    int y = year - 1;\n    /* This is incorrect if year <= 0; we really want the floor\n     * here.  But so long as MINYEAR is 1, the smallest year this\n     * can see is 1.\n     */\n    assert (year >= 1);\n    return y*365 + y/4 - y/100 + y/400;\n}\n\n/* Number of days in 4, 100, and 400 year cycles.  That these have\n * the correct values is asserted in the module init function.\n */\n#define DI4Y    1461    /* days_before_year(5); days in 4 years */\n#define DI100Y  36524   /* days_before_year(101); days in 100 years */\n#define DI400Y  146097  /* days_before_year(401); days in 400 years  */\n\n/* ordinal -> year, month, day, considering 01-Jan-0001 as day 1. */\nstatic void\nord_to_ymd(int ordinal, int *year, int *month, int *day)\n{\n    int n, n1, n4, n100, n400, leapyear, preceding;\n\n    /* ordinal is a 1-based index, starting at 1-Jan-1.  The pattern of\n     * leap years repeats exactly every 400 years.  The basic strategy is\n     * to find the closest 400-year boundary at or before ordinal, then\n     * work with the offset from that boundary to ordinal.  Life is much\n     * clearer if we subtract 1 from ordinal first -- then the values\n     * of ordinal at 400-year boundaries are exactly those divisible\n     * by DI400Y:\n     *\n     *    D  M   Y            n              n-1\n     *    -- --- ----        ----------     ----------------\n     *    31 Dec -400        -DI400Y       -DI400Y -1\n     *     1 Jan -399         -DI400Y +1   -DI400Y      400-year boundary\n     *    ...\n     *    30 Dec  000        -1             -2\n     *    31 Dec  000         0             -1\n     *     1 Jan  001         1              0          400-year boundary\n     *     2 Jan  001         2              1\n     *     3 Jan  001         3              2\n     *    ...\n     *    31 Dec  400         DI400Y        DI400Y -1\n     *     1 Jan  401         DI400Y +1     DI400Y      400-year boundary\n     */\n    assert(ordinal >= 1);\n    --ordinal;\n    n400 = ordinal / DI400Y;\n    n = ordinal % DI400Y;\n    *year = n400 * 400 + 1;\n\n    /* Now n is the (non-negative) offset, in days, from January 1 of\n     * year, to the desired date.  Now compute how many 100-year cycles\n     * precede n.\n     * Note that it's possible for n100 to equal 4!  In that case 4 full\n     * 100-year cycles precede the desired day, which implies the\n     * desired day is December 31 at the end of a 400-year cycle.\n     */\n    n100 = n / DI100Y;\n    n = n % DI100Y;\n\n    /* Now compute how many 4-year cycles precede it. */\n    n4 = n / DI4Y;\n    n = n % DI4Y;\n\n    /* And now how many single years.  Again n1 can be 4, and again\n     * meaning that the desired day is December 31 at the end of the\n     * 4-year cycle.\n     */\n    n1 = n / 365;\n    n = n % 365;\n\n    *year += n100 * 100 + n4 * 4 + n1;\n    if (n1 == 4 || n100 == 4) {\n        assert(n == 0);\n        *year -= 1;\n        *month = 12;\n        *day = 31;\n        return;\n    }\n\n    /* Now the year is correct, and n is the offset from January 1.  We\n     * find the month via an estimate that's either exact or one too\n     * large.\n     */\n    leapyear = n1 == 3 && (n4 != 24 || n100 == 3);\n    assert(leapyear == is_leap(*year));\n    *month = (n + 50) >> 5;\n    preceding = (_days_before_month[*month] + (*month > 2 && leapyear));\n    if (preceding > n) {\n        /* estimate is too large */\n        *month -= 1;\n        preceding -= days_in_month(*year, *month);\n    }\n    n -= preceding;\n    assert(0 <= n);\n    assert(n < days_in_month(*year, *month));\n\n    *day = n + 1;\n}\n\n/* year, month, day -> ordinal, considering 01-Jan-0001 as day 1. */\nstatic int\nymd_to_ord(int year, int month, int day)\n{\n    return days_before_year(year) + days_before_month(year, month) + day;\n}\n\n/* Day of week, where Monday==0, ..., Sunday==6.  1/1/1 was a Monday. */\nstatic int\nweekday(int year, int month, int day)\n{\n    return (ymd_to_ord(year, month, day) + 6) % 7;\n}\n\n/* Ordinal of the Monday starting week 1 of the ISO year.  Week 1 is the\n * first calendar week containing a Thursday.\n */\nstatic int\niso_week1_monday(int year)\n{\n    int first_day = ymd_to_ord(year, 1, 1);     /* ord of 1/1 */\n    /* 0 if 1/1 is a Monday, 1 if a Tue, etc. */\n    int first_weekday = (first_day + 6) % 7;\n    /* ordinal of closest Monday at or before 1/1 */\n    int week1_monday  = first_day - first_weekday;\n\n    if (first_weekday > 3)      /* if 1/1 was Fri, Sat, Sun */\n        week1_monday += 7;\n    return week1_monday;\n}\n\nstatic int\niso_to_ymd(const int iso_year, const int iso_week, const int iso_day,\n           int *year, int *month, int *day) {\n    // Year is bounded to 0 < year < 10000 because 9999-12-31 is (9999, 52, 5)\n    if (iso_year < MINYEAR || iso_year > MAXYEAR) {\n        return -4;\n    }\n    if (iso_week <= 0 || iso_week >= 53) {\n        int out_of_range = 1;\n        if (iso_week == 53) {\n            // ISO years have 53 weeks in it on years starting with a Thursday\n            // and on leap years starting on Wednesday\n            int first_weekday = weekday(iso_year, 1, 1);\n            if (first_weekday == 3 || (first_weekday == 2 && is_leap(iso_year))) {\n                out_of_range = 0;\n            }\n        }\n\n        if (out_of_range) {\n            return -2;\n        }\n    }\n\n    if (iso_day <= 0 || iso_day >= 8) {\n        return -3;\n    }\n\n    // Convert (Y, W, D) to (Y, M, D) in-place\n    int day_1 = iso_week1_monday(iso_year);\n\n    int day_offset = (iso_week - 1)*7 + iso_day - 1;\n\n    ord_to_ymd(day_1 + day_offset, year, month, day);\n    return 0;\n}\n\n\n/* ---------------------------------------------------------------------------\n * Range checkers.\n */\n\n/* Check that -MAX_DELTA_DAYS <= days <= MAX_DELTA_DAYS.  If so, return 0.\n * If not, raise OverflowError and return -1.\n */\nstatic int\ncheck_delta_day_range(int days)\n{\n    if (-MAX_DELTA_DAYS <= days && days <= MAX_DELTA_DAYS)\n        return 0;\n    PyErr_Format(PyExc_OverflowError,\n                 \"days=%d; must have magnitude <= %d\",\n                 days, MAX_DELTA_DAYS);\n    return -1;\n}\n\n/* Check that date arguments are in range.  Return 0 if they are.  If they\n * aren't, raise ValueError and return -1.\n */\nstatic int\ncheck_date_args(int year, int month, int day)\n{\n\n    if (year < MINYEAR || year > MAXYEAR) {\n        PyErr_Format(PyExc_ValueError, \"year %i is out of range\", year);\n        return -1;\n    }\n    if (month < 1 || month > 12) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"month must be in 1..12\");\n        return -1;\n    }\n    if (day < 1 || day > days_in_month(year, month)) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"day is out of range for month\");\n        return -1;\n    }\n    return 0;\n}\n\n/* Check that time arguments are in range.  Return 0 if they are.  If they\n * aren't, raise ValueError and return -1.\n */\nstatic int\ncheck_time_args(int h, int m, int s, int us, int fold)\n{\n    if (h < 0 || h > 23) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"hour must be in 0..23\");\n        return -1;\n    }\n    if (m < 0 || m > 59) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"minute must be in 0..59\");\n        return -1;\n    }\n    if (s < 0 || s > 59) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"second must be in 0..59\");\n        return -1;\n    }\n    if (us < 0 || us > 999999) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"microsecond must be in 0..999999\");\n        return -1;\n    }\n    if (fold != 0 && fold != 1) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"fold must be either 0 or 1\");\n        return -1;\n    }\n    return 0;\n}\n\n/* ---------------------------------------------------------------------------\n * Normalization utilities.\n */\n\n/* One step of a mixed-radix conversion.  A \"hi\" unit is equivalent to\n * factor \"lo\" units.  factor must be > 0.  If *lo is less than 0, or\n * at least factor, enough of *lo is converted into \"hi\" units so that\n * 0 <= *lo < factor.  The input values must be such that int overflow\n * is impossible.\n */\nstatic void\nnormalize_pair(int *hi, int *lo, int factor)\n{\n    assert(factor > 0);\n    assert(lo != hi);\n    if (*lo < 0 || *lo >= factor) {\n        const int num_hi = divmod(*lo, factor, lo);\n        const int new_hi = *hi + num_hi;\n        assert(! SIGNED_ADD_OVERFLOWED(new_hi, *hi, num_hi));\n        *hi = new_hi;\n    }\n    assert(0 <= *lo && *lo < factor);\n}\n\n/* Fiddle days (d), seconds (s), and microseconds (us) so that\n *      0 <= *s < 24*3600\n *      0 <= *us < 1000000\n * The input values must be such that the internals don't overflow.\n * The way this routine is used, we don't get close.\n */\nstatic void\nnormalize_d_s_us(int *d, int *s, int *us)\n{\n    if (*us < 0 || *us >= 1000000) {\n        normalize_pair(s, us, 1000000);\n        /* |s| can't be bigger than about\n         * |original s| + |original us|/1000000 now.\n         */\n\n    }\n    if (*s < 0 || *s >= 24*3600) {\n        normalize_pair(d, s, 24*3600);\n        /* |d| can't be bigger than about\n         * |original d| +\n         * (|original s| + |original us|/1000000) / (24*3600) now.\n         */\n    }\n    assert(0 <= *s && *s < 24*3600);\n    assert(0 <= *us && *us < 1000000);\n}\n\n/* Fiddle years (y), months (m), and days (d) so that\n *      1 <= *m <= 12\n *      1 <= *d <= days_in_month(*y, *m)\n * The input values must be such that the internals don't overflow.\n * The way this routine is used, we don't get close.\n */\nstatic int\nnormalize_y_m_d(int *y, int *m, int *d)\n{\n    int dim;            /* # of days in month */\n\n    /* In actual use, m is always the month component extracted from a\n     * date/datetime object.  Therefore it is always in [1, 12] range.\n     */\n\n    assert(1 <= *m && *m <= 12);\n\n    /* Now only day can be out of bounds (year may also be out of bounds\n     * for a datetime object, but we don't care about that here).\n     * If day is out of bounds, what to do is arguable, but at least the\n     * method here is principled and explainable.\n     */\n    dim = days_in_month(*y, *m);\n    if (*d < 1 || *d > dim) {\n        /* Move day-1 days from the first of the month.  First try to\n         * get off cheap if we're only one day out of range\n         * (adjustments for timezone alone can't be worse than that).\n         */\n        if (*d == 0) {\n            --*m;\n            if (*m > 0)\n                *d = days_in_month(*y, *m);\n            else {\n                --*y;\n                *m = 12;\n                *d = 31;\n            }\n        }\n        else if (*d == dim + 1) {\n            /* move forward a day */\n            ++*m;\n            *d = 1;\n            if (*m > 12) {\n                *m = 1;\n                ++*y;\n            }\n        }\n        else {\n            int ordinal = ymd_to_ord(*y, *m, 1) +\n                                      *d - 1;\n            if (ordinal < 1 || ordinal > MAXORDINAL) {\n                goto error;\n            } else {\n                ord_to_ymd(ordinal, y, m, d);\n                return 0;\n            }\n        }\n    }\n    assert(*m > 0);\n    assert(*d > 0);\n    if (MINYEAR <= *y && *y <= MAXYEAR)\n        return 0;\n error:\n    PyErr_SetString(PyExc_OverflowError,\n            \"date value out of range\");\n    return -1;\n\n}\n\n/* Fiddle out-of-bounds months and days so that the result makes some kind\n * of sense.  The parameters are both inputs and outputs.  Returns < 0 on\n * failure, where failure means the adjusted year is out of bounds.\n */\nstatic int\nnormalize_date(int *year, int *month, int *day)\n{\n    return normalize_y_m_d(year, month, day);\n}\n\n/* Force all the datetime fields into range.  The parameters are both\n * inputs and outputs.  Returns < 0 on error.\n */\nstatic int\nnormalize_datetime(int *year, int *month, int *day,\n                   int *hour, int *minute, int *second,\n                   int *microsecond)\n{\n    normalize_pair(second, microsecond, 1000000);\n    normalize_pair(minute, second, 60);\n    normalize_pair(hour, minute, 60);\n    normalize_pair(day, hour, 24);\n    return normalize_date(year, month, day);\n}\n\n/* ---------------------------------------------------------------------------\n * Basic object allocation:  tp_alloc implementations.  These allocate\n * Python objects of the right size and type, and do the Python object-\n * initialization bit.  If there's not enough memory, they return NULL after\n * setting MemoryError.  All data members remain uninitialized trash.\n *\n * We abuse the tp_alloc \"nitems\" argument to communicate whether a tzinfo\n * member is needed.  This is ugly, imprecise, and possibly insecure.\n * tp_basicsize for the time and datetime types is set to the size of the\n * struct that has room for the tzinfo member, so subclasses in Python will\n * allocate enough space for a tzinfo member whether or not one is actually\n * needed.  That's the \"ugly and imprecise\" parts.  The \"possibly insecure\"\n * part is that PyType_GenericAlloc() (which subclasses in Python end up\n * using) just happens today to effectively ignore the nitems argument\n * when tp_itemsize is 0, which it is for these type objects.  If that\n * changes, perhaps the callers of tp_alloc slots in this file should\n * be changed to force a 0 nitems argument unless the type being allocated\n * is a base type implemented in this file (so that tp_alloc is time_alloc\n * or datetime_alloc below, which know about the nitems abuse).\n */\n\nstatic PyObject *\ntime_alloc(PyTypeObject *type, Py_ssize_t aware)\n{\n    size_t size = aware ? sizeof(PyDateTime_Time) : sizeof(_PyDateTime_BaseTime);\n    PyObject *self = (PyObject *)PyObject_Malloc(size);\n    if (self == NULL) {\n        return PyErr_NoMemory();\n    }\n    _PyObject_Init(self, type);\n    return self;\n}\n\nstatic PyObject *\ndatetime_alloc(PyTypeObject *type, Py_ssize_t aware)\n{\n    size_t size = aware ? sizeof(PyDateTime_DateTime) : sizeof(_PyDateTime_BaseDateTime);\n    PyObject *self = (PyObject *)PyObject_Malloc(size);\n    if (self == NULL) {\n        return PyErr_NoMemory();\n    }\n    _PyObject_Init(self, type);\n    return self;\n}\n\n/* ---------------------------------------------------------------------------\n * Helpers for setting object fields.  These work on pointers to the\n * appropriate base class.\n */\n\n/* For date and datetime. */\nstatic void\nset_date_fields(PyDateTime_Date *self, int y, int m, int d)\n{\n    self->hashcode = -1;\n    SET_YEAR(self, y);\n    SET_MONTH(self, m);\n    SET_DAY(self, d);\n}\n\n/* ---------------------------------------------------------------------------\n * String parsing utilities and helper functions\n */\n\nstatic unsigned char\nis_digit(const char c) {\n    return ((unsigned int)(c - '0')) < 10;\n}\n\nstatic const char *\nparse_digits(const char *ptr, int *var, size_t num_digits)\n{\n    for (size_t i = 0; i < num_digits; ++i) {\n        unsigned int tmp = (unsigned int)(*(ptr++) - '0');\n        if (tmp > 9) {\n            return NULL;\n        }\n        *var *= 10;\n        *var += (signed int)tmp;\n    }\n\n    return ptr;\n}\n\nstatic int\nparse_isoformat_date(const char *dtstr, const size_t len, int *year, int *month, int *day)\n{\n    /* Parse the date components of the result of date.isoformat()\n     *\n     *  Return codes:\n     *       0:  Success\n     *      -1:  Failed to parse date component\n     *      -2:  Inconsistent date separator usage\n     *      -3:  Failed to parse ISO week.\n     *      -4:  Failed to parse ISO day.\n     *      -5, -6, -7: Failure in iso_to_ymd\n     */\n    const char *p = dtstr;\n    p = parse_digits(p, year, 4);\n    if (NULL == p) {\n        return -1;\n    }\n\n    const unsigned char uses_separator = (*p == '-');\n    if (uses_separator) {\n        ++p;\n    }\n\n    if(*p == 'W') {\n        // This is an isocalendar-style date string\n        p++;\n        int iso_week = 0;\n        int iso_day = 0;\n\n        p = parse_digits(p, &iso_week, 2);\n        if (NULL == p) {\n            return -3;\n        }\n\n        assert(p > dtstr);\n        if ((size_t)(p - dtstr) < len) {\n            if (uses_separator && *(p++) != '-') {\n                return -2;\n            }\n\n            p = parse_digits(p, &iso_day, 1);\n            if (NULL == p) {\n                return -4;\n            }\n        } else {\n            iso_day = 1;\n        }\n\n        int rv = iso_to_ymd(*year, iso_week, iso_day, year, month, day);\n        if (rv) {\n            return -3 + rv;\n        } else {\n            return 0;\n        }\n    }\n\n    p = parse_digits(p, month, 2);\n    if (NULL == p) {\n        return -1;\n    }\n\n    if (uses_separator && *(p++) != '-') {\n        return -2;\n    }\n    p = parse_digits(p, day, 2);\n    if (p == NULL) {\n        return -1;\n    }\n    return 0;\n}\n\nstatic int\nparse_hh_mm_ss_ff(const char *tstr, const char *tstr_end, int *hour,\n                  int *minute, int *second, int *microsecond)\n{\n    *hour = *minute = *second = *microsecond = 0;\n    const char *p = tstr;\n    const char *p_end = tstr_end;\n    int *vals[3] = {hour, minute, second};\n    // This is initialized to satisfy an erroneous compiler warning.\n    unsigned char has_separator = 1;\n\n    // Parse [HH[:?MM[:?SS]]]\n    for (size_t i = 0; i < 3; ++i) {\n        p = parse_digits(p, vals[i], 2);\n        if (NULL == p) {\n            return -3;\n        }\n\n        char c = *(p++);\n        if (i == 0) {\n            has_separator = (c == ':');\n        }\n\n        if (p >= p_end) {\n            return c != '\\0';\n        }\n        else if (has_separator && (c == ':')) {\n            continue;\n        }\n        else if (c == '.' || c == ',') {\n            break;\n        } else if (!has_separator) {\n            --p;\n        } else {\n            return -4;  // Malformed time separator\n        }\n    }\n\n    // Parse fractional components\n    size_t len_remains = p_end - p;\n    size_t to_parse = len_remains;\n    if (len_remains >= 6) {\n        to_parse = 6;\n    }\n\n    p = parse_digits(p, microsecond, to_parse);\n    if (NULL == p) {\n        return -3;\n    }\n\n    static int correction[] = {\n        100000, 10000, 1000, 100, 10\n    };\n\n    if (to_parse < 6) {\n        *microsecond *= correction[to_parse-1];\n    }\n\n    while (is_digit(*p)){\n        ++p; // skip truncated digits\n    }\n\n    // Return 1 if it's not the end of the string\n    return *p != '\\0';\n}\n\nstatic int\nparse_isoformat_time(const char *dtstr, size_t dtlen, int *hour, int *minute,\n                     int *second, int *microsecond, int *tzoffset,\n                     int *tzmicrosecond)\n{\n    // Parse the time portion of a datetime.isoformat() string\n    //\n    // Return codes:\n    //      0:  Success (no tzoffset)\n    //      1:  Success (with tzoffset)\n    //     -3:  Failed to parse time component\n    //     -4:  Failed to parse time separator\n    //     -5:  Malformed timezone string\n\n    const char *p = dtstr;\n    const char *p_end = dtstr + dtlen;\n\n    const char *tzinfo_pos = p;\n    do {\n        if (*tzinfo_pos == 'Z' || *tzinfo_pos == '+' || *tzinfo_pos == '-') {\n            break;\n        }\n    } while (++tzinfo_pos < p_end);\n\n    int rv = parse_hh_mm_ss_ff(dtstr, tzinfo_pos, hour, minute, second,\n                               microsecond);\n\n    if (rv < 0) {\n        return rv;\n    }\n    else if (tzinfo_pos == p_end) {\n        // We know that there's no time zone, so if there's stuff at the\n        // end of the string it's an error.\n        if (rv == 1) {\n            return -5;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    // Special case UTC / Zulu time.\n    if (*tzinfo_pos == 'Z') {\n        *tzoffset = 0;\n        *tzmicrosecond = 0;\n\n        if (*(tzinfo_pos + 1) != '\\0') {\n            return -5;\n        } else {\n            return 1;\n        }\n    }\n\n    int tzsign = (*tzinfo_pos == '-') ? -1 : 1;\n    tzinfo_pos++;\n    int tzhour = 0, tzminute = 0, tzsecond = 0;\n    rv = parse_hh_mm_ss_ff(tzinfo_pos, p_end, &tzhour, &tzminute, &tzsecond,\n                           tzmicrosecond);\n\n    *tzoffset = tzsign * ((tzhour * 3600) + (tzminute * 60) + tzsecond);\n    *tzmicrosecond *= tzsign;\n\n    return rv ? -5 : 1;\n}\n\n/* ---------------------------------------------------------------------------\n * Create various objects, mostly without range checking.\n */\n\n/* Create a date instance with no range checking. */\nstatic PyObject *\nnew_date_ex(int year, int month, int day, PyTypeObject *type)\n{\n    PyDateTime_Date *self;\n\n    if (check_date_args(year, month, day) < 0) {\n        return NULL;\n    }\n\n    self = (PyDateTime_Date *)(type->tp_alloc(type, 0));\n    if (self != NULL)\n        set_date_fields(self, year, month, day);\n    return (PyObject *)self;\n}\n\n#define new_date(year, month, day) \\\n    new_date_ex(year, month, day, DATE_TYPE(NO_STATE))\n\n// Forward declaration\nstatic PyObject *\nnew_datetime_ex(int, int, int, int, int, int, int, PyObject *, PyTypeObject *);\n\n/* Create date instance with no range checking, or call subclass constructor */\nstatic PyObject *\nnew_date_subclass_ex(int year, int month, int day, PyObject *cls)\n{\n    PyObject *result;\n    // We have \"fast path\" constructors for two subclasses: date and datetime\n    if ((PyTypeObject *)cls == DATE_TYPE(NO_STATE)) {\n        result = new_date_ex(year, month, day, (PyTypeObject *)cls);\n    }\n    else if ((PyTypeObject *)cls == DATETIME_TYPE(NO_STATE)) {\n        result = new_datetime_ex(year, month, day, 0, 0, 0, 0, Py_None,\n                                 (PyTypeObject *)cls);\n    }\n    else {\n        result = PyObject_CallFunction(cls, \"iii\", year, month, day);\n    }\n\n    return result;\n}\n\n/* Create a datetime instance with no range checking. */\nstatic PyObject *\nnew_datetime_ex2(int year, int month, int day, int hour, int minute,\n                 int second, int usecond, PyObject *tzinfo, int fold, PyTypeObject *type)\n{\n    PyDateTime_DateTime *self;\n    char aware = tzinfo != Py_None;\n\n    if (check_date_args(year, month, day) < 0) {\n        return NULL;\n    }\n    if (check_time_args(hour, minute, second, usecond, fold) < 0) {\n        return NULL;\n    }\n    if (check_tzinfo_subclass(tzinfo) < 0) {\n        return NULL;\n    }\n\n    self = (PyDateTime_DateTime *) (type->tp_alloc(type, aware));\n    if (self != NULL) {\n        self->hastzinfo = aware;\n        set_date_fields((PyDateTime_Date *)self, year, month, day);\n        DATE_SET_HOUR(self, hour);\n        DATE_SET_MINUTE(self, minute);\n        DATE_SET_SECOND(self, second);\n        DATE_SET_MICROSECOND(self, usecond);\n        if (aware) {\n            self->tzinfo = Py_NewRef(tzinfo);\n        }\n        DATE_SET_FOLD(self, fold);\n    }\n    return (PyObject *)self;\n}\n\nstatic PyObject *\nnew_datetime_ex(int year, int month, int day, int hour, int minute,\n                int second, int usecond, PyObject *tzinfo, PyTypeObject *type)\n{\n    return new_datetime_ex2(year, month, day, hour, minute, second, usecond,\n                            tzinfo, 0, type);\n}\n\n#define new_datetime(y, m, d, hh, mm, ss, us, tzinfo, fold) \\\n    new_datetime_ex2(y, m, d, hh, mm, ss, us, tzinfo, fold, DATETIME_TYPE(NO_STATE))\n\nstatic PyObject *\ncall_subclass_fold(PyObject *cls, int fold, const char *format, ...)\n{\n    PyObject *kwargs = NULL, *res = NULL;\n    va_list va;\n\n    va_start(va, format);\n    PyObject *args = Py_VaBuildValue(format, va);\n    va_end(va);\n    if (args == NULL) {\n        return NULL;\n    }\n    if (fold) {\n        kwargs = PyDict_New();\n        if (kwargs == NULL) {\n            goto Done;\n        }\n        PyObject *obj = PyLong_FromLong(fold);\n        if (obj == NULL) {\n            goto Done;\n        }\n        int err = PyDict_SetItemString(kwargs, \"fold\", obj);\n        Py_DECREF(obj);\n        if (err < 0) {\n            goto Done;\n        }\n    }\n    res = PyObject_Call(cls, args, kwargs);\nDone:\n    Py_DECREF(args);\n    Py_XDECREF(kwargs);\n    return res;\n}\n\nstatic PyObject *\nnew_datetime_subclass_fold_ex(int year, int month, int day, int hour, int minute,\n                              int second, int usecond, PyObject *tzinfo,\n                              int fold, PyObject *cls)\n{\n    PyObject* dt;\n    if ((PyTypeObject*)cls == DATETIME_TYPE(NO_STATE)) {\n        // Use the fast path constructor\n        dt = new_datetime(year, month, day, hour, minute, second, usecond,\n                          tzinfo, fold);\n    }\n    else {\n        // Subclass\n        dt = call_subclass_fold(cls, fold, \"iiiiiiiO\", year, month, day,\n                                hour, minute, second, usecond, tzinfo);\n    }\n\n    return dt;\n}\n\nstatic PyObject *\nnew_datetime_subclass_ex(int year, int month, int day, int hour, int minute,\n                              int second, int usecond, PyObject *tzinfo,\n                              PyObject *cls) {\n    return new_datetime_subclass_fold_ex(year, month, day, hour, minute,\n                                         second, usecond, tzinfo, 0,\n                                         cls);\n}\n\n/* Create a time instance with no range checking. */\nstatic PyObject *\nnew_time_ex2(int hour, int minute, int second, int usecond,\n             PyObject *tzinfo, int fold, PyTypeObject *type)\n{\n    PyDateTime_Time *self;\n    char aware = tzinfo != Py_None;\n\n    if (check_time_args(hour, minute, second, usecond, fold) < 0) {\n        return NULL;\n    }\n    if (check_tzinfo_subclass(tzinfo) < 0) {\n        return NULL;\n    }\n\n    self = (PyDateTime_Time *) (type->tp_alloc(type, aware));\n    if (self != NULL) {\n        self->hastzinfo = aware;\n        self->hashcode = -1;\n        TIME_SET_HOUR(self, hour);\n        TIME_SET_MINUTE(self, minute);\n        TIME_SET_SECOND(self, second);\n        TIME_SET_MICROSECOND(self, usecond);\n        if (aware) {\n            self->tzinfo = Py_NewRef(tzinfo);\n        }\n        TIME_SET_FOLD(self, fold);\n    }\n    return (PyObject *)self;\n}\n\nstatic PyObject *\nnew_time_ex(int hour, int minute, int second, int usecond,\n            PyObject *tzinfo, PyTypeObject *type)\n{\n    return new_time_ex2(hour, minute, second, usecond, tzinfo, 0, type);\n}\n\n#define new_time(hh, mm, ss, us, tzinfo, fold)  \\\n    new_time_ex2(hh, mm, ss, us, tzinfo, fold, TIME_TYPE(NO_STATE))\n\nstatic PyObject *\nnew_time_subclass_fold_ex(int hour, int minute, int second, int usecond,\n                          PyObject *tzinfo, int fold, PyObject *cls)\n{\n    PyObject *t;\n    if ((PyTypeObject*)cls == TIME_TYPE(NO_STATE)) {\n        // Use the fast path constructor\n        t = new_time(hour, minute, second, usecond, tzinfo, fold);\n    }\n    else {\n        // Subclass\n        t = call_subclass_fold(cls, fold, \"iiiiO\", hour, minute, second,\n                               usecond, tzinfo);\n    }\n\n    return t;\n}\n\nstatic PyDateTime_Delta * look_up_delta(int, int, int, PyTypeObject *);\n\n/* Create a timedelta instance.  Normalize the members iff normalize is\n * true.  Passing false is a speed optimization, if you know for sure\n * that seconds and microseconds are already in their proper ranges.  In any\n * case, raises OverflowError and returns NULL if the normalized days is out\n * of range.\n */\nstatic PyObject *\nnew_delta_ex(int days, int seconds, int microseconds, int normalize,\n             PyTypeObject *type)\n{\n    PyDateTime_Delta *self;\n\n    if (normalize)\n        normalize_d_s_us(&days, &seconds, &microseconds);\n    assert(0 <= seconds && seconds < 24*3600);\n    assert(0 <= microseconds && microseconds < 1000000);\n\n    if (check_delta_day_range(days) < 0)\n        return NULL;\n\n    self = look_up_delta(days, seconds, microseconds, type);\n    if (self != NULL) {\n        return (PyObject *)self;\n    }\n    assert(!PyErr_Occurred());\n\n    self = (PyDateTime_Delta *) (type->tp_alloc(type, 0));\n    if (self != NULL) {\n        self->hashcode = -1;\n        SET_TD_DAYS(self, days);\n        SET_TD_SECONDS(self, seconds);\n        SET_TD_MICROSECONDS(self, microseconds);\n    }\n    return (PyObject *) self;\n}\n\n#define new_delta(d, s, us, normalize)  \\\n    new_delta_ex(d, s, us, normalize, DELTA_TYPE(NO_STATE))\n\n\ntypedef struct\n{\n    PyObject_HEAD\n    PyObject *offset;\n    PyObject *name;\n} PyDateTime_TimeZone;\n\nstatic PyDateTime_TimeZone * look_up_timezone(PyObject *offset, PyObject *name);\n\n/* Create new timezone instance checking offset range.  This\n   function does not check the name argument.  Caller must assure\n   that offset is a timedelta instance and name is either NULL\n   or a unicode object. */\nstatic PyObject *\ncreate_timezone(PyObject *offset, PyObject *name)\n{\n    PyDateTime_TimeZone *self;\n    PyTypeObject *type = TIMEZONE_TYPE(NO_STATE);\n\n    assert(offset != NULL);\n    assert(PyDelta_Check(offset));\n    assert(name == NULL || PyUnicode_Check(name));\n\n    self = look_up_timezone(offset, name);\n    if (self != NULL) {\n        return (PyObject *)self;\n    }\n    assert(!PyErr_Occurred());\n\n    self = (PyDateTime_TimeZone *)(type->tp_alloc(type, 0));\n    if (self == NULL) {\n        return NULL;\n    }\n    self->offset = Py_NewRef(offset);\n    self->name = Py_XNewRef(name);\n    return (PyObject *)self;\n}\n\nstatic int delta_bool(PyDateTime_Delta *self);\nstatic PyDateTime_TimeZone utc_timezone;\n\nstatic PyObject *\nnew_timezone(PyObject *offset, PyObject *name)\n{\n    assert(offset != NULL);\n    assert(PyDelta_Check(offset));\n    assert(name == NULL || PyUnicode_Check(name));\n\n    if (name == NULL && delta_bool((PyDateTime_Delta *)offset) == 0) {\n        return Py_NewRef(CONST_UTC(NO_STATE));\n    }\n    if ((GET_TD_DAYS(offset) == -1 &&\n            GET_TD_SECONDS(offset) == 0 &&\n            GET_TD_MICROSECONDS(offset) < 1) ||\n        GET_TD_DAYS(offset) < -1 || GET_TD_DAYS(offset) >= 1) {\n        PyErr_Format(PyExc_ValueError, \"offset must be a timedelta\"\n                     \" strictly between -timedelta(hours=24) and\"\n                     \" timedelta(hours=24),\"\n                     \" not %R.\", offset);\n        return NULL;\n    }\n\n    return create_timezone(offset, name);\n}\n\n/* ---------------------------------------------------------------------------\n * tzinfo helpers.\n */\n\n/* Ensure that p is None or of a tzinfo subclass.  Return 0 if OK; if not\n * raise TypeError and return -1.\n */\nstatic int\ncheck_tzinfo_subclass(PyObject *p)\n{\n    if (p == Py_None || PyTZInfo_Check(p))\n        return 0;\n    PyErr_Format(PyExc_TypeError,\n                 \"tzinfo argument must be None or of a tzinfo subclass, \"\n                 \"not type '%s'\",\n                 Py_TYPE(p)->tp_name);\n    return -1;\n}\n\n/* If self has a tzinfo member, return a BORROWED reference to it.  Else\n * return NULL, which is NOT AN ERROR.  There are no error returns here,\n * and the caller must not decref the result.\n */\nstatic PyObject *\nget_tzinfo_member(PyObject *self)\n{\n    PyObject *tzinfo = NULL;\n\n    if (PyDateTime_Check(self) && HASTZINFO(self))\n        tzinfo = ((PyDateTime_DateTime *)self)->tzinfo;\n    else if (PyTime_Check(self) && HASTZINFO(self))\n        tzinfo = ((PyDateTime_Time *)self)->tzinfo;\n\n    return tzinfo;\n}\n\n/* Call getattr(tzinfo, name)(tzinfoarg), and check the result.  tzinfo must\n * be an instance of the tzinfo class.  If the method returns None, this\n * returns None.  If the method doesn't return None or timedelta, TypeError is\n * raised and this returns NULL.  If it returns a timedelta and the value is\n * out of range or isn't a whole number of minutes, ValueError is raised and\n * this returns NULL.  Else result is returned.\n */\nstatic PyObject *\ncall_tzinfo_method(PyObject *tzinfo, const char *name, PyObject *tzinfoarg)\n{\n    PyObject *offset;\n\n    assert(tzinfo != NULL);\n    assert(PyTZInfo_Check(tzinfo) || tzinfo == Py_None);\n    assert(tzinfoarg != NULL);\n\n    if (tzinfo == Py_None)\n        Py_RETURN_NONE;\n    offset = PyObject_CallMethod(tzinfo, name, \"O\", tzinfoarg);\n    if (offset == Py_None || offset == NULL)\n        return offset;\n    if (PyDelta_Check(offset)) {\n        if ((GET_TD_DAYS(offset) == -1 &&\n                GET_TD_SECONDS(offset) == 0 &&\n                GET_TD_MICROSECONDS(offset) < 1) ||\n            GET_TD_DAYS(offset) < -1 || GET_TD_DAYS(offset) >= 1) {\n            Py_DECREF(offset);\n            PyErr_Format(PyExc_ValueError, \"offset must be a timedelta\"\n                         \" strictly between -timedelta(hours=24) and\"\n                         \" timedelta(hours=24).\");\n            return NULL;\n        }\n    }\n    else {\n        PyErr_Format(PyExc_TypeError,\n                     \"tzinfo.%s() must return None or \"\n                     \"timedelta, not '%.200s'\",\n                     name, Py_TYPE(offset)->tp_name);\n        Py_DECREF(offset);\n        return NULL;\n    }\n\n    return offset;\n}\n\n/* Call tzinfo.utcoffset(tzinfoarg), and extract an integer from the\n * result.  tzinfo must be an instance of the tzinfo class.  If utcoffset()\n * returns None, call_utcoffset returns 0 and sets *none to 1.  If uctoffset()\n * doesn't return None or timedelta, TypeError is raised and this returns -1.\n * If utcoffset() returns an out of range timedelta,\n * ValueError is raised and this returns -1.  Else *none is\n * set to 0 and the offset is returned (as timedelta, positive east of UTC).\n */\nstatic PyObject *\ncall_utcoffset(PyObject *tzinfo, PyObject *tzinfoarg)\n{\n    return call_tzinfo_method(tzinfo, \"utcoffset\", tzinfoarg);\n}\n\n/* Call tzinfo.dst(tzinfoarg), and extract an integer from the\n * result.  tzinfo must be an instance of the tzinfo class.  If dst()\n * returns None, call_dst returns 0 and sets *none to 1.  If dst()\n * doesn't return None or timedelta, TypeError is raised and this\n * returns -1.  If dst() returns an invalid timedelta for a UTC offset,\n * ValueError is raised and this returns -1.  Else *none is set to 0 and\n * the offset is returned (as timedelta, positive east of UTC).\n */\nstatic PyObject *\ncall_dst(PyObject *tzinfo, PyObject *tzinfoarg)\n{\n    return call_tzinfo_method(tzinfo, \"dst\", tzinfoarg);\n}\n\n/* Call tzinfo.tzname(tzinfoarg), and return the result.  tzinfo must be\n * an instance of the tzinfo class or None.  If tzinfo isn't None, and\n * tzname() doesn't return None or a string, TypeError is raised and this\n * returns NULL.  If the result is a string, we ensure it is a Unicode\n * string.\n */\nstatic PyObject *\ncall_tzname(PyObject *tzinfo, PyObject *tzinfoarg)\n{\n    PyObject *result;\n    assert(tzinfo != NULL);\n    assert(check_tzinfo_subclass(tzinfo) >= 0);\n    assert(tzinfoarg != NULL);\n\n    if (tzinfo == Py_None)\n        Py_RETURN_NONE;\n\n    result = PyObject_CallMethodOneArg(tzinfo, &_Py_ID(tzname), tzinfoarg);\n\n    if (result == NULL || result == Py_None)\n        return result;\n\n    if (!PyUnicode_Check(result)) {\n        PyErr_Format(PyExc_TypeError, \"tzinfo.tzname() must \"\n                     \"return None or a string, not '%s'\",\n                     Py_TYPE(result)->tp_name);\n        Py_SETREF(result, NULL);\n    }\n\n    return result;\n}\n\n/* repr is like \"someclass(arg1, arg2)\".  If tzinfo isn't None,\n * stuff\n *     \", tzinfo=\" + repr(tzinfo)\n * before the closing \")\".\n */\nstatic PyObject *\nappend_keyword_tzinfo(PyObject *repr, PyObject *tzinfo)\n{\n    PyObject *temp;\n\n    assert(PyUnicode_Check(repr));\n    assert(tzinfo);\n    if (tzinfo == Py_None)\n        return repr;\n    /* Get rid of the trailing ')'. */\n    assert(PyUnicode_READ_CHAR(repr, PyUnicode_GET_LENGTH(repr)-1) == ')');\n    temp = PyUnicode_Substring(repr, 0, PyUnicode_GET_LENGTH(repr) - 1);\n    Py_DECREF(repr);\n    if (temp == NULL)\n        return NULL;\n    repr = PyUnicode_FromFormat(\"%U, tzinfo=%R)\", temp, tzinfo);\n    Py_DECREF(temp);\n    return repr;\n}\n\n/* repr is like \"someclass(arg1, arg2)\".  If fold isn't 0,\n * stuff\n *     \", fold=\" + repr(tzinfo)\n * before the closing \")\".\n */\nstatic PyObject *\nappend_keyword_fold(PyObject *repr, int fold)\n{\n    PyObject *temp;\n\n    assert(PyUnicode_Check(repr));\n    if (fold == 0)\n        return repr;\n    /* Get rid of the trailing ')'. */\n    assert(PyUnicode_READ_CHAR(repr, PyUnicode_GET_LENGTH(repr)-1) == ')');\n    temp = PyUnicode_Substring(repr, 0, PyUnicode_GET_LENGTH(repr) - 1);\n    Py_DECREF(repr);\n    if (temp == NULL)\n        return NULL;\n    repr = PyUnicode_FromFormat(\"%U, fold=%d)\", temp, fold);\n    Py_DECREF(temp);\n    return repr;\n}\n\nstatic inline PyObject *\ntzinfo_from_isoformat_results(int rv, int tzoffset, int tz_useconds)\n{\n    PyObject *tzinfo;\n    if (rv == 1) {\n        // Create a timezone from offset in seconds (0 returns UTC)\n        if (tzoffset == 0) {\n            return Py_NewRef(CONST_UTC(NO_STATE));\n        }\n\n        PyObject *delta = new_delta(0, tzoffset, tz_useconds, 1);\n        if (delta == NULL) {\n            return NULL;\n        }\n        tzinfo = new_timezone(delta, NULL);\n        Py_DECREF(delta);\n    }\n    else {\n        tzinfo = Py_NewRef(Py_None);\n    }\n\n    return tzinfo;\n}\n\n/* ---------------------------------------------------------------------------\n * String format helpers.\n */\n\nstatic PyObject *\nformat_ctime(PyDateTime_Date *date, int hours, int minutes, int seconds)\n{\n    static const char * const DayNames[] = {\n        \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"\n    };\n    static const char * const MonthNames[] = {\n        \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n    };\n\n    int wday = weekday(GET_YEAR(date), GET_MONTH(date), GET_DAY(date));\n\n    return PyUnicode_FromFormat(\"%s %s %2d %02d:%02d:%02d %04d\",\n                                DayNames[wday], MonthNames[GET_MONTH(date)-1],\n                                GET_DAY(date), hours, minutes, seconds,\n                                GET_YEAR(date));\n}\n\nstatic PyObject *delta_negative(PyDateTime_Delta *self);\n\n/* Add formatted UTC offset string to buf.  buf has no more than\n * buflen bytes remaining.  The UTC offset is gotten by calling\n * tzinfo.uctoffset(tzinfoarg).  If that returns None, \\0 is stored into\n * *buf, and that's all.  Else the returned value is checked for sanity (an\n * integer in range), and if that's OK it's converted to an hours & minutes\n * string of the form\n *   sign HH sep MM [sep SS [. UUUUUU]]\n * Returns 0 if everything is OK.  If the return value from utcoffset() is\n * bogus, an appropriate exception is set and -1 is returned.\n */\nstatic int\nformat_utcoffset(char *buf, size_t buflen, const char *sep,\n                PyObject *tzinfo, PyObject *tzinfoarg)\n{\n    PyObject *offset;\n    int hours, minutes, seconds, microseconds;\n    char sign;\n\n    assert(buflen >= 1);\n\n    offset = call_utcoffset(tzinfo, tzinfoarg);\n    if (offset == NULL)\n        return -1;\n    if (offset == Py_None) {\n        Py_DECREF(offset);\n        *buf = '\\0';\n        return 0;\n    }\n    /* Offset is normalized, so it is negative if days < 0 */\n    if (GET_TD_DAYS(offset) < 0) {\n        sign = '-';\n        Py_SETREF(offset, delta_negative((PyDateTime_Delta *)offset));\n        if (offset == NULL)\n            return -1;\n    }\n    else {\n        sign = '+';\n    }\n    /* Offset is not negative here. */\n    microseconds = GET_TD_MICROSECONDS(offset);\n    seconds = GET_TD_SECONDS(offset);\n    Py_DECREF(offset);\n    minutes = divmod(seconds, 60, &seconds);\n    hours = divmod(minutes, 60, &minutes);\n    if (microseconds) {\n        PyOS_snprintf(buf, buflen, \"%c%02d%s%02d%s%02d.%06d\", sign,\n                      hours, sep, minutes, sep, seconds, microseconds);\n        return 0;\n    }\n    if (seconds) {\n        PyOS_snprintf(buf, buflen, \"%c%02d%s%02d%s%02d\", sign, hours,\n                      sep, minutes, sep, seconds);\n        return 0;\n    }\n    PyOS_snprintf(buf, buflen, \"%c%02d%s%02d\", sign, hours, sep, minutes);\n    return 0;\n}\n\nstatic PyObject *\nmake_somezreplacement(PyObject *object, char *sep, PyObject *tzinfoarg)\n{\n    char buf[100];\n    PyObject *tzinfo = get_tzinfo_member(object);\n\n    if (tzinfo == Py_None || tzinfo == NULL) {\n        return PyBytes_FromStringAndSize(NULL, 0);\n    }\n\n    assert(tzinfoarg != NULL);\n    if (format_utcoffset(buf,\n                         sizeof(buf),\n                         sep,\n                         tzinfo,\n                         tzinfoarg) < 0)\n        return NULL;\n\n    return PyBytes_FromStringAndSize(buf, strlen(buf));\n}\n\nstatic PyObject *\nmake_Zreplacement(PyObject *object, PyObject *tzinfoarg)\n{\n    PyObject *temp;\n    PyObject *tzinfo = get_tzinfo_member(object);\n    PyObject *Zreplacement = PyUnicode_FromStringAndSize(NULL, 0);\n\n    if (Zreplacement == NULL)\n        return NULL;\n    if (tzinfo == Py_None || tzinfo == NULL)\n        return Zreplacement;\n\n    assert(tzinfoarg != NULL);\n    temp = call_tzname(tzinfo, tzinfoarg);\n    if (temp == NULL)\n        goto Error;\n    if (temp == Py_None) {\n        Py_DECREF(temp);\n        return Zreplacement;\n    }\n\n    assert(PyUnicode_Check(temp));\n    /* Since the tzname is getting stuffed into the\n     * format, we have to double any % signs so that\n     * strftime doesn't treat them as format codes.\n     */\n    Py_DECREF(Zreplacement);\n    Zreplacement = PyObject_CallMethod(temp, \"replace\", \"ss\", \"%\", \"%%\");\n    Py_DECREF(temp);\n    if (Zreplacement == NULL)\n        return NULL;\n    if (!PyUnicode_Check(Zreplacement)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"tzname.replace() did not return a string\");\n        goto Error;\n    }\n    return Zreplacement;\n\n  Error:\n    Py_DECREF(Zreplacement);\n    return NULL;\n}\n\nstatic PyObject *\nmake_freplacement(PyObject *object)\n{\n    char freplacement[64];\n    if (PyTime_Check(object))\n        sprintf(freplacement, \"%06d\", TIME_GET_MICROSECOND(object));\n    else if (PyDateTime_Check(object))\n        sprintf(freplacement, \"%06d\", DATE_GET_MICROSECOND(object));\n    else\n        sprintf(freplacement, \"%06d\", 0);\n\n    return PyBytes_FromStringAndSize(freplacement, strlen(freplacement));\n}\n\n/* I sure don't want to reproduce the strftime code from the time module,\n * so this imports the module and calls it.  All the hair is due to\n * giving special meanings to the %z, %:z, %Z and %f format codes via a\n * preprocessing step on the format string.\n * tzinfoarg is the argument to pass to the object's tzinfo method, if\n * needed.\n */\nstatic PyObject *\nwrap_strftime(PyObject *object, PyObject *format, PyObject *timetuple,\n              PyObject *tzinfoarg)\n{\n    PyObject *result = NULL;            /* guilty until proved innocent */\n\n    PyObject *zreplacement = NULL;      /* py string, replacement for %z */\n    PyObject *colonzreplacement = NULL; /* py string, replacement for %:z */\n    PyObject *Zreplacement = NULL;      /* py string, replacement for %Z */\n    PyObject *freplacement = NULL;      /* py string, replacement for %f */\n\n    const char *pin;            /* pointer to next char in input format */\n    Py_ssize_t flen;            /* length of input format */\n    char ch;                    /* next char in input format */\n\n    PyObject *newfmt = NULL;            /* py string, the output format */\n    char *pnew;         /* pointer to available byte in output format */\n    size_t totalnew;            /* number bytes total in output format buffer,\n                               exclusive of trailing \\0 */\n    size_t usednew;     /* number bytes used so far in output format buffer */\n\n    const char *ptoappend;      /* ptr to string to append to output buffer */\n    Py_ssize_t ntoappend;       /* # of bytes to append to output buffer */\n\n#ifdef Py_NORMALIZE_CENTURY\n    /* Buffer of maximum size of formatted year permitted by long. */\n    char buf[SIZEOF_LONG*5/2+2];\n#endif\n\n    assert(object && format && timetuple);\n    assert(PyUnicode_Check(format));\n    /* Convert the input format to a C string and size */\n    pin = PyUnicode_AsUTF8AndSize(format, &flen);\n    if (!pin)\n        return NULL;\n\n    PyObject *strftime = _PyImport_GetModuleAttrString(\"time\", \"strftime\");\n    if (strftime == NULL) {\n        goto Done;\n    }\n\n    /* Scan the input format, looking for %z/%Z/%f escapes, building\n     * a new format.  Since computing the replacements for those codes\n     * is expensive, don't unless they're actually used.\n     */\n    if (flen > INT_MAX - 1) {\n        PyErr_NoMemory();\n        goto Done;\n    }\n\n    totalnew = flen + 1;        /* realistic if no %z/%Z */\n    newfmt = PyBytes_FromStringAndSize(NULL, totalnew);\n    if (newfmt == NULL) goto Done;\n    pnew = PyBytes_AsString(newfmt);\n    usednew = 0;\n\n    while ((ch = *pin++) != '\\0') {\n        if (ch != '%') {\n            ptoappend = pin - 1;\n            ntoappend = 1;\n        }\n        else if ((ch = *pin++) == '\\0') {\n        /* Null byte follows %, copy only '%'.\n         *\n         * Back the pin up one char so that we catch the null check\n         * the next time through the loop.*/\n            pin--;\n            ptoappend = pin - 1;\n            ntoappend = 1;\n        }\n        /* A % has been seen and ch is the character after it. */\n        else if (ch == 'z') {\n            /* %z -> +HHMM */\n            if (zreplacement == NULL) {\n                zreplacement = make_somezreplacement(object, \"\", tzinfoarg);\n                if (zreplacement == NULL)\n                    goto Done;\n            }\n            assert(zreplacement != NULL);\n            assert(PyBytes_Check(zreplacement));\n            ptoappend = PyBytes_AS_STRING(zreplacement);\n            ntoappend = PyBytes_GET_SIZE(zreplacement);\n        }\n        else if (ch == ':' && *pin == 'z' && pin++) {\n            /* %:z -> +HH:MM */\n            if (colonzreplacement == NULL) {\n                colonzreplacement = make_somezreplacement(object, \":\", tzinfoarg);\n                if (colonzreplacement == NULL)\n                    goto Done;\n            }\n            assert(colonzreplacement != NULL);\n            assert(PyBytes_Check(colonzreplacement));\n            ptoappend = PyBytes_AS_STRING(colonzreplacement);\n            ntoappend = PyBytes_GET_SIZE(colonzreplacement);\n        }\n        else if (ch == 'Z') {\n            /* format tzname */\n            if (Zreplacement == NULL) {\n                Zreplacement = make_Zreplacement(object,\n                                                 tzinfoarg);\n                if (Zreplacement == NULL)\n                    goto Done;\n            }\n            assert(Zreplacement != NULL);\n            assert(PyUnicode_Check(Zreplacement));\n            ptoappend = PyUnicode_AsUTF8AndSize(Zreplacement,\n                                                  &ntoappend);\n            if (ptoappend == NULL)\n                goto Done;\n        }\n        else if (ch == 'f') {\n            /* format microseconds */\n            if (freplacement == NULL) {\n                freplacement = make_freplacement(object);\n                if (freplacement == NULL)\n                    goto Done;\n            }\n            assert(freplacement != NULL);\n            assert(PyBytes_Check(freplacement));\n            ptoappend = PyBytes_AS_STRING(freplacement);\n            ntoappend = PyBytes_GET_SIZE(freplacement);\n        }\n#ifdef Py_NORMALIZE_CENTURY\n        else if (ch == 'Y' || ch == 'G') {\n            /* 0-pad year with century as necessary */\n            PyObject *item = PyTuple_GET_ITEM(timetuple, 0);\n            long year_long = PyLong_AsLong(item);\n\n            if (year_long == -1 && PyErr_Occurred()) {\n                goto Done;\n            }\n            /* Note that datetime(1000, 1, 1).strftime('%G') == '1000' so year\n               1000 for %G can go on the fast path. */\n            if (year_long >= 1000) {\n                goto PassThrough;\n            }\n            if (ch == 'G') {\n                PyObject *year_str = PyObject_CallFunction(strftime, \"sO\",\n                                                           \"%G\", timetuple);\n                if (year_str == NULL) {\n                    goto Done;\n                }\n                PyObject *year = PyNumber_Long(year_str);\n                Py_DECREF(year_str);\n                if (year == NULL) {\n                    goto Done;\n                }\n                year_long = PyLong_AsLong(year);\n                Py_DECREF(year);\n                if (year_long == -1 && PyErr_Occurred()) {\n                    goto Done;\n                }\n            }\n\n            ntoappend = PyOS_snprintf(buf, sizeof(buf), \"%04ld\", year_long);\n            ptoappend = buf;\n        }\n#endif\n        else {\n            /* percent followed by something else */\n#ifdef Py_NORMALIZE_CENTURY\n PassThrough:\n#endif\n            ptoappend = pin - 2;\n            ntoappend = 2;\n        }\n\n        /* Append the ntoappend chars starting at ptoappend to\n         * the new format.\n         */\n        if (ntoappend == 0)\n            continue;\n        assert(ptoappend != NULL);\n        assert(ntoappend > 0);\n        while (usednew + ntoappend > totalnew) {\n            if (totalnew > (PY_SSIZE_T_MAX >> 1)) { /* overflow */\n                PyErr_NoMemory();\n                goto Done;\n            }\n            totalnew <<= 1;\n            if (_PyBytes_Resize(&newfmt, totalnew) < 0)\n                goto Done;\n            pnew = PyBytes_AsString(newfmt) + usednew;\n        }\n        memcpy(pnew, ptoappend, ntoappend);\n        pnew += ntoappend;\n        usednew += ntoappend;\n        assert(usednew <= totalnew);\n    }  /* end while() */\n\n    if (_PyBytes_Resize(&newfmt, usednew) < 0)\n        goto Done;\n    {\n        PyObject *format;\n\n        format = PyUnicode_FromString(PyBytes_AS_STRING(newfmt));\n        if (format != NULL) {\n            result = PyObject_CallFunctionObjArgs(strftime,\n                                                   format, timetuple, NULL);\n            Py_DECREF(format);\n        }\n    }\n Done:\n    Py_XDECREF(freplacement);\n    Py_XDECREF(zreplacement);\n    Py_XDECREF(colonzreplacement);\n    Py_XDECREF(Zreplacement);\n    Py_XDECREF(newfmt);\n    Py_XDECREF(strftime);\n    return result;\n}\n\n/* ---------------------------------------------------------------------------\n * Wrap functions from the time module.  These aren't directly available\n * from C.  Perhaps they should be.\n */\n\n/* Call time.time() and return its result (a Python float). */\nstatic PyObject *\ntime_time(void)\n{\n    PyObject *result = NULL;\n    PyObject *time = _PyImport_GetModuleAttrString(\"time\", \"time\");\n\n    if (time != NULL) {\n        result = PyObject_CallNoArgs(time);\n        Py_DECREF(time);\n    }\n    return result;\n}\n\n/* Build a time.struct_time.  The weekday and day number are automatically\n * computed from the y,m,d args.\n */\nstatic PyObject *\nbuild_struct_time(int y, int m, int d, int hh, int mm, int ss, int dstflag)\n{\n    PyObject *struct_time;\n    PyObject *result;\n\n    struct_time = _PyImport_GetModuleAttrString(\"time\", \"struct_time\");\n    if (struct_time == NULL) {\n        return NULL;\n    }\n\n    result = PyObject_CallFunction(struct_time, \"((iiiiiiiii))\",\n                         y, m, d,\n                         hh, mm, ss,\n                         weekday(y, m, d),\n                         days_before_month(y, m) + d,\n                         dstflag);\n    Py_DECREF(struct_time);\n    return result;\n}\n\n/* ---------------------------------------------------------------------------\n * Miscellaneous helpers.\n */\n\n/* The comparisons here all most naturally compute a cmp()-like result.\n * This little helper turns that into a bool result for rich comparisons.\n */\nstatic PyObject *\ndiff_to_bool(int diff, int op)\n{\n    Py_RETURN_RICHCOMPARE(diff, 0, op);\n}\n\n/* ---------------------------------------------------------------------------\n * Class implementations.\n */\n\n/*\n * PyDateTime_Delta implementation.\n */\n\n/* Convert a timedelta to a number of us,\n *      (24*3600*self.days + self.seconds)*1000000 + self.microseconds\n * as a Python int.\n * Doing mixed-radix arithmetic by hand instead is excruciating in C,\n * due to ubiquitous overflow possibilities.\n */\nstatic PyObject *\ndelta_to_microseconds(PyDateTime_Delta *self)\n{\n    PyObject *x1 = NULL;\n    PyObject *x2 = NULL;\n    PyObject *x3 = NULL;\n    PyObject *result = NULL;\n\n    PyObject *current_mod = NULL;\n    datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n    x1 = PyLong_FromLong(GET_TD_DAYS(self));\n    if (x1 == NULL)\n        goto Done;\n    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n    if (x2 == NULL)\n        goto Done;\n    Py_SETREF(x1, NULL);\n\n    /* x2 has days in seconds */\n    x1 = PyLong_FromLong(GET_TD_SECONDS(self));         /* seconds */\n    if (x1 == NULL)\n        goto Done;\n    x3 = PyNumber_Add(x1, x2);          /* days and seconds in seconds */\n    if (x3 == NULL)\n        goto Done;\n    Py_DECREF(x1);\n    Py_DECREF(x2);\n    /* x1 = */ x2 = NULL;\n\n    /* x3 has days+seconds in seconds */\n    x1 = PyNumber_Multiply(x3, CONST_US_PER_SECOND(st));          /* us */\n    if (x1 == NULL)\n        goto Done;\n    Py_SETREF(x3, NULL);\n\n    /* x1 has days+seconds in us */\n    x2 = PyLong_FromLong(GET_TD_MICROSECONDS(self));\n    if (x2 == NULL)\n        goto Done;\n    result = PyNumber_Add(x1, x2);\n    assert(result == NULL || PyLong_CheckExact(result));\n\nDone:\n    Py_XDECREF(x1);\n    Py_XDECREF(x2);\n    Py_XDECREF(x3);\n    RELEASE_CURRENT_STATE(st, current_mod);\n    return result;\n}\n\nstatic PyObject *\nchecked_divmod(PyObject *a, PyObject *b)\n{\n    PyObject *result = PyNumber_Divmod(a, b);\n    if (result != NULL) {\n        if (!PyTuple_Check(result)) {\n            PyErr_Format(PyExc_TypeError,\n                         \"divmod() returned non-tuple (type %.200s)\",\n                         Py_TYPE(result)->tp_name);\n            Py_DECREF(result);\n            return NULL;\n        }\n        if (PyTuple_GET_SIZE(result) != 2) {\n            PyErr_Format(PyExc_TypeError,\n                         \"divmod() returned a tuple of size %zd\",\n                         PyTuple_GET_SIZE(result));\n            Py_DECREF(result);\n            return NULL;\n        }\n    }\n    return result;\n}\n\n/* Convert a number of us (as a Python int) to a timedelta.\n */\nstatic PyObject *\nmicroseconds_to_delta_ex(PyObject *pyus, PyTypeObject *type)\n{\n    int us;\n    int s;\n    int d;\n\n    PyObject *tuple = NULL;\n    PyObject *num = NULL;\n    PyObject *result = NULL;\n\n    PyObject *current_mod = NULL;\n    datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n    tuple = checked_divmod(pyus, CONST_US_PER_SECOND(st));\n    if (tuple == NULL) {\n        goto Done;\n    }\n\n    num = PyTuple_GET_ITEM(tuple, 1);           /* us */\n    us = PyLong_AsInt(num);\n    num = NULL;\n    if (us == -1 && PyErr_Occurred()) {\n        goto Done;\n    }\n    if (!(0 <= us && us < 1000000)) {\n        goto BadDivmod;\n    }\n\n    num = Py_NewRef(PyTuple_GET_ITEM(tuple, 0));        /* leftover seconds */\n    Py_DECREF(tuple);\n\n    tuple = checked_divmod(num, CONST_SEC_PER_DAY(st));\n    if (tuple == NULL)\n        goto Done;\n    Py_DECREF(num);\n\n    num = PyTuple_GET_ITEM(tuple, 1);           /* seconds */\n    s = PyLong_AsInt(num);\n    num = NULL;\n    if (s == -1 && PyErr_Occurred()) {\n        goto Done;\n    }\n    if (!(0 <= s && s < 24*3600)) {\n        goto BadDivmod;\n    }\n\n    num = Py_NewRef(PyTuple_GET_ITEM(tuple, 0));           /* leftover days */\n    d = PyLong_AsInt(num);\n    if (d == -1 && PyErr_Occurred()) {\n        goto Done;\n    }\n    result = new_delta_ex(d, s, us, 0, type);\n\nDone:\n    Py_XDECREF(tuple);\n    Py_XDECREF(num);\n    RELEASE_CURRENT_STATE(st, current_mod);\n    return result;\n\nBadDivmod:\n    PyErr_SetString(PyExc_TypeError,\n                    \"divmod() returned a value out of range\");\n    goto Done;\n}\n\n#define microseconds_to_delta(pymicros) \\\n    microseconds_to_delta_ex(pymicros, DELTA_TYPE(NO_STATE))\n\nstatic PyObject *\nmultiply_int_timedelta(PyObject *intobj, PyDateTime_Delta *delta)\n{\n    PyObject *pyus_in;\n    PyObject *pyus_out;\n    PyObject *result;\n\n    pyus_in = delta_to_microseconds(delta);\n    if (pyus_in == NULL)\n        return NULL;\n\n    pyus_out = PyNumber_Multiply(intobj, pyus_in);\n    Py_DECREF(pyus_in);\n    if (pyus_out == NULL)\n        return NULL;\n\n    result = microseconds_to_delta(pyus_out);\n    Py_DECREF(pyus_out);\n    return result;\n}\n\nstatic PyObject *\nget_float_as_integer_ratio(PyObject *floatobj)\n{\n    PyObject *ratio;\n\n    assert(floatobj && PyFloat_Check(floatobj));\n    ratio = PyObject_CallMethodNoArgs(floatobj, &_Py_ID(as_integer_ratio));\n    if (ratio == NULL) {\n        return NULL;\n    }\n    if (!PyTuple_Check(ratio)) {\n        PyErr_Format(PyExc_TypeError,\n                     \"unexpected return type from as_integer_ratio(): \"\n                     \"expected tuple, got '%.200s'\",\n                     Py_TYPE(ratio)->tp_name);\n        Py_DECREF(ratio);\n        return NULL;\n    }\n    if (PyTuple_Size(ratio) != 2) {\n        PyErr_SetString(PyExc_ValueError,\n                        \"as_integer_ratio() must return a 2-tuple\");\n        Py_DECREF(ratio);\n        return NULL;\n    }\n    return ratio;\n}\n\n/* op is 0 for multiplication, 1 for division */\nstatic PyObject *\nmultiply_truedivide_timedelta_float(PyDateTime_Delta *delta, PyObject *floatobj, int op)\n{\n    PyObject *result = NULL;\n    PyObject *pyus_in = NULL, *temp, *pyus_out;\n    PyObject *ratio = NULL;\n\n    pyus_in = delta_to_microseconds(delta);\n    if (pyus_in == NULL)\n        return NULL;\n    ratio = get_float_as_integer_ratio(floatobj);\n    if (ratio == NULL) {\n        goto error;\n    }\n    temp = PyNumber_Multiply(pyus_in, PyTuple_GET_ITEM(ratio, op));\n    Py_SETREF(pyus_in, NULL);\n    if (temp == NULL)\n        goto error;\n    pyus_out = divide_nearest(temp, PyTuple_GET_ITEM(ratio, !op));\n    Py_DECREF(temp);\n    if (pyus_out == NULL)\n        goto error;\n    result = microseconds_to_delta(pyus_out);\n    Py_DECREF(pyus_out);\n error:\n    Py_XDECREF(pyus_in);\n    Py_XDECREF(ratio);\n\n    return result;\n}\n\nstatic PyObject *\ndivide_timedelta_int(PyDateTime_Delta *delta, PyObject *intobj)\n{\n    PyObject *pyus_in;\n    PyObject *pyus_out;\n    PyObject *result;\n\n    pyus_in = delta_to_microseconds(delta);\n    if (pyus_in == NULL)\n        return NULL;\n\n    pyus_out = PyNumber_FloorDivide(pyus_in, intobj);\n    Py_DECREF(pyus_in);\n    if (pyus_out == NULL)\n        return NULL;\n\n    result = microseconds_to_delta(pyus_out);\n    Py_DECREF(pyus_out);\n    return result;\n}\n\nstatic PyObject *\ndivide_timedelta_timedelta(PyDateTime_Delta *left, PyDateTime_Delta *right)\n{\n    PyObject *pyus_left;\n    PyObject *pyus_right;\n    PyObject *result;\n\n    pyus_left = delta_to_microseconds(left);\n    if (pyus_left == NULL)\n        return NULL;\n\n    pyus_right = delta_to_microseconds(right);\n    if (pyus_right == NULL)     {\n        Py_DECREF(pyus_left);\n        return NULL;\n    }\n\n    result = PyNumber_FloorDivide(pyus_left, pyus_right);\n    Py_DECREF(pyus_left);\n    Py_DECREF(pyus_right);\n    return result;\n}\n\nstatic PyObject *\ntruedivide_timedelta_timedelta(PyDateTime_Delta *left, PyDateTime_Delta *right)\n{\n    PyObject *pyus_left;\n    PyObject *pyus_right;\n    PyObject *result;\n\n    pyus_left = delta_to_microseconds(left);\n    if (pyus_left == NULL)\n        return NULL;\n\n    pyus_right = delta_to_microseconds(right);\n    if (pyus_right == NULL)     {\n        Py_DECREF(pyus_left);\n        return NULL;\n    }\n\n    result = PyNumber_TrueDivide(pyus_left, pyus_right);\n    Py_DECREF(pyus_left);\n    Py_DECREF(pyus_right);\n    return result;\n}\n\nstatic PyObject *\ntruedivide_timedelta_int(PyDateTime_Delta *delta, PyObject *i)\n{\n    PyObject *result;\n    PyObject *pyus_in, *pyus_out;\n    pyus_in = delta_to_microseconds(delta);\n    if (pyus_in == NULL)\n        return NULL;\n    pyus_out = divide_nearest(pyus_in, i);\n    Py_DECREF(pyus_in);\n    if (pyus_out == NULL)\n        return NULL;\n    result = microseconds_to_delta(pyus_out);\n    Py_DECREF(pyus_out);\n\n    return result;\n}\n\nstatic PyObject *\ndelta_add(PyObject *left, PyObject *right)\n{\n    PyObject *result = Py_NotImplemented;\n\n    if (PyDelta_Check(left) && PyDelta_Check(right)) {\n        /* delta + delta */\n        /* The C-level additions can't overflow because of the\n         * invariant bounds.\n         */\n        int days = GET_TD_DAYS(left) + GET_TD_DAYS(right);\n        int seconds = GET_TD_SECONDS(left) + GET_TD_SECONDS(right);\n        int microseconds = GET_TD_MICROSECONDS(left) +\n                           GET_TD_MICROSECONDS(right);\n        result = new_delta(days, seconds, microseconds, 1);\n    }\n\n    if (result == Py_NotImplemented)\n        Py_INCREF(result);\n    return result;\n}\n\nstatic PyObject *\ndelta_negative(PyDateTime_Delta *self)\n{\n    return new_delta(-GET_TD_DAYS(self),\n                     -GET_TD_SECONDS(self),\n                     -GET_TD_MICROSECONDS(self),\n                     1);\n}\n\nstatic PyObject *\ndelta_positive(PyDateTime_Delta *self)\n{\n    /* Could optimize this (by returning self) if this isn't a\n     * subclass -- but who uses unary + ?  Approximately nobody.\n     */\n    return new_delta(GET_TD_DAYS(self),\n                     GET_TD_SECONDS(self),\n                     GET_TD_MICROSECONDS(self),\n                     0);\n}\n\nstatic PyObject *\ndelta_abs(PyDateTime_Delta *self)\n{\n    PyObject *result;\n\n    assert(GET_TD_MICROSECONDS(self) >= 0);\n    assert(GET_TD_SECONDS(self) >= 0);\n\n    if (GET_TD_DAYS(self) < 0)\n        result = delta_negative(self);\n    else\n        result = delta_positive(self);\n\n    return result;\n}\n\nstatic PyObject *\ndelta_subtract(PyObject *left, PyObject *right)\n{\n    PyObject *result = Py_NotImplemented;\n\n    if (PyDelta_Check(left) && PyDelta_Check(right)) {\n        /* delta - delta */\n        /* The C-level additions can't overflow because of the\n         * invariant bounds.\n         */\n        int days = GET_TD_DAYS(left) - GET_TD_DAYS(right);\n        int seconds = GET_TD_SECONDS(left) - GET_TD_SECONDS(right);\n        int microseconds = GET_TD_MICROSECONDS(left) -\n                           GET_TD_MICROSECONDS(right);\n        result = new_delta(days, seconds, microseconds, 1);\n    }\n\n    if (result == Py_NotImplemented)\n        Py_INCREF(result);\n    return result;\n}\n\nstatic int\ndelta_cmp(PyObject *self, PyObject *other)\n{\n    int diff = GET_TD_DAYS(self) - GET_TD_DAYS(other);\n    if (diff == 0) {\n        diff = GET_TD_SECONDS(self) - GET_TD_SECONDS(other);\n        if (diff == 0)\n            diff = GET_TD_MICROSECONDS(self) -\n                GET_TD_MICROSECONDS(other);\n    }\n    return diff;\n}\n\nstatic PyObject *\ndelta_richcompare(PyObject *self, PyObject *other, int op)\n{\n    if (PyDelta_Check(other)) {\n        int diff = delta_cmp(self, other);\n        return diff_to_bool(diff, op);\n    }\n    else {\n        Py_RETURN_NOTIMPLEMENTED;\n    }\n}\n\nstatic PyObject *delta_getstate(PyDateTime_Delta *self);\n\nstatic Py_hash_t\ndelta_hash(PyDateTime_Delta *self)\n{\n    if (self->hashcode == -1) {\n        PyObject *temp = delta_getstate(self);\n        if (temp != NULL) {\n            self->hashcode = PyObject_Hash(temp);\n            Py_DECREF(temp);\n        }\n    }\n    return self->hashcode;\n}\n\nstatic PyObject *\ndelta_multiply(PyObject *left, PyObject *right)\n{\n    PyObject *result = Py_NotImplemented;\n\n    if (PyDelta_Check(left)) {\n        /* delta * ??? */\n        if (PyLong_Check(right))\n            result = multiply_int_timedelta(right,\n                            (PyDateTime_Delta *) left);\n        else if (PyFloat_Check(right))\n            result = multiply_truedivide_timedelta_float(\n                            (PyDateTime_Delta *) left, right, 0);\n    }\n    else if (PyLong_Check(left))\n        result = multiply_int_timedelta(left,\n                        (PyDateTime_Delta *) right);\n    else if (PyFloat_Check(left))\n        result = multiply_truedivide_timedelta_float(\n                        (PyDateTime_Delta *) right, left, 0);\n\n    if (result == Py_NotImplemented)\n        Py_INCREF(result);\n    return result;\n}\n\nstatic PyObject *\ndelta_divide(PyObject *left, PyObject *right)\n{\n    PyObject *result = Py_NotImplemented;\n\n    if (PyDelta_Check(left)) {\n        /* delta * ??? */\n        if (PyLong_Check(right))\n            result = divide_timedelta_int(\n                            (PyDateTime_Delta *)left,\n                            right);\n        else if (PyDelta_Check(right))\n            result = divide_timedelta_timedelta(\n                            (PyDateTime_Delta *)left,\n                            (PyDateTime_Delta *)right);\n    }\n\n    if (result == Py_NotImplemented)\n        Py_INCREF(result);\n    return result;\n}\n\nstatic PyObject *\ndelta_truedivide(PyObject *left, PyObject *right)\n{\n    PyObject *result = Py_NotImplemented;\n\n    if (PyDelta_Check(left)) {\n        if (PyDelta_Check(right))\n            result = truedivide_timedelta_timedelta(\n                            (PyDateTime_Delta *)left,\n                            (PyDateTime_Delta *)right);\n        else if (PyFloat_Check(right))\n            result = multiply_truedivide_timedelta_float(\n                            (PyDateTime_Delta *)left, right, 1);\n        else if (PyLong_Check(right))\n            result = truedivide_timedelta_int(\n                            (PyDateTime_Delta *)left, right);\n    }\n\n    if (result == Py_NotImplemented)\n        Py_INCREF(result);\n    return result;\n}\n\nstatic PyObject *\ndelta_remainder(PyObject *left, PyObject *right)\n{\n    PyObject *pyus_left;\n    PyObject *pyus_right;\n    PyObject *pyus_remainder;\n    PyObject *remainder;\n\n    if (!PyDelta_Check(left) || !PyDelta_Check(right))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    pyus_left = delta_to_microseconds((PyDateTime_Delta *)left);\n    if (pyus_left == NULL)\n        return NULL;\n\n    pyus_right = delta_to_microseconds((PyDateTime_Delta *)right);\n    if (pyus_right == NULL) {\n        Py_DECREF(pyus_left);\n        return NULL;\n    }\n\n    pyus_remainder = PyNumber_Remainder(pyus_left, pyus_right);\n    Py_DECREF(pyus_left);\n    Py_DECREF(pyus_right);\n    if (pyus_remainder == NULL)\n        return NULL;\n\n    remainder = microseconds_to_delta(pyus_remainder);\n    Py_DECREF(pyus_remainder);\n    if (remainder == NULL)\n        return NULL;\n\n    return remainder;\n}\n\nstatic PyObject *\ndelta_divmod(PyObject *left, PyObject *right)\n{\n    PyObject *pyus_left;\n    PyObject *pyus_right;\n    PyObject *divmod;\n    PyObject *delta;\n    PyObject *result;\n\n    if (!PyDelta_Check(left) || !PyDelta_Check(right))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    pyus_left = delta_to_microseconds((PyDateTime_Delta *)left);\n    if (pyus_left == NULL)\n        return NULL;\n\n    pyus_right = delta_to_microseconds((PyDateTime_Delta *)right);\n    if (pyus_right == NULL) {\n        Py_DECREF(pyus_left);\n        return NULL;\n    }\n\n    divmod = checked_divmod(pyus_left, pyus_right);\n    Py_DECREF(pyus_left);\n    Py_DECREF(pyus_right);\n    if (divmod == NULL)\n        return NULL;\n\n    delta = microseconds_to_delta(PyTuple_GET_ITEM(divmod, 1));\n    if (delta == NULL) {\n        Py_DECREF(divmod);\n        return NULL;\n    }\n    result = PyTuple_Pack(2, PyTuple_GET_ITEM(divmod, 0), delta);\n    Py_DECREF(delta);\n    Py_DECREF(divmod);\n    return result;\n}\n\n/* Fold in the value of the tag (\"seconds\", \"weeks\", etc) component of a\n * timedelta constructor.  sofar is the # of microseconds accounted for\n * so far, and there are factor microseconds per current unit, the number\n * of which is given by num.  num * factor is added to sofar in a\n * numerically careful way, and that's the result.  Any fractional\n * microseconds left over (this can happen if num is a float type) are\n * added into *leftover.\n * Note that there are many ways this can give an error (NULL) return.\n */\nstatic PyObject *\naccum(const char* tag, PyObject *sofar, PyObject *num, PyObject *factor,\n      double *leftover)\n{\n    PyObject *prod;\n    PyObject *sum;\n\n    assert(num != NULL);\n\n    if (PyLong_Check(num)) {\n        prod = PyNumber_Multiply(num, factor);\n        if (prod == NULL)\n            return NULL;\n        sum = PyNumber_Add(sofar, prod);\n        Py_DECREF(prod);\n        return sum;\n    }\n\n    if (PyFloat_Check(num)) {\n        double dnum;\n        double fracpart;\n        double intpart;\n        PyObject *x;\n        PyObject *y;\n\n        /* The Plan:  decompose num into an integer part and a\n         * fractional part, num = intpart + fracpart.\n         * Then num * factor ==\n         *      intpart * factor + fracpart * factor\n         * and the LHS can be computed exactly in long arithmetic.\n         * The RHS is again broken into an int part and frac part.\n         * and the frac part is added into *leftover.\n         */\n        dnum = PyFloat_AsDouble(num);\n        if (dnum == -1.0 && PyErr_Occurred())\n            return NULL;\n        fracpart = modf(dnum, &intpart);\n        x = PyLong_FromDouble(intpart);\n        if (x == NULL)\n            return NULL;\n\n        prod = PyNumber_Multiply(x, factor);\n        Py_DECREF(x);\n        if (prod == NULL)\n            return NULL;\n\n        sum = PyNumber_Add(sofar, prod);\n        Py_DECREF(prod);\n        if (sum == NULL)\n            return NULL;\n\n        if (fracpart == 0.0)\n            return sum;\n        /* So far we've lost no information.  Dealing with the\n         * fractional part requires float arithmetic, and may\n         * lose a little info.\n         */\n        assert(PyLong_CheckExact(factor));\n        dnum = PyLong_AsDouble(factor);\n\n        dnum *= fracpart;\n        fracpart = modf(dnum, &intpart);\n        x = PyLong_FromDouble(intpart);\n        if (x == NULL) {\n            Py_DECREF(sum);\n            return NULL;\n        }\n\n        y = PyNumber_Add(sum, x);\n        Py_DECREF(sum);\n        Py_DECREF(x);\n        *leftover += fracpart;\n        return y;\n    }\n\n    PyErr_Format(PyExc_TypeError,\n                 \"unsupported type for timedelta %s component: %s\",\n                 tag, Py_TYPE(num)->tp_name);\n    return NULL;\n}\n\nstatic PyObject *\ndelta_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    PyObject *self = NULL;\n\n    PyObject *current_mod = NULL;\n    datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n    /* Argument objects. */\n    PyObject *day = NULL;\n    PyObject *second = NULL;\n    PyObject *us = NULL;\n    PyObject *ms = NULL;\n    PyObject *minute = NULL;\n    PyObject *hour = NULL;\n    PyObject *week = NULL;\n\n    PyObject *x = NULL;         /* running sum of microseconds */\n    PyObject *y = NULL;         /* temp sum of microseconds */\n    double leftover_us = 0.0;\n\n    static char *keywords[] = {\n        \"days\", \"seconds\", \"microseconds\", \"milliseconds\",\n        \"minutes\", \"hours\", \"weeks\", NULL\n    };\n\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"|OOOOOOO:__new__\",\n                                    keywords,\n                                    &day, &second, &us,\n                                    &ms, &minute, &hour, &week) == 0)\n        goto Done;\n\n    x = PyLong_FromLong(0);\n    if (x == NULL)\n        goto Done;\n\n#define CLEANUP         \\\n    Py_DECREF(x);       \\\n    x = y;              \\\n    if (x == NULL)      \\\n        goto Done\n\n    if (us) {\n        y = accum(\"microseconds\", x, us, _PyLong_GetOne(), &leftover_us);\n        CLEANUP;\n    }\n    if (ms) {\n        y = accum(\"milliseconds\", x, ms, CONST_US_PER_MS(st), &leftover_us);\n        CLEANUP;\n    }\n    if (second) {\n        y = accum(\"seconds\", x, second, CONST_US_PER_SECOND(st), &leftover_us);\n        CLEANUP;\n    }\n    if (minute) {\n        y = accum(\"minutes\", x, minute, CONST_US_PER_MINUTE(st), &leftover_us);\n        CLEANUP;\n    }\n    if (hour) {\n        y = accum(\"hours\", x, hour, CONST_US_PER_HOUR(st), &leftover_us);\n        CLEANUP;\n    }\n    if (day) {\n        y = accum(\"days\", x, day, CONST_US_PER_DAY(st), &leftover_us);\n        CLEANUP;\n    }\n    if (week) {\n        y = accum(\"weeks\", x, week, CONST_US_PER_WEEK(st), &leftover_us);\n        CLEANUP;\n    }\n    if (leftover_us) {\n        /* Round to nearest whole # of us, and add into x. */\n        double whole_us = round(leftover_us);\n        int x_is_odd;\n        PyObject *temp;\n\n        if (fabs(whole_us - leftover_us) == 0.5) {\n            /* We're exactly halfway between two integers.  In order\n             * to do round-half-to-even, we must determine whether x\n             * is odd. Note that x is odd when it's last bit is 1. The\n             * code below uses bitwise and operation to check the last\n             * bit. */\n            temp = PyNumber_And(x, _PyLong_GetOne());  /* temp <- x & 1 */\n            if (temp == NULL) {\n                Py_DECREF(x);\n                goto Done;\n            }\n            x_is_odd = PyObject_IsTrue(temp);\n            Py_DECREF(temp);\n            if (x_is_odd == -1) {\n                Py_DECREF(x);\n                goto Done;\n            }\n            whole_us = 2.0 * round((leftover_us + x_is_odd) * 0.5) - x_is_odd;\n        }\n\n        temp = PyLong_FromLong((long)whole_us);\n\n        if (temp == NULL) {\n            Py_DECREF(x);\n            goto Done;\n        }\n        y = PyNumber_Add(x, temp);\n        Py_DECREF(temp);\n        CLEANUP;\n    }\n\n    self = microseconds_to_delta_ex(x, type);\n    Py_DECREF(x);\n\nDone:\n    RELEASE_CURRENT_STATE(st, current_mod);\n    return self;\n\n#undef CLEANUP\n}\n\nstatic int\ndelta_bool(PyDateTime_Delta *self)\n{\n    return (GET_TD_DAYS(self) != 0\n        || GET_TD_SECONDS(self) != 0\n        || GET_TD_MICROSECONDS(self) != 0);\n}\n\nstatic PyObject *\ndelta_repr(PyDateTime_Delta *self)\n{\n    PyObject *args = PyUnicode_FromString(\"\");\n\n    if (args == NULL) {\n        return NULL;\n    }\n\n    const char *sep = \"\";\n\n    if (GET_TD_DAYS(self) != 0) {\n        Py_SETREF(args, PyUnicode_FromFormat(\"days=%d\", GET_TD_DAYS(self)));\n        if (args == NULL) {\n            return NULL;\n        }\n        sep = \", \";\n    }\n\n    if (GET_TD_SECONDS(self) != 0) {\n        Py_SETREF(args, PyUnicode_FromFormat(\"%U%sseconds=%d\", args, sep,\n                                             GET_TD_SECONDS(self)));\n        if (args == NULL) {\n            return NULL;\n        }\n        sep = \", \";\n    }\n\n    if (GET_TD_MICROSECONDS(self) != 0) {\n        Py_SETREF(args, PyUnicode_FromFormat(\"%U%smicroseconds=%d\", args, sep,\n                                             GET_TD_MICROSECONDS(self)));\n        if (args == NULL) {\n            return NULL;\n        }\n    }\n\n    if (PyUnicode_GET_LENGTH(args) == 0) {\n        Py_SETREF(args, PyUnicode_FromString(\"0\"));\n        if (args == NULL) {\n            return NULL;\n        }\n    }\n\n    PyObject *repr = PyUnicode_FromFormat(\"%s(%S)\", Py_TYPE(self)->tp_name,\n                                          args);\n    Py_DECREF(args);\n    return repr;\n}\n\nstatic PyObject *\ndelta_str(PyDateTime_Delta *self)\n{\n    int us = GET_TD_MICROSECONDS(self);\n    int seconds = GET_TD_SECONDS(self);\n    int minutes = divmod(seconds, 60, &seconds);\n    int hours = divmod(minutes, 60, &minutes);\n    int days = GET_TD_DAYS(self);\n\n    if (days) {\n        if (us)\n            return PyUnicode_FromFormat(\"%d day%s, %d:%02d:%02d.%06d\",\n                                        days, (days == 1 || days == -1) ? \"\" : \"s\",\n                                        hours, minutes, seconds, us);\n        else\n            return PyUnicode_FromFormat(\"%d day%s, %d:%02d:%02d\",\n                                        days, (days == 1 || days == -1) ? \"\" : \"s\",\n                                        hours, minutes, seconds);\n    } else {\n        if (us)\n            return PyUnicode_FromFormat(\"%d:%02d:%02d.%06d\",\n                                        hours, minutes, seconds, us);\n        else\n            return PyUnicode_FromFormat(\"%d:%02d:%02d\",\n                                        hours, minutes, seconds);\n    }\n\n}\n\n/* Pickle support, a simple use of __reduce__. */\n\n/* __getstate__ isn't exposed */\nstatic PyObject *\ndelta_getstate(PyDateTime_Delta *self)\n{\n    return Py_BuildValue(\"iii\", GET_TD_DAYS(self),\n                                GET_TD_SECONDS(self),\n                                GET_TD_MICROSECONDS(self));\n}\n\nstatic PyObject *\ndelta_total_seconds(PyObject *self, PyObject *Py_UNUSED(ignored))\n{\n    PyObject *total_seconds;\n    PyObject *total_microseconds;\n\n    total_microseconds = delta_to_microseconds((PyDateTime_Delta *)self);\n    if (total_microseconds == NULL)\n        return NULL;\n\n    PyObject *current_mod = NULL;\n    datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n    total_seconds = PyNumber_TrueDivide(total_microseconds, CONST_US_PER_SECOND(st));\n\n    RELEASE_CURRENT_STATE(st, current_mod);\n    Py_DECREF(total_microseconds);\n    return total_seconds;\n}\n\nstatic PyObject *\ndelta_reduce(PyDateTime_Delta* self, PyObject *Py_UNUSED(ignored))\n{\n    return Py_BuildValue(\"ON\", Py_TYPE(self), delta_getstate(self));\n}\n\n#define OFFSET(field)  offsetof(PyDateTime_Delta, field)\n\nstatic PyMemberDef delta_members[] = {\n\n    {\"days\",         Py_T_INT, OFFSET(days),         Py_READONLY,\n     PyDoc_STR(\"Number of days.\")},\n\n    {\"seconds\",      Py_T_INT, OFFSET(seconds),      Py_READONLY,\n     PyDoc_STR(\"Number of seconds (>= 0 and less than 1 day).\")},\n\n    {\"microseconds\", Py_T_INT, OFFSET(microseconds), Py_READONLY,\n     PyDoc_STR(\"Number of microseconds (>= 0 and less than 1 second).\")},\n    {NULL}\n};\n\nstatic PyMethodDef delta_methods[] = {\n    {\"total_seconds\", delta_total_seconds, METH_NOARGS,\n     PyDoc_STR(\"Total seconds in the duration.\")},\n\n    {\"__reduce__\", (PyCFunction)delta_reduce, METH_NOARGS,\n     PyDoc_STR(\"__reduce__() -> (cls, state)\")},\n\n    {NULL,      NULL},\n};\n\nstatic const char delta_doc[] =\nPyDoc_STR(\"Difference between two datetime values.\\n\\n\"\n          \"timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, \"\n          \"minutes=0, hours=0, weeks=0)\\n\\n\"\n          \"All arguments are optional and default to 0.\\n\"\n          \"Arguments may be integers or floats, and may be positive or negative.\");\n\nstatic PyNumberMethods delta_as_number = {\n    delta_add,                                  /* nb_add */\n    delta_subtract,                             /* nb_subtract */\n    delta_multiply,                             /* nb_multiply */\n    delta_remainder,                            /* nb_remainder */\n    delta_divmod,                               /* nb_divmod */\n    0,                                          /* nb_power */\n    (unaryfunc)delta_negative,                  /* nb_negative */\n    (unaryfunc)delta_positive,                  /* nb_positive */\n    (unaryfunc)delta_abs,                       /* nb_absolute */\n    (inquiry)delta_bool,                        /* nb_bool */\n    0,                                          /*nb_invert*/\n    0,                                          /*nb_lshift*/\n    0,                                          /*nb_rshift*/\n    0,                                          /*nb_and*/\n    0,                                          /*nb_xor*/\n    0,                                          /*nb_or*/\n    0,                                          /*nb_int*/\n    0,                                          /*nb_reserved*/\n    0,                                          /*nb_float*/\n    0,                                          /*nb_inplace_add*/\n    0,                                          /*nb_inplace_subtract*/\n    0,                                          /*nb_inplace_multiply*/\n    0,                                          /*nb_inplace_remainder*/\n    0,                                          /*nb_inplace_power*/\n    0,                                          /*nb_inplace_lshift*/\n    0,                                          /*nb_inplace_rshift*/\n    0,                                          /*nb_inplace_and*/\n    0,                                          /*nb_inplace_xor*/\n    0,                                          /*nb_inplace_or*/\n    delta_divide,                               /* nb_floor_divide */\n    delta_truedivide,                           /* nb_true_divide */\n    0,                                          /* nb_inplace_floor_divide */\n    0,                                          /* nb_inplace_true_divide */\n};\n\nstatic PyTypeObject PyDateTime_DeltaType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"datetime.timedelta\",                               /* tp_name */\n    sizeof(PyDateTime_Delta),                           /* tp_basicsize */\n    0,                                                  /* tp_itemsize */\n    0,                                                  /* tp_dealloc */\n    0,                                                  /* tp_vectorcall_offset */\n    0,                                                  /* tp_getattr */\n    0,                                                  /* tp_setattr */\n    0,                                                  /* tp_as_async */\n    (reprfunc)delta_repr,                               /* tp_repr */\n    &delta_as_number,                                   /* tp_as_number */\n    0,                                                  /* tp_as_sequence */\n    0,                                                  /* tp_as_mapping */\n    (hashfunc)delta_hash,                               /* tp_hash */\n    0,                                                  /* tp_call */\n    (reprfunc)delta_str,                                /* tp_str */\n    PyObject_GenericGetAttr,                            /* tp_getattro */\n    0,                                                  /* tp_setattro */\n    0,                                                  /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,           /* tp_flags */\n    delta_doc,                                          /* tp_doc */\n    0,                                                  /* tp_traverse */\n    0,                                                  /* tp_clear */\n    delta_richcompare,                                  /* tp_richcompare */\n    0,                                                  /* tp_weaklistoffset */\n    0,                                                  /* tp_iter */\n    0,                                                  /* tp_iternext */\n    delta_methods,                                      /* tp_methods */\n    delta_members,                                      /* tp_members */\n    0,                                                  /* tp_getset */\n    0,                                                  /* tp_base */\n    0,                                                  /* tp_dict */\n    0,                                                  /* tp_descr_get */\n    0,                                                  /* tp_descr_set */\n    0,                                                  /* tp_dictoffset */\n    0,                                                  /* tp_init */\n    0,                                                  /* tp_alloc */\n    delta_new,                                          /* tp_new */\n    0,                                                  /* tp_free */\n};\n\n// XXX Can we make this const?\nstatic PyDateTime_Delta zero_delta = {\n    PyObject_HEAD_INIT(&PyDateTime_DeltaType)\n    /* Letting this be set lazily is a benign race. */\n    .hashcode = -1,\n};\n\nstatic PyDateTime_Delta *\nlook_up_delta(int days, int seconds, int microseconds, PyTypeObject *type)\n{\n    if (days == 0 && seconds == 0 && microseconds == 0\n            && type == zero_delta.ob_base.ob_type)\n    {\n        return &zero_delta;\n    }\n    return NULL;\n}\n\n\n/*\n * PyDateTime_Date implementation.\n */\n\n/* Accessor properties. */\n\nstatic PyObject *\ndate_year(PyDateTime_Date *self, void *unused)\n{\n    return PyLong_FromLong(GET_YEAR(self));\n}\n\nstatic PyObject *\ndate_month(PyDateTime_Date *self, void *unused)\n{\n    return PyLong_FromLong(GET_MONTH(self));\n}\n\nstatic PyObject *\ndate_day(PyDateTime_Date *self, void *unused)\n{\n    return PyLong_FromLong(GET_DAY(self));\n}\n\nstatic PyGetSetDef date_getset[] = {\n    {\"year\",        (getter)date_year},\n    {\"month\",       (getter)date_month},\n    {\"day\",         (getter)date_day},\n    {NULL}\n};\n\n/* Constructors. */\n\nstatic char *date_kws[] = {\"year\", \"month\", \"day\", NULL};\n\nstatic PyObject *\ndate_from_pickle(PyTypeObject *type, PyObject *state)\n{\n    PyDateTime_Date *me;\n\n    me = (PyDateTime_Date *) (type->tp_alloc(type, 0));\n    if (me != NULL) {\n        const char *pdata = PyBytes_AS_STRING(state);\n        memcpy(me->data, pdata, _PyDateTime_DATE_DATASIZE);\n        me->hashcode = -1;\n    }\n    return (PyObject *)me;\n}\n\nstatic PyObject *\ndate_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    PyObject *self = NULL;\n    int year;\n    int month;\n    int day;\n\n    /* Check for invocation from pickle with __getstate__ state */\n    if (PyTuple_GET_SIZE(args) == 1) {\n        PyObject *state = PyTuple_GET_ITEM(args, 0);\n        if (PyBytes_Check(state)) {\n            if (PyBytes_GET_SIZE(state) == _PyDateTime_DATE_DATASIZE &&\n                MONTH_IS_SANE(PyBytes_AS_STRING(state)[2]))\n            {\n                return date_from_pickle(type, state);\n            }\n        }\n        else if (PyUnicode_Check(state)) {\n            if (PyUnicode_GET_LENGTH(state) == _PyDateTime_DATE_DATASIZE &&\n                MONTH_IS_SANE(PyUnicode_READ_CHAR(state, 2)))\n            {\n                state = PyUnicode_AsLatin1String(state);\n                if (state == NULL) {\n                    if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {\n                        /* More informative error message. */\n                        PyErr_SetString(PyExc_ValueError,\n                            \"Failed to encode latin1 string when unpickling \"\n                            \"a date object. \"\n                            \"pickle.load(data, encoding='latin1') is assumed.\");\n                    }\n                    return NULL;\n                }\n                self = date_from_pickle(type, state);\n                Py_DECREF(state);\n                return self;\n            }\n        }\n    }\n\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"iii\", date_kws,\n                                    &year, &month, &day)) {\n        self = new_date_ex(year, month, day, type);\n    }\n    return self;\n}\n\nstatic PyObject *\ndate_fromtimestamp(PyObject *cls, PyObject *obj)\n{\n    struct tm tm;\n    time_t t;\n\n    if (_PyTime_ObjectToTime_t(obj, &t, _PyTime_ROUND_FLOOR) == -1)\n        return NULL;\n\n    if (_PyTime_localtime(t, &tm) != 0)\n        return NULL;\n\n    return new_date_subclass_ex(tm.tm_year + 1900,\n                                tm.tm_mon + 1,\n                                tm.tm_mday,\n                                cls);\n}\n\n/* Return new date from current time.\n * We say this is equivalent to fromtimestamp(time.time()), and the\n * only way to be sure of that is to *call* time.time().  That's not\n * generally the same as calling C's time.\n */\nstatic PyObject *\ndate_today(PyObject *cls, PyObject *dummy)\n{\n    PyObject *time;\n    PyObject *result;\n    time = time_time();\n    if (time == NULL)\n        return NULL;\n\n    /* Note well:  today() is a class method, so this may not call\n     * date.fromtimestamp.  For example, it may call\n     * datetime.fromtimestamp.  That's why we need all the accuracy\n     * time.time() delivers; if someone were gonzo about optimization,\n     * date.today() could get away with plain C time().\n     */\n    result = PyObject_CallMethodOneArg(cls, &_Py_ID(fromtimestamp), time);\n    Py_DECREF(time);\n    return result;\n}\n\n/*[clinic input]\n@classmethod\ndatetime.date.fromtimestamp\n\n    timestamp: object\n    /\n\nCreate a date from a POSIX timestamp.\n\nThe timestamp is a number, e.g. created via time.time(), that is interpreted\nas local time.\n[clinic start generated code]*/\n\nstatic PyObject *\ndatetime_date_fromtimestamp(PyTypeObject *type, PyObject *timestamp)\n/*[clinic end generated code: output=fd045fda58168869 input=eabb3fe7f40491fe]*/\n{\n    return date_fromtimestamp((PyObject *) type, timestamp);\n}\n\n/* bpo-36025: This is a wrapper for API compatibility with the public C API,\n * which expects a function that takes an *args tuple, whereas the argument\n * clinic generates code that takes METH_O.\n */\nstatic PyObject *\ndatetime_date_fromtimestamp_capi(PyObject *cls, PyObject *args)\n{\n    PyObject *timestamp;\n    PyObject *result = NULL;\n\n    if (PyArg_UnpackTuple(args, \"fromtimestamp\", 1, 1, &timestamp)) {\n        result = date_fromtimestamp(cls, timestamp);\n    }\n\n    return result;\n}\n\n/* Return new date from proleptic Gregorian ordinal.  Raises ValueError if\n * the ordinal is out of range.\n */\nstatic PyObject *\ndate_fromordinal(PyObject *cls, PyObject *args)\n{\n    PyObject *result = NULL;\n    int ordinal;\n\n    if (PyArg_ParseTuple(args, \"i:fromordinal\", &ordinal)) {\n        int year;\n        int month;\n        int day;\n\n        if (ordinal < 1)\n            PyErr_SetString(PyExc_ValueError, \"ordinal must be \"\n                                              \">= 1\");\n        else {\n            ord_to_ymd(ordinal, &year, &month, &day);\n            result = new_date_subclass_ex(year, month, day, cls);\n        }\n    }\n    return result;\n}\n\n/* Return the new date from a string as generated by date.isoformat() */\nstatic PyObject *\ndate_fromisoformat(PyObject *cls, PyObject *dtstr)\n{\n    assert(dtstr != NULL);\n\n    if (!PyUnicode_Check(dtstr)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"fromisoformat: argument must be str\");\n        return NULL;\n    }\n\n    Py_ssize_t len;\n\n    const char *dt_ptr = PyUnicode_AsUTF8AndSize(dtstr, &len);\n    if (dt_ptr == NULL) {\n        goto invalid_string_error;\n    }\n\n    int year = 0, month = 0, day = 0;\n\n    int rv;\n    if (len == 7 || len == 8 || len == 10) {\n        rv = parse_isoformat_date(dt_ptr, len, &year, &month, &day);\n    }\n    else {\n        rv = -1;\n    }\n\n    if (rv < 0) {\n        goto invalid_string_error;\n    }\n\n    return new_date_subclass_ex(year, month, day, cls);\n\ninvalid_string_error:\n    PyErr_Format(PyExc_ValueError, \"Invalid isoformat string: %R\", dtstr);\n    return NULL;\n}\n\n\nstatic PyObject *\ndate_fromisocalendar(PyObject *cls, PyObject *args, PyObject *kw)\n{\n    static char *keywords[] = {\n        \"year\", \"week\", \"day\", NULL\n    };\n\n    int year, week, day;\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"iii:fromisocalendar\",\n                keywords,\n                &year, &week, &day) == 0) {\n        if (PyErr_ExceptionMatches(PyExc_OverflowError)) {\n            PyErr_Format(PyExc_ValueError,\n                    \"ISO calendar component out of range\");\n\n        }\n        return NULL;\n    }\n\n    int month;\n    int rv = iso_to_ymd(year, week, day, &year, &month, &day);\n\n    if (rv == -4) {\n        PyErr_Format(PyExc_ValueError, \"Year is out of range: %d\", year);\n        return NULL;\n    }\n\n    if (rv == -2) {\n        PyErr_Format(PyExc_ValueError, \"Invalid week: %d\", week);\n        return NULL;\n    }\n\n    if (rv == -3) {\n        PyErr_Format(PyExc_ValueError, \"Invalid day: %d (range is [1, 7])\",\n                     day);\n        return NULL;\n    }\n\n    return new_date_subclass_ex(year, month, day, cls);\n}\n\n\n/*\n * Date arithmetic.\n */\n\n/* date + timedelta -> date.  If arg negate is true, subtract the timedelta\n * instead.\n */\nstatic PyObject *\nadd_date_timedelta(PyDateTime_Date *date, PyDateTime_Delta *delta, int negate)\n{\n    PyObject *result = NULL;\n    int year = GET_YEAR(date);\n    int month = GET_MONTH(date);\n    int deltadays = GET_TD_DAYS(delta);\n    /* C-level overflow is impossible because |deltadays| < 1e9. */\n    int day = GET_DAY(date) + (negate ? -deltadays : deltadays);\n\n    if (normalize_date(&year, &month, &day) >= 0)\n        result = new_date_subclass_ex(year, month, day,\n                                      (PyObject* )Py_TYPE(date));\n    return result;\n}\n\nstatic PyObject *\ndate_add(PyObject *left, PyObject *right)\n{\n    if (PyDateTime_Check(left) || PyDateTime_Check(right))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    if (PyDate_Check(left)) {\n        /* date + ??? */\n        if (PyDelta_Check(right))\n            /* date + delta */\n            return add_date_timedelta((PyDateTime_Date *) left,\n                                      (PyDateTime_Delta *) right,\n                                      0);\n    }\n    else {\n        /* ??? + date\n         * 'right' must be one of us, or we wouldn't have been called\n         */\n        if (PyDelta_Check(left))\n            /* delta + date */\n            return add_date_timedelta((PyDateTime_Date *) right,\n                                      (PyDateTime_Delta *) left,\n                                      0);\n    }\n    Py_RETURN_NOTIMPLEMENTED;\n}\n\nstatic PyObject *\ndate_subtract(PyObject *left, PyObject *right)\n{\n    if (PyDateTime_Check(left) || PyDateTime_Check(right))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    if (PyDate_Check(left)) {\n        if (PyDate_Check(right)) {\n            /* date - date */\n            int left_ord = ymd_to_ord(GET_YEAR(left),\n                                      GET_MONTH(left),\n                                      GET_DAY(left));\n            int right_ord = ymd_to_ord(GET_YEAR(right),\n                                       GET_MONTH(right),\n                                       GET_DAY(right));\n            return new_delta(left_ord - right_ord, 0, 0, 0);\n        }\n        if (PyDelta_Check(right)) {\n            /* date - delta */\n            return add_date_timedelta((PyDateTime_Date *) left,\n                                      (PyDateTime_Delta *) right,\n                                      1);\n        }\n    }\n    Py_RETURN_NOTIMPLEMENTED;\n}\n\n\n/* Various ways to turn a date into a string. */\n\nstatic PyObject *\ndate_repr(PyDateTime_Date *self)\n{\n    return PyUnicode_FromFormat(\"%s(%d, %d, %d)\",\n                                Py_TYPE(self)->tp_name,\n                                GET_YEAR(self), GET_MONTH(self), GET_DAY(self));\n}\n\nstatic PyObject *\ndate_isoformat(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    return PyUnicode_FromFormat(\"%04d-%02d-%02d\",\n                                GET_YEAR(self), GET_MONTH(self), GET_DAY(self));\n}\n\n/* str() calls the appropriate isoformat() method. */\nstatic PyObject *\ndate_str(PyDateTime_Date *self)\n{\n    return PyObject_CallMethodNoArgs((PyObject *)self, &_Py_ID(isoformat));\n}\n\n\nstatic PyObject *\ndate_ctime(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    return format_ctime(self, 0, 0, 0);\n}\n\nstatic PyObject *\ndate_strftime(PyDateTime_Date *self, PyObject *args, PyObject *kw)\n{\n    /* This method can be inherited, and needs to call the\n     * timetuple() method appropriate to self's class.\n     */\n    PyObject *result;\n    PyObject *tuple;\n    PyObject *format;\n    static char *keywords[] = {\"format\", NULL};\n\n    if (! PyArg_ParseTupleAndKeywords(args, kw, \"U:strftime\", keywords,\n                                      &format))\n        return NULL;\n\n    tuple = PyObject_CallMethodNoArgs((PyObject *)self, &_Py_ID(timetuple));\n    if (tuple == NULL)\n        return NULL;\n    result = wrap_strftime((PyObject *)self, format, tuple,\n                           (PyObject *)self);\n    Py_DECREF(tuple);\n    return result;\n}\n\nstatic PyObject *\ndate_format(PyDateTime_Date *self, PyObject *args)\n{\n    PyObject *format;\n\n    if (!PyArg_ParseTuple(args, \"U:__format__\", &format))\n        return NULL;\n\n    /* if the format is zero length, return str(self) */\n    if (PyUnicode_GetLength(format) == 0)\n        return PyObject_Str((PyObject *)self);\n\n    return PyObject_CallMethodOneArg((PyObject *)self, &_Py_ID(strftime),\n                                        format);\n}\n\n/* ISO methods. */\n\nstatic PyObject *\ndate_isoweekday(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    int dow = weekday(GET_YEAR(self), GET_MONTH(self), GET_DAY(self));\n\n    return PyLong_FromLong(dow + 1);\n}\n\nPyDoc_STRVAR(iso_calendar_date__doc__,\n\"The result of date.isocalendar() or datetime.isocalendar()\\n\\n\\\nThis object may be accessed either as a tuple of\\n\\\n  ((year, week, weekday)\\n\\\nor via the object attributes as named in the above tuple.\");\n\ntypedef struct {\n    PyTupleObject tuple;\n} PyDateTime_IsoCalendarDate;\n\nstatic PyObject *\niso_calendar_date_repr(PyDateTime_IsoCalendarDate *self)\n{\n    PyObject* year = PyTuple_GetItem((PyObject *)self, 0);\n    if (year == NULL) {\n        return NULL;\n    }\n    PyObject* week = PyTuple_GetItem((PyObject *)self, 1);\n    if (week == NULL) {\n        return NULL;\n    }\n    PyObject* weekday = PyTuple_GetItem((PyObject *)self, 2);\n    if (weekday == NULL) {\n        return NULL;\n    }\n\n    return PyUnicode_FromFormat(\"%.200s(year=%S, week=%S, weekday=%S)\",\n                               Py_TYPE(self)->tp_name, year, week, weekday);\n}\n\nstatic PyObject *\niso_calendar_date_reduce(PyObject *self, PyObject *Py_UNUSED(ignored))\n{\n    // Construct the tuple that this reduces to\n    PyObject * reduce_tuple = Py_BuildValue(\n        \"O((OOO))\", &PyTuple_Type,\n        PyTuple_GET_ITEM(self, 0),\n        PyTuple_GET_ITEM(self, 1),\n        PyTuple_GET_ITEM(self, 2)\n    );\n\n    return reduce_tuple;\n}\n\nstatic PyObject *\niso_calendar_date_year(PyDateTime_IsoCalendarDate *self, void *unused)\n{\n    PyObject *year = PyTuple_GetItem((PyObject *)self, 0);\n    if (year == NULL) {\n        return NULL;\n    }\n    return Py_NewRef(year);\n}\n\nstatic PyObject *\niso_calendar_date_week(PyDateTime_IsoCalendarDate *self, void *unused)\n{\n    PyObject *week = PyTuple_GetItem((PyObject *)self, 1);\n    if (week == NULL) {\n        return NULL;\n    }\n    return Py_NewRef(week);\n}\n\nstatic PyObject *\niso_calendar_date_weekday(PyDateTime_IsoCalendarDate *self, void *unused)\n{\n    PyObject *weekday = PyTuple_GetItem((PyObject *)self, 2);\n    if (weekday == NULL) {\n        return NULL;\n    }\n    return Py_NewRef(weekday);\n}\n\nstatic PyGetSetDef iso_calendar_date_getset[] = {\n    {\"year\",        (getter)iso_calendar_date_year},\n    {\"week\",      (getter)iso_calendar_date_week},\n    {\"weekday\",      (getter)iso_calendar_date_weekday},\n    {NULL}\n};\n\nstatic PyMethodDef iso_calendar_date_methods[] = {\n    {\"__reduce__\", (PyCFunction)iso_calendar_date_reduce, METH_NOARGS,\n     PyDoc_STR(\"__reduce__() -> (cls, state)\")},\n    {NULL, NULL},\n};\n\nstatic int\niso_calendar_date_traverse(PyDateTime_IsoCalendarDate *self, visitproc visit,\n                           void *arg)\n{\n    Py_VISIT(Py_TYPE(self));\n    return PyTuple_Type.tp_traverse((PyObject *)self, visit, arg);\n}\n\nstatic void\niso_calendar_date_dealloc(PyDateTime_IsoCalendarDate *self)\n{\n    PyTypeObject *tp = Py_TYPE(self);\n    PyTuple_Type.tp_dealloc((PyObject *)self);  // delegate GC-untrack as well\n    Py_DECREF(tp);\n}\n\nstatic PyType_Slot isocal_slots[] = {\n    {Py_tp_repr, iso_calendar_date_repr},\n    {Py_tp_doc, (void *)iso_calendar_date__doc__},\n    {Py_tp_methods, iso_calendar_date_methods},\n    {Py_tp_getset, iso_calendar_date_getset},\n    {Py_tp_new, iso_calendar_date_new},\n    {Py_tp_dealloc, iso_calendar_date_dealloc},\n    {Py_tp_traverse, iso_calendar_date_traverse},\n    {0, NULL},\n};\n\nstatic PyType_Spec isocal_spec = {\n    .name = \"datetime.IsoCalendarDate\",\n    .basicsize = sizeof(PyDateTime_IsoCalendarDate),\n    .flags = (Py_TPFLAGS_DEFAULT |\n              Py_TPFLAGS_HAVE_GC |\n              Py_TPFLAGS_IMMUTABLETYPE),\n    .slots = isocal_slots,\n};\n\n/*[clinic input]\n@classmethod\ndatetime.IsoCalendarDate.__new__ as iso_calendar_date_new\n    year: int\n    week: int\n    weekday: int\n[clinic start generated code]*/\n\nstatic PyObject *\niso_calendar_date_new_impl(PyTypeObject *type, int year, int week,\n                           int weekday)\n/*[clinic end generated code: output=383d33d8dc7183a2 input=4f2c663c9d19c4ee]*/\n\n{\n    PyDateTime_IsoCalendarDate *self;\n    self = (PyDateTime_IsoCalendarDate *) type->tp_alloc(type, 3);\n    if (self == NULL) {\n        return NULL;\n    }\n\n    PyTuple_SET_ITEM(self, 0, PyLong_FromLong(year));\n    PyTuple_SET_ITEM(self, 1, PyLong_FromLong(week));\n    PyTuple_SET_ITEM(self, 2, PyLong_FromLong(weekday));\n\n    return (PyObject *)self;\n}\n\nstatic PyObject *\ndate_isocalendar(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    int  year         = GET_YEAR(self);\n    int  week1_monday = iso_week1_monday(year);\n    int today         = ymd_to_ord(year, GET_MONTH(self), GET_DAY(self));\n    int  week;\n    int  day;\n\n    week = divmod(today - week1_monday, 7, &day);\n    if (week < 0) {\n        --year;\n        week1_monday = iso_week1_monday(year);\n        week = divmod(today - week1_monday, 7, &day);\n    }\n    else if (week >= 52 && today >= iso_week1_monday(year + 1)) {\n        ++year;\n        week = 0;\n    }\n\n    PyObject *current_mod = NULL;\n    datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n    PyObject *v = iso_calendar_date_new_impl(ISOCALENDAR_DATE_TYPE(st),\n                                             year, week + 1, day + 1);\n    RELEASE_CURRENT_STATE(st, current_mod);\n    if (v == NULL) {\n        return NULL;\n    }\n    return v;\n}\n\n/* Miscellaneous methods. */\n\nstatic PyObject *\ndate_richcompare(PyObject *self, PyObject *other, int op)\n{\n    /* Since DateTime is a subclass of Date, if the other object is\n     * a DateTime, it would compute an equality testing or an ordering\n     * based on the date part alone, and we don't want that.\n     * So return NotImplemented here in that case.\n     * If a subclass wants to change this, it's up to the subclass to do so.\n     * The behavior is the same as if Date and DateTime were independent\n     * classes.\n     */\n    if (PyDate_Check(other) && !PyDateTime_Check(other)) {\n        int diff = memcmp(((PyDateTime_Date *)self)->data,\n                          ((PyDateTime_Date *)other)->data,\n                          _PyDateTime_DATE_DATASIZE);\n        return diff_to_bool(diff, op);\n    }\n    else\n        Py_RETURN_NOTIMPLEMENTED;\n}\n\nstatic PyObject *\ndate_timetuple(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    return build_struct_time(GET_YEAR(self),\n                             GET_MONTH(self),\n                             GET_DAY(self),\n                             0, 0, 0, -1);\n}\n\n/*[clinic input]\ndatetime.date.replace\n\n    year: int(c_default=\"GET_YEAR(self)\") = unchanged\n    month: int(c_default=\"GET_MONTH(self)\") = unchanged\n    day: int(c_default=\"GET_DAY(self)\") = unchanged\n\nReturn date with new specified fields.\n[clinic start generated code]*/\n\nstatic PyObject *\ndatetime_date_replace_impl(PyDateTime_Date *self, int year, int month,\n                           int day)\n/*[clinic end generated code: output=2a9430d1e6318aeb input=0d1f02685b3e90f6]*/\n{\n    return new_date_subclass_ex(year, month, day, (PyObject *)Py_TYPE(self));\n}\n\nstatic Py_hash_t\ngeneric_hash(unsigned char *data, int len)\n{\n    return _Py_HashBytes(data, len);\n}\n\n\nstatic PyObject *date_getstate(PyDateTime_Date *self);\n\nstatic Py_hash_t\ndate_hash(PyDateTime_Date *self)\n{\n    if (self->hashcode == -1) {\n        self->hashcode = generic_hash(\n            (unsigned char *)self->data, _PyDateTime_DATE_DATASIZE);\n    }\n\n    return self->hashcode;\n}\n\nstatic PyObject *\ndate_toordinal(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    return PyLong_FromLong(ymd_to_ord(GET_YEAR(self), GET_MONTH(self),\n                                     GET_DAY(self)));\n}\n\nstatic PyObject *\ndate_weekday(PyDateTime_Date *self, PyObject *Py_UNUSED(ignored))\n{\n    int dow = weekday(GET_YEAR(self), GET_MONTH(self), GET_DAY(self));\n\n    return PyLong_FromLong(dow);\n}\n\n/* Pickle support, a simple use of __reduce__. */\n\n/* __getstate__ isn't exposed */\nstatic PyObject *\ndate_getstate(PyDateTime_Date *self)\n{\n    PyObject* field;\n    field = PyBytes_FromStringAndSize((char*)self->data,\n                                       _PyDateTime_DATE_DATASIZE);\n    return Py_BuildValue(\"(N)\", field);\n}\n\nstatic PyObject *\ndate_reduce(PyDateTime_Date *self, PyObject *arg)\n{\n    return Py_BuildValue(\"(ON)\", Py_TYPE(self), date_getstate(self));\n}\n\nstatic PyMethodDef date_methods[] = {\n\n    /* Class methods: */\n    DATETIME_DATE_FROMTIMESTAMP_METHODDEF\n\n    {\"fromordinal\", (PyCFunction)date_fromordinal,      METH_VARARGS |\n                                                    METH_CLASS,\n     PyDoc_STR(\"int -> date corresponding to a proleptic Gregorian \"\n               \"ordinal.\")},\n\n     {\"fromisoformat\", (PyCFunction)date_fromisoformat,  METH_O |\n                                                         METH_CLASS,\n      PyDoc_STR(\"str -> Construct a date from a string in ISO 8601 format.\")},\n\n     {\"fromisocalendar\", _PyCFunction_CAST(date_fromisocalendar),\n      METH_VARARGS | METH_KEYWORDS | METH_CLASS,\n      PyDoc_STR(\"int, int, int -> Construct a date from the ISO year, week \"\n                \"number and weekday.\\n\\n\"\n                \"This is the inverse of the date.isocalendar() function\")},\n\n    {\"today\",         (PyCFunction)date_today,   METH_NOARGS | METH_CLASS,\n     PyDoc_STR(\"Current date or datetime:  same as \"\n               \"self.__class__.fromtimestamp(time.time()).\")},\n\n    /* Instance methods: */\n\n    {\"ctime\",       (PyCFunction)date_ctime,        METH_NOARGS,\n     PyDoc_STR(\"Return ctime() style string.\")},\n\n    {\"strftime\",        _PyCFunction_CAST(date_strftime),     METH_VARARGS | METH_KEYWORDS,\n     PyDoc_STR(\"format -> strftime() style string.\")},\n\n    {\"__format__\",      (PyCFunction)date_format,       METH_VARARGS,\n     PyDoc_STR(\"Formats self with strftime.\")},\n\n    {\"timetuple\",   (PyCFunction)date_timetuple,    METH_NOARGS,\n     PyDoc_STR(\"Return time tuple, compatible with time.localtime().\")},\n\n    {\"isocalendar\", (PyCFunction)date_isocalendar,  METH_NOARGS,\n     PyDoc_STR(\"Return a named tuple containing ISO year, week number, and \"\n               \"weekday.\")},\n\n    {\"isoformat\",   (PyCFunction)date_isoformat,        METH_NOARGS,\n     PyDoc_STR(\"Return string in ISO 8601 format, YYYY-MM-DD.\")},\n\n    {\"isoweekday\",  (PyCFunction)date_isoweekday,   METH_NOARGS,\n     PyDoc_STR(\"Return the day of the week represented by the date.\\n\"\n               \"Monday == 1 ... Sunday == 7\")},\n\n    {\"toordinal\",   (PyCFunction)date_toordinal,    METH_NOARGS,\n     PyDoc_STR(\"Return proleptic Gregorian ordinal.  January 1 of year \"\n               \"1 is day 1.\")},\n\n    {\"weekday\",     (PyCFunction)date_weekday,      METH_NOARGS,\n     PyDoc_STR(\"Return the day of the week represented by the date.\\n\"\n               \"Monday == 0 ... Sunday == 6\")},\n\n    DATETIME_DATE_REPLACE_METHODDEF\n\n    {\"__replace__\", _PyCFunction_CAST(datetime_date_replace), METH_FASTCALL | METH_KEYWORDS,\n     PyDoc_STR(\"__replace__($self, /, **changes)\\n--\\n\\nThe same as replace().\")},\n\n    {\"__reduce__\", (PyCFunction)date_reduce,        METH_NOARGS,\n     PyDoc_STR(\"__reduce__() -> (cls, state)\")},\n\n    {NULL,      NULL}\n};\n\nstatic const char date_doc[] =\nPyDoc_STR(\"date(year, month, day) --> date object\");\n\nstatic PyNumberMethods date_as_number = {\n    date_add,                                           /* nb_add */\n    date_subtract,                                      /* nb_subtract */\n    0,                                                  /* nb_multiply */\n    0,                                                  /* nb_remainder */\n    0,                                                  /* nb_divmod */\n    0,                                                  /* nb_power */\n    0,                                                  /* nb_negative */\n    0,                                                  /* nb_positive */\n    0,                                                  /* nb_absolute */\n    0,                                                  /* nb_bool */\n};\n\nstatic PyTypeObject PyDateTime_DateType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"datetime.date\",                                    /* tp_name */\n    sizeof(PyDateTime_Date),                            /* tp_basicsize */\n    0,                                                  /* tp_itemsize */\n    0,                                                  /* tp_dealloc */\n    0,                                                  /* tp_vectorcall_offset */\n    0,                                                  /* tp_getattr */\n    0,                                                  /* tp_setattr */\n    0,                                                  /* tp_as_async */\n    (reprfunc)date_repr,                                /* tp_repr */\n    &date_as_number,                                    /* tp_as_number */\n    0,                                                  /* tp_as_sequence */\n    0,                                                  /* tp_as_mapping */\n    (hashfunc)date_hash,                                /* tp_hash */\n    0,                                                  /* tp_call */\n    (reprfunc)date_str,                                 /* tp_str */\n    PyObject_GenericGetAttr,                            /* tp_getattro */\n    0,                                                  /* tp_setattro */\n    0,                                                  /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,           /* tp_flags */\n    date_doc,                                           /* tp_doc */\n    0,                                                  /* tp_traverse */\n    0,                                                  /* tp_clear */\n    date_richcompare,                                   /* tp_richcompare */\n    0,                                                  /* tp_weaklistoffset */\n    0,                                                  /* tp_iter */\n    0,                                                  /* tp_iternext */\n    date_methods,                                       /* tp_methods */\n    0,                                                  /* tp_members */\n    date_getset,                                        /* tp_getset */\n    0,                                                  /* tp_base */\n    0,                                                  /* tp_dict */\n    0,                                                  /* tp_descr_get */\n    0,                                                  /* tp_descr_set */\n    0,                                                  /* tp_dictoffset */\n    0,                                                  /* tp_init */\n    0,                                                  /* tp_alloc */\n    date_new,                                           /* tp_new */\n    0,                                                  /* tp_free */\n};\n\n/*\n * PyDateTime_TZInfo implementation.\n */\n\n/* This is a pure abstract base class, so doesn't do anything beyond\n * raising NotImplemented exceptions.  Real tzinfo classes need\n * to derive from this.  This is mostly for clarity, and for efficiency in\n * datetime and time constructors (their tzinfo arguments need to\n * be subclasses of this tzinfo class, which is easy and quick to check).\n *\n * Note:  For reasons having to do with pickling of subclasses, we have\n * to allow tzinfo objects to be instantiated.  This wasn't an issue\n * in the Python implementation (__init__() could raise NotImplementedError\n * there without ill effect), but doing so in the C implementation hit a\n * brick wall.\n */\n\nstatic PyObject *\ntzinfo_nogo(const char* methodname)\n{\n    PyErr_Format(PyExc_NotImplementedError,\n                 \"a tzinfo subclass must implement %s()\",\n                 methodname);\n    return NULL;\n}\n\n/* Methods.  A subclass must implement these. */\n\nstatic PyObject *\ntzinfo_tzname(PyDateTime_TZInfo *self, PyObject *dt)\n{\n    return tzinfo_nogo(\"tzname\");\n}\n\nstatic PyObject *\ntzinfo_utcoffset(PyDateTime_TZInfo *self, PyObject *dt)\n{\n    return tzinfo_nogo(\"utcoffset\");\n}\n\nstatic PyObject *\ntzinfo_dst(PyDateTime_TZInfo *self, PyObject *dt)\n{\n    return tzinfo_nogo(\"dst\");\n}\n\n\nstatic PyObject *add_datetime_timedelta(PyDateTime_DateTime *date,\n                                        PyDateTime_Delta *delta,\n                                        int factor);\nstatic PyObject *datetime_utcoffset(PyObject *self, PyObject *);\nstatic PyObject *datetime_dst(PyObject *self, PyObject *);\n\nstatic PyObject *\ntzinfo_fromutc(PyDateTime_TZInfo *self, PyObject *dt)\n{\n    PyObject *result = NULL;\n    PyObject *off = NULL, *dst = NULL;\n    PyDateTime_Delta *delta = NULL;\n\n    if (!PyDateTime_Check(dt)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"fromutc: argument must be a datetime\");\n        return NULL;\n    }\n    if (GET_DT_TZINFO(dt) != (PyObject *)self) {\n        PyErr_SetString(PyExc_ValueError, \"fromutc: dt.tzinfo \"\n                        \"is not self\");\n        return NULL;\n    }\n\n    off = datetime_utcoffset(dt, NULL);\n    if (off == NULL)\n        return NULL;\n    if (off == Py_None) {\n        PyErr_SetString(PyExc_ValueError, \"fromutc: non-None \"\n                        \"utcoffset() result required\");\n        goto Fail;\n    }\n\n    dst = datetime_dst(dt, NULL);\n    if (dst == NULL)\n        goto Fail;\n    if (dst == Py_None) {\n        PyErr_SetString(PyExc_ValueError, \"fromutc: non-None \"\n                        \"dst() result required\");\n        goto Fail;\n    }\n\n    delta = (PyDateTime_Delta *)delta_subtract(off, dst);\n    if (delta == NULL)\n        goto Fail;\n    result = add_datetime_timedelta((PyDateTime_DateTime *)dt, delta, 1);\n    if (result == NULL)\n        goto Fail;\n\n    Py_DECREF(dst);\n    dst = call_dst(GET_DT_TZINFO(dt), result);\n    if (dst == NULL)\n        goto Fail;\n    if (dst == Py_None)\n        goto Inconsistent;\n    if (delta_bool((PyDateTime_Delta *)dst) != 0) {\n        Py_SETREF(result, add_datetime_timedelta((PyDateTime_DateTime *)result,\n                                                 (PyDateTime_Delta *)dst, 1));\n        if (result == NULL)\n            goto Fail;\n    }\n    Py_DECREF(delta);\n    Py_DECREF(dst);\n    Py_DECREF(off);\n    return result;\n\nInconsistent:\n    PyErr_SetString(PyExc_ValueError, \"fromutc: tz.dst() gave \"\n                    \"inconsistent results; cannot convert\");\n\n    /* fall through to failure */\nFail:\n    Py_XDECREF(off);\n    Py_XDECREF(dst);\n    Py_XDECREF(delta);\n    Py_XDECREF(result);\n    return NULL;\n}\n\n/*\n * Pickle support.  This is solely so that tzinfo subclasses can use\n * pickling -- tzinfo itself is supposed to be uninstantiable.\n */\n\nstatic PyObject *\ntzinfo_reduce(PyObject *self, PyObject *Py_UNUSED(ignored))\n{\n    PyObject *args, *state;\n    PyObject *getinitargs;\n\n    if (PyObject_GetOptionalAttr(self, &_Py_ID(__getinitargs__), &getinitargs) < 0) {\n        return NULL;\n    }\n    if (getinitargs != NULL) {\n        args = PyObject_CallNoArgs(getinitargs);\n        Py_DECREF(getinitargs);\n    }\n    else {\n        args = PyTuple_New(0);\n    }\n    if (args == NULL) {\n        return NULL;\n    }\n\n    state = _PyObject_GetState(self);\n    if (state == NULL) {\n        Py_DECREF(args);\n        return NULL;\n    }\n\n    return Py_BuildValue(\"(ONN)\", Py_TYPE(self), args, state);\n}\n\nstatic PyMethodDef tzinfo_methods[] = {\n\n    {\"tzname\",          (PyCFunction)tzinfo_tzname,             METH_O,\n     PyDoc_STR(\"datetime -> string name of time zone.\")},\n\n    {\"utcoffset\",       (PyCFunction)tzinfo_utcoffset,          METH_O,\n     PyDoc_STR(\"datetime -> timedelta showing offset from UTC, negative \"\n           \"values indicating West of UTC\")},\n\n    {\"dst\",             (PyCFunction)tzinfo_dst,                METH_O,\n     PyDoc_STR(\"datetime -> DST offset as timedelta positive east of UTC.\")},\n\n    {\"fromutc\",         (PyCFunction)tzinfo_fromutc,            METH_O,\n     PyDoc_STR(\"datetime in UTC -> datetime in local time.\")},\n\n    {\"__reduce__\",  tzinfo_reduce,             METH_NOARGS,\n     PyDoc_STR(\"-> (cls, state)\")},\n\n    {NULL, NULL}\n};\n\nstatic const char tzinfo_doc[] =\nPyDoc_STR(\"Abstract base class for time zone info objects.\");\n\nstatic PyTypeObject PyDateTime_TZInfoType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"datetime.tzinfo\",                          /* tp_name */\n    sizeof(PyDateTime_TZInfo),                  /* tp_basicsize */\n    0,                                          /* tp_itemsize */\n    0,                                          /* tp_dealloc */\n    0,                                          /* tp_vectorcall_offset */\n    0,                                          /* tp_getattr */\n    0,                                          /* tp_setattr */\n    0,                                          /* tp_as_async */\n    0,                                          /* tp_repr */\n    0,                                          /* tp_as_number */\n    0,                                          /* tp_as_sequence */\n    0,                                          /* tp_as_mapping */\n    0,                                          /* tp_hash */\n    0,                                          /* tp_call */\n    0,                                          /* tp_str */\n    PyObject_GenericGetAttr,                    /* tp_getattro */\n    0,                                          /* tp_setattro */\n    0,                                          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,   /* tp_flags */\n    tzinfo_doc,                                 /* tp_doc */\n    0,                                          /* tp_traverse */\n    0,                                          /* tp_clear */\n    0,                                          /* tp_richcompare */\n    0,                                          /* tp_weaklistoffset */\n    0,                                          /* tp_iter */\n    0,                                          /* tp_iternext */\n    tzinfo_methods,                             /* tp_methods */\n    0,                                          /* tp_members */\n    0,                                          /* tp_getset */\n    0,                                          /* tp_base */\n    0,                                          /* tp_dict */\n    0,                                          /* tp_descr_get */\n    0,                                          /* tp_descr_set */\n    0,                                          /* tp_dictoffset */\n    0,                                          /* tp_init */\n    0,                                          /* tp_alloc */\n    PyType_GenericNew,                          /* tp_new */\n    0,                                          /* tp_free */\n};\n\nstatic char *timezone_kws[] = {\"offset\", \"name\", NULL};\n\nstatic PyObject *\ntimezone_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    PyObject *offset;\n    PyObject *name = NULL;\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"O!|U:timezone\", timezone_kws,\n                                    DELTA_TYPE(NO_STATE), &offset, &name))\n        return new_timezone(offset, name);\n\n    return NULL;\n}\n\nstatic void\ntimezone_dealloc(PyDateTime_TimeZone *self)\n{\n    Py_CLEAR(self->offset);\n    Py_CLEAR(self->name);\n    Py_TYPE(self)->tp_free((PyObject *)self);\n}\n\nstatic PyObject *\ntimezone_richcompare(PyDateTime_TimeZone *self,\n                     PyDateTime_TimeZone *other, int op)\n{\n    if (op != Py_EQ && op != Py_NE)\n        Py_RETURN_NOTIMPLEMENTED;\n    if (!PyTimezone_Check(other)) {\n        Py_RETURN_NOTIMPLEMENTED;\n    }\n    return delta_richcompare(self->offset, other->offset, op);\n}\n\nstatic Py_hash_t\ntimezone_hash(PyDateTime_TimeZone *self)\n{\n    return delta_hash((PyDateTime_Delta *)self->offset);\n}\n\n/* Check argument type passed to tzname, utcoffset, or dst methods.\n   Returns 0 for good argument.  Returns -1 and sets exception info\n   otherwise.\n */\nstatic int\n_timezone_check_argument(PyObject *dt, const char *meth)\n{\n    if (dt == Py_None || PyDateTime_Check(dt))\n        return 0;\n    PyErr_Format(PyExc_TypeError, \"%s(dt) argument must be a datetime instance\"\n                 \" or None, not %.200s\", meth, Py_TYPE(dt)->tp_name);\n    return -1;\n}\n\nstatic PyObject *\ntimezone_repr(PyDateTime_TimeZone *self)\n{\n    /* Note that although timezone is not subclassable, it is convenient\n       to use Py_TYPE(self)->tp_name here. */\n    const char *type_name = Py_TYPE(self)->tp_name;\n\n    if ((PyObject *)self == CONST_UTC(NO_STATE)) {\n        return PyUnicode_FromFormat(\"%s.utc\", type_name);\n    }\n\n    if (self->name == NULL)\n        return PyUnicode_FromFormat(\"%s(%R)\", type_name, self->offset);\n\n    return PyUnicode_FromFormat(\"%s(%R, %R)\", type_name, self->offset,\n                                self->name);\n}\n\n\nstatic PyObject *\ntimezone_str(PyDateTime_TimeZone *self)\n{\n    int hours, minutes, seconds, microseconds;\n    PyObject *offset;\n    char sign;\n\n    if (self->name != NULL) {\n        return Py_NewRef(self->name);\n    }\n    if ((PyObject *)self == CONST_UTC(NO_STATE) ||\n           (GET_TD_DAYS(self->offset) == 0 &&\n            GET_TD_SECONDS(self->offset) == 0 &&\n            GET_TD_MICROSECONDS(self->offset) == 0))\n    {\n        return PyUnicode_FromString(\"UTC\");\n    }\n    /* Offset is normalized, so it is negative if days < 0 */\n    if (GET_TD_DAYS(self->offset) < 0) {\n        sign = '-';\n        offset = delta_negative((PyDateTime_Delta *)self->offset);\n        if (offset == NULL)\n            return NULL;\n    }\n    else {\n        sign = '+';\n        offset = Py_NewRef(self->offset);\n    }\n    /* Offset is not negative here. */\n    microseconds = GET_TD_MICROSECONDS(offset);\n    seconds = GET_TD_SECONDS(offset);\n    Py_DECREF(offset);\n    minutes = divmod(seconds, 60, &seconds);\n    hours = divmod(minutes, 60, &minutes);\n    if (microseconds != 0) {\n        return PyUnicode_FromFormat(\"UTC%c%02d:%02d:%02d.%06d\",\n                                    sign, hours, minutes,\n                                    seconds, microseconds);\n    }\n    if (seconds != 0) {\n        return PyUnicode_FromFormat(\"UTC%c%02d:%02d:%02d\",\n                                    sign, hours, minutes, seconds);\n    }\n    return PyUnicode_FromFormat(\"UTC%c%02d:%02d\", sign, hours, minutes);\n}\n\nstatic PyObject *\ntimezone_tzname(PyDateTime_TimeZone *self, PyObject *dt)\n{\n    if (_timezone_check_argument(dt, \"tzname\") == -1)\n        return NULL;\n\n    return timezone_str(self);\n}\n\nstatic PyObject *\ntimezone_utcoffset(PyDateTime_TimeZone *self, PyObject *dt)\n{\n    if (_timezone_check_argument(dt, \"utcoffset\") == -1)\n        return NULL;\n\n    return Py_NewRef(self->offset);\n}\n\nstatic PyObject *\ntimezone_dst(PyObject *self, PyObject *dt)\n{\n    if (_timezone_check_argument(dt, \"dst\") == -1)\n        return NULL;\n\n    Py_RETURN_NONE;\n}\n\nstatic PyObject *\ntimezone_fromutc(PyDateTime_TimeZone *self, PyDateTime_DateTime *dt)\n{\n    if (!PyDateTime_Check(dt)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"fromutc: argument must be a datetime\");\n        return NULL;\n    }\n    if (!HASTZINFO(dt) || dt->tzinfo != (PyObject *)self) {\n        PyErr_SetString(PyExc_ValueError, \"fromutc: dt.tzinfo \"\n                        \"is not self\");\n        return NULL;\n    }\n\n    return add_datetime_timedelta(dt, (PyDateTime_Delta *)self->offset, 1);\n}\n\nstatic PyObject *\ntimezone_getinitargs(PyDateTime_TimeZone *self, PyObject *Py_UNUSED(ignored))\n{\n    if (self->name == NULL)\n        return PyTuple_Pack(1, self->offset);\n    return PyTuple_Pack(2, self->offset, self->name);\n}\n\nstatic PyMethodDef timezone_methods[] = {\n    {\"tzname\", (PyCFunction)timezone_tzname, METH_O,\n     PyDoc_STR(\"If name is specified when timezone is created, returns the name.\"\n               \"  Otherwise returns offset as 'UTC(+|-)HH:MM'.\")},\n\n    {\"utcoffset\", (PyCFunction)timezone_utcoffset, METH_O,\n     PyDoc_STR(\"Return fixed offset.\")},\n\n    {\"dst\", (PyCFunction)timezone_dst, METH_O,\n     PyDoc_STR(\"Return None.\")},\n\n    {\"fromutc\", (PyCFunction)timezone_fromutc, METH_O,\n     PyDoc_STR(\"datetime in UTC -> datetime in local time.\")},\n\n    {\"__getinitargs__\", (PyCFunction)timezone_getinitargs, METH_NOARGS,\n     PyDoc_STR(\"pickle support\")},\n\n    {NULL, NULL}\n};\n\nstatic const char timezone_doc[] =\nPyDoc_STR(\"Fixed offset from UTC implementation of tzinfo.\");\n\nstatic PyTypeObject PyDateTime_TimeZoneType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"datetime.timezone\",              /* tp_name */\n    sizeof(PyDateTime_TimeZone),      /* tp_basicsize */\n    0,                                /* tp_itemsize */\n    (destructor)timezone_dealloc,     /* tp_dealloc */\n    0,                                /* tp_vectorcall_offset */\n    0,                                /* tp_getattr */\n    0,                                /* tp_setattr */\n    0,                                /* tp_as_async */\n    (reprfunc)timezone_repr,          /* tp_repr */\n    0,                                /* tp_as_number */\n    0,                                /* tp_as_sequence */\n    0,                                /* tp_as_mapping */\n    (hashfunc)timezone_hash,          /* tp_hash */\n    0,                                /* tp_call */\n    (reprfunc)timezone_str,           /* tp_str */\n    0,                                /* tp_getattro */\n    0,                                /* tp_setattro */\n    0,                                /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT,               /* tp_flags */\n    timezone_doc,                     /* tp_doc */\n    0,                                /* tp_traverse */\n    0,                                /* tp_clear */\n    (richcmpfunc)timezone_richcompare,/* tp_richcompare */\n    0,                                /* tp_weaklistoffset */\n    0,                                /* tp_iter */\n    0,                                /* tp_iternext */\n    timezone_methods,                 /* tp_methods */\n    0,                                /* tp_members */\n    0,                                /* tp_getset */\n    0,                                /* tp_base; filled in PyInit__datetime */\n    0,                                /* tp_dict */\n    0,                                /* tp_descr_get */\n    0,                                /* tp_descr_set */\n    0,                                /* tp_dictoffset */\n    0,                                /* tp_init */\n    0,                                /* tp_alloc */\n    timezone_new,                     /* tp_new */\n};\n\n// XXX Can we make this const?\nstatic PyDateTime_TimeZone utc_timezone = {\n    PyObject_HEAD_INIT(&PyDateTime_TimeZoneType)\n    .offset = (PyObject *)&zero_delta,\n    .name = NULL,\n};\n\nstatic PyDateTime_TimeZone *\nlook_up_timezone(PyObject *offset, PyObject *name)\n{\n    if (offset == utc_timezone.offset && name == NULL) {\n        return (PyDateTime_TimeZone *)CONST_UTC(NO_STATE);\n    }\n    return NULL;\n}\n\n\n/*\n * PyDateTime_Time implementation.\n */\n\n/* Accessor properties.\n */\n\nstatic PyObject *\ntime_hour(PyDateTime_Time *self, void *unused)\n{\n    return PyLong_FromLong(TIME_GET_HOUR(self));\n}\n\nstatic PyObject *\ntime_minute(PyDateTime_Time *self, void *unused)\n{\n    return PyLong_FromLong(TIME_GET_MINUTE(self));\n}\n\n/* The name time_second conflicted with some platform header file. */\nstatic PyObject *\npy_time_second(PyDateTime_Time *self, void *unused)\n{\n    return PyLong_FromLong(TIME_GET_SECOND(self));\n}\n\nstatic PyObject *\ntime_microsecond(PyDateTime_Time *self, void *unused)\n{\n    return PyLong_FromLong(TIME_GET_MICROSECOND(self));\n}\n\nstatic PyObject *\ntime_tzinfo(PyDateTime_Time *self, void *unused)\n{\n    PyObject *result = HASTZINFO(self) ? self->tzinfo : Py_None;\n    return Py_NewRef(result);\n}\n\nstatic PyObject *\ntime_fold(PyDateTime_Time *self, void *unused)\n{\n    return PyLong_FromLong(TIME_GET_FOLD(self));\n}\n\nstatic PyGetSetDef time_getset[] = {\n    {\"hour\",        (getter)time_hour},\n    {\"minute\",      (getter)time_minute},\n    {\"second\",      (getter)py_time_second},\n    {\"microsecond\", (getter)time_microsecond},\n    {\"tzinfo\",      (getter)time_tzinfo},\n    {\"fold\",        (getter)time_fold},\n    {NULL}\n};\n\n/*\n * Constructors.\n */\n\nstatic char *time_kws[] = {\"hour\", \"minute\", \"second\", \"microsecond\",\n                           \"tzinfo\", \"fold\", NULL};\n\nstatic PyObject *\ntime_from_pickle(PyTypeObject *type, PyObject *state, PyObject *tzinfo)\n{\n    PyDateTime_Time *me;\n    char aware = (char)(tzinfo != Py_None);\n\n    if (aware && check_tzinfo_subclass(tzinfo) < 0) {\n        PyErr_SetString(PyExc_TypeError, \"bad tzinfo state arg\");\n        return NULL;\n    }\n\n    me = (PyDateTime_Time *) (type->tp_alloc(type, aware));\n    if (me != NULL) {\n        const char *pdata = PyBytes_AS_STRING(state);\n\n        memcpy(me->data, pdata, _PyDateTime_TIME_DATASIZE);\n        me->hashcode = -1;\n        me->hastzinfo = aware;\n        if (aware) {\n            me->tzinfo = Py_NewRef(tzinfo);\n        }\n        if (pdata[0] & (1 << 7)) {\n            me->data[0] -= 128;\n            me->fold = 1;\n        }\n        else {\n            me->fold = 0;\n        }\n    }\n    return (PyObject *)me;\n}\n\nstatic PyObject *\ntime_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    PyObject *self = NULL;\n    int hour = 0;\n    int minute = 0;\n    int second = 0;\n    int usecond = 0;\n    PyObject *tzinfo = Py_None;\n    int fold = 0;\n\n    /* Check for invocation from pickle with __getstate__ state */\n    if (PyTuple_GET_SIZE(args) >= 1 && PyTuple_GET_SIZE(args) <= 2) {\n        PyObject *state = PyTuple_GET_ITEM(args, 0);\n        if (PyTuple_GET_SIZE(args) == 2) {\n            tzinfo = PyTuple_GET_ITEM(args, 1);\n        }\n        if (PyBytes_Check(state)) {\n            if (PyBytes_GET_SIZE(state) == _PyDateTime_TIME_DATASIZE &&\n                (0x7F & ((unsigned char) (PyBytes_AS_STRING(state)[0]))) < 24)\n            {\n                return time_from_pickle(type, state, tzinfo);\n            }\n        }\n        else if (PyUnicode_Check(state)) {\n            if (PyUnicode_GET_LENGTH(state) == _PyDateTime_TIME_DATASIZE &&\n                (0x7F & PyUnicode_READ_CHAR(state, 0)) < 24)\n            {\n                state = PyUnicode_AsLatin1String(state);\n                if (state == NULL) {\n                    if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {\n                        /* More informative error message. */\n                        PyErr_SetString(PyExc_ValueError,\n                            \"Failed to encode latin1 string when unpickling \"\n                            \"a time object. \"\n                            \"pickle.load(data, encoding='latin1') is assumed.\");\n                    }\n                    return NULL;\n                }\n                self = time_from_pickle(type, state, tzinfo);\n                Py_DECREF(state);\n                return self;\n            }\n        }\n        tzinfo = Py_None;\n    }\n\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"|iiiiO$i\", time_kws,\n                                    &hour, &minute, &second, &usecond,\n                                    &tzinfo, &fold)) {\n        self = new_time_ex2(hour, minute, second, usecond, tzinfo, fold,\n                            type);\n    }\n    return self;\n}\n\n/*\n * Destructor.\n */\n\nstatic void\ntime_dealloc(PyDateTime_Time *self)\n{\n    if (HASTZINFO(self)) {\n        Py_XDECREF(self->tzinfo);\n    }\n    Py_TYPE(self)->tp_free((PyObject *)self);\n}\n\n/*\n * Indirect access to tzinfo methods.\n */\n\n/* These are all METH_NOARGS, so don't need to check the arglist. */\nstatic PyObject *\ntime_utcoffset(PyObject *self, PyObject *unused) {\n    return call_utcoffset(GET_TIME_TZINFO(self), Py_None);\n}\n\nstatic PyObject *\ntime_dst(PyObject *self, PyObject *unused) {\n    return call_dst(GET_TIME_TZINFO(self), Py_None);\n}\n\nstatic PyObject *\ntime_tzname(PyDateTime_Time *self, PyObject *unused) {\n    return call_tzname(GET_TIME_TZINFO(self), Py_None);\n}\n\n/*\n * Various ways to turn a time into a string.\n */\n\nstatic PyObject *\ntime_repr(PyDateTime_Time *self)\n{\n    const char *type_name = Py_TYPE(self)->tp_name;\n    int h = TIME_GET_HOUR(self);\n    int m = TIME_GET_MINUTE(self);\n    int s = TIME_GET_SECOND(self);\n    int us = TIME_GET_MICROSECOND(self);\n    int fold = TIME_GET_FOLD(self);\n    PyObject *result = NULL;\n\n    if (us)\n        result = PyUnicode_FromFormat(\"%s(%d, %d, %d, %d)\",\n                                      type_name, h, m, s, us);\n    else if (s)\n        result = PyUnicode_FromFormat(\"%s(%d, %d, %d)\",\n                                      type_name, h, m, s);\n    else\n        result = PyUnicode_FromFormat(\"%s(%d, %d)\", type_name, h, m);\n    if (result != NULL && HASTZINFO(self))\n        result = append_keyword_tzinfo(result, self->tzinfo);\n    if (result != NULL && fold)\n        result = append_keyword_fold(result, fold);\n    return result;\n}\n\nstatic PyObject *\ntime_str(PyDateTime_Time *self)\n{\n    return PyObject_CallMethodNoArgs((PyObject *)self, &_Py_ID(isoformat));\n}\n\nstatic PyObject *\ntime_isoformat(PyDateTime_Time *self, PyObject *args, PyObject *kw)\n{\n    char buf[100];\n    const char *timespec = NULL;\n    static char *keywords[] = {\"timespec\", NULL};\n    PyObject *result;\n    int us = TIME_GET_MICROSECOND(self);\n    static const char *specs[][2] = {\n        {\"hours\", \"%02d\"},\n        {\"minutes\", \"%02d:%02d\"},\n        {\"seconds\", \"%02d:%02d:%02d\"},\n        {\"milliseconds\", \"%02d:%02d:%02d.%03d\"},\n        {\"microseconds\", \"%02d:%02d:%02d.%06d\"},\n    };\n    size_t given_spec;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kw, \"|s:isoformat\", keywords, &timespec))\n        return NULL;\n\n    if (timespec == NULL || strcmp(timespec, \"auto\") == 0) {\n        if (us == 0) {\n            /* seconds */\n            given_spec = 2;\n        }\n        else {\n            /* microseconds */\n            given_spec = 4;\n        }\n    }\n    else {\n        for (given_spec = 0; given_spec < Py_ARRAY_LENGTH(specs); given_spec++) {\n            if (strcmp(timespec, specs[given_spec][0]) == 0) {\n                if (given_spec == 3) {\n                    /* milliseconds */\n                    us = us / 1000;\n                }\n                break;\n            }\n        }\n    }\n\n    if (given_spec == Py_ARRAY_LENGTH(specs)) {\n        PyErr_Format(PyExc_ValueError, \"Unknown timespec value\");\n        return NULL;\n    }\n    else {\n        result = PyUnicode_FromFormat(specs[given_spec][1],\n                                      TIME_GET_HOUR(self), TIME_GET_MINUTE(self),\n                                      TIME_GET_SECOND(self), us);\n    }\n\n    if (result == NULL || !HASTZINFO(self) || self->tzinfo == Py_None)\n        return result;\n\n    /* We need to append the UTC offset. */\n    if (format_utcoffset(buf, sizeof(buf), \":\", self->tzinfo,\n                         Py_None) < 0) {\n        Py_DECREF(result);\n        return NULL;\n    }\n    PyUnicode_AppendAndDel(&result, PyUnicode_FromString(buf));\n    return result;\n}\n\nstatic PyObject *\ntime_strftime(PyDateTime_Time *self, PyObject *args, PyObject *kw)\n{\n    PyObject *result;\n    PyObject *tuple;\n    PyObject *format;\n    static char *keywords[] = {\"format\", NULL};\n\n    if (! PyArg_ParseTupleAndKeywords(args, kw, \"U:strftime\", keywords,\n                                      &format))\n        return NULL;\n\n    /* Python's strftime does insane things with the year part of the\n     * timetuple.  The year is forced to (the otherwise nonsensical)\n     * 1900 to work around that.\n     */\n    tuple = Py_BuildValue(\"iiiiiiiii\",\n                          1900, 1, 1, /* year, month, day */\n                  TIME_GET_HOUR(self),\n                  TIME_GET_MINUTE(self),\n                  TIME_GET_SECOND(self),\n                  0, 1, -1); /* weekday, daynum, dst */\n    if (tuple == NULL)\n        return NULL;\n    assert(PyTuple_Size(tuple) == 9);\n    result = wrap_strftime((PyObject *)self, format, tuple,\n                           Py_None);\n    Py_DECREF(tuple);\n    return result;\n}\n\n/*\n * Miscellaneous methods.\n */\n\nstatic PyObject *\ntime_richcompare(PyObject *self, PyObject *other, int op)\n{\n    PyObject *result = NULL;\n    PyObject *offset1, *offset2;\n    int diff;\n\n    if (! PyTime_Check(other))\n        Py_RETURN_NOTIMPLEMENTED;\n\n    if (GET_TIME_TZINFO(self) == GET_TIME_TZINFO(other)) {\n        diff = memcmp(((PyDateTime_Time *)self)->data,\n                      ((PyDateTime_Time *)other)->data,\n                      _PyDateTime_TIME_DATASIZE);\n        return diff_to_bool(diff, op);\n    }\n    offset1 = time_utcoffset(self, NULL);\n    if (offset1 == NULL)\n        return NULL;\n    offset2 = time_utcoffset(other, NULL);\n    if (offset2 == NULL)\n        goto done;\n    /* If they're both naive, or both aware and have the same offsets,\n     * we get off cheap.  Note that if they're both naive, offset1 ==\n     * offset2 == Py_None at this point.\n     */\n    if ((offset1 == offset2) ||\n        (PyDelta_Check(offset1) && PyDelta_Check(offset2) &&\n         delta_cmp(offset1, offset2) == 0)) {\n        diff = memcmp(((PyDateTime_Time *)self)->data,\n                      ((PyDateTime_Time *)other)->data,\n                      _PyDateTime_TIME_DATASIZE);\n        result = diff_to_bool(diff, op);\n    }\n    /* The hard case: both aware with different UTC offsets */\n    else if (offset1 != Py_None && offset2 != Py_None) {\n        int offsecs1, offsecs2;\n        assert(offset1 != offset2); /* else last \"if\" handled it */\n        offsecs1 = TIME_GET_HOUR(self) * 3600 +\n                   TIME_GET_MINUTE(self) * 60 +\n                   TIME_GET_SECOND(self) -\n                   GET_TD_DAYS(offset1) * 86400 -\n                   GET_TD_SECONDS(offset1);\n        offsecs2 = TIME_GET_HOUR(other) * 3600 +\n                   TIME_GET_MINUTE(other) * 60 +\n                   TIME_GET_SECOND(other) -\n                   GET_TD_DAYS(offset2) * 86400 -\n                   GET_TD_SECONDS(offset2);\n        diff = offsecs1 - offsecs2;\n        if (diff == 0)\n            diff = TIME_GET_MICROSECOND(self) -\n                   TIME_GET_MICROSECOND(other);\n        result = diff_to_bool(diff, op);\n    }\n    else if (op == Py_EQ) {\n        result = Py_NewRef(Py_False);\n    }\n    else if (op == Py_NE) {\n        result = Py_NewRef(Py_True);\n    }\n    else {\n        PyErr_SetString(PyExc_TypeError,\n                        \"can't compare offset-naive and \"\n                        \"offset-aware times\");\n    }\n done:\n    Py_DECREF(offset1);\n    Py_XDECREF(offset2);\n    return result;\n}\n\nstatic Py_hash_t\ntime_hash(PyDateTime_Time *self)\n{\n    if (self->hashcode == -1) {\n        PyObject *offset, *self0;\n        if (TIME_GET_FOLD(self)) {\n            self0 = new_time_ex2(TIME_GET_HOUR(self),\n                                 TIME_GET_MINUTE(self),\n                                 TIME_GET_SECOND(self),\n                                 TIME_GET_MICROSECOND(self),\n                                 HASTZINFO(self) ? self->tzinfo : Py_None,\n                                 0, Py_TYPE(self));\n            if (self0 == NULL)\n                return -1;\n        }\n        else {\n            self0 = Py_NewRef(self);\n        }\n        offset = time_utcoffset(self0, NULL);\n        Py_DECREF(self0);\n\n        if (offset == NULL)\n            return -1;\n\n        /* Reduce this to a hash of another object. */\n        if (offset == Py_None)\n            self->hashcode = generic_hash(\n                (unsigned char *)self->data, _PyDateTime_TIME_DATASIZE);\n        else {\n            PyObject *temp1, *temp2;\n            int seconds, microseconds;\n            assert(HASTZINFO(self));\n            seconds = TIME_GET_HOUR(self) * 3600 +\n                      TIME_GET_MINUTE(self) * 60 +\n                      TIME_GET_SECOND(self);\n            microseconds = TIME_GET_MICROSECOND(self);\n            temp1 = new_delta(0, seconds, microseconds, 1);\n            if (temp1 == NULL) {\n                Py_DECREF(offset);\n                return -1;\n            }\n            temp2 = delta_subtract(temp1, offset);\n            Py_DECREF(temp1);\n            if (temp2 == NULL) {\n                Py_DECREF(offset);\n                return -1;\n            }\n            self->hashcode = PyObject_Hash(temp2);\n            Py_DECREF(temp2);\n        }\n        Py_DECREF(offset);\n    }\n    return self->hashcode;\n}\n\n/*[clinic input]\ndatetime.time.replace\n\n    hour: int(c_default=\"TIME_GET_HOUR(self)\") = unchanged\n    minute: int(c_default=\"TIME_GET_MINUTE(self)\") = unchanged\n    second: int(c_default=\"TIME_GET_SECOND(self)\") = unchanged\n    microsecond: int(c_default=\"TIME_GET_MICROSECOND(self)\") = unchanged\n    tzinfo: object(c_default=\"HASTZINFO(self) ? self->tzinfo : Py_None\") = unchanged\n    *\n    fold: int(c_default=\"TIME_GET_FOLD(self)\") = unchanged\n\nReturn time with new specified fields.\n[clinic start generated code]*/\n\nstatic PyObject *\ndatetime_time_replace_impl(PyDateTime_Time *self, int hour, int minute,\n                           int second, int microsecond, PyObject *tzinfo,\n                           int fold)\n/*[clinic end generated code: output=0b89a44c299e4f80 input=9b6a35b1e704b0ca]*/\n{\n    return new_time_subclass_fold_ex(hour, minute, second, microsecond, tzinfo,\n                                     fold, (PyObject *)Py_TYPE(self));\n}\n\nstatic PyObject *\ntime_fromisoformat(PyObject *cls, PyObject *tstr) {\n    assert(tstr != NULL);\n\n    if (!PyUnicode_Check(tstr)) {\n        PyErr_SetString(PyExc_TypeError, \"fromisoformat: argument must be str\");\n        return NULL;\n    }\n\n    Py_ssize_t len;\n    const char *p = PyUnicode_AsUTF8AndSize(tstr, &len);\n\n    if (p == NULL) {\n        goto invalid_string_error;\n    }\n\n    // The spec actually requires that time-only ISO 8601 strings start with\n    // T, but the extended format allows this to be omitted as long as there\n    // is no ambiguity with date strings.\n    if (*p == 'T') {\n        ++p;\n        len -= 1;\n    }\n\n    int hour = 0, minute = 0, second = 0, microsecond = 0;\n    int tzoffset = 0, tzimicrosecond = 0;\n    int rv = parse_isoformat_time(p, len,\n                                  &hour, &minute, &second, &microsecond,\n                                  &tzoffset, &tzimicrosecond);\n\n    if (rv < 0) {\n        goto invalid_string_error;\n    }\n\n    PyObject *tzinfo = tzinfo_from_isoformat_results(rv, tzoffset,\n                                                     tzimicrosecond);\n\n    if (tzinfo == NULL) {\n        return NULL;\n    }\n\n    PyObject *t;\n    if ( (PyTypeObject *)cls == TIME_TYPE(NO_STATE)) {\n        t = new_time(hour, minute, second, microsecond, tzinfo, 0);\n    } else {\n        t = PyObject_CallFunction(cls, \"iiiiO\",\n                                  hour, minute, second, microsecond, tzinfo);\n    }\n\n    Py_DECREF(tzinfo);\n    return t;\n\ninvalid_string_error:\n    PyErr_Format(PyExc_ValueError, \"Invalid isoformat string: %R\", tstr);\n    return NULL;\n}\n\n\n/* Pickle support, a simple use of __reduce__. */\n\n/* Let basestate be the non-tzinfo data string.\n * If tzinfo is None, this returns (basestate,), else (basestate, tzinfo).\n * So it's a tuple in any (non-error) case.\n * __getstate__ isn't exposed.\n */\nstatic PyObject *\ntime_getstate(PyDateTime_Time *self, int proto)\n{\n    PyObject *basestate;\n    PyObject *result = NULL;\n\n    basestate =  PyBytes_FromStringAndSize((char *)self->data,\n                                            _PyDateTime_TIME_DATASIZE);\n    if (basestate != NULL) {\n        if (proto > 3 && TIME_GET_FOLD(self))\n            /* Set the first bit of the first byte */\n            PyBytes_AS_STRING(basestate)[0] |= (1 << 7);\n        if (! HASTZINFO(self) || self->tzinfo == Py_None)\n            result = PyTuple_Pack(1, basestate);\n        else\n            result = PyTuple_Pack(2, basestate, self->tzinfo);\n        Py_DECREF(basestate);\n    }\n    return result;\n}\n\nstatic PyObject *\ntime_reduce_ex(PyDateTime_Time *self, PyObject *args)\n{\n    int proto;\n    if (!PyArg_ParseTuple(args, \"i:__reduce_ex__\", &proto))\n        return NULL;\n\n    return Py_BuildValue(\"(ON)\", Py_TYPE(self), time_getstate(self, proto));\n}\n\nstatic PyObject *\ntime_reduce(PyDateTime_Time *self, PyObject *arg)\n{\n    return Py_BuildValue(\"(ON)\", Py_TYPE(self), time_getstate(self, 2));\n}\n\nstatic PyMethodDef time_methods[] = {\n\n    {\"isoformat\",   _PyCFunction_CAST(time_isoformat),        METH_VARARGS | METH_KEYWORDS,\n     PyDoc_STR(\"Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]]\"\n               \"[+HH:MM].\\n\\n\"\n               \"The optional argument timespec specifies the number \"\n               \"of additional terms\\nof the time to include. Valid \"\n               \"options are 'auto', 'hours', 'minutes',\\n'seconds', \"\n               \"'milliseconds' and 'microseconds'.\\n\")},\n\n    {\"strftime\",        _PyCFunction_CAST(time_strftime),     METH_VARARGS | METH_KEYWORDS,\n     PyDoc_STR(\"format -> strftime() style string.\")},\n\n    {\"__format__\",      (PyCFunction)date_format,       METH_VARARGS,\n     PyDoc_STR(\"Formats self with strftime.\")},\n\n    {\"utcoffset\",       (PyCFunction)time_utcoffset,    METH_NOARGS,\n     PyDoc_STR(\"Return self.tzinfo.utcoffset(self).\")},\n\n    {\"tzname\",          (PyCFunction)time_tzname,       METH_NOARGS,\n     PyDoc_STR(\"Return self.tzinfo.tzname(self).\")},\n\n    {\"dst\",             (PyCFunction)time_dst,          METH_NOARGS,\n     PyDoc_STR(\"Return self.tzinfo.dst(self).\")},\n\n    DATETIME_TIME_REPLACE_METHODDEF\n\n    {\"__replace__\", _PyCFunction_CAST(datetime_time_replace), METH_FASTCALL | METH_KEYWORDS,\n     PyDoc_STR(\"__replace__($self, /, **changes)\\n--\\n\\nThe same as replace().\")},\n\n     {\"fromisoformat\", (PyCFunction)time_fromisoformat, METH_O | METH_CLASS,\n     PyDoc_STR(\"string -> time from a string in ISO 8601 format\")},\n\n    {\"__reduce_ex__\", (PyCFunction)time_reduce_ex,        METH_VARARGS,\n     PyDoc_STR(\"__reduce_ex__(proto) -> (cls, state)\")},\n\n    {\"__reduce__\", (PyCFunction)time_reduce,        METH_NOARGS,\n     PyDoc_STR(\"__reduce__() -> (cls, state)\")},\n\n    {NULL,      NULL}\n};\n\nstatic const char time_doc[] =\nPyDoc_STR(\"time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\\n\\\n\\n\\\nAll arguments are optional. tzinfo may be None, or an instance of\\n\\\na tzinfo subclass. The remaining arguments may be ints.\\n\");\n\nstatic PyTypeObject PyDateTime_TimeType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"datetime.time\",                            /* tp_name */\n    sizeof(PyDateTime_Time),                    /* tp_basicsize */\n    0,                                          /* tp_itemsize */\n    (destructor)time_dealloc,                   /* tp_dealloc */\n    0,                                          /* tp_vectorcall_offset */\n    0,                                          /* tp_getattr */\n    0,                                          /* tp_setattr */\n    0,                                          /* tp_as_async */\n    (reprfunc)time_repr,                        /* tp_repr */\n    0,                                          /* tp_as_number */\n    0,                                          /* tp_as_sequence */\n    0,                                          /* tp_as_mapping */\n    (hashfunc)time_hash,                        /* tp_hash */\n    0,                                          /* tp_call */\n    (reprfunc)time_str,                         /* tp_str */\n    PyObject_GenericGetAttr,                    /* tp_getattro */\n    0,                                          /* tp_setattro */\n    0,                                          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags */\n    time_doc,                                   /* tp_doc */\n    0,                                          /* tp_traverse */\n    0,                                          /* tp_clear */\n    time_richcompare,                           /* tp_richcompare */\n    0,                                          /* tp_weaklistoffset */\n    0,                                          /* tp_iter */\n    0,                                          /* tp_iternext */\n    time_methods,                               /* tp_methods */\n    0,                                          /* tp_members */\n    time_getset,                                /* tp_getset */\n    0,                                          /* tp_base */\n    0,                                          /* tp_dict */\n    0,                                          /* tp_descr_get */\n    0,                                          /* tp_descr_set */\n    0,                                          /* tp_dictoffset */\n    0,                                          /* tp_init */\n    time_alloc,                                 /* tp_alloc */\n    time_new,                                   /* tp_new */\n    0,                                          /* tp_free */\n};\n\n/*\n * PyDateTime_DateTime implementation.\n */\n\n/* Accessor properties.  Properties for day, month, and year are inherited\n * from date.\n */\n\nstatic PyObject *\ndatetime_hour(PyDateTime_DateTime *self, void *unused)\n{\n    return PyLong_FromLong(DATE_GET_HOUR(self));\n}\n\nstatic PyObject *\ndatetime_minute(PyDateTime_DateTime *self, void *unused)\n{\n    return PyLong_FromLong(DATE_GET_MINUTE(self));\n}\n\nstatic PyObject *\ndatetime_second(PyDateTime_DateTime *self, void *unused)\n{\n    return PyLong_FromLong(DATE_GET_SECOND(self));\n}\n\nstatic PyObject *\ndatetime_microsecond(PyDateTime_DateTime *self, void *unused)\n{\n    return PyLong_FromLong(DATE_GET_MICROSECOND(self));\n}\n\nstatic PyObject *\ndatetime_tzinfo(PyDateTime_DateTime *self, void *unused)\n{\n    PyObject *result = HASTZINFO(self) ? self->tzinfo : Py_None;\n    return Py_NewRef(result);\n}\n\nstatic PyObject *\ndatetime_fold(PyDateTime_DateTime *self, void *unused)\n{\n    return PyLong_FromLong(DATE_GET_FOLD(self));\n}\n\nstatic PyGetSetDef datetime_getset[] = {\n    {\"hour\",        (getter)datetime_hour},\n    {\"minute\",      (getter)datetime_minute},\n    {\"second\",      (getter)datetime_second},\n    {\"microsecond\", (getter)datetime_microsecond},\n    {\"tzinfo\",      (getter)datetime_tzinfo},\n    {\"fold\",        (getter)datetime_fold},\n    {NULL}\n};\n\n/*\n * Constructors.\n */\n\nstatic char *datetime_kws[] = {\n    \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\",\n    \"microsecond\", \"tzinfo\", \"fold\", NULL\n};\n\nstatic PyObject *\ndatetime_from_pickle(PyTypeObject *type, PyObject *state, PyObject *tzinfo)\n{\n    PyDateTime_DateTime *me;\n    char aware = (char)(tzinfo != Py_None);\n\n    if (aware && check_tzinfo_subclass(tzinfo) < 0) {\n        PyErr_SetString(PyExc_TypeError, \"bad tzinfo state arg\");\n        return NULL;\n    }\n\n    me = (PyDateTime_DateTime *) (type->tp_alloc(type , aware));\n    if (me != NULL) {\n        const char *pdata = PyBytes_AS_STRING(state);\n\n        memcpy(me->data, pdata, _PyDateTime_DATETIME_DATASIZE);\n        me->hashcode = -1;\n        me->hastzinfo = aware;\n        if (aware) {\n            me->tzinfo = Py_NewRef(tzinfo);\n        }\n        if (pdata[2] & (1 << 7)) {\n            me->data[2] -= 128;\n            me->fold = 1;\n        }\n        else {\n            me->fold = 0;\n        }\n    }\n    return (PyObject *)me;\n}\n\nstatic PyObject *\ndatetime_new(PyTypeObject *type, PyObject *args, PyObject *kw)\n{\n    PyObject *self = NULL;\n    int year;\n    int month;\n    int day;\n    int hour = 0;\n    int minute = 0;\n    int second = 0;\n    int usecond = 0;\n    int fold = 0;\n    PyObject *tzinfo = Py_None;\n\n    /* Check for invocation from pickle with __getstate__ state */\n    if (PyTuple_GET_SIZE(args) >= 1 && PyTuple_GET_SIZE(args) <= 2) {\n        PyObject *state = PyTuple_GET_ITEM(args, 0);\n        if (PyTuple_GET_SIZE(args) == 2) {\n            tzinfo = PyTuple_GET_ITEM(args, 1);\n        }\n        if (PyBytes_Check(state)) {\n            if (PyBytes_GET_SIZE(state) == _PyDateTime_DATETIME_DATASIZE &&\n                MONTH_IS_SANE(PyBytes_AS_STRING(state)[2] & 0x7F))\n            {\n                return datetime_from_pickle(type, state, tzinfo);\n            }\n        }\n        else if (PyUnicode_Check(state)) {\n            if (PyUnicode_GET_LENGTH(state) == _PyDateTime_DATETIME_DATASIZE &&\n                MONTH_IS_SANE(PyUnicode_READ_CHAR(state, 2) & 0x7F))\n            {\n                state = PyUnicode_AsLatin1String(state);\n                if (state == NULL) {\n                    if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {\n                        /* More informative error message. */\n                        PyErr_SetString(PyExc_ValueError,\n                            \"Failed to encode latin1 string when unpickling \"\n                            \"a datetime object. \"\n                            \"pickle.load(data, encoding='latin1') is assumed.\");\n                    }\n                    return NULL;\n                }\n                self = datetime_from_pickle(type, state, tzinfo);\n                Py_DECREF(state);\n                return self;\n            }\n        }\n        tzinfo = Py_None;\n    }\n\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"iii|iiiiO$i\", datetime_kws,\n                                    &year, &month, &day, &hour, &minute,\n                                    &second, &usecond, &tzinfo, &fold)) {\n        self = new_datetime_ex2(year, month, day,\n                                hour, minute, second, usecond,\n                                tzinfo, fold, type);\n    }\n    return self;\n}\n\n/* TM_FUNC is the shared type of _PyTime_localtime() and\n * _PyTime_gmtime(). */\ntypedef int (*TM_FUNC)(time_t timer, struct tm*);\n\n/* As of version 2015f max fold in IANA database is\n * 23 hours at 1969-09-30 13:00:00 in Kwajalein. */\nstatic long long max_fold_seconds = 24 * 3600;\n/* NB: date(1970,1,1).toordinal() == 719163 */\nstatic long long epoch = 719163LL * 24 * 60 * 60;\n\nstatic long long\nutc_to_seconds(int year, int month, int day,\n               int hour, int minute, int second)\n{\n    long long ordinal;\n\n    /* ymd_to_ord() doesn't support year <= 0 */\n    if (year < MINYEAR || year > MAXYEAR) {\n        PyErr_Format(PyExc_ValueError, \"year %i is out of range\", year);\n        return -1;\n    }\n\n    ordinal = ymd_to_ord(year, month, day);\n    return ((ordinal * 24 + hour) * 60 + minute) * 60 + second;\n}\n\nstatic long long\nlocal(long long u)\n{\n    struct tm local_time;\n    time_t t;\n    u -= epoch;\n    t = u;\n    if (t != u) {\n        PyErr_SetString(PyExc_OverflowError,\n        \"timestamp out of range for platform time_t\");\n        return -1;\n    }\n    if (_PyTime_localtime(t, &local_time) != 0)\n        return -1;\n    return utc_to_seconds(local_time.tm_year + 1900,\n                          local_time.tm_mon + 1,\n                          local_time.tm_mday,\n                          local_time.tm_hour,\n                          local_time.tm_min,\n                          local_time.tm_sec);\n}\n\n/* Internal helper.\n * Build datetime from a time_t and a distinct count of microseconds.\n * Pass localtime or gmtime for f, to control the interpretation of timet.\n */\nstatic PyObject *\ndatetime_from_timet_and_us(PyObject *cls, TM_FUNC f, time_t timet, int us,\n                           PyObject *tzinfo)\n{\n    struct tm tm;\n    int year, month, day, hour, minute, second, fold = 0;\n\n    if (f(timet, &tm) != 0)\n        return NULL;\n\n    year = tm.tm_year + 1900;\n    month = tm.tm_mon + 1;\n    day = tm.tm_mday;\n    hour = tm.tm_hour;\n    minute = tm.tm_min;\n    /* The platform localtime/gmtime may insert leap seconds,\n     * indicated by tm.tm_sec > 59.  We don't care about them,\n     * except to the extent that passing them on to the datetime\n     * constructor would raise ValueError for a reason that\n     * made no sense to the user.\n     */\n    second = Py_MIN(59, tm.tm_sec);\n\n    /* local timezone requires to compute fold */\n    if (tzinfo == Py_None && f == _PyTime_localtime\n    /* On Windows, passing a negative value to local results\n     * in an OSError because localtime_s on Windows does\n     * not support negative timestamps. Unfortunately this\n     * means that fold detection for time values between\n     * 0 and max_fold_seconds will result in an identical\n     * error since we subtract max_fold_seconds to detect a\n     * fold. However, since we know there haven't been any\n     * folds in the interval [0, max_fold_seconds) in any\n     * timezone, we can hackily just forego fold detection\n     * for this time range.\n     */\n#ifdef MS_WINDOWS\n        && (timet - max_fold_seconds > 0)\n#endif\n        ) {\n        long long probe_seconds, result_seconds, transition;\n\n        result_seconds = utc_to_seconds(year, month, day,\n                                        hour, minute, second);\n        if (result_seconds == -1 && PyErr_Occurred()) {\n            return NULL;\n        }\n\n        /* Probe max_fold_seconds to detect a fold. */\n        probe_seconds = local(epoch + timet - max_fold_seconds);\n        if (probe_seconds == -1)\n            return NULL;\n        transition = result_seconds - probe_seconds - max_fold_seconds;\n        if (transition < 0) {\n            probe_seconds = local(epoch + timet + transition);\n            if (probe_seconds == -1)\n                return NULL;\n            if (probe_seconds == result_seconds)\n                fold = 1;\n        }\n    }\n    return new_datetime_subclass_fold_ex(year, month, day, hour, minute,\n                                         second, us, tzinfo, fold, cls);\n}\n\n/* Internal helper.\n * Build datetime from a Python timestamp.  Pass localtime or gmtime for f,\n * to control the interpretation of the timestamp.  Since a double doesn't\n * have enough bits to cover a datetime's full range of precision, it's\n * better to call datetime_from_timet_and_us provided you have a way\n * to get that much precision (e.g., C time() isn't good enough).\n */\nstatic PyObject *\ndatetime_from_timestamp(PyObject *cls, TM_FUNC f, PyObject *timestamp,\n                        PyObject *tzinfo)\n{\n    time_t timet;\n    long us;\n\n    if (_PyTime_ObjectToTimeval(timestamp,\n                                &timet, &us, _PyTime_ROUND_HALF_EVEN) == -1)\n        return NULL;\n\n    return datetime_from_timet_and_us(cls, f, timet, (int)us, tzinfo);\n}\n\n/* Internal helper.\n * Build most accurate possible datetime for current time.  Pass localtime or\n * gmtime for f as appropriate.\n */\nstatic PyObject *\ndatetime_best_possible(PyObject *cls, TM_FUNC f, PyObject *tzinfo)\n{\n    PyTime_t ts;\n    if (PyTime_Time(&ts) < 0) {\n        return NULL;\n    }\n\n    time_t secs;\n    int us;\n\n    if (_PyTime_AsTimevalTime_t(ts, &secs, &us, _PyTime_ROUND_FLOOR) < 0)\n        return NULL;\n    assert(0 <= us && us <= 999999);\n\n    return datetime_from_timet_and_us(cls, f, secs, us, tzinfo);\n}\n\n/*[clinic input]\n\n@classmethod\ndatetime.datetime.now\n\n    tz: object = None\n        Timezone object.\n\nReturns new datetime object representing current time local to tz.\n\nIf no tz is specified, uses local timezone.\n[clinic start generated code]*/\n\nstatic PyObject *\ndatetime_datetime_now_impl(PyTypeObject *type, PyObject *tz)\n/*[clinic end generated code: output=b3386e5345e2b47a input=80d09869c5267d00]*/\n{\n    PyObject *self;\n\n    /* Return best possible local time -- this isn't constrained by the\n     * precision of a timestamp.\n     */\n    if (check_tzinfo_subclass(tz) < 0)\n        return NULL;\n\n    self = datetime_best_possible((PyObject *)type,\n                                  tz == Py_None ? _PyTime_localtime :\n                                  _PyTime_gmtime,\n                                  tz);\n    if (self != NULL && tz != Py_None) {\n        /* Convert UTC to tzinfo's zone. */\n        PyObject *res = PyObject_CallMethodOneArg(tz, &_Py_ID(fromutc), self);\n        Py_DECREF(self);\n        return res;\n    }\n    return self;\n}\n\n/* Return best possible UTC time -- this isn't constrained by the\n * precision of a timestamp.\n */\nstatic PyObject *\ndatetime_utcnow(PyObject *cls, PyObject *dummy)\n{\n    if (PyErr_WarnEx(PyExc_DeprecationWarning,\n        \"datetime.datetime.utcnow() is deprecated and scheduled for removal in a \"\n        \"future version. Use timezone-aware objects to represent datetimes \"\n        \"in UTC: datetime.datetime.now(datetime.UTC).\", 1))\n    {\n        return NULL;\n    }\n    return datetime_best_possible(cls, _PyTime_gmtime, Py_None);\n}\n\n/* Return new local datetime from timestamp (Python timestamp -- a double). */\nstatic PyObject *\ndatetime_fromtimestamp(PyObject *cls, PyObject *args, PyObject *kw)\n{\n    PyObject *self;\n    PyObject *timestamp;\n    PyObject *tzinfo = Py_None;\n    static char *keywords[] = {\"timestamp\", \"tz\", NULL};\n\n    if (! PyArg_ParseTupleAndKeywords(args, kw, \"O|O:fromtimestamp\",\n                                      keywords, &timestamp, &tzinfo))\n        return NULL;\n    if (check_tzinfo_subclass(tzinfo) < 0)\n        return NULL;\n\n    self = datetime_from_timestamp(cls,\n                                   tzinfo == Py_None ? _PyTime_localtime :\n                                   _PyTime_gmtime,\n                                   timestamp,\n                                   tzinfo);\n    if (self != NULL && tzinfo != Py_None) {\n        /* Convert UTC to tzinfo's zone. */\n        PyObject *res = PyObject_CallMethodOneArg(tzinfo, &_Py_ID(fromutc), self);\n        Py_DECREF(self);\n        return res;\n    }\n    return self;\n}\n\n/* Return new UTC datetime from timestamp (Python timestamp -- a double). */\nstatic PyObject *\ndatetime_utcfromtimestamp(PyObject *cls, PyObject *args)\n{\n    if (PyErr_WarnEx(PyExc_DeprecationWarning,\n        \"datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal \"\n        \"in a future version. Use timezone-aware objects to represent \"\n        \"datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).\", 1))\n    {\n        return NULL;\n    }\n    PyObject *timestamp;\n    PyObject *result = NULL;\n\n    if (PyArg_ParseTuple(args, \"O:utcfromtimestamp\", &timestamp))\n        result = datetime_from_timestamp(cls, _PyTime_gmtime, timestamp,\n                                         Py_None);\n    return result;\n}\n\n/* Return new datetime from _strptime.strptime_datetime(). */\nstatic PyObject *\ndatetime_strptime(PyObject *cls, PyObject *args)\n{\n    PyObject *string, *format, *result;\n\n    if (!PyArg_ParseTuple(args, \"UU:strptime\", &string, &format))\n        return NULL;\n\n    PyObject *module = PyImport_Import(&_Py_ID(_strptime));\n    if (module == NULL) {\n        return NULL;\n    }\n    result = PyObject_CallMethodObjArgs(module, &_Py_ID(_strptime_datetime),\n                                        cls, string, format, NULL);\n    Py_DECREF(module);\n    return result;\n}\n\n/* Return new datetime from date/datetime and time arguments. */\nstatic PyObject *\ndatetime_combine(PyObject *cls, PyObject *args, PyObject *kw)\n{\n    static char *keywords[] = {\"date\", \"time\", \"tzinfo\", NULL};\n    PyObject *date;\n    PyObject *time;\n    PyObject *tzinfo = NULL;\n    PyObject *result = NULL;\n\n    if (PyArg_ParseTupleAndKeywords(args, kw, \"O!O!|O:combine\", keywords,\n                                    DATE_TYPE(NO_STATE), &date,\n                                    TIME_TYPE(NO_STATE), &time, &tzinfo)) {\n        if (tzinfo == NULL) {\n            if (HASTZINFO(time))\n                tzinfo = ((PyDateTime_Time *)time)->tzinfo;\n            else\n                tzinfo = Py_None;\n        }\n        result = new_datetime_subclass_fold_ex(GET_YEAR(date),\n                                               GET_MONTH(date),\n                                               GET_DAY(date),\n                                               TIME_GET_HOUR(time),\n                                               TIME_GET_MINUTE(time),\n                                               TIME_GET_SECOND(time),\n                                               TIME_GET_MICROSECOND(time),\n                                               tzinfo,\n                                               TIME_GET_FOLD(time),\n                                               cls);\n    }\n    return result;\n}\n\nstatic PyObject *\n_sanitize_isoformat_str(PyObject *dtstr)\n{\n    Py_ssize_t len = PyUnicode_GetLength(dtstr);\n    if (len < 7) {  // All valid ISO 8601 strings are at least 7 characters long\n        return NULL;\n    }\n\n    // `fromisoformat` allows surrogate characters in exactly one position,\n    // the separator; to allow datetime_fromisoformat to make the simplifying\n    // assumption that all valid strings can be encoded in UTF-8, this function\n    // replaces any surrogate character separators with `T`.\n    //\n    // The result of this, if not NULL, returns a new reference\n    const void* const unicode_data = PyUnicode_DATA(dtstr);\n    const int kind = PyUnicode_KIND(dtstr);\n\n    // Depending on the format of the string, the separator can only ever be\n    // in positions 7, 8 or 10. We'll check each of these for a surrogate and\n    // if we find one, replace it with `T`. If there is more than one surrogate,\n    // we don't have to bother sanitizing it, because the function will later\n    // fail when we try to encode the string as ASCII.\n    static const size_t potential_separators[3] = {7, 8, 10};\n    size_t surrogate_separator = 0;\n    for(size_t idx = 0;\n         idx < sizeof(potential_separators) / sizeof(*potential_separators);\n         ++idx) {\n        size_t pos = potential_separators[idx];\n        if (pos > (size_t)len) {\n            break;\n        }\n\n        if(Py_UNICODE_IS_SURROGATE(PyUnicode_READ(kind, unicode_data, pos))) {\n            surrogate_separator = pos;\n            break;\n        }\n    }\n\n    if (surrogate_separator == 0) {\n        return Py_NewRef(dtstr);\n    }\n\n    PyObject *str_out = _PyUnicode_Copy(dtstr);\n    if (str_out == NULL) {\n        return NULL;\n    }\n\n    if (PyUnicode_WriteChar(str_out, surrogate_separator, (Py_UCS4)'T')) {\n        Py_DECREF(str_out);\n        return NULL;\n    }\n\n    return str_out;\n}\n\n\nstatic Py_ssize_t\n_find_isoformat_datetime_separator(const char *dtstr, Py_ssize_t len) {\n    // The valid date formats can all be distinguished by characters 4 and 5\n    // and further narrowed down by character\n    // which tells us where to look for the separator character.\n    // Format    |  As-rendered |   Position\n    // ---------------------------------------\n    // %Y-%m-%d  |  YYYY-MM-DD  |    10\n    // %Y%m%d    |  YYYYMMDD    |     8\n    // %Y-W%V    |  YYYY-Www    |     8\n    // %YW%V     |  YYYYWww     |     7\n    // %Y-W%V-%u |  YYYY-Www-d  |    10\n    // %YW%V%u   |  YYYYWwwd    |     8\n    // %Y-%j     |  YYYY-DDD    |     8\n    // %Y%j      |  YYYYDDD     |     7\n    //\n    // Note that because we allow *any* character for the separator, in the\n    // case where character 4 is W, it's not straightforward to determine where\n    // the separator is — in the case of YYYY-Www-d, you have actual ambiguity,\n    // e.g. 2020-W01-0000 could be YYYY-Www-D0HH or YYYY-Www-HHMM, when the\n    // separator character is a number in the former case or a hyphen in the\n    // latter case.\n    //\n    // The case of YYYYWww can be distinguished from YYYYWwwd by tracking ahead\n    // to either the end of the string or the first non-numeric character —\n    // since the time components all come in pairs YYYYWww#HH can be\n    // distinguished from YYYYWwwd#HH by the fact that there will always be an\n    // odd number of digits before the first non-digit character in the former\n    // case.\n    static const char date_separator = '-';\n    static const char week_indicator = 'W';\n\n    if (len == 7) {\n        return 7;\n    }\n\n    if (dtstr[4] == date_separator) {\n        // YYYY-???\n\n        if (dtstr[5] == week_indicator) {\n            // YYYY-W??\n\n            if (len < 8) {\n                return -1;\n            }\n\n            if (len > 8 && dtstr[8] == date_separator) {\n                // YYYY-Www-D (10) or YYYY-Www-HH (8)\n                if (len == 9) { return -1; }\n                if (len > 10 && is_digit(dtstr[10])) {\n                    // This is as far as we'll try to go to resolve the\n                    // ambiguity for the moment — if we have YYYY-Www-##, the\n                    // separator is either a hyphen at 8 or a number at 10.\n                    //\n                    // We'll assume it's a hyphen at 8 because it's way more\n                    // likely that someone will use a hyphen as a separator\n                    // than a number, but at this point it's really best effort\n                    // because this is an extension of the spec anyway.\n                    return 8;\n                }\n\n                return 10;\n            } else {\n                // YYYY-Www (8)\n                return 8;\n            }\n        } else {\n            // YYYY-MM-DD (10)\n            return 10;\n        }\n    } else {\n        // YYYY???\n        if (dtstr[4] == week_indicator) {\n            // YYYYWww (7) or YYYYWwwd (8)\n            size_t idx = 7;\n            for (; idx < (size_t)len; ++idx) {\n                // Keep going until we run out of digits.\n                if (!is_digit(dtstr[idx])) {\n                    break;\n                }\n            }\n\n            if (idx < 9) {\n                return idx;\n            }\n\n            if (idx % 2 == 0) {\n                // If the index of the last number is even, it's YYYYWww\n                return 7;\n            } else {\n                return 8;\n            }\n        } else {\n            // YYYYMMDD (8)\n            return 8;\n        }\n    }\n}\n\nstatic PyObject *\ndatetime_fromisoformat(PyObject *cls, PyObject *dtstr)\n{\n    assert(dtstr != NULL);\n\n    if (!PyUnicode_Check(dtstr)) {\n        PyErr_SetString(PyExc_TypeError,\n                        \"fromisoformat: argument must be str\");\n        return NULL;\n    }\n\n    // We only need to sanitize this string if the separator is a surrogate\n    // character. In the situation where the separator location is ambiguous,\n    // we don't have to sanitize it anything because that can only happen when\n    // the separator is either '-' or a number. This should mostly be a noop\n    // but it makes the reference counting easier if we still sanitize.\n    PyObject *dtstr_clean = _sanitize_isoformat_str(dtstr);\n    if (dtstr_clean == NULL) {\n        goto invalid_string_error;\n    }\n\n    Py_ssize_t len;\n    const char *dt_ptr = PyUnicode_AsUTF8AndSize(dtstr_clean, &len);\n\n    if (dt_ptr == NULL) {\n        if (PyErr_ExceptionMatches(PyExc_UnicodeEncodeError)) {\n            // Encoding errors are invalid string errors at this point\n            goto invalid_string_error;\n        }\n        else {\n            goto error;\n        }\n    }\n\n    const Py_ssize_t separator_location = _find_isoformat_datetime_separator(\n            dt_ptr, len);\n\n\n    const char *p = dt_ptr;\n\n    int year = 0, month = 0, day = 0;\n    int hour = 0, minute = 0, second = 0, microsecond = 0;\n    int tzoffset = 0, tzusec = 0;\n\n    // date runs up to separator_location\n    int rv = parse_isoformat_date(p, separator_location, &year, &month, &day);\n\n    if (!rv && len > separator_location) {\n        // In UTF-8, the length of multi-byte characters is encoded in the MSB\n        p += separator_location;\n        if ((p[0] & 0x80) == 0) {\n            p += 1;\n        }\n        else {\n            switch (p[0] & 0xf0) {\n                case 0xe0:\n                    p += 3;\n                    break;\n                case 0xf0:\n                    p += 4;\n                    break;\n                default:\n                    p += 2;\n                    break;\n            }\n        }\n\n        len -= (p - dt_ptr);\n        rv = parse_isoformat_time(p, len, &hour, &minute, &second,\n                                  &microsecond, &tzoffset, &tzusec);\n    }\n    if (rv < 0) {\n        goto invalid_string_error;\n    }\n\n    PyObject *tzinfo = tzinfo_from_isoformat_results(rv, tzoffset, tzusec);\n    if (tzinfo == NULL) {\n        goto error;\n    }\n\n    PyObject *dt = new_datetime_subclass_ex(year, month, day, hour, minute,\n                                            second, microsecond, tzinfo, cls);\n\n    Py_DECREF(tzinfo);\n    Py_DECREF(dtstr_clean);\n    return dt;\n\ninvalid_string_error:\n    PyErr_Format(PyExc_ValueError, \"Invalid isoformat string: %R\", dtstr);\n\nerror:\n    Py_XDECREF(dtstr_clean);\n\n    return NULL;\n}\n\n/*\n * Destructor.\n */\n\nstatic void\ndatetime_dealloc(PyDateTime_DateTime *self)\n{\n    if (HASTZINFO(self)) {\n        Py_XDECREF(self->tzinfo);\n    }\n    Py_TYPE(self)->tp_free((PyObject *)self);\n}\n\n/*\n * Indirect access to tzinfo methods.\n */\n\n/* These are all METH_NOARGS, so don't need to check the arglist. */\nstatic PyObject *\ndatetime_utcoffset(PyObject *self, PyObject *unused) {\n    return call_utcoffset(GET_DT_TZINFO(self), self);\n}\n\nstatic PyObject *\ndatetime_dst(PyObject *self, PyObject *unused) {\n    return call_dst(GET_DT_TZINFO(self), self);\n}\n\nstatic PyObject *\ndatetime_tzname(PyObject *self, PyObject *unused) {\n    return call_tzname(GET_DT_TZINFO(self), self);\n}\n\n/*\n * datetime arithmetic.\n */\n\n/* factor must be 1 (to add) or -1 (to subtract).  The result inherits\n * the tzinfo state of date.\n */\nstatic PyObject *\nadd_datetime_timedelta(PyDateTime_DateTime *date, PyDateTime_Delta *delta,\n                       int factor)\n{\n    /* Note that the C-level additions can't overflow, because of\n     * invariant bounds on the member values.\n     */\n    int year = GET_YEAR(date);\n    int month = GET_MONTH(date);\n    int day = GET_DAY(date) + GET_TD_DAYS(delta) * factor;\n    int hour = DATE_GET_HOUR(date);\n    int minute = DATE_GET_MINUTE(date);\n    int second = DATE_GET_SECOND(date) + GET_TD_SECONDS(delta) * factor;\n    int microsecond = DATE_GET_MICROSECOND(date) +\n                      GET_TD_MICROSECONDS(delta) * factor;\n\n    assert(factor == 1 || factor == -1);\n    if (normalize_datetime(&year, &month, &day,\n                           &hour, &minute, &second, &microsecond) < 0) {\n        return NULL;\n    }\n\n    return new_datetime_subclass_ex(year, month, day,\n                                    hour, minute, second, microsecond,\n                                    HASTZINFO(date) ? date->tzinfo : Py_None,\n                                    (PyObject *)Py_TYPE(date));\n}\n\nstatic PyObject *\ndatetime_add(PyObject *left, PyObject *right)\n{\n    if (PyDateTime_Check(left)) {\n        /* datetime + ??? */\n        if (PyDelta_Check(right))\n            /* datetime + delta */\n            return add_datetime_timedelta(\n                            (PyDateTime_DateTime *)left,\n                            (PyDateTime_Delta *)right,\n                            1);\n    }\n    else if (PyDelta_Check(left)) {\n        /* delta + datetime */\n        return add_datetime_timedelta((PyDateTime_DateTime *) right,\n                                      (PyDateTime_Delta *) left,\n                                      1);\n    }\n    Py_RETURN_NOTIMPLEMENTED;\n}\n\nstatic PyObject *\ndatetime_subtract(PyObject *left, PyObject *right)\n{\n    PyObject *result = Py_NotImplemented;\n\n    if (PyDateTime_Check(left)) {\n        /* datetime - ??? */\n        if (PyDateTime_Check(right)) {\n            /* datetime - datetime */\n            PyObject *offset1, *offset2, *offdiff = NULL;\n            int delta_d, delta_s, delta_us;\n\n            if (GET_DT_TZINFO(left) == GET_DT_TZINFO(right)) {\n                offset1 = Py_NewRef(Py_None);\n                offset2 = Py_NewRef(Py_None);\n            }\n            else {\n                offset1 = datetime_utcoffset(left, NULL);\n                if (offset1 == NULL)\n                    return NULL;\n                offset2 = datetime_utcoffset(right, NULL);\n                if (offset2 == NULL) {\n                    Py_DECREF(offset1);\n                    return NULL;\n                }\n                if ((offset1 != Py_None) != (offset2 != Py_None)) {\n                    PyErr_SetString(PyExc_TypeError,\n                                    \"can't subtract offset-naive and \"\n                                    \"offset-aware datetimes\");\n                    Py_DECREF(offset1);\n                    Py_DECREF(offset2);\n                    return NULL;\n                }\n            }\n            if ((offset1 != offset2) &&\n                delta_cmp(offset1, offset2) != 0) {\n                offdiff = delta_subtract(offset1, offset2);\n                if (offdiff == NULL) {\n                    Py_DECREF(offset1);\n                    Py_DECREF(offset2);\n                    return NULL;\n                }\n            }\n            Py_DECREF(offset1);\n            Py_DECREF(offset2);\n            delta_d = ymd_to_ord(GET_YEAR(left),\n                                 GET_MONTH(left),\n                                 GET_DAY(left)) -\n                      ymd_to_ord(GET_YEAR(right),\n                                 GET_MONTH(right),\n                                 GET_DAY(right));\n            /* These can't overflow, since the values are\n             * normalized.  At most this gives the number of\n             * seconds in one day.\n             */\n            delta_s = (DATE_GET_HOUR(left) -\n                       DATE_GET_HOUR(right)) * 3600 +\n                      (DATE_GET_MINUTE(left) -\n                       DATE_GET_MINUTE(right)) * 60 +\n                      (DATE_GET_SECOND(left) -\n                       DATE_GET_SECOND(right));\n            delta_us = DATE_GET_MICROSECOND(left) -\n                       DATE_GET_MICROSECOND(right);\n            result = new_delta(delta_d, delta_s, delta_us, 1);\n            if (result == NULL)\n                return NULL;\n\n            if (offdiff != NULL) {\n                Py_SETREF(result, delta_subtract(result, offdiff));\n                Py_DECREF(offdiff);\n            }\n        }\n        else if (PyDelta_Check(right)) {\n            /* datetime - delta */\n            result = add_datetime_timedelta(\n                            (PyDateTime_DateTime *)left,\n                            (PyDateTime_Delta *)right,\n                            -1);\n        }\n    }\n\n    if (result == Py_NotImplemented)\n        Py_INCREF(result);\n    return result;\n}\n\n/* Various ways to turn a datetime into a string. */\n\nstatic PyObject *\ndatetime_repr(PyDateTime_DateTime *self)\n{\n    const char *type_name = Py_TYPE(self)->tp_name;\n    PyObject *baserepr;\n\n    if (DATE_GET_MICROSECOND(self)) {\n        baserepr = PyUnicode_FromFormat(\n                      \"%s(%d, %d, %d, %d, %d, %d, %d)\",\n                      type_name,\n                      GET_YEAR(self), GET_MONTH(self), GET_DAY(self),\n                      DATE_GET_HOUR(self), DATE_GET_MINUTE(self),\n                      DATE_GET_SECOND(self),\n                      DATE_GET_MICROSECOND(self));\n    }\n    else if (DATE_GET_SECOND(self)) {\n        baserepr = PyUnicode_FromFormat(\n                      \"%s(%d, %d, %d, %d, %d, %d)\",\n                      type_name,\n                      GET_YEAR(self), GET_MONTH(self), GET_DAY(self),\n                      DATE_GET_HOUR(self), DATE_GET_MINUTE(self),\n                      DATE_GET_SECOND(self));\n    }\n    else {\n        baserepr = PyUnicode_FromFormat(\n                      \"%s(%d, %d, %d, %d, %d)\",\n                      type_name,\n                      GET_YEAR(self), GET_MONTH(self), GET_DAY(self),\n                      DATE_GET_HOUR(self), DATE_GET_MINUTE(self));\n    }\n    if (baserepr != NULL && DATE_GET_FOLD(self) != 0)\n        baserepr = append_keyword_fold(baserepr, DATE_GET_FOLD(self));\n    if (baserepr == NULL || ! HASTZINFO(self))\n        return baserepr;\n    return append_keyword_tzinfo(baserepr, self->tzinfo);\n}\n\nstatic PyObject *\ndatetime_str(PyDateTime_DateTime *self)\n{\n    PyObject *space = PyUnicode_FromString(\" \");\n    if (space == NULL) {\n        return NULL;\n    }\n    PyObject *res = PyObject_CallMethodOneArg((PyObject *)self,\n                            &_Py_ID(isoformat), space);\n    Py_DECREF(space);\n    return res;\n}\n\nstatic PyObject *\ndatetime_isoformat(PyDateTime_DateTime *self, PyObject *args, PyObject *kw)\n{\n    int sep = 'T';\n    char *timespec = NULL;\n    static char *keywords[] = {\"sep\", \"timespec\", NULL};\n    char buffer[100];\n    PyObject *result = NULL;\n    int us = DATE_GET_MICROSECOND(self);\n    static const char *specs[][2] = {\n        {\"hours\", \"%04d-%02d-%02d%c%02d\"},\n        {\"minutes\", \"%04d-%02d-%02d%c%02d:%02d\"},\n        {\"seconds\", \"%04d-%02d-%02d%c%02d:%02d:%02d\"},\n        {\"milliseconds\", \"%04d-%02d-%02d%c%02d:%02d:%02d.%03d\"},\n        {\"microseconds\", \"%04d-%02d-%02d%c%02d:%02d:%02d.%06d\"},\n    };\n    size_t given_spec;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kw, \"|Cs:isoformat\", keywords, &sep, &timespec))\n        return NULL;\n\n    if (timespec == NULL || strcmp(timespec, \"auto\") == 0) {\n        if (us == 0) {\n            /* seconds */\n            given_spec = 2;\n        }\n        else {\n            /* microseconds */\n            given_spec = 4;\n        }\n    }\n    else {\n        for (given_spec = 0; given_spec < Py_ARRAY_LENGTH(specs); given_spec++) {\n            if (strcmp(timespec, specs[given_spec][0]) == 0) {\n                if (given_spec == 3) {\n                    us = us / 1000;\n                }\n                break;\n            }\n        }\n    }\n\n    if (given_spec == Py_ARRAY_LENGTH(specs)) {\n        PyErr_Format(PyExc_ValueError, \"Unknown timespec value\");\n        return NULL;\n    }\n    else {\n        result = PyUnicode_FromFormat(specs[given_spec][1],\n                                      GET_YEAR(self), GET_MONTH(self),\n                                      GET_DAY(self), (int)sep,\n                                      DATE_GET_HOUR(self), DATE_GET_MINUTE(self),\n                                      DATE_GET_SECOND(self), us);\n    }\n\n    if (!result || !HASTZINFO(self))\n        return result;\n\n    /* We need to append the UTC offset. */\n    if (format_utcoffset(buffer, sizeof(buffer), \":\", self->tzinfo,\n                         (PyObject *)self) < 0) {\n        Py_DECREF(result);\n        return NULL;\n    }\n    PyUnicode_AppendAndDel(&result, PyUnicode_FromString(buffer));\n    return result;\n}\n\nstatic PyObject *\ndatetime_ctime(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    return format_ctime((PyDateTime_Date *)self,\n                        DATE_GET_HOUR(self),\n                        DATE_GET_MINUTE(self),\n                        DATE_GET_SECOND(self));\n}\n\n/* Miscellaneous methods. */\n\nstatic PyObject *\nflip_fold(PyObject *dt)\n{\n    return new_datetime_ex2(GET_YEAR(dt),\n                            GET_MONTH(dt),\n                            GET_DAY(dt),\n                            DATE_GET_HOUR(dt),\n                            DATE_GET_MINUTE(dt),\n                            DATE_GET_SECOND(dt),\n                            DATE_GET_MICROSECOND(dt),\n                            HASTZINFO(dt) ?\n                             ((PyDateTime_DateTime *)dt)->tzinfo : Py_None,\n                            !DATE_GET_FOLD(dt),\n                            Py_TYPE(dt));\n}\n\nstatic PyObject *\nget_flip_fold_offset(PyObject *dt)\n{\n    PyObject *result, *flip_dt;\n\n    flip_dt = flip_fold(dt);\n    if (flip_dt == NULL)\n        return NULL;\n    result = datetime_utcoffset(flip_dt, NULL);\n    Py_DECREF(flip_dt);\n    return result;\n}\n\n/* PEP 495 exception: Whenever one or both of the operands in\n * inter-zone comparison is such that its utcoffset() depends\n * on the value of its fold attribute, the result is False.\n *\n * Return 1 if exception applies, 0 if not,  and -1 on error.\n */\nstatic int\npep495_eq_exception(PyObject *self, PyObject *other,\n                    PyObject *offset_self, PyObject *offset_other)\n{\n    int result = 0;\n    PyObject *flip_offset;\n\n    flip_offset = get_flip_fold_offset(self);\n    if (flip_offset == NULL)\n        return -1;\n    if (flip_offset != offset_self &&\n        delta_cmp(flip_offset, offset_self))\n    {\n        result = 1;\n        goto done;\n    }\n    Py_DECREF(flip_offset);\n\n    flip_offset = get_flip_fold_offset(other);\n    if (flip_offset == NULL)\n        return -1;\n    if (flip_offset != offset_other &&\n        delta_cmp(flip_offset, offset_other))\n        result = 1;\n done:\n    Py_DECREF(flip_offset);\n    return result;\n}\n\nstatic PyObject *\ndatetime_richcompare(PyObject *self, PyObject *other, int op)\n{\n    PyObject *result = NULL;\n    PyObject *offset1, *offset2;\n    int diff;\n\n    if (!PyDateTime_Check(other)) {\n        Py_RETURN_NOTIMPLEMENTED;\n    }\n\n    if (GET_DT_TZINFO(self) == GET_DT_TZINFO(other)) {\n        diff = memcmp(((PyDateTime_DateTime *)self)->data,\n                      ((PyDateTime_DateTime *)other)->data,\n                      _PyDateTime_DATETIME_DATASIZE);\n        return diff_to_bool(diff, op);\n    }\n    offset1 = datetime_utcoffset(self, NULL);\n    if (offset1 == NULL)\n        return NULL;\n    offset2 = datetime_utcoffset(other, NULL);\n    if (offset2 == NULL)\n        goto done;\n    /* If they're both naive, or both aware and have the same offsets,\n     * we get off cheap.  Note that if they're both naive, offset1 ==\n     * offset2 == Py_None at this point.\n     */\n    if ((offset1 == offset2) ||\n        (PyDelta_Check(offset1) && PyDelta_Check(offset2) &&\n         delta_cmp(offset1, offset2) == 0)) {\n        diff = memcmp(((PyDateTime_DateTime *)self)->data,\n                      ((PyDateTime_DateTime *)other)->data,\n                      _PyDateTime_DATETIME_DATASIZE);\n        if ((op == Py_EQ || op == Py_NE) && diff == 0) {\n            int ex = pep495_eq_exception(self, other, offset1, offset2);\n            if (ex == -1)\n                goto done;\n            if (ex)\n                diff = 1;\n        }\n        result = diff_to_bool(diff, op);\n    }\n    else if (offset1 != Py_None && offset2 != Py_None) {\n        PyDateTime_Delta *delta;\n\n        assert(offset1 != offset2); /* else last \"if\" handled it */\n        delta = (PyDateTime_Delta *)datetime_subtract((PyObject *)self,\n                                                       other);\n        if (delta == NULL)\n            goto done;\n        diff = GET_TD_DAYS(delta);\n        if (diff == 0)\n            diff = GET_TD_SECONDS(delta) |\n                   GET_TD_MICROSECONDS(delta);\n        Py_DECREF(delta);\n        if ((op == Py_EQ || op == Py_NE) && diff == 0) {\n            int ex = pep495_eq_exception(self, other, offset1, offset2);\n            if (ex == -1)\n                goto done;\n            if (ex)\n                diff = 1;\n        }\n        result = diff_to_bool(diff, op);\n    }\n    else if (op == Py_EQ) {\n        result = Py_NewRef(Py_False);\n    }\n    else if (op == Py_NE) {\n        result = Py_NewRef(Py_True);\n    }\n    else {\n        PyErr_SetString(PyExc_TypeError,\n                        \"can't compare offset-naive and \"\n                        \"offset-aware datetimes\");\n    }\n done:\n    Py_DECREF(offset1);\n    Py_XDECREF(offset2);\n    return result;\n}\n\nstatic Py_hash_t\ndatetime_hash(PyDateTime_DateTime *self)\n{\n    if (self->hashcode == -1) {\n        PyObject *offset, *self0;\n        if (DATE_GET_FOLD(self)) {\n            self0 = new_datetime_ex2(GET_YEAR(self),\n                                     GET_MONTH(self),\n                                     GET_DAY(self),\n                                     DATE_GET_HOUR(self),\n                                     DATE_GET_MINUTE(self),\n                                     DATE_GET_SECOND(self),\n                                     DATE_GET_MICROSECOND(self),\n                                     HASTZINFO(self) ? self->tzinfo : Py_None,\n                                     0, Py_TYPE(self));\n            if (self0 == NULL)\n                return -1;\n        }\n        else {\n            self0 = Py_NewRef(self);\n        }\n        offset = datetime_utcoffset(self0, NULL);\n        Py_DECREF(self0);\n\n        if (offset == NULL)\n            return -1;\n\n        /* Reduce this to a hash of another object. */\n        if (offset == Py_None)\n            self->hashcode = generic_hash(\n                (unsigned char *)self->data, _PyDateTime_DATETIME_DATASIZE);\n        else {\n            PyObject *temp1, *temp2;\n            int days, seconds;\n\n            assert(HASTZINFO(self));\n            days = ymd_to_ord(GET_YEAR(self),\n                              GET_MONTH(self),\n                              GET_DAY(self));\n            seconds = DATE_GET_HOUR(self) * 3600 +\n                      DATE_GET_MINUTE(self) * 60 +\n                      DATE_GET_SECOND(self);\n            temp1 = new_delta(days, seconds,\n                              DATE_GET_MICROSECOND(self),\n                              1);\n            if (temp1 == NULL) {\n                Py_DECREF(offset);\n                return -1;\n            }\n            temp2 = delta_subtract(temp1, offset);\n            Py_DECREF(temp1);\n            if (temp2 == NULL) {\n                Py_DECREF(offset);\n                return -1;\n            }\n            self->hashcode = PyObject_Hash(temp2);\n            Py_DECREF(temp2);\n        }\n        Py_DECREF(offset);\n    }\n    return self->hashcode;\n}\n\n/*[clinic input]\ndatetime.datetime.replace\n\n    year: int(c_default=\"GET_YEAR(self)\") = unchanged\n    month: int(c_default=\"GET_MONTH(self)\") = unchanged\n    day: int(c_default=\"GET_DAY(self)\") = unchanged\n    hour: int(c_default=\"DATE_GET_HOUR(self)\") = unchanged\n    minute: int(c_default=\"DATE_GET_MINUTE(self)\") = unchanged\n    second: int(c_default=\"DATE_GET_SECOND(self)\") = unchanged\n    microsecond: int(c_default=\"DATE_GET_MICROSECOND(self)\") = unchanged\n    tzinfo: object(c_default=\"HASTZINFO(self) ? self->tzinfo : Py_None\") = unchanged\n    *\n    fold: int(c_default=\"DATE_GET_FOLD(self)\") = unchanged\n\nReturn datetime with new specified fields.\n[clinic start generated code]*/\n\nstatic PyObject *\ndatetime_datetime_replace_impl(PyDateTime_DateTime *self, int year,\n                               int month, int day, int hour, int minute,\n                               int second, int microsecond, PyObject *tzinfo,\n                               int fold)\n/*[clinic end generated code: output=00bc96536833fddb input=9b38253d56d9bcad]*/\n{\n    return new_datetime_subclass_fold_ex(year, month, day, hour, minute,\n                                         second, microsecond, tzinfo, fold,\n                                         (PyObject *)Py_TYPE(self));\n}\n\nstatic PyObject *\nlocal_timezone_from_timestamp(time_t timestamp)\n{\n    PyObject *result = NULL;\n    PyObject *delta;\n    struct tm local_time_tm;\n    PyObject *nameo = NULL;\n    const char *zone = NULL;\n\n    if (_PyTime_localtime(timestamp, &local_time_tm) != 0)\n        return NULL;\n#ifdef HAVE_STRUCT_TM_TM_ZONE\n    zone = local_time_tm.tm_zone;\n    delta = new_delta(0, local_time_tm.tm_gmtoff, 0, 1);\n#else /* HAVE_STRUCT_TM_TM_ZONE */\n    {\n        PyObject *local_time, *utc_time;\n        struct tm utc_time_tm;\n        char buf[100];\n        strftime(buf, sizeof(buf), \"%Z\", &local_time_tm);\n        zone = buf;\n        local_time = new_datetime(local_time_tm.tm_year + 1900,\n                                  local_time_tm.tm_mon + 1,\n                                  local_time_tm.tm_mday,\n                                  local_time_tm.tm_hour,\n                                  local_time_tm.tm_min,\n                                  local_time_tm.tm_sec, 0, Py_None, 0);\n        if (local_time == NULL) {\n            return NULL;\n        }\n        if (_PyTime_gmtime(timestamp, &utc_time_tm) != 0)\n            return NULL;\n        utc_time = new_datetime(utc_time_tm.tm_year + 1900,\n                                utc_time_tm.tm_mon + 1,\n                                utc_time_tm.tm_mday,\n                                utc_time_tm.tm_hour,\n                                utc_time_tm.tm_min,\n                                utc_time_tm.tm_sec, 0, Py_None, 0);\n        if (utc_time == NULL) {\n            Py_DECREF(local_time);\n            return NULL;\n        }\n        delta = datetime_subtract(local_time, utc_time);\n        Py_DECREF(local_time);\n        Py_DECREF(utc_time);\n    }\n#endif /* HAVE_STRUCT_TM_TM_ZONE */\n    if (delta == NULL) {\n            return NULL;\n    }\n    if (zone != NULL) {\n        nameo = PyUnicode_DecodeLocale(zone, \"surrogateescape\");\n        if (nameo == NULL)\n            goto error;\n    }\n    result = new_timezone(delta, nameo);\n    Py_XDECREF(nameo);\n  error:\n    Py_DECREF(delta);\n    return result;\n}\n\nstatic PyObject *\nlocal_timezone(PyDateTime_DateTime *utc_time)\n{\n    time_t timestamp;\n    PyObject *delta;\n    PyObject *one_second;\n    PyObject *seconds;\n\n    PyObject *current_mod = NULL;\n    datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n    delta = datetime_subtract((PyObject *)utc_time, CONST_EPOCH(st));\n    RELEASE_CURRENT_STATE(st, current_mod);\n    if (delta == NULL)\n        return NULL;\n\n    one_second = new_delta(0, 1, 0, 0);\n    if (one_second == NULL) {\n        Py_DECREF(delta);\n        return NULL;\n    }\n    seconds = divide_timedelta_timedelta((PyDateTime_Delta *)delta,\n                                         (PyDateTime_Delta *)one_second);\n    Py_DECREF(one_second);\n    Py_DECREF(delta);\n    if (seconds == NULL)\n        return NULL;\n    timestamp = _PyLong_AsTime_t(seconds);\n    Py_DECREF(seconds);\n    if (timestamp == -1 && PyErr_Occurred())\n        return NULL;\n    return local_timezone_from_timestamp(timestamp);\n}\n\nstatic long long\nlocal_to_seconds(int year, int month, int day,\n                 int hour, int minute, int second, int fold);\n\nstatic PyObject *\nlocal_timezone_from_local(PyDateTime_DateTime *local_dt)\n{\n    long long seconds, seconds2;\n    time_t timestamp;\n    int fold = DATE_GET_FOLD(local_dt);\n    seconds = local_to_seconds(GET_YEAR(local_dt),\n                               GET_MONTH(local_dt),\n                               GET_DAY(local_dt),\n                               DATE_GET_HOUR(local_dt),\n                               DATE_GET_MINUTE(local_dt),\n                               DATE_GET_SECOND(local_dt),\n                               fold);\n    if (seconds == -1)\n        return NULL;\n    seconds2 = local_to_seconds(GET_YEAR(local_dt),\n                                GET_MONTH(local_dt),\n                                GET_DAY(local_dt),\n                                DATE_GET_HOUR(local_dt),\n                                DATE_GET_MINUTE(local_dt),\n                                DATE_GET_SECOND(local_dt),\n                                !fold);\n    if (seconds2 == -1)\n        return NULL;\n    /* Detect gap */\n    if (seconds2 != seconds && (seconds2 > seconds) == fold)\n        seconds = seconds2;\n\n    /* XXX: add bounds check */\n    timestamp = seconds - epoch;\n    return local_timezone_from_timestamp(timestamp);\n}\n\nstatic PyDateTime_DateTime *\ndatetime_astimezone(PyDateTime_DateTime *self, PyObject *args, PyObject *kw)\n{\n    PyDateTime_DateTime *result;\n    PyObject *offset;\n    PyObject *temp;\n    PyObject *self_tzinfo;\n    PyObject *tzinfo = Py_None;\n    static char *keywords[] = {\"tz\", NULL};\n\n    if (! PyArg_ParseTupleAndKeywords(args, kw, \"|O:astimezone\", keywords,\n                                      &tzinfo))\n        return NULL;\n\n    if (check_tzinfo_subclass(tzinfo) == -1)\n        return NULL;\n\n    if (!HASTZINFO(self) || self->tzinfo == Py_None) {\n  naive:\n        self_tzinfo = local_timezone_from_local(self);\n        if (self_tzinfo == NULL)\n            return NULL;\n    } else {\n        self_tzinfo = Py_NewRef(self->tzinfo);\n    }\n\n    /* Conversion to self's own time zone is a NOP. */\n    if (self_tzinfo == tzinfo) {\n        Py_DECREF(self_tzinfo);\n        return (PyDateTime_DateTime*)Py_NewRef(self);\n    }\n\n    /* Convert self to UTC. */\n    offset = call_utcoffset(self_tzinfo, (PyObject *)self);\n    Py_DECREF(self_tzinfo);\n    if (offset == NULL)\n        return NULL;\n    else if(offset == Py_None) {\n        Py_DECREF(offset);\n        goto naive;\n    }\n    else if (!PyDelta_Check(offset)) {\n        Py_DECREF(offset);\n        PyErr_Format(PyExc_TypeError, \"utcoffset() returned %.200s,\"\n                     \" expected timedelta or None\", Py_TYPE(offset)->tp_name);\n        return NULL;\n    }\n    /* result = self - offset */\n    result = (PyDateTime_DateTime *)add_datetime_timedelta(self,\n                                       (PyDateTime_Delta *)offset, -1);\n    Py_DECREF(offset);\n    if (result == NULL)\n        return NULL;\n\n    /* Make sure result is aware and UTC. */\n    if (!HASTZINFO(result)) {\n        temp = (PyObject *)result;\n        result = (PyDateTime_DateTime *)\n                   new_datetime_ex2(GET_YEAR(result),\n                                    GET_MONTH(result),\n                                    GET_DAY(result),\n                                    DATE_GET_HOUR(result),\n                                    DATE_GET_MINUTE(result),\n                                    DATE_GET_SECOND(result),\n                                    DATE_GET_MICROSECOND(result),\n                                    CONST_UTC(NO_STATE),\n                                    DATE_GET_FOLD(result),\n                                    Py_TYPE(result));\n        Py_DECREF(temp);\n        if (result == NULL)\n            return NULL;\n    }\n    else {\n        /* Result is already aware - just replace tzinfo. */\n        Py_SETREF(result->tzinfo, Py_NewRef(CONST_UTC(NO_STATE)));\n    }\n\n    /* Attach new tzinfo and let fromutc() do the rest. */\n    if (tzinfo == Py_None) {\n        tzinfo = local_timezone(result);\n        if (tzinfo == NULL) {\n            Py_DECREF(result);\n            return NULL;\n        }\n    }\n    else\n      Py_INCREF(tzinfo);\n    Py_SETREF(result->tzinfo, tzinfo);\n\n    temp = (PyObject *)result;\n    result = (PyDateTime_DateTime *)\n        PyObject_CallMethodOneArg(tzinfo, &_Py_ID(fromutc), temp);\n    Py_DECREF(temp);\n\n    return result;\n}\n\nstatic PyObject *\ndatetime_timetuple(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    int dstflag = -1;\n\n    if (HASTZINFO(self) && self->tzinfo != Py_None) {\n        PyObject * dst;\n\n        dst = call_dst(self->tzinfo, (PyObject *)self);\n        if (dst == NULL)\n            return NULL;\n\n        if (dst != Py_None)\n            dstflag = delta_bool((PyDateTime_Delta *)dst);\n        Py_DECREF(dst);\n    }\n    return build_struct_time(GET_YEAR(self),\n                             GET_MONTH(self),\n                             GET_DAY(self),\n                             DATE_GET_HOUR(self),\n                             DATE_GET_MINUTE(self),\n                             DATE_GET_SECOND(self),\n                             dstflag);\n}\n\nstatic long long\nlocal_to_seconds(int year, int month, int day,\n                 int hour, int minute, int second, int fold)\n{\n    long long t, a, b, u1, u2, t1, t2, lt;\n    t = utc_to_seconds(year, month, day, hour, minute, second);\n    /* Our goal is to solve t = local(u) for u. */\n    lt = local(t);\n    if (lt == -1)\n        return -1;\n    a = lt - t;\n    u1 = t - a;\n    t1 = local(u1);\n    if (t1 == -1)\n        return -1;\n    if (t1 == t) {\n        /* We found one solution, but it may not be the one we need.\n         * Look for an earlier solution (if `fold` is 0), or a\n         * later one (if `fold` is 1). */\n        if (fold)\n            u2 = u1 + max_fold_seconds;\n        else\n            u2 = u1 - max_fold_seconds;\n        lt = local(u2);\n        if (lt == -1)\n            return -1;\n        b = lt - u2;\n        if (a == b)\n            return u1;\n    }\n    else {\n        b = t1 - u1;\n        assert(a != b);\n    }\n    u2 = t - b;\n    t2 = local(u2);\n    if (t2 == -1)\n        return -1;\n    if (t2 == t)\n        return u2;\n    if (t1 == t)\n        return u1;\n    /* We have found both offsets a and b, but neither t - a nor t - b is\n     * a solution.  This means t is in the gap. */\n    return fold?Py_MIN(u1, u2):Py_MAX(u1, u2);\n}\n\n/* date(1970,1,1).toordinal() == 719163 */\n#define EPOCH_SECONDS (719163LL * 24 * 60 * 60)\n\nstatic PyObject *\ndatetime_timestamp(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    PyObject *result;\n\n    if (HASTZINFO(self) && self->tzinfo != Py_None) {\n        PyObject *current_mod = NULL;\n        datetime_state *st = GET_CURRENT_STATE(current_mod);\n\n        PyObject *delta;\n        delta = datetime_subtract((PyObject *)self, CONST_EPOCH(st));\n        RELEASE_CURRENT_STATE(st, current_mod);\n        if (delta == NULL)\n            return NULL;\n        result = delta_total_seconds(delta, NULL);\n        Py_DECREF(delta);\n    }\n    else {\n        long long seconds;\n        seconds = local_to_seconds(GET_YEAR(self),\n                                   GET_MONTH(self),\n                                   GET_DAY(self),\n                                   DATE_GET_HOUR(self),\n                                   DATE_GET_MINUTE(self),\n                                   DATE_GET_SECOND(self),\n                                   DATE_GET_FOLD(self));\n        if (seconds == -1)\n            return NULL;\n        result = PyFloat_FromDouble(seconds - EPOCH_SECONDS +\n                                    DATE_GET_MICROSECOND(self) / 1e6);\n    }\n    return result;\n}\n\nstatic PyObject *\ndatetime_getdate(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    return new_date(GET_YEAR(self),\n                    GET_MONTH(self),\n                    GET_DAY(self));\n}\n\nstatic PyObject *\ndatetime_gettime(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    return new_time(DATE_GET_HOUR(self),\n                    DATE_GET_MINUTE(self),\n                    DATE_GET_SECOND(self),\n                    DATE_GET_MICROSECOND(self),\n                    Py_None,\n                    DATE_GET_FOLD(self));\n}\n\nstatic PyObject *\ndatetime_gettimetz(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    return new_time(DATE_GET_HOUR(self),\n                    DATE_GET_MINUTE(self),\n                    DATE_GET_SECOND(self),\n                    DATE_GET_MICROSECOND(self),\n                    GET_DT_TZINFO(self),\n                    DATE_GET_FOLD(self));\n}\n\nstatic PyObject *\ndatetime_utctimetuple(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n{\n    int y, m, d, hh, mm, ss;\n    PyObject *tzinfo;\n    PyDateTime_DateTime *utcself;\n\n    tzinfo = GET_DT_TZINFO(self);\n    if (tzinfo == Py_None) {\n        utcself = (PyDateTime_DateTime*)Py_NewRef(self);\n    }\n    else {\n        PyObject *offset;\n        offset = call_utcoffset(tzinfo, (PyObject *)self);\n        if (offset == NULL)\n            return NULL;\n        if (offset == Py_None) {\n            Py_DECREF(offset);\n            utcself = (PyDateTime_DateTime*)Py_NewRef(self);\n        }\n        else {\n            utcself = (PyDateTime_DateTime *)add_datetime_timedelta(self,\n                                                (PyDateTime_Delta *)offset, -1);\n            Py_DECREF(offset);\n            if (utcself == NULL)\n                return NULL;\n        }\n    }\n    y = GET_YEAR(utcself);\n    m = GET_MONTH(utcself);\n    d = GET_DAY(utcself);\n    hh = DATE_GET_HOUR(utcself);\n    mm = DATE_GET_MINUTE(utcself);\n    ss = DATE_GET_SECOND(utcself);\n\n    Py_DECREF(utcself);\n    return build_struct_time(y, m, d, hh, mm, ss, 0);\n}\n\n/* Pickle support, a simple use of __reduce__. */\n\n/* Let basestate be the non-tzinfo data string.\n * If tzinfo is None, this returns (basestate,), else (basestate, tzinfo).\n * So it's a tuple in any (non-error) case.\n * __getstate__ isn't exposed.\n */\nstatic PyObject *\ndatetime_getstate(PyDateTime_DateTime *self, int proto)\n{\n    PyObject *basestate;\n    PyObject *result = NULL;\n\n    basestate = PyBytes_FromStringAndSize((char *)self->data,\n                                           _PyDateTime_DATETIME_DATASIZE);\n    if (basestate != NULL) {\n        if (proto > 3 && DATE_GET_FOLD(self))\n            /* Set the first bit of the third byte */\n            PyBytes_AS_STRING(basestate)[2] |= (1 << 7);\n        if (! HASTZINFO(self) || self->tzinfo == Py_None)\n            result = PyTuple_Pack(1, basestate);\n        else\n            result = PyTuple_Pack(2, basestate, self->tzinfo);\n        Py_DECREF(basestate);\n    }\n    return result;\n}\n\nstatic PyObject *\ndatetime_reduce_ex(PyDateTime_DateTime *self, PyObject *args)\n{\n    int proto;\n    if (!PyArg_ParseTuple(args, \"i:__reduce_ex__\", &proto))\n        return NULL;\n\n    return Py_BuildValue(\"(ON)\", Py_TYPE(self), datetime_getstate(self, proto));\n}\n\nstatic PyObject *\ndatetime_reduce(PyDateTime_DateTime *self, PyObject *arg)\n{\n    return Py_BuildValue(\"(ON)\", Py_TYPE(self), datetime_getstate(self, 2));\n}\n\nstatic PyMethodDef datetime_methods[] = {\n\n    /* Class methods: */\n\n    DATETIME_DATETIME_NOW_METHODDEF\n\n    {\"utcnow\",         (PyCFunction)datetime_utcnow,\n     METH_NOARGS | METH_CLASS,\n     PyDoc_STR(\"Return a new datetime representing UTC day and time.\")},\n\n    {\"fromtimestamp\", _PyCFunction_CAST(datetime_fromtimestamp),\n     METH_VARARGS | METH_KEYWORDS | METH_CLASS,\n     PyDoc_STR(\"timestamp[, tz] -> tz's local time from POSIX timestamp.\")},\n\n    {\"utcfromtimestamp\", (PyCFunction)datetime_utcfromtimestamp,\n     METH_VARARGS | METH_CLASS,\n     PyDoc_STR(\"Construct a naive UTC datetime from a POSIX timestamp.\")},\n\n    {\"strptime\", (PyCFunction)datetime_strptime,\n     METH_VARARGS | METH_CLASS,\n     PyDoc_STR(\"string, format -> new datetime parsed from a string \"\n               \"(like time.strptime()).\")},\n\n    {\"combine\", _PyCFunction_CAST(datetime_combine),\n     METH_VARARGS | METH_KEYWORDS | METH_CLASS,\n     PyDoc_STR(\"date, time -> datetime with same date and time fields\")},\n\n    {\"fromisoformat\", (PyCFunction)datetime_fromisoformat,\n     METH_O | METH_CLASS,\n     PyDoc_STR(\"string -> datetime from a string in most ISO 8601 formats\")},\n\n    /* Instance methods: */\n\n    {\"date\",   (PyCFunction)datetime_getdate, METH_NOARGS,\n     PyDoc_STR(\"Return date object with same year, month and day.\")},\n\n    {\"time\",   (PyCFunction)datetime_gettime, METH_NOARGS,\n     PyDoc_STR(\"Return time object with same time but with tzinfo=None.\")},\n\n    {\"timetz\",   (PyCFunction)datetime_gettimetz, METH_NOARGS,\n     PyDoc_STR(\"Return time object with same time and tzinfo.\")},\n\n    {\"ctime\",       (PyCFunction)datetime_ctime,        METH_NOARGS,\n     PyDoc_STR(\"Return ctime() style string.\")},\n\n    {\"timetuple\",   (PyCFunction)datetime_timetuple, METH_NOARGS,\n     PyDoc_STR(\"Return time tuple, compatible with time.localtime().\")},\n\n    {\"timestamp\",   (PyCFunction)datetime_timestamp, METH_NOARGS,\n     PyDoc_STR(\"Return POSIX timestamp as float.\")},\n\n    {\"utctimetuple\",   (PyCFunction)datetime_utctimetuple, METH_NOARGS,\n     PyDoc_STR(\"Return UTC time tuple, compatible with time.localtime().\")},\n\n    {\"isoformat\",   _PyCFunction_CAST(datetime_isoformat), METH_VARARGS | METH_KEYWORDS,\n     PyDoc_STR(\"[sep] -> string in ISO 8601 format, \"\n               \"YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].\\n\"\n               \"sep is used to separate the year from the time, and \"\n               \"defaults to 'T'.\\n\"\n               \"The optional argument timespec specifies the number \"\n               \"of additional terms\\nof the time to include. Valid \"\n               \"options are 'auto', 'hours', 'minutes',\\n'seconds', \"\n               \"'milliseconds' and 'microseconds'.\\n\")},\n\n    {\"utcoffset\",       (PyCFunction)datetime_utcoffset, METH_NOARGS,\n     PyDoc_STR(\"Return self.tzinfo.utcoffset(self).\")},\n\n    {\"tzname\",          (PyCFunction)datetime_tzname,   METH_NOARGS,\n     PyDoc_STR(\"Return self.tzinfo.tzname(self).\")},\n\n    {\"dst\",             (PyCFunction)datetime_dst, METH_NOARGS,\n     PyDoc_STR(\"Return self.tzinfo.dst(self).\")},\n\n    DATETIME_DATETIME_REPLACE_METHODDEF\n\n    {\"__replace__\", _PyCFunction_CAST(datetime_datetime_replace), METH_FASTCALL | METH_KEYWORDS,\n     PyDoc_STR(\"__replace__($self, /, **changes)\\n--\\n\\nThe same as replace().\")},\n\n    {\"astimezone\",  _PyCFunction_CAST(datetime_astimezone), METH_VARARGS | METH_KEYWORDS,\n     PyDoc_STR(\"tz -> convert to local time in new timezone tz\\n\")},\n\n    {\"__reduce_ex__\", (PyCFunction)datetime_reduce_ex,     METH_VARARGS,\n     PyDoc_STR(\"__reduce_ex__(proto) -> (cls, state)\")},\n\n    {\"__reduce__\", (PyCFunction)datetime_reduce,     METH_NOARGS,\n     PyDoc_STR(\"__reduce__() -> (cls, state)\")},\n\n    {NULL,      NULL}\n};\n\nstatic const char datetime_doc[] =\nPyDoc_STR(\"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\\n\\\n\\n\\\nThe year, month and day arguments are required. tzinfo may be None, or an\\n\\\ninstance of a tzinfo subclass. The remaining arguments may be ints.\\n\");\n\nstatic PyNumberMethods datetime_as_number = {\n    datetime_add,                               /* nb_add */\n    datetime_subtract,                          /* nb_subtract */\n    0,                                          /* nb_multiply */\n    0,                                          /* nb_remainder */\n    0,                                          /* nb_divmod */\n    0,                                          /* nb_power */\n    0,                                          /* nb_negative */\n    0,                                          /* nb_positive */\n    0,                                          /* nb_absolute */\n    0,                                          /* nb_bool */\n};\n\nstatic PyTypeObject PyDateTime_DateTimeType = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"datetime.datetime\",                        /* tp_name */\n    sizeof(PyDateTime_DateTime),                /* tp_basicsize */\n    0,                                          /* tp_itemsize */\n    (destructor)datetime_dealloc,               /* tp_dealloc */\n    0,                                          /* tp_vectorcall_offset */\n    0,                                          /* tp_getattr */\n    0,                                          /* tp_setattr */\n    0,                                          /* tp_as_async */\n    (reprfunc)datetime_repr,                    /* tp_repr */\n    &datetime_as_number,                        /* tp_as_number */\n    0,                                          /* tp_as_sequence */\n    0,                                          /* tp_as_mapping */\n    (hashfunc)datetime_hash,                    /* tp_hash */\n    0,                                          /* tp_call */\n    (reprfunc)datetime_str,                     /* tp_str */\n    PyObject_GenericGetAttr,                    /* tp_getattro */\n    0,                                          /* tp_setattro */\n    0,                                          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags */\n    datetime_doc,                               /* tp_doc */\n    0,                                          /* tp_traverse */\n    0,                                          /* tp_clear */\n    datetime_richcompare,                       /* tp_richcompare */\n    0,                                          /* tp_weaklistoffset */\n    0,                                          /* tp_iter */\n    0,                                          /* tp_iternext */\n    datetime_methods,                           /* tp_methods */\n    0,                                          /* tp_members */\n    datetime_getset,                            /* tp_getset */\n    0,                                          /* tp_base; filled in\n                                                   PyInit__datetime */\n    0,                                          /* tp_dict */\n    0,                                          /* tp_descr_get */\n    0,                                          /* tp_descr_set */\n    0,                                          /* tp_dictoffset */\n    0,                                          /* tp_init */\n    datetime_alloc,                             /* tp_alloc */\n    datetime_new,                               /* tp_new */\n    0,                                          /* tp_free */\n};\n\n/* ---------------------------------------------------------------------------\n * datetime C-API.\n */\n\nstatic PyTypeObject * const capi_types[] = {\n    &PyDateTime_DateType,\n    &PyDateTime_DateTimeType,\n    &PyDateTime_TimeType,\n    &PyDateTime_DeltaType,\n    &PyDateTime_TZInfoType,\n    /* Indirectly, via the utc object. */\n    &PyDateTime_TimeZoneType,\n};\n\n/* The C-API is process-global.  This violates interpreter isolation\n * due to the objects stored here.  Thus each of those objects must\n * be managed carefully. */\n// XXX Can we make this const?\nstatic PyDateTime_CAPI capi = {\n    /* The classes must be readied before used here.\n     * That will happen the first time the module is loaded.\n     * They aren't safe to be shared between interpreters,\n     * but that's okay as long as the module is single-phase init. */\n    .DateType = &PyDateTime_DateType,\n    .DateTimeType = &PyDateTime_DateTimeType,\n    .TimeType = &PyDateTime_TimeType,\n    .DeltaType = &PyDateTime_DeltaType,\n    .TZInfoType = &PyDateTime_TZInfoType,\n\n    .TimeZone_UTC = (PyObject *)&utc_timezone,\n\n    .Date_FromDate = new_date_ex,\n    .DateTime_FromDateAndTime = new_datetime_ex,\n    .Time_FromTime = new_time_ex,\n    .Delta_FromDelta = new_delta_ex,\n    .TimeZone_FromTimeZone = new_timezone,\n    .DateTime_FromTimestamp = datetime_fromtimestamp,\n    .Date_FromTimestamp = datetime_date_fromtimestamp_capi,\n    .DateTime_FromDateAndTimeAndFold = new_datetime_ex2,\n    .Time_FromTimeAndFold = new_time_ex2,\n};\n\n/* Get a new C API by calling this function.\n * Clients get at C API via PyDateTime_IMPORT, defined in datetime.h.\n */\nstatic inline PyDateTime_CAPI *\nget_datetime_capi(void)\n{\n    return &capi;\n}\n\nstatic PyObject *\ncreate_timezone_from_delta(int days, int sec, int ms, int normalize)\n{\n    PyObject *delta = new_delta(days, sec, ms, normalize);\n    if (delta == NULL) {\n        return NULL;\n    }\n    PyObject *tz = create_timezone(delta, NULL);\n    Py_DECREF(delta);\n    return tz;\n}\n\n\n/* ---------------------------------------------------------------------------\n * Module state lifecycle.\n */\n\nstatic int\ninit_state(datetime_state *st, PyObject *module, PyObject *old_module)\n{\n    /* Each module gets its own heap types. */\n#define ADD_TYPE(FIELD, SPEC, BASE)                 \\\n    do {                                            \\\n        PyObject *cls = PyType_FromModuleAndSpec(   \\\n                module, SPEC, (PyObject *)BASE);    \\\n        if (cls == NULL) {                          \\\n            return -1;                              \\\n        }                                           \\\n        st->FIELD = (PyTypeObject *)cls;            \\\n    } while (0)\n\n    ADD_TYPE(isocalendar_date_type, &isocal_spec, &PyTuple_Type);\n#undef ADD_TYPE\n\n    if (old_module != NULL) {\n        assert(old_module != module);\n        datetime_state *st_old = get_module_state(old_module);\n        *st = (datetime_state){\n            .isocalendar_date_type = st->isocalendar_date_type,\n            .us_per_ms = Py_NewRef(st_old->us_per_ms),\n            .us_per_second = Py_NewRef(st_old->us_per_second),\n            .us_per_minute = Py_NewRef(st_old->us_per_minute),\n            .us_per_hour = Py_NewRef(st_old->us_per_hour),\n            .us_per_day = Py_NewRef(st_old->us_per_day),\n            .us_per_week = Py_NewRef(st_old->us_per_week),\n            .seconds_per_day = Py_NewRef(st_old->seconds_per_day),\n            .epoch = Py_NewRef(st_old->epoch),\n        };\n        return 0;\n    }\n\n    st->us_per_ms = PyLong_FromLong(1000);\n    if (st->us_per_ms == NULL) {\n        return -1;\n    }\n    st->us_per_second = PyLong_FromLong(1000000);\n    if (st->us_per_second == NULL) {\n        return -1;\n    }\n    st->us_per_minute = PyLong_FromLong(60000000);\n    if (st->us_per_minute == NULL) {\n        return -1;\n    }\n    st->seconds_per_day = PyLong_FromLong(24 * 3600);\n    if (st->seconds_per_day == NULL) {\n        return -1;\n    }\n\n    /* The rest are too big for 32-bit ints, but even\n     * us_per_week fits in 40 bits, so doubles should be exact.\n     */\n    st->us_per_hour = PyLong_FromDouble(3600000000.0);\n    if (st->us_per_hour == NULL) {\n        return -1;\n    }\n    st->us_per_day = PyLong_FromDouble(86400000000.0);\n    if (st->us_per_day == NULL) {\n        return -1;\n    }\n    st->us_per_week = PyLong_FromDouble(604800000000.0);\n    if (st->us_per_week == NULL) {\n        return -1;\n    }\n\n    /* Init Unix epoch */\n    st->epoch = new_datetime(\n            1970, 1, 1, 0, 0, 0, 0, (PyObject *)&utc_timezone, 0);\n    if (st->epoch == NULL) {\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic int\ntraverse_state(datetime_state *st, visitproc visit, void *arg)\n{\n    /* heap types */\n    Py_VISIT(st->isocalendar_date_type);\n\n    return 0;\n}\n\nstatic int\nclear_state(datetime_state *st)\n{\n    Py_CLEAR(st->isocalendar_date_type);\n    Py_CLEAR(st->us_per_ms);\n    Py_CLEAR(st->us_per_second);\n    Py_CLEAR(st->us_per_minute);\n    Py_CLEAR(st->us_per_hour);\n    Py_CLEAR(st->us_per_day);\n    Py_CLEAR(st->us_per_week);\n    Py_CLEAR(st->seconds_per_day);\n    Py_CLEAR(st->epoch);\n    return 0;\n}\n\n\nstatic int\ninit_static_types(PyInterpreterState *interp, int reloading)\n{\n    if (reloading) {\n        return 0;\n    }\n\n    // `&...` is not a constant expression according to a strict reading\n    // of C standards. Fill tp_base at run-time rather than statically.\n    // See https://bugs.python.org/issue40777\n    PyDateTime_TimeZoneType.tp_base = &PyDateTime_TZInfoType;\n    PyDateTime_DateTimeType.tp_base = &PyDateTime_DateType;\n\n    /* Bases classes must be initialized before subclasses,\n     * so capi_types must have the types in the appropriate order. */\n    for (size_t i = 0; i < Py_ARRAY_LENGTH(capi_types); i++) {\n        PyTypeObject *type = capi_types[i];\n        if (_PyStaticType_InitForExtension(interp, type) < 0) {\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\n\n/* ---------------------------------------------------------------------------\n * Module methods and initialization.\n */\n\nstatic PyMethodDef module_methods[] = {\n    {NULL, NULL}\n};\n\n\nstatic int\n_datetime_exec(PyObject *module)\n{\n    int rc = -1;\n    datetime_state *st = get_module_state(module);\n    int reloading = 0;\n\n    PyInterpreterState *interp = PyInterpreterState_Get();\n    PyObject *old_module = get_current_module(interp, &reloading);\n    if (PyErr_Occurred()) {\n        assert(old_module == NULL);\n        goto error;\n    }\n    /* We actually set the \"current\" module right before a successful return. */\n\n    if (init_static_types(interp, reloading) < 0) {\n        goto error;\n    }\n\n    for (size_t i = 0; i < Py_ARRAY_LENGTH(capi_types); i++) {\n        PyTypeObject *type = capi_types[i];\n        const char *name = _PyType_Name(type);\n        assert(name != NULL);\n        if (PyModule_AddObjectRef(module, name, (PyObject *)type) < 0) {\n            goto error;\n        }\n    }\n\n    if (init_state(st, module, old_module) < 0) {\n        goto error;\n    }\n\n#define DATETIME_ADD_MACRO(dict, c, value_expr)         \\\n    do {                                                \\\n        assert(!PyErr_Occurred());                      \\\n        PyObject *value = (value_expr);                 \\\n        if (value == NULL) {                            \\\n            goto error;                                 \\\n        }                                               \\\n        if (PyDict_SetItemString(dict, c, value) < 0) { \\\n            Py_DECREF(value);                           \\\n            goto error;                                 \\\n        }                                               \\\n        Py_DECREF(value);                               \\\n    } while(0)\n\n    /* timedelta values */\n    PyObject *d = _PyType_GetDict(&PyDateTime_DeltaType);\n    DATETIME_ADD_MACRO(d, \"resolution\", new_delta(0, 0, 1, 0));\n    DATETIME_ADD_MACRO(d, \"min\", new_delta(-MAX_DELTA_DAYS, 0, 0, 0));\n    DATETIME_ADD_MACRO(d, \"max\",\n                       new_delta(MAX_DELTA_DAYS, 24*3600-1, 1000000-1, 0));\n\n    /* date values */\n    d = _PyType_GetDict(&PyDateTime_DateType);\n    DATETIME_ADD_MACRO(d, \"min\", new_date(1, 1, 1));\n    DATETIME_ADD_MACRO(d, \"max\", new_date(MAXYEAR, 12, 31));\n    DATETIME_ADD_MACRO(d, \"resolution\", new_delta(1, 0, 0, 0));\n\n    /* time values */\n    d = _PyType_GetDict(&PyDateTime_TimeType);\n    DATETIME_ADD_MACRO(d, \"min\", new_time(0, 0, 0, 0, Py_None, 0));\n    DATETIME_ADD_MACRO(d, \"max\", new_time(23, 59, 59, 999999, Py_None, 0));\n    DATETIME_ADD_MACRO(d, \"resolution\", new_delta(0, 0, 1, 0));\n\n    /* datetime values */\n    d = _PyType_GetDict(&PyDateTime_DateTimeType);\n    DATETIME_ADD_MACRO(d, \"min\",\n                       new_datetime(1, 1, 1, 0, 0, 0, 0, Py_None, 0));\n    DATETIME_ADD_MACRO(d, \"max\", new_datetime(MAXYEAR, 12, 31, 23, 59, 59,\n                                              999999, Py_None, 0));\n    DATETIME_ADD_MACRO(d, \"resolution\", new_delta(0, 0, 1, 0));\n\n    /* timezone values */\n    d = _PyType_GetDict(&PyDateTime_TimeZoneType);\n    if (PyDict_SetItemString(d, \"utc\", (PyObject *)&utc_timezone) < 0) {\n        goto error;\n    }\n\n    /* bpo-37642: These attributes are rounded to the nearest minute for backwards\n     * compatibility, even though the constructor will accept a wider range of\n     * values. This may change in the future.*/\n\n    /* -23:59 */\n    DATETIME_ADD_MACRO(d, \"min\", create_timezone_from_delta(-1, 60, 0, 1));\n\n    /* +23:59 */\n    DATETIME_ADD_MACRO(\n            d, \"max\", create_timezone_from_delta(0, (23 * 60 + 59) * 60, 0, 0));\n\n#undef DATETIME_ADD_MACRO\n\n    /* Add module level attributes */\n    if (PyModule_AddIntMacro(module, MINYEAR) < 0) {\n        goto error;\n    }\n    if (PyModule_AddIntMacro(module, MAXYEAR) < 0) {\n        goto error;\n    }\n    if (PyModule_AddObjectRef(module, \"UTC\", (PyObject *)&utc_timezone) < 0) {\n        goto error;\n    }\n\n    /* At last, set up and add the encapsulated C API */\n    PyDateTime_CAPI *capi = get_datetime_capi();\n    if (capi == NULL) {\n        goto error;\n    }\n    PyObject *capsule = PyCapsule_New(capi, PyDateTime_CAPSULE_NAME, NULL);\n    // (capsule == NULL) is handled by PyModule_Add\n    if (PyModule_Add(module, \"datetime_CAPI\", capsule) < 0) {\n        goto error;\n    }\n\n    /* A 4-year cycle has an extra leap day over what we'd get from\n     * pasting together 4 single years.\n     */\n    static_assert(DI4Y == 4 * 365 + 1, \"DI4Y\");\n    assert(DI4Y == days_before_year(4+1));\n\n    /* Similarly, a 400-year cycle has an extra leap day over what we'd\n     * get from pasting together 4 100-year cycles.\n     */\n    static_assert(DI400Y == 4 * DI100Y + 1, \"DI400Y\");\n    assert(DI400Y == days_before_year(400+1));\n\n    /* OTOH, a 100-year cycle has one fewer leap day than we'd get from\n     * pasting together 25 4-year cycles.\n     */\n    static_assert(DI100Y == 25 * DI4Y - 1, \"DI100Y\");\n    assert(DI100Y == days_before_year(100+1));\n\n    if (reloading) {\n        for (size_t i = 0; i < Py_ARRAY_LENGTH(capi_types); i++) {\n            PyType_Modified(capi_types[i]);\n        }\n    }\n\n    if (set_current_module(interp, module) < 0) {\n        goto error;\n    }\n\n    rc = 0;\n    goto finally;\n\nerror:\n    clear_state(st);\n\nfinally:\n    Py_XDECREF(old_module);\n    return rc;\n}\n\nstatic PyModuleDef_Slot module_slots[] = {\n    {Py_mod_exec, _datetime_exec},\n    {Py_mod_multiple_interpreters, Py_MOD_PER_INTERPRETER_GIL_SUPPORTED},\n    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n    {0, NULL},\n};\n\nstatic int\nmodule_traverse(PyObject *mod, visitproc visit, void *arg)\n{\n    datetime_state *st = get_module_state(mod);\n    traverse_state(st, visit, arg);\n    return 0;\n}\n\nstatic int\nmodule_clear(PyObject *mod)\n{\n    datetime_state *st = get_module_state(mod);\n    clear_state(st);\n\n    PyInterpreterState *interp = PyInterpreterState_Get();\n    clear_current_module(interp, mod);\n\n    // The runtime takes care of the static types for us.\n    // See _PyTypes_FiniExtTypes()..\n\n    return 0;\n}\n\nstatic void\nmodule_free(void *mod)\n{\n    (void)module_clear((PyObject *)mod);\n}\n\nstatic PyModuleDef datetimemodule = {\n    .m_base = PyModuleDef_HEAD_INIT,\n    .m_name = \"_datetime\",\n    .m_doc = \"Fast implementation of the datetime type.\",\n    .m_size = sizeof(datetime_state),\n    .m_methods = module_methods,\n    .m_slots = module_slots,\n    .m_traverse = module_traverse,\n    .m_clear = module_clear,\n    .m_free = module_free,\n};\n\nPyMODINIT_FUNC\nPyInit__datetime(void)\n{\n    return PyModuleDef_Init(&datetimemodule);\n}\n\n/* ---------------------------------------------------------------------------\nSome time zone algebra.  For a datetime x, let\n    x.n = x stripped of its timezone -- its naive time.\n    x.o = x.utcoffset(), and assuming that doesn't raise an exception or\n      return None\n    x.d = x.dst(), and assuming that doesn't raise an exception or\n      return None\n    x.s = x's standard offset, x.o - x.d\n\nNow some derived rules, where k is a duration (timedelta).\n\n1. x.o = x.s + x.d\n   This follows from the definition of x.s.\n\n2. If x and y have the same tzinfo member, x.s = y.s.\n   This is actually a requirement, an assumption we need to make about\n   sane tzinfo classes.\n\n3. The naive UTC time corresponding to x is x.n - x.o.\n   This is again a requirement for a sane tzinfo class.\n\n4. (x+k).s = x.s\n   This follows from #2, and that datimetimetz+timedelta preserves tzinfo.\n\n5. (x+k).n = x.n + k\n   Again follows from how arithmetic is defined.\n\nNow we can explain tz.fromutc(x).  Let's assume it's an interesting case\n(meaning that the various tzinfo methods exist, and don't blow up or return\nNone when called).\n\nThe function wants to return a datetime y with timezone tz, equivalent to x.\nx is already in UTC.\n\nBy #3, we want\n\n    y.n - y.o = x.n                             [1]\n\nThe algorithm starts by attaching tz to x.n, and calling that y.  So\nx.n = y.n at the start.  Then it wants to add a duration k to y, so that [1]\nbecomes true; in effect, we want to solve [2] for k:\n\n   (y+k).n - (y+k).o = x.n                      [2]\n\nBy #1, this is the same as\n\n   (y+k).n - ((y+k).s + (y+k).d) = x.n          [3]\n\nBy #5, (y+k).n = y.n + k, which equals x.n + k because x.n=y.n at the start.\nSubstituting that into [3],\n\n   x.n + k - (y+k).s - (y+k).d = x.n; the x.n terms cancel, leaving\n   k - (y+k).s - (y+k).d = 0; rearranging,\n   k = (y+k).s - (y+k).d; by #4, (y+k).s == y.s, so\n   k = y.s - (y+k).d\n\nOn the RHS, (y+k).d can't be computed directly, but y.s can be, and we\napproximate k by ignoring the (y+k).d term at first.  Note that k can't be\nvery large, since all offset-returning methods return a duration of magnitude\nless than 24 hours.  For that reason, if y is firmly in std time, (y+k).d must\nbe 0, so ignoring it has no consequence then.\n\nIn any case, the new value is\n\n    z = y + y.s                                 [4]\n\nIt's helpful to step back at look at [4] from a higher level:  it's simply\nmapping from UTC to tz's standard time.\n\nAt this point, if\n\n    z.n - z.o = x.n                             [5]\n\nwe have an equivalent time, and are almost done.  The insecurity here is\nat the start of daylight time.  Picture US Eastern for concreteness.  The wall\ntime jumps from 1:59 to 3:00, and wall hours of the form 2:MM don't make good\nsense then.  The docs ask that an Eastern tzinfo class consider such a time to\nbe EDT (because it's \"after 2\"), which is a redundant spelling of 1:MM EST\non the day DST starts.  We want to return the 1:MM EST spelling because that's\nthe only spelling that makes sense on the local wall clock.\n\nIn fact, if [5] holds at this point, we do have the standard-time spelling,\nbut that takes a bit of proof.  We first prove a stronger result.  What's the\ndifference between the LHS and RHS of [5]?  Let\n\n    diff = x.n - (z.n - z.o)                    [6]\n\nNow\n    z.n =                       by [4]\n    (y + y.s).n =               by #5\n    y.n + y.s =                 since y.n = x.n\n    x.n + y.s =                 since z and y are have the same tzinfo member,\n                                    y.s = z.s by #2\n    x.n + z.s\n\nPlugging that back into [6] gives\n\n    diff =\n    x.n - ((x.n + z.s) - z.o) =     expanding\n    x.n - x.n - z.s + z.o =         cancelling\n    - z.s + z.o =                   by #2\n    z.d\n\nSo diff = z.d.\n\nIf [5] is true now, diff = 0, so z.d = 0 too, and we have the standard-time\nspelling we wanted in the endcase described above.  We're done.  Contrarily,\nif z.d = 0, then we have a UTC equivalent, and are also done.\n\nIf [5] is not true now, diff = z.d != 0, and z.d is the offset we need to\nadd to z (in effect, z is in tz's standard time, and we need to shift the\nlocal clock into tz's daylight time).\n\nLet\n\n    z' = z + z.d = z + diff                     [7]\n\nand we can again ask whether\n\n    z'.n - z'.o = x.n                           [8]\n\nIf so, we're done.  If not, the tzinfo class is insane, according to the\nassumptions we've made.  This also requires a bit of proof.  As before, let's\ncompute the difference between the LHS and RHS of [8] (and skipping some of\nthe justifications for the kinds of substitutions we've done several times\nalready):\n\n    diff' = x.n - (z'.n - z'.o) =           replacing z'.n via [7]\n        x.n  - (z.n + diff - z'.o) =    replacing diff via [6]\n        x.n - (z.n + x.n - (z.n - z.o) - z'.o) =\n        x.n - z.n - x.n + z.n - z.o + z'.o =    cancel x.n\n        - z.n + z.n - z.o + z'.o =              cancel z.n\n        - z.o + z'.o =                      #1 twice\n        -z.s - z.d + z'.s + z'.d =          z and z' have same tzinfo\n        z'.d - z.d\n\nSo z' is UTC-equivalent to x iff z'.d = z.d at this point.  If they are equal,\nwe've found the UTC-equivalent so are done.  In fact, we stop with [7] and\nreturn z', not bothering to compute z'.d.\n\nHow could z.d and z'd differ?  z' = z + z.d [7], so merely moving z' by\na dst() offset, and starting *from* a time already in DST (we know z.d != 0),\nwould have to change the result dst() returns:  we start in DST, and moving\na little further into it takes us out of DST.\n\nThere isn't a sane case where this can happen.  The closest it gets is at\nthe end of DST, where there's an hour in UTC with no spelling in a hybrid\ntzinfo class.  In US Eastern, that's 5:MM UTC = 0:MM EST = 1:MM EDT.  During\nthat hour, on an Eastern clock 1:MM is taken as being in standard time (6:MM\nUTC) because the docs insist on that, but 0:MM is taken as being in daylight\ntime (4:MM UTC).  There is no local time mapping to 5:MM UTC.  The local\nclock jumps from 1:59 back to 1:00 again, and repeats the 1:MM hour in\nstandard time.  Since that's what the local clock *does*, we want to map both\nUTC hours 5:MM and 6:MM to 1:MM Eastern.  The result is ambiguous\nin local time, but so it goes -- it's the way the local clock works.\n\nWhen x = 5:MM UTC is the input to this algorithm, x.o=0, y.o=-5 and y.d=0,\nso z=0:MM.  z.d=60 (minutes) then, so [5] doesn't hold and we keep going.\nz' = z + z.d = 1:MM then, and z'.d=0, and z'.d - z.d = -60 != 0 so [8]\n(correctly) concludes that z' is not UTC-equivalent to x.\n\nBecause we know z.d said z was in daylight time (else [5] would have held and\nwe would have stopped then), and we know z.d != z'.d (else [8] would have held\nand we would have stopped then), and there are only 2 possible values dst() can\nreturn in Eastern, it follows that z'.d must be 0 (which it is in the example,\nbut the reasoning doesn't depend on the example -- it depends on there being\ntwo possible dst() outcomes, one zero and the other non-zero).  Therefore\nz' must be in standard time, and is the spelling we want in this case.\n\nNote again that z' is not UTC-equivalent as far as the hybrid tzinfo class is\nconcerned (because it takes z' as being in standard time rather than the\ndaylight time we intend here), but returning it gives the real-life \"local\nclock repeats an hour\" behavior when mapping the \"unspellable\" UTC hour into\ntz.\n\nWhen the input is 6:MM, z=1:MM and z.d=0, and we stop at once, again with\nthe 1:MM standard time spelling we want.\n\nSo how can this break?  One of the assumptions must be violated.  Two\npossibilities:\n\n1) [2] effectively says that y.s is invariant across all y belong to a given\n   time zone.  This isn't true if, for political reasons or continental drift,\n   a region decides to change its base offset from UTC.\n\n2) There may be versions of \"double daylight\" time where the tail end of\n   the analysis gives up a step too early.  I haven't thought about that\n   enough to say.\n\nIn any case, it's clear that the default fromutc() is strong enough to handle\n\"almost all\" time zones:  so long as the standard offset is invariant, it\ndoesn't matter if daylight time transition points change from year to year, or\nif daylight time is skipped in some years; it doesn't matter how large or\nsmall dst() may get within its bounds; and it doesn't even matter if some\nperverse time zone returns a negative dst()).  So a breaking case must be\npretty bizarre, and a tzinfo subclass can override fromutc() if it is.\n--------------------------------------------------------------------------- */\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "./Include/object.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_OBJECT_H\n#define Py_OBJECT_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Object and type object interface */\n\n/*\nObjects are structures allocated on the heap.  Special rules apply to\nthe use of objects to ensure they are properly garbage-collected.\nObjects are never allocated statically or on the stack; they must be\naccessed through special macros and functions only.  (Type objects are\nexceptions to the first rule; the standard types are represented by\nstatically initialized type objects, although work on type/class unification\nfor Python 2.2 made it possible to have heap-allocated type objects too).\n\nAn object has a 'reference count' that is increased or decreased when a\npointer to the object is copied or deleted; when the reference count\nreaches zero there are no references to the object left and it can be\nremoved from the heap.\n\nAn object has a 'type' that determines what it represents and what kind\nof data it contains.  An object's type is fixed when it is created.\nTypes themselves are represented as objects; an object contains a\npointer to the corresponding type object.  The type itself has a type\npointer pointing to the object representing the type 'type', which\ncontains a pointer to itself!.\n\nObjects do not float around in memory; once allocated an object keeps\nthe same size and address.  Objects that must hold variable-size data\ncan contain pointers to variable-size parts of the object.  Not all\nobjects of the same type have the same size; but the size cannot change\nafter allocation.  (These restrictions are made so a reference to an\nobject can be simply a pointer -- moving an object would require\nupdating all the pointers, and changing an object's size would require\nmoving it if there was another object right next to it.)\n\nObjects are always accessed through pointers of the type 'PyObject *'.\nThe type 'PyObject' is a structure that only contains the reference count\nand the type pointer.  The actual memory allocated for an object\ncontains other data that can only be accessed after casting the pointer\nto a pointer to a longer structure type.  This longer type must start\nwith the reference count and type fields; the macro PyObject_HEAD should be\nused for this (to accommodate for future changes).  The implementation\nof a particular object type can cast the object pointer to the proper\ntype and back.\n\nA standard interface exists for objects that contain an array of items\nwhose size is determined when the object is allocated.\n*/\n\n/* Py_DEBUG implies Py_REF_DEBUG. */\n#if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)\n#  define Py_REF_DEBUG\n#endif\n\n/* PyObject_HEAD defines the initial segment of every PyObject. */\n#define PyObject_HEAD                   PyObject ob_base;\n\n/*\nImmortalization:\n\nThe following indicates the immortalization strategy depending on the amount\nof available bits in the reference count field. All strategies are backwards\ncompatible but the specific reference count value or immortalization check\nmight change depending on the specializations for the underlying system.\n\nProper deallocation of immortal instances requires distinguishing between\nstatically allocated immortal instances vs those promoted by the runtime to be\nimmortal. The latter should be the only instances that require\ncleanup during runtime finalization.\n*/\n\n#if SIZEOF_VOID_P > 4\n/*\nIn 64+ bit systems, an object will be marked as immortal by setting all of the\nlower 32 bits of the reference count field, which is equal to: 0xFFFFFFFF\n\nUsing the lower 32 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases will use saturated arithmetic, taking advantage of\nhaving all the lower 32 bits set, which will avoid the reference count to go\nbeyond the refcount limit. Immortality checks for reference count decreases will\nbe done by checking the bit sign flag in the lower 32 bits.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX)\n\n#else\n/*\nIn 32 bit systems, an object will be marked as immortal by setting all of the\nlower 30 bits of the reference count field, which is equal to: 0x3FFFFFFF\n\nUsing the lower 30 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases and decreases will first go through an immortality\ncheck by comparing the reference count field to the immortality reference count.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX >> 2)\n#endif\n\n// Py_GIL_DISABLED builds indicate immortal objects using `ob_ref_local`, which is\n// always 32-bits.\n#ifdef Py_GIL_DISABLED\n#define _Py_IMMORTAL_REFCNT_LOCAL UINT32_MAX\n#endif\n\n// Kept for backward compatibility. It was needed by Py_TRACE_REFS build.\n#define _PyObject_EXTRA_INIT\n\n/* Make all uses of PyObject_HEAD_INIT immortal.\n *\n * Statically allocated objects might be shared between\n * interpreters, so must be marked as immortal.\n */\n#if defined(Py_GIL_DISABLED)\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        0,                          \\\n        0,                          \\\n        { 0 },                      \\\n        0,                          \\\n        _Py_IMMORTAL_REFCNT_LOCAL,  \\\n        0,                          \\\n        (type),                     \\\n    },\n#else\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        { _Py_IMMORTAL_REFCNT },    \\\n        (type)                      \\\n    },\n#endif\n\n#define PyVarObject_HEAD_INIT(type, size) \\\n    {                                     \\\n        PyObject_HEAD_INIT(type)          \\\n        (size)                            \\\n    },\n\n/* PyObject_VAR_HEAD defines the initial segment of all variable-size\n * container objects.  These end with a declaration of an array with 1\n * element, but enough space is malloc'ed so that the array actually\n * has room for ob_size elements.  Note that ob_size is an element count,\n * not necessarily a byte count.\n */\n#define PyObject_VAR_HEAD      PyVarObject ob_base;\n#define Py_INVALID_SIZE (Py_ssize_t)-1\n\n/* Nothing is actually declared to be a PyObject, but every pointer to\n * a Python object can be cast to a PyObject*.  This is inheritance built\n * by hand.  Similarly every pointer to a variable-size Python object can,\n * in addition, be cast to PyVarObject*.\n */\n#ifndef Py_GIL_DISABLED\nstruct _object {\n#if (defined(__GNUC__) || defined(__clang__)) \\\n        && !(defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L)\n    // On C99 and older, anonymous union is a GCC and clang extension\n    __extension__\n#endif\n#ifdef _MSC_VER\n    // Ignore MSC warning C4201: \"nonstandard extension used:\n    // nameless struct/union\"\n    __pragma(warning(push))\n    __pragma(warning(disable: 4201))\n#endif\n    union {\n       Py_ssize_t ob_refcnt;\n#if SIZEOF_VOID_P > 4\n       PY_UINT32_T ob_refcnt_split[2];\n#endif\n    };\n#ifdef _MSC_VER\n    __pragma(warning(pop))\n#endif\n\n    PyTypeObject *ob_type;\n};\n#else\n// Objects that are not owned by any thread use a thread id (tid) of zero.\n// This includes both immortal objects and objects whose reference count\n// fields have been merged.\n#define _Py_UNOWNED_TID             0\n\n// The shared reference count uses the two least-significant bits to store\n// flags. The remaining bits are used to store the reference count.\n#define _Py_REF_SHARED_SHIFT        2\n#define _Py_REF_SHARED_FLAG_MASK    0x3\n\n// The shared flags are initialized to zero.\n#define _Py_REF_SHARED_INIT         0x0\n#define _Py_REF_MAYBE_WEAKREF       0x1\n#define _Py_REF_QUEUED              0x2\n#define _Py_REF_MERGED              0x3\n\n// Create a shared field from a refcnt and desired flags\n#define _Py_REF_SHARED(refcnt, flags) (((refcnt) << _Py_REF_SHARED_SHIFT) + (flags))\n\nstruct _object {\n    // ob_tid stores the thread id (or zero). It is also used by the GC and the\n    // trashcan mechanism as a linked list pointer and by the GC to store the\n    // computed \"gc_refs\" refcount.\n    uintptr_t ob_tid;\n    uint16_t _padding;\n    PyMutex ob_mutex;           // per-object lock\n    uint8_t ob_gc_bits;         // gc-related state\n    uint32_t ob_ref_local;      // local reference count\n    Py_ssize_t ob_ref_shared;   // shared (atomic) reference count\n    PyTypeObject *ob_type;\n};\n#endif\n\n/* Cast argument to PyObject* type. */\n#define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))\n\ntypedef struct {\n    PyObject ob_base;\n    Py_ssize_t ob_size; /* Number of items in variable part */\n} PyVarObject;\n\n/* Cast argument to PyVarObject* type. */\n#define _PyVarObject_CAST(op) _Py_CAST(PyVarObject*, (op))\n\n\n// Test if the 'x' object is the 'y' object, the same as \"x is y\" in Python.\nPyAPI_FUNC(int) Py_Is(PyObject *x, PyObject *y);\n#define Py_Is(x, y) ((x) == (y))\n\n#if defined(Py_GIL_DISABLED) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(uintptr_t) _Py_GetThreadLocal_Addr(void);\n\nstatic inline uintptr_t\n_Py_ThreadId(void)\n{\n    uintptr_t tid;\n#if defined(_MSC_VER) && defined(_M_X64)\n    tid = __readgsqword(48);\n#elif defined(_MSC_VER) && defined(_M_IX86)\n    tid = __readfsdword(24);\n#elif defined(_MSC_VER) && defined(_M_ARM64)\n    tid = __getReg(18);\n#elif defined(__i386__)\n    __asm__(\"movl %%gs:0, %0\" : \"=r\" (tid));  // 32-bit always uses GS\n#elif defined(__MACH__) && defined(__x86_64__)\n    __asm__(\"movq %%gs:0, %0\" : \"=r\" (tid));  // x86_64 macOSX uses GS\n#elif defined(__x86_64__)\n   __asm__(\"movq %%fs:0, %0\" : \"=r\" (tid));  // x86_64 Linux, BSD uses FS\n#elif defined(__arm__)\n    __asm__ (\"mrc p15, 0, %0, c13, c0, 3\\nbic %0, %0, #3\" : \"=r\" (tid));\n#elif defined(__aarch64__) && defined(__APPLE__)\n    __asm__ (\"mrs %0, tpidrro_el0\" : \"=r\" (tid));\n#elif defined(__aarch64__)\n    __asm__ (\"mrs %0, tpidr_el0\" : \"=r\" (tid));\n#elif defined(__powerpc64__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r13 is reserved for use as system thread ID by the Power 64-bit ABI.\n    register uintptr_t tp __asm__ (\"r13\");\n    __asm__(\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__powerpc__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r2 is reserved for use as system thread ID by the Power 32-bit ABI.\n    register uintptr_t tp __asm__ (\"r2\");\n    __asm__ (\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__s390__) && defined(__GNUC__)\n    // Both GCC and Clang have supported __builtin_thread_pointer\n    // for s390 from long time ago.\n    tid = (uintptr_t)__builtin_thread_pointer();\n#elif defined(__riscv)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // tp is Thread Pointer provided by the RISC-V ABI.\n    __asm__ (\"mv %0, tp\" : \"=r\" (tid));\n    #endif\n#else\n    // Fallback to a portable implementation if we do not have a faster\n    // platform-specific implementation.\n    tid = _Py_GetThreadLocal_Addr();\n#endif\n  return tid;\n}\n\nstatic inline Py_ALWAYS_INLINE int\n_Py_IsOwnedByCurrentThread(PyObject *ob)\n{\n#ifdef _Py_THREAD_SANITIZER\n    return _Py_atomic_load_uintptr_relaxed(&ob->ob_tid) == _Py_ThreadId();\n#else\n    return ob->ob_tid == _Py_ThreadId();\n#endif\n}\n#endif\n\nstatic inline Py_ssize_t Py_REFCNT(PyObject *ob) {\n#if !defined(Py_GIL_DISABLED)\n    return ob->ob_refcnt;\n#else\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&ob->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return _Py_IMMORTAL_REFCNT;\n    }\n    Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&ob->ob_ref_shared);\n    return _Py_STATIC_CAST(Py_ssize_t, local) +\n           Py_ARITHMETIC_RIGHT_SHIFT(Py_ssize_t, shared, _Py_REF_SHARED_SHIFT);\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_REFCNT(ob) Py_REFCNT(_PyObject_CAST(ob))\n#endif\n\n\n// bpo-39573: The Py_SET_TYPE() function must be used to set an object type.\nstatic inline PyTypeObject* Py_TYPE(PyObject *ob) {\n    return ob->ob_type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyLong_Type;\nPyAPI_DATA(PyTypeObject) PyBool_Type;\n\n// bpo-39573: The Py_SET_SIZE() function must be used to set an object size.\nstatic inline Py_ssize_t Py_SIZE(PyObject *ob) {\n    assert(ob->ob_type != &PyLong_Type);\n    assert(ob->ob_type != &PyBool_Type);\n    return  _PyVarObject_CAST(ob)->ob_size;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SIZE(ob) Py_SIZE(_PyObject_CAST(ob))\n#endif\n\nstatic inline Py_ALWAYS_INLINE int _Py_IsImmortal(PyObject *op)\n{\n#if defined(Py_GIL_DISABLED)\n    return (_Py_atomic_load_uint32_relaxed(&op->ob_ref_local) ==\n            _Py_IMMORTAL_REFCNT_LOCAL);\n#elif SIZEOF_VOID_P > 4\n    return (_Py_CAST(PY_INT32_T, op->ob_refcnt) < 0);\n#else\n    return (op->ob_refcnt == _Py_IMMORTAL_REFCNT);\n#endif\n}\n#define _Py_IsImmortal(op) _Py_IsImmortal(_PyObject_CAST(op))\n\nstatic inline int Py_IS_TYPE(PyObject *ob, PyTypeObject *type) {\n    return Py_TYPE(ob) == type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))\n#endif\n\n\n// Py_SET_REFCNT() implementation for stable ABI\nPyAPI_FUNC(void) _Py_SetRefcnt(PyObject *ob, Py_ssize_t refcnt);\n\nstatic inline void Py_SET_REFCNT(PyObject *ob, Py_ssize_t refcnt) {\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030d0000\n    // Stable ABI implements Py_SET_REFCNT() as a function call\n    // on limited C API version 3.13 and newer.\n    _Py_SetRefcnt(ob, refcnt);\n#else\n    // This immortal check is for code that is unaware of immortal objects.\n    // The runtime tracks these objects and we should avoid as much\n    // as possible having extensions inadvertently change the refcnt\n    // of an immortalized object.\n    if (_Py_IsImmortal(ob)) {\n        return;\n    }\n\n#ifndef Py_GIL_DISABLED\n    ob->ob_refcnt = refcnt;\n#else\n    if (_Py_IsOwnedByCurrentThread(ob)) {\n        if ((size_t)refcnt > (size_t)UINT32_MAX) {\n            // On overflow, make the object immortal\n            ob->ob_tid = _Py_UNOWNED_TID;\n            ob->ob_ref_local = _Py_IMMORTAL_REFCNT_LOCAL;\n            ob->ob_ref_shared = 0;\n        }\n        else {\n            // Set local refcount to desired refcount and shared refcount\n            // to zero, but preserve the shared refcount flags.\n            ob->ob_ref_local = _Py_STATIC_CAST(uint32_t, refcnt);\n            ob->ob_ref_shared &= _Py_REF_SHARED_FLAG_MASK;\n        }\n    }\n    else {\n        // Set local refcount to zero and shared refcount to desired refcount.\n        // Mark the object as merged.\n        ob->ob_tid = _Py_UNOWNED_TID;\n        ob->ob_ref_local = 0;\n        ob->ob_ref_shared = _Py_REF_SHARED(refcnt, _Py_REF_MERGED);\n    }\n#endif  // Py_GIL_DISABLED\n#endif  // Py_LIMITED_API+0 < 0x030d0000\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_REFCNT(ob, refcnt) Py_SET_REFCNT(_PyObject_CAST(ob), (refcnt))\n#endif\n\n\nstatic inline void Py_SET_TYPE(PyObject *ob, PyTypeObject *type) {\n    ob->ob_type = type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_TYPE(ob, type) Py_SET_TYPE(_PyObject_CAST(ob), type)\n#endif\n\nstatic inline void Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) {\n    assert(ob->ob_base.ob_type != &PyLong_Type);\n    assert(ob->ob_base.ob_type != &PyBool_Type);\n#ifdef Py_GIL_DISABLED\n    _Py_atomic_store_ssize_relaxed(&ob->ob_size, size);\n#else\n    ob->ob_size = size;\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_SIZE(ob, size) Py_SET_SIZE(_PyVarObject_CAST(ob), (size))\n#endif\n\n\n/*\nType objects contain a string containing the type name (to help somewhat\nin debugging), the allocation parameters (see PyObject_New() and\nPyObject_NewVar()),\nand methods for accessing objects of the type.  Methods are optional, a\nnil pointer meaning that particular kind of access is not available for\nthis type.  The Py_DECREF() macro uses the tp_dealloc method without\nchecking for a nil pointer; it should always be implemented except if\nthe implementation can guarantee that the reference count will never\nreach zero (e.g., for statically allocated type objects).\n\nNB: the methods for certain type groups are now contained in separate\nmethod blocks.\n*/\n\ntypedef PyObject * (*unaryfunc)(PyObject *);\ntypedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\ntypedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ntypedef int (*inquiry)(PyObject *);\ntypedef Py_ssize_t (*lenfunc)(PyObject *);\ntypedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\ntypedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\ntypedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\ntypedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\ntypedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);\n\ntypedef int (*objobjproc)(PyObject *, PyObject *);\ntypedef int (*visitproc)(PyObject *, void *);\ntypedef int (*traverseproc)(PyObject *, visitproc, void *);\n\n\ntypedef void (*freefunc)(void *);\ntypedef void (*destructor)(PyObject *);\ntypedef PyObject *(*getattrfunc)(PyObject *, char *);\ntypedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\ntypedef int (*setattrfunc)(PyObject *, char *, PyObject *);\ntypedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*reprfunc)(PyObject *);\ntypedef Py_hash_t (*hashfunc)(PyObject *);\ntypedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ntypedef PyObject *(*getiterfunc) (PyObject *);\ntypedef PyObject *(*iternextfunc) (PyObject *);\ntypedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*initproc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);\ntypedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030c0000 // 3.12\ntypedef PyObject *(*vectorcallfunc)(PyObject *callable, PyObject *const *args,\n                                    size_t nargsf, PyObject *kwnames);\n#endif\n\ntypedef struct{\n    int slot;    /* slot id, see below */\n    void *pfunc; /* function pointer */\n} PyType_Slot;\n\ntypedef struct{\n    const char* name;\n    int basicsize;\n    int itemsize;\n    unsigned int flags;\n    PyType_Slot *slots; /* terminated by slot==0. */\n} PyType_Spec;\n\nPyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000\nPyAPI_FUNC(void*) PyType_GetSlot(PyTypeObject*, int);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03090000\nPyAPI_FUNC(PyObject*) PyType_FromModuleAndSpec(PyObject *, PyType_Spec *, PyObject *);\nPyAPI_FUNC(PyObject *) PyType_GetModule(PyTypeObject *);\nPyAPI_FUNC(void *) PyType_GetModuleState(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030B0000\nPyAPI_FUNC(PyObject *) PyType_GetName(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GetQualName(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030D0000\nPyAPI_FUNC(PyObject *) PyType_GetFullyQualifiedName(PyTypeObject *type);\nPyAPI_FUNC(PyObject *) PyType_GetModuleName(PyTypeObject *type);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\nPyAPI_FUNC(PyObject *) PyType_FromMetaclass(PyTypeObject*, PyObject*, PyType_Spec*, PyObject*);\nPyAPI_FUNC(void *) PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls);\nPyAPI_FUNC(Py_ssize_t) PyType_GetTypeDataSize(PyTypeObject *cls);\n#endif\n\n/* Generic type check */\nPyAPI_FUNC(int) PyType_IsSubtype(PyTypeObject *, PyTypeObject *);\n\nstatic inline int PyObject_TypeCheck(PyObject *ob, PyTypeObject *type) {\n    return Py_IS_TYPE(ob, type) || PyType_IsSubtype(Py_TYPE(ob), type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyType_Type; /* built-in 'type' */\nPyAPI_DATA(PyTypeObject) PyBaseObject_Type; /* built-in 'object' */\nPyAPI_DATA(PyTypeObject) PySuper_Type; /* built-in 'super' */\n\nPyAPI_FUNC(unsigned long) PyType_GetFlags(PyTypeObject*);\n\nPyAPI_FUNC(int) PyType_Ready(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GenericAlloc(PyTypeObject *, Py_ssize_t);\nPyAPI_FUNC(PyObject *) PyType_GenericNew(PyTypeObject *,\n                                               PyObject *, PyObject *);\nPyAPI_FUNC(unsigned int) PyType_ClearCache(void);\nPyAPI_FUNC(void) PyType_Modified(PyTypeObject *);\n\n/* Generic operations on objects */\nPyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);\nPyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);\nPyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);\nPyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttrString(PyObject *v, const char *name);\nPyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);\nPyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_GetOptionalAttr(PyObject *, PyObject *, PyObject **);\nPyAPI_FUNC(int) PyObject_GetOptionalAttrString(PyObject *, const char *, PyObject **);\n#endif\nPyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttr(PyObject *v, PyObject *name);\nPyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_HasAttrWithError(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_HasAttrStringWithError(PyObject *, const char *);\n#endif\nPyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *, PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);\n#endif\nPyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);\nPyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);\nPyAPI_FUNC(int) PyObject_IsTrue(PyObject *);\nPyAPI_FUNC(int) PyObject_Not(PyObject *);\nPyAPI_FUNC(int) PyCallable_Check(PyObject *);\nPyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);\n\n/* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a\n   list of strings.  PyObject_Dir(NULL) is like builtins.dir(),\n   returning the names of the current locals.  In this case, if there are\n   no current locals, NULL is returned, and PyErr_Occurred() is false.\n*/\nPyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);\n\n/* Helpers for printing recursive container types */\nPyAPI_FUNC(int) Py_ReprEnter(PyObject *);\nPyAPI_FUNC(void) Py_ReprLeave(PyObject *);\n\n/* Flag bits for printing: */\n#define Py_PRINT_RAW    1       /* No string quotes etc. */\n\n/*\nType flags (tp_flags)\n\nThese flags are used to change expected features and behavior for a\nparticular type.\n\nArbitration of the flag bit positions will need to be coordinated among\nall extension writers who publicly release their extensions (this will\nbe fewer than you might expect!).\n\nMost flags were removed as of Python 3.0 to make room for new flags.  (Some\nflags are not for backwards compatibility but to indicate the presence of an\noptional feature; these flags remain of course.)\n\nType definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.\n\nCode can use PyType_HasFeature(type_ob, flag_value) to test whether the\ngiven type object has a specified feature.\n*/\n\n#ifndef Py_LIMITED_API\n\n/* Track types initialized using _PyStaticType_InitBuiltin(). */\n#define _Py_TPFLAGS_STATIC_BUILTIN (1 << 1)\n\n/* The values array is placed inline directly after the rest of\n * the object. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_INLINE_VALUES (1 << 2)\n\n/* Placement of weakref pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_weaklistoffset.\n */\n#define Py_TPFLAGS_MANAGED_WEAKREF (1 << 3)\n\n/* Placement of dict (and values) pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_dictoffset. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_MANAGED_DICT (1 << 4)\n\n#define Py_TPFLAGS_PREHEADER (Py_TPFLAGS_MANAGED_WEAKREF | Py_TPFLAGS_MANAGED_DICT)\n\n/* Set if instances of the type object are treated as sequences for pattern matching */\n#define Py_TPFLAGS_SEQUENCE (1 << 5)\n/* Set if instances of the type object are treated as mappings for pattern matching */\n#define Py_TPFLAGS_MAPPING (1 << 6)\n#endif\n\n/* Disallow creating instances of the type: set tp_new to NULL and don't create\n * the \"__new__\" key in the type dictionary. */\n#define Py_TPFLAGS_DISALLOW_INSTANTIATION (1UL << 7)\n\n/* Set if the type object is immutable: type attributes cannot be set nor deleted */\n#define Py_TPFLAGS_IMMUTABLETYPE (1UL << 8)\n\n/* Set if the type object is dynamically allocated */\n#define Py_TPFLAGS_HEAPTYPE (1UL << 9)\n\n/* Set if the type allows subclassing */\n#define Py_TPFLAGS_BASETYPE (1UL << 10)\n\n/* Set if the type implements the vectorcall protocol (PEP 590) */\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\n#define Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)\n#ifndef Py_LIMITED_API\n// Backwards compatibility alias for API that was provisional in Python 3.8\n#define _Py_TPFLAGS_HAVE_VECTORCALL Py_TPFLAGS_HAVE_VECTORCALL\n#endif\n#endif\n\n/* Set if the type is 'ready' -- fully initialized */\n#define Py_TPFLAGS_READY (1UL << 12)\n\n/* Set while the type is being 'readied', to prevent recursive ready calls */\n#define Py_TPFLAGS_READYING (1UL << 13)\n\n/* Objects support garbage collection (see objimpl.h) */\n#define Py_TPFLAGS_HAVE_GC (1UL << 14)\n\n/* These two bits are preserved for Stackless Python, next after this is 17 */\n#ifdef STACKLESS\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)\n#else\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0\n#endif\n\n/* Objects behave like an unbound method */\n#define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)\n\n/* Unused. Legacy flag */\n#define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)\n\n/* Type is abstract and cannot be instantiated */\n#define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)\n\n// This undocumented flag gives certain built-ins their unique pattern-matching\n// behavior, which allows a single positional subpattern to match against the\n// subject itself (rather than a mapped attribute on it):\n#define _Py_TPFLAGS_MATCH_SELF (1UL << 22)\n\n/* Items (ob_size*tp_itemsize) are found at the end of an instance's memory */\n#define Py_TPFLAGS_ITEMS_AT_END (1UL << 23)\n\n/* These flags are used to determine if a type is a subclass. */\n#define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)\n#define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)\n#define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)\n#define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)\n#define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)\n#define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)\n#define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)\n#define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)\n\n#define Py_TPFLAGS_DEFAULT  ( \\\n                 Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \\\n                0)\n\n/* NOTE: Some of the following flags reuse lower bits (removed as part of the\n * Python 3.0 transition). */\n\n/* The following flags are kept for compatibility; in previous\n * versions they indicated presence of newer tp_* fields on the\n * type struct.\n * Starting with 3.8, binary compatibility of C extensions across\n * feature releases of Python is not supported anymore (except when\n * using the stable ABI, in which all classes are created dynamically,\n * using the interpreter's memory layout.)\n * Note that older extensions using the stable ABI set these flags,\n * so the bits must not be repurposed.\n */\n#define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)\n#define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)\n\n\n/*\nThe macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement\nreference counts.  Py_DECREF calls the object's deallocator function when\nthe refcount falls to 0; for\nobjects that don't contain references to other objects or heap memory\nthis can be the standard function free().  Both macros can be used\nwherever a void expression is allowed.  The argument must not be a\nNULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.\nThe macro _Py_NewReference(op) initialize reference counts to 1, and\nin special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional\nbookkeeping appropriate to the special build.\n\nWe assume that the reference count field can never overflow; this can\nbe proven when the size of the field is the same as the pointer size, so\nwe ignore the possibility.  Provided a C int is at least 32 bits (which\nis implicitly assumed in many parts of this code), that's enough for\nabout 2**31 references to an object.\n\nXXX The following became out of date in Python 2.2, but I'm not sure\nXXX what the full truth is now.  Certainly, heap-allocated type objects\nXXX can and should be deallocated.\nType objects should never be deallocated; the type pointer in an object\nis not considered to be a reference to the type object, to save\ncomplications in the deallocation function.  (This is actually a\ndecision that's up to the implementer of each new type so if you want,\nyou can count such references to the type object.)\n*/\n\n#if defined(Py_REF_DEBUG) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,\n                                      PyObject *op);\nPyAPI_FUNC(void) _Py_INCREF_IncRefTotal(void);\nPyAPI_FUNC(void) _Py_DECREF_DecRefTotal(void);\n#endif  // Py_REF_DEBUG && !Py_LIMITED_API\n\nPyAPI_FUNC(void) _Py_Dealloc(PyObject *);\n\n/*\nThese are provided as conveniences to Python runtime embedders, so that\nthey can have object code that is not dependent on Python compilation flags.\n*/\nPyAPI_FUNC(void) Py_IncRef(PyObject *);\nPyAPI_FUNC(void) Py_DecRef(PyObject *);\n\n// Similar to Py_IncRef() and Py_DecRef() but the argument must be non-NULL.\n// Private functions used by Py_INCREF() and Py_DECREF().\nPyAPI_FUNC(void) _Py_IncRef(PyObject *);\nPyAPI_FUNC(void) _Py_DecRef(PyObject *);\n\nstatic inline Py_ALWAYS_INLINE void Py_INCREF(PyObject *op)\n{\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n    // Stable ABI implements Py_INCREF() as a function call on limited C API\n    // version 3.12 and newer, and on Python built in debug mode. _Py_IncRef()\n    // was added to Python 3.10.0a7, use Py_IncRef() on older Python versions.\n    // Py_IncRef() accepts NULL whereas _Py_IncRef() doesn't.\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_IncRef(op);\n#  else\n    Py_IncRef(op);\n#  endif\n#else\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n#if defined(Py_GIL_DISABLED)\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    uint32_t new_local = local + 1;\n    if (new_local == 0) {\n        // local is equal to _Py_IMMORTAL_REFCNT: do nothing\n        return;\n    }\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, new_local);\n    }\n    else {\n        _Py_atomic_add_ssize(&op->ob_ref_shared, (1 << _Py_REF_SHARED_SHIFT));\n    }\n#elif SIZEOF_VOID_P > 4\n    // Portable saturated add, branching on the carry flag and set low bits\n    PY_UINT32_T cur_refcnt = op->ob_refcnt_split[PY_BIG_ENDIAN];\n    PY_UINT32_T new_refcnt = cur_refcnt + 1;\n    if (new_refcnt == 0) {\n        // cur_refcnt is equal to _Py_IMMORTAL_REFCNT: the object is immortal,\n        // do nothing\n        return;\n    }\n    op->ob_refcnt_split[PY_BIG_ENDIAN] = new_refcnt;\n#else\n    // Explicitly check immortality against the immortal value\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    op->ob_refcnt++;\n#endif\n    _Py_INCREF_STAT_INC();\n#ifdef Py_REF_DEBUG\n    _Py_INCREF_IncRefTotal();\n#endif\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))\n#endif\n\n\n#if !defined(Py_LIMITED_API) && defined(Py_GIL_DISABLED)\n// Implements Py_DECREF on objects not owned by the current thread.\nPyAPI_FUNC(void) _Py_DecRefShared(PyObject *);\nPyAPI_FUNC(void) _Py_DecRefSharedDebug(PyObject *, const char *, int);\n\n// Called from Py_DECREF by the owning thread when the local refcount reaches\n// zero. The call will deallocate the object if the shared refcount is also\n// zero. Otherwise, the thread gives up ownership and merges the reference\n// count fields.\nPyAPI_FUNC(void) _Py_MergeZeroLocalRefcount(PyObject *);\n#endif\n\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n// Stable ABI implements Py_DECREF() as a function call on limited C API\n// version 3.12 and newer, and on Python built in debug mode. _Py_DecRef() was\n// added to Python 3.10.0a7, use Py_DecRef() on older Python versions.\n// Py_DecRef() accepts NULL whereas _Py_IncRef() doesn't.\nstatic inline void Py_DECREF(PyObject *op) {\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_DecRef(op);\n#  else\n    Py_DecRef(op);\n#  endif\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED) && defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        if (local == 0) {\n            _Py_NegativeRefcount(filename, lineno, op);\n        }\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefSharedDebug(op, filename, lineno);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED)\nstatic inline void Py_DECREF(PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefShared(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    if (op->ob_refcnt <= 0) {\n        _Py_NegativeRefcount(filename, lineno, op);\n    }\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#else\nstatic inline Py_ALWAYS_INLINE void Py_DECREF(PyObject *op)\n{\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n#endif\n\n\n/* Safely decref `op` and set `op` to NULL, especially useful in tp_clear\n * and tp_dealloc implementations.\n *\n * Note that \"the obvious\" code can be deadly:\n *\n *     Py_XDECREF(op);\n *     op = NULL;\n *\n * Typically, `op` is something like self->containee, and `self` is done\n * using its `containee` member.  In the code sequence above, suppose\n * `containee` is non-NULL with a refcount of 1.  Its refcount falls to\n * 0 on the first line, which can trigger an arbitrary amount of code,\n * possibly including finalizers (like __del__ methods or weakref callbacks)\n * coded in Python, which in turn can release the GIL and allow other threads\n * to run, etc.  Such code may even invoke methods of `self` again, or cause\n * cyclic gc to trigger, but-- oops! --self->containee still points to the\n * object being torn down, and it may be in an insane state while being torn\n * down.  This has in fact been a rich historic source of miserable (rare &\n * hard-to-diagnose) segfaulting (and other) bugs.\n *\n * The safe way is:\n *\n *      Py_CLEAR(op);\n *\n * That arranges to set `op` to NULL _before_ decref'ing, so that any code\n * triggered as a side-effect of `op` getting torn down no longer believes\n * `op` points to a valid object.\n *\n * There are cases where it's safe to use the naive code, but they're brittle.\n * For example, if `op` points to a Python integer, you know that destroying\n * one of those can't cause problems -- but in part that relies on that\n * Python integers aren't currently weakly referencable.  Best practice is\n * to use Py_CLEAR() even if you can't think of a reason for why you need to.\n *\n * gh-98724: Use a temporary variable to only evaluate the macro argument once,\n * to avoid the duplication of side effects if the argument has side effects.\n *\n * gh-99701: If the PyObject* type is used with casting arguments to PyObject*,\n * the code can be miscompiled with strict aliasing because of type punning.\n * With strict aliasing, a compiler considers that two pointers of different\n * types cannot read or write the same memory which enables optimization\n * opportunities.\n *\n * If available, use _Py_TYPEOF() to use the 'op' type for temporary variables,\n * and so avoid type punning. Otherwise, use memcpy() which causes type erasure\n * and so prevents the compiler to reuse an old cached 'op' value after\n * Py_CLEAR().\n */\n#ifdef _Py_TYPEOF\n#define Py_CLEAR(op) \\\n    do { \\\n        _Py_TYPEOF(op)* _tmp_op_ptr = &(op); \\\n        _Py_TYPEOF(op) _tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            *_tmp_op_ptr = _Py_NULL; \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#else\n#define Py_CLEAR(op) \\\n    do { \\\n        PyObject **_tmp_op_ptr = _Py_CAST(PyObject**, &(op)); \\\n        PyObject *_tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            PyObject *_null_ptr = _Py_NULL; \\\n            memcpy(_tmp_op_ptr, &_null_ptr, sizeof(PyObject*)); \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#endif\n\n\n/* Function to use in case the object pointer can be NULL: */\nstatic inline void Py_XINCREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_INCREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))\n#endif\n\nstatic inline void Py_XDECREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_DECREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XDECREF(op) Py_XDECREF(_PyObject_CAST(op))\n#endif\n\n// Create a new strong reference to an object:\n// increment the reference count of the object and return the object.\nPyAPI_FUNC(PyObject*) Py_NewRef(PyObject *obj);\n\n// Similar to Py_NewRef(), but the object can be NULL.\nPyAPI_FUNC(PyObject*) Py_XNewRef(PyObject *obj);\n\nstatic inline PyObject* _Py_NewRef(PyObject *obj)\n{\n    Py_INCREF(obj);\n    return obj;\n}\n\nstatic inline PyObject* _Py_XNewRef(PyObject *obj)\n{\n    Py_XINCREF(obj);\n    return obj;\n}\n\n// Py_NewRef() and Py_XNewRef() are exported as functions for the stable ABI.\n// Names overridden with macros by static inline functions for best\n// performances.\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_NewRef(obj) _Py_NewRef(_PyObject_CAST(obj))\n#  define Py_XNewRef(obj) _Py_XNewRef(_PyObject_CAST(obj))\n#else\n#  define Py_NewRef(obj) _Py_NewRef(obj)\n#  define Py_XNewRef(obj) _Py_XNewRef(obj)\n#endif\n\n\n#define Py_CONSTANT_NONE 0\n#define Py_CONSTANT_FALSE 1\n#define Py_CONSTANT_TRUE 2\n#define Py_CONSTANT_ELLIPSIS 3\n#define Py_CONSTANT_NOT_IMPLEMENTED 4\n#define Py_CONSTANT_ZERO 5\n#define Py_CONSTANT_ONE 6\n#define Py_CONSTANT_EMPTY_STR 7\n#define Py_CONSTANT_EMPTY_BYTES 8\n#define Py_CONSTANT_EMPTY_TUPLE 9\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject*) Py_GetConstant(unsigned int constant_id);\nPyAPI_FUNC(PyObject*) Py_GetConstantBorrowed(unsigned int constant_id);\n#endif\n\n\n/*\n_Py_NoneStruct is an object of undefined type which can be used in contexts\nwhere NULL (nil) is not suitable (since NULL often means 'error').\n*/\nPyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_None Py_GetConstantBorrowed(Py_CONSTANT_NONE)\n#else\n#  define Py_None (&_Py_NoneStruct)\n#endif\n\n// Test if an object is the None singleton, the same as \"x is None\" in Python.\nPyAPI_FUNC(int) Py_IsNone(PyObject *x);\n#define Py_IsNone(x) Py_Is((x), Py_None)\n\n/* Macro for returning Py_None from a function */\n#define Py_RETURN_NONE return Py_None\n\n/*\nPy_NotImplemented is a singleton used to signal that an operation is\nnot implemented for a given type combination.\n*/\nPyAPI_DATA(PyObject) _Py_NotImplementedStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_NotImplemented Py_GetConstantBorrowed(Py_CONSTANT_NOT_IMPLEMENTED)\n#else\n#  define Py_NotImplemented (&_Py_NotImplementedStruct)\n#endif\n\n/* Macro for returning Py_NotImplemented from a function */\n#define Py_RETURN_NOTIMPLEMENTED return Py_NotImplemented\n\n/* Rich comparison opcodes */\n#define Py_LT 0\n#define Py_LE 1\n#define Py_EQ 2\n#define Py_NE 3\n#define Py_GT 4\n#define Py_GE 5\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000\n/* Result of calling PyIter_Send */\ntypedef enum {\n    PYGEN_RETURN = 0,\n    PYGEN_ERROR = -1,\n    PYGEN_NEXT = 1,\n} PySendResult;\n#endif\n\n/*\n * Macro for implementing rich comparisons\n *\n * Needs to be a macro because any C-comparable type can be used.\n */\n#define Py_RETURN_RICHCOMPARE(val1, val2, op)                               \\\n    do {                                                                    \\\n        switch (op) {                                                       \\\n        case Py_EQ: if ((val1) == (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_NE: if ((val1) != (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_LT: if ((val1) < (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_GT: if ((val1) > (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_LE: if ((val1) <= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_GE: if ((val1) >= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        default:                                                            \\\n            Py_UNREACHABLE();                                               \\\n        }                                                                   \\\n    } while (0)\n\n\n/*\nMore conventions\n================\n\nArgument Checking\n-----------------\n\nFunctions that take objects as arguments normally don't check for nil\narguments, but they do check the type of the argument, and return an\nerror if the function doesn't apply to the type.\n\nFailure Modes\n-------------\n\nFunctions may fail for a variety of reasons, including running out of\nmemory.  This is communicated to the caller in two ways: an error string\nis set (see errors.h), and the function result differs: functions that\nnormally return a pointer return NULL for failure, functions returning\nan integer return -1 (which could be a legal return value too!), and\nother functions return 0 for success and -1 for failure.\nCallers should always check for errors before using the result.  If\nan error was set, the caller must either explicitly clear it, or pass\nthe error on to its caller.\n\nReference Counts\n----------------\n\nIt takes a while to get used to the proper usage of reference counts.\n\nFunctions that create an object set the reference count to 1; such new\nobjects must be stored somewhere or destroyed again with Py_DECREF().\nSome functions that 'store' objects, such as PyTuple_SetItem() and\nPyList_SetItem(),\ndon't increment the reference count of the object, since the most\nfrequent use is to store a fresh object.  Functions that 'retrieve'\nobjects, such as PyTuple_GetItem() and PyDict_GetItemString(), also\ndon't increment\nthe reference count, since most frequently the object is only looked at\nquickly.  Thus, to retrieve an object and store it again, the caller\nmust call Py_INCREF() explicitly.\n\nNOTE: functions that 'consume' a reference count, like\nPyList_SetItem(), consume the reference even if the object wasn't\nsuccessfully stored, to simplify error handling.\n\nIt seems attractive to make other functions that take an object as\nargument consume a reference count; however, this may quickly get\nconfusing (even the current practice is already confusing).  Consider\nit carefully, it may save lots of calls to Py_INCREF() and Py_DECREF() at\ntimes.\n*/\n\n#ifndef Py_LIMITED_API\n#  define Py_CPYTHON_OBJECT_H\n#  include \"cpython/object.h\"\n#  undef Py_CPYTHON_OBJECT_H\n#endif\n\n\nstatic inline int\nPyType_HasFeature(PyTypeObject *type, unsigned long feature)\n{\n    unsigned long flags;\n#ifdef Py_LIMITED_API\n    // PyTypeObject is opaque in the limited C API\n    flags = PyType_GetFlags(type);\n#else\n#   ifdef Py_GIL_DISABLED\n        flags = _Py_atomic_load_ulong_relaxed(&type->tp_flags);\n#   else\n        flags = type->tp_flags;\n#   endif\n#endif\n    return ((flags & feature) != 0);\n}\n\n#define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))\n\nstatic inline int PyType_Check(PyObject *op) {\n    return PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))\n#endif\n\n#define _PyType_CAST(op) \\\n    (assert(PyType_Check(op)), _Py_CAST(PyTypeObject*, (op)))\n\nstatic inline int PyType_CheckExact(PyObject *op) {\n    return Py_IS_TYPE(op, &PyType_Type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_CheckExact(op) PyType_CheckExact(_PyObject_CAST(op))\n#endif\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject *) PyType_GetModuleByDef(PyTypeObject *, PyModuleDef *);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n#endif   // !Py_OBJECT_H\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "./Include/internal/pycore_moduleobject.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_INTERNAL_MODULEOBJECT_H\n#define Py_INTERNAL_MODULEOBJECT_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef Py_BUILD_CORE\n#  error \"this header requires Py_BUILD_CORE define\"\n#endif\n\nextern void _PyModule_Clear(PyObject *);\nextern void _PyModule_ClearDict(PyObject *);\nextern int _PyModuleSpec_IsInitializing(PyObject *);\n\nextern int _PyModule_IsExtension(PyObject *obj);\n\ntypedef struct {\n    PyObject_HEAD\n    PyObject *md_dict;\n    PyModuleDef *md_def;\n    void *md_state;\n    PyObject *md_weaklist;\n    // for logging purposes after md_dict is cleared\n    PyObject *md_name;\n#ifdef Py_GIL_DISABLED\n    void *md_gil;\n#endif\n} PyModuleObject;\n\nstatic inline PyModuleDef* _PyModule_GetDef(PyObject *mod) {\n    assert(PyModule_Check(mod));\n    return ((PyModuleObject *)mod)->md_def;\n}\n\nstatic inline void* _PyModule_GetState(PyObject* mod) {\n    assert(PyModule_Check(mod));\n    return ((PyModuleObject *)mod)->md_state;\n}\n\nstatic inline PyObject* _PyModule_GetDict(PyObject *mod) {\n    assert(PyModule_Check(mod));\n    PyObject *dict = ((PyModuleObject *)mod) -> md_dict;\n    // _PyModule_GetDict(mod) must not be used after calling module_clear(mod)\n    assert(dict != NULL);\n    return dict;  // borrowed reference\n}\n\nPyObject* _Py_module_getattro_impl(PyModuleObject *m, PyObject *name, int suppress);\nPyObject* _Py_module_getattro(PyModuleObject *m, PyObject *name);\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_INTERNAL_MODULEOBJECT_H */\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 891,
                                       "gcc/analyzer/saved_diagnostic/snode": 3397,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct PyObject *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 2},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'op'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 305,
                                                                       "startColumn": 12,
                                                                       "endColumn": 22},
                                                            "contextRegion": {"startLine": 305,
                                                                              "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}},
                                       "logicalLocations": [{"name": "Py_DECREF",
                                                             "fullyQualifiedName": "Py_DECREF",
                                                             "decoratedName": "Py_DECREF",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2612,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2612,
                                                                                                                           "snippet": {"text": "delta_remainder(PyObject *left, PyObject *right)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_remainder.part.0'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2,
                                                                                                                                 "dst_idx": 2461,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2622,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 64},
                                                                                                         "contextRegion": {"startLine": 2622,
                                                                                                                           "snippet": {"text": "    pyus_left = delta_to_microseconds((PyDateTime_Delta *)left);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'delta_to_microseconds' from 'delta_remainder.part.0'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2110,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 2110,
                                                                                                                           "snippet": {"text": "delta_to_microseconds(PyDateTime_Delta *self)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_to_microseconds'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2117,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 26},
                                                                                                         "contextRegion": {"startLine": 2117,
                                                                                                                           "snippet": {"text": "    PyObject *current_mod = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'current_mod' is NULL"}},
                                                                       "kinds": ["release",
                                                                                 "memory"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2462,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 3328,
                                                                                                                                 "dst_idx": 3336,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 153,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 53},
                                                                                                         "contextRegion": {"startLine": 153,
                                                                                                                           "snippet": {"text": "    PyObject *mod = get_current_module(interp, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'get_current_module' from '_get_current_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 114,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 114,
                                                                                                                           "snippet": {"text": "get_current_module(PyInterpreterState *interp, int *p_reloading)\n"}}},
                                                                                    "logicalLocations": [{"name": "get_current_module",
                                                                                                          "fullyQualifiedName": "get_current_module",
                                                                                                          "decoratedName": "get_current_module",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'get_current_module'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 116,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 116,
                                                                                                                           "snippet": {"text": "    PyObject *mod = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "get_current_module",
                                                                                                          "fullyQualifiedName": "get_current_module",
                                                                                                          "decoratedName": "get_current_module",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'mod' is NULL"}},
                                                                       "kinds": ["release",
                                                                                 "memory"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3354,
                                                                                                                                 "dst_idx": 3329,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 153,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 53},
                                                                                                         "contextRegion": {"startLine": 153,
                                                                                                                           "snippet": {"text": "    PyObject *mod = get_current_module(interp, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to '_get_current_state' from 'get_current_module'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2463,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_to_microseconds' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2464,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2121,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2121,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2464,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2122,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 2122,
                                                                                                                           "snippet": {"text": "        goto Done;\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2154,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2154,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES",
                                                                                      "gcc/analyzer/checker_event/original_depth": 3},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2156,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2156,
                                                                                                                           "snippet": {"text": "    RELEASE_CURRENT_STATE(st, current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2156,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2156,
                                                                                                                           "snippet": {"text": "    RELEASE_CURRENT_STATE(st, current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'current_mod' is NULL"}},
                                                                       "kinds": ["release",
                                                                                 "memory"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2488,
                                                                                                                                 "dst_idx": 3395,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2156,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2156,
                                                                                                                           "snippet": {"text": "    RELEASE_CURRENT_STATE(st, current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'Py_DECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 896,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 896,
                                                                                                                           "snippet": {"text": "static inline void Py_DECREF(PyObject *op)\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_DECREF",
                                                                                                          "fullyQualifiedName": "Py_DECREF",
                                                                                                          "decoratedName": "Py_DECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'Py_DECREF'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3396,
                                                                                                                                 "dst_idx": 3397,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 899,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 899,
                                                                                                                           "snippet": {"text": "    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_DECREF",
                                                                                                          "fullyQualifiedName": "Py_DECREF",
                                                                                                          "decoratedName": "Py_DECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 903,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 903,
                                                                                                                           "snippet": {"text": "    if (_Py_IsOwnedByCurrentThread(op)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_DECREF",
                                                                                                          "fullyQualifiedName": "Py_DECREF",
                                                                                                          "decoratedName": "Py_DECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_Py_IsOwnedByCurrentThread' from 'Py_DECREF'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "Py_DECREF",
                                                                                                                                     "fullyQualifiedName": "Py_DECREF",
                                                                                                                                     "decoratedName": "Py_DECREF",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3396,
                                                                                                                                 "dst_idx": 3397,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 305,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 305,
                                                                                                                           "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}},
                                                                                    "logicalLocations": [{"name": "_Py_IsOwnedByCurrentThread",
                                                                                                          "fullyQualifiedName": "_Py_IsOwnedByCurrentThread",
                                                                                                          "decoratedName": "_Py_IsOwnedByCurrentThread",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "Py_DECREF",
                                                                                                                                     "fullyQualifiedName": "Py_DECREF",
                                                                                                                                     "decoratedName": "Py_DECREF",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 305,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 305,
                                                                                                                           "snippet": {"text": "    return ob->ob_tid == _Py_ThreadId();\n"}}},
                                                                                    "logicalLocations": [{"name": "_Py_IsOwnedByCurrentThread",
                                                                                                          "fullyQualifiedName": "_Py_IsOwnedByCurrentThread",
                                                                                                          "decoratedName": "_Py_IsOwnedByCurrentThread",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'op'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 25}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 519,
                                       "gcc/analyzer/saved_diagnostic/snode": 2465,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct datetime_state *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 0},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'st'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 2123,
                                                                       "startColumn": 10,
                                                                       "endColumn": 54},
                                                            "contextRegion": {"startLine": 2123,
                                                                              "snippet": {"text": "    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n"}}},
                                       "logicalLocations": [{"name": "delta_to_microseconds",
                                                             "fullyQualifiedName": "delta_to_microseconds",
                                                             "decoratedName": "delta_to_microseconds",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2612,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2612,
                                                                                                                           "snippet": {"text": "delta_remainder(PyObject *left, PyObject *right)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_remainder.part.0'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2,
                                                                                                                                 "dst_idx": 2461,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2622,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 64},
                                                                                                         "contextRegion": {"startLine": 2622,
                                                                                                                           "snippet": {"text": "    pyus_left = delta_to_microseconds((PyDateTime_Delta *)left);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'delta_to_microseconds' from 'delta_remainder.part.0'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2110,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 2110,
                                                                                                                           "snippet": {"text": "delta_to_microseconds(PyDateTime_Delta *self)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_to_microseconds'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2462,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2463,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "return of NULL to 'delta_to_microseconds' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2121,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2121,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2123,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 2123,
                                                                                                                           "snippet": {"text": "    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2123,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 2123,
                                                                                                                           "snippet": {"text": "    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'st'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 2126,
                                       "gcc/analyzer/saved_diagnostic/snode": 2415,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct datetime_state *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 6},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'st'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 2199,
                                                                       "startColumn": 13,
                                                                       "endColumn": 58},
                                                            "contextRegion": {"startLine": 2199,
                                                                              "snippet": {"text": "    tuple = checked_divmod(pyus, CONST_US_PER_SECOND(st));\n"}}},
                                       "logicalLocations": [{"name": "microseconds_to_delta_ex",
                                                             "fullyQualifiedName": "microseconds_to_delta_ex",
                                                             "decoratedName": "microseconds_to_delta_ex",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2612,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2612,
                                                                                                                           "snippet": {"text": "delta_remainder(PyObject *left, PyObject *right)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_remainder.part.0'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2,
                                                                                                                                 "dst_idx": 2461,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2622,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 64},
                                                                                                         "contextRegion": {"startLine": 2622,
                                                                                                                           "snippet": {"text": "    pyus_left = delta_to_microseconds((PyDateTime_Delta *)left);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'delta_to_microseconds' from 'delta_remainder.part.0'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2110,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 2110,
                                                                                                                           "snippet": {"text": "delta_to_microseconds(PyDateTime_Delta *self)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_to_microseconds'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2462,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 161,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 49},
                                                                                                         "contextRegion": {"startLine": 161,
                                                                                                                           "snippet": {"text": "        mod = PyImport_ImportModule(\"_datetime\");\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 162,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 162,
                                                                                                                           "snippet": {"text": "        if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mod' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 166,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 166,
                                                                                                                           "snippet": {"text": "    datetime_state *st = get_module_state(mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'get_module_state' from '_get_current_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 105,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 105,
                                                                                                                           "snippet": {"text": "    void *state = _PyModule_GetState(module);\n"}}},
                                                                                    "logicalLocations": [{"name": "get_module_state",
                                                                                                          "fullyQualifiedName": "get_module_state",
                                                                                                          "decoratedName": "get_module_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_PyModule_GetState' from 'get_module_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "_get_current_state",
                                                                                                                                     "fullyQualifiedName": "_get_current_state",
                                                                                                                                     "decoratedName": "_get_current_state",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_moduleobject.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 37,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 37,
                                                                                                                           "snippet": {"text": "    return ((PyModuleObject *)mod)->md_state;\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyModule_GetState",
                                                                                                          "fullyQualifiedName": "_PyModule_GetState",
                                                                                                          "decoratedName": "_PyModule_GetState",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2463,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_to_microseconds' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2121,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2121,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2123,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 2123,
                                                                                                                           "snippet": {"text": "    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2465,
                                                                                                                                 "dst_idx": 2467,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2124,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2124,
                                                                                                                           "snippet": {"text": "    if (x2 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2465,
                                                                                                                                 "dst_idx": 2467,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2126,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2126,
                                                                                                                           "snippet": {"text": "    Py_SETREF(x1, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2468,
                                                                                                                                 "dst_idx": 2470,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2130,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2130,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2468,
                                                                                                                                 "dst_idx": 2470,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2132,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 2132,
                                                                                                                           "snippet": {"text": "    x3 = PyNumber_Add(x1, x2);          /* days and seconds in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2470,
                                                                                                                                 "dst_idx": 2472,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2133,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2133,
                                                                                                                           "snippet": {"text": "    if (x3 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2470,
                                                                                                                                 "dst_idx": 2472,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2135,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2135,
                                                                                                                           "snippet": {"text": "    Py_DECREF(x1);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2474,
                                                                                                                                 "dst_idx": 2476,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2141,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2141,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2474,
                                                                                                                                 "dst_idx": 2476,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2143,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2143,
                                                                                                                           "snippet": {"text": "    Py_SETREF(x3, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2477,
                                                                                                                                 "dst_idx": 2479,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2147,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2147,
                                                                                                                           "snippet": {"text": "    if (x2 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2477,
                                                                                                                                 "dst_idx": 2479,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2149,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 34},
                                                                                                         "contextRegion": {"startLine": 2149,
                                                                                                                           "snippet": {"text": "    result = PyNumber_Add(x1, x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2154,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2154,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2482,
                                                                                                                                 "dst_idx": 2483,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2482,
                                                                                                                                 "dst_idx": 2483,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1036,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 1036,
                                                                                                                           "snippet": {"text": "        Py_DECREF(op);\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2155,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2155,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x3);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2485,
                                                                                                                                 "dst_idx": 2488,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x3' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2485,
                                                                                                                                 "dst_idx": 2488,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2156,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2156,
                                                                                                                           "snippet": {"text": "    RELEASE_CURRENT_STATE(st, current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 2490,
                                                                                                                                 "dst_idx": 3,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2622,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 64},
                                                                                                         "contextRegion": {"startLine": 2622,
                                                                                                                           "snippet": {"text": "    pyus_left = delta_to_microseconds((PyDateTime_Delta *)left);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_remainder.part.0' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3,
                                                                                                                                 "dst_idx": 6,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2623,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2623,
                                                                                                                           "snippet": {"text": "    if (pyus_left == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'pyus_left' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3,
                                                                                                                                 "dst_idx": 6,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2626,
                                                                                                                    "startColumn": 18,
                                                                                                                    "endColumn": 66},
                                                                                                         "contextRegion": {"startLine": 2626,
                                                                                                                           "snippet": {"text": "    pyus_right = delta_to_microseconds((PyDateTime_Delta *)right);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 6,
                                                                                                                                 "dst_idx": 2461,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2626,
                                                                                                                    "startColumn": 18,
                                                                                                                    "endColumn": 66},
                                                                                                         "contextRegion": {"startLine": 2626,
                                                                                                                           "snippet": {"text": "    pyus_right = delta_to_microseconds((PyDateTime_Delta *)right);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'delta_to_microseconds' from 'delta_remainder.part.0'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2110,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 2110,
                                                                                                                           "snippet": {"text": "delta_to_microseconds(PyDateTime_Delta *self)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_to_microseconds'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2462,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 38},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(39)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 39},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(40)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 40},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(41)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 41},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(42)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 42},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(43)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 161,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 49},
                                                                                                         "contextRegion": {"startLine": 161,
                                                                                                                           "snippet": {"text": "        mod = PyImport_ImportModule(\"_datetime\");\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 43},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(44)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 162,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 162,
                                                                                                                           "snippet": {"text": "        if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mod' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 44},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(45)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 166,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 166,
                                                                                                                           "snippet": {"text": "    datetime_state *st = get_module_state(mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'get_module_state' from '_get_current_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 45},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(46)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 105,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 105,
                                                                                                                           "snippet": {"text": "    void *state = _PyModule_GetState(module);\n"}}},
                                                                                    "logicalLocations": [{"name": "get_module_state",
                                                                                                          "fullyQualifiedName": "get_module_state",
                                                                                                          "decoratedName": "get_module_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_PyModule_GetState' from 'get_module_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 46},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(47)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "_get_current_state",
                                                                                                                                     "fullyQualifiedName": "_get_current_state",
                                                                                                                                     "decoratedName": "_get_current_state",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_moduleobject.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 37,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 37,
                                                                                                                           "snippet": {"text": "    return ((PyModuleObject *)mod)->md_state;\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyModule_GetState",
                                                                                                          "fullyQualifiedName": "_PyModule_GetState",
                                                                                                          "decoratedName": "_PyModule_GetState",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 47},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(48)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2463,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_to_microseconds' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 48},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(49)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2121,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2121,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 49},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(50)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2123,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 2123,
                                                                                                                           "snippet": {"text": "    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 50},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(51)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2465,
                                                                                                                                 "dst_idx": 2467,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2124,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2124,
                                                                                                                           "snippet": {"text": "    if (x2 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 51},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(52)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2465,
                                                                                                                                 "dst_idx": 2467,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2126,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2126,
                                                                                                                           "snippet": {"text": "    Py_SETREF(x1, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 52},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(53)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2468,
                                                                                                                                 "dst_idx": 2470,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2130,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2130,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 53},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(54)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2468,
                                                                                                                                 "dst_idx": 2470,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2132,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 2132,
                                                                                                                           "snippet": {"text": "    x3 = PyNumber_Add(x1, x2);          /* days and seconds in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 54},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(55)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2470,
                                                                                                                                 "dst_idx": 2472,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2133,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2133,
                                                                                                                           "snippet": {"text": "    if (x3 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 55},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(56)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2470,
                                                                                                                                 "dst_idx": 2472,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2135,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2135,
                                                                                                                           "snippet": {"text": "    Py_DECREF(x1);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 56},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(57)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2474,
                                                                                                                                 "dst_idx": 2476,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2141,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2141,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 57},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(58)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2474,
                                                                                                                                 "dst_idx": 2476,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2143,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2143,
                                                                                                                           "snippet": {"text": "    Py_SETREF(x3, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 58},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(59)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2477,
                                                                                                                                 "dst_idx": 2479,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2147,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2147,
                                                                                                                           "snippet": {"text": "    if (x2 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 59},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(60)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2477,
                                                                                                                                 "dst_idx": 2479,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2149,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 34},
                                                                                                         "contextRegion": {"startLine": 2149,
                                                                                                                           "snippet": {"text": "    result = PyNumber_Add(x1, x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 60},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(61)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2154,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2154,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 61},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(62)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2482,
                                                                                                                                 "dst_idx": 2483,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 62},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(63)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2482,
                                                                                                                                 "dst_idx": 2483,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1036,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 1036,
                                                                                                                           "snippet": {"text": "        Py_DECREF(op);\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 63},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(64)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2155,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2155,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x3);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 64},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(65)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2485,
                                                                                                                                 "dst_idx": 2488,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x3' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 65},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(66)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2485,
                                                                                                                                 "dst_idx": 2488,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2156,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2156,
                                                                                                                           "snippet": {"text": "    RELEASE_CURRENT_STATE(st, current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 66},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(67)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 2490,
                                                                                                                                 "dst_idx": 7,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2626,
                                                                                                                    "startColumn": 18,
                                                                                                                    "endColumn": 66},
                                                                                                         "contextRegion": {"startLine": 2626,
                                                                                                                           "snippet": {"text": "    pyus_right = delta_to_microseconds((PyDateTime_Delta *)right);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_remainder.part.0' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 67},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(68)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 7,
                                                                                                                                 "dst_idx": 10,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2627,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2627,
                                                                                                                           "snippet": {"text": "    if (pyus_right == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'pyus_right' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 68},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(69)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 7,
                                                                                                                                 "dst_idx": 10,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2632,
                                                                                                                    "startColumn": 22,
                                                                                                                    "endColumn": 63},
                                                                                                         "contextRegion": {"startLine": 2632,
                                                                                                                           "snippet": {"text": "    pyus_remainder = PyNumber_Remainder(pyus_left, pyus_right);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 69},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(70)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 12,
                                                                                                                                 "dst_idx": 14,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2635,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2635,
                                                                                                                           "snippet": {"text": "    if (pyus_remainder == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'pyus_remainder' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 70},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(71)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 12,
                                                                                                                                 "dst_idx": 14,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2638,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 2638,
                                                                                                                           "snippet": {"text": "    remainder = microseconds_to_delta(pyus_remainder);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 71},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(72)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 14,
                                                                                                                                 "dst_idx": 2413,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2638,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 2638,
                                                                                                                           "snippet": {"text": "    remainder = microseconds_to_delta(pyus_remainder);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_remainder.part.0",
                                                                                                          "fullyQualifiedName": "delta_remainder.part.0",
                                                                                                          "decoratedName": "delta_remainder.part.0",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'microseconds_to_delta_ex' from 'delta_remainder.part.0'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 72},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(73)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2186,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 25},
                                                                                                         "contextRegion": {"startLine": 2186,
                                                                                                                           "snippet": {"text": "microseconds_to_delta_ex(PyObject *pyus, PyTypeObject *type)\n"}}},
                                                                                    "logicalLocations": [{"name": "microseconds_to_delta_ex",
                                                                                                          "fullyQualifiedName": "microseconds_to_delta_ex",
                                                                                                          "decoratedName": "microseconds_to_delta_ex",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'microseconds_to_delta_ex'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 73},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(74)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2414,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2197,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2197,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "microseconds_to_delta_ex",
                                                                                                          "fullyQualifiedName": "microseconds_to_delta_ex",
                                                                                                          "decoratedName": "microseconds_to_delta_ex",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'microseconds_to_delta_ex'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 74},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(75)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 75},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(76)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 76},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(77)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 77},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(78)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2415,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2197,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2197,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "microseconds_to_delta_ex",
                                                                                                          "fullyQualifiedName": "microseconds_to_delta_ex",
                                                                                                          "decoratedName": "microseconds_to_delta_ex",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "return of NULL to 'microseconds_to_delta_ex' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 78},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(79)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2199,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 58},
                                                                                                         "contextRegion": {"startLine": 2199,
                                                                                                                           "snippet": {"text": "    tuple = checked_divmod(pyus, CONST_US_PER_SECOND(st));\n"}}},
                                                                                    "logicalLocations": [{"name": "microseconds_to_delta_ex",
                                                                                                          "fullyQualifiedName": "microseconds_to_delta_ex",
                                                                                                          "decoratedName": "microseconds_to_delta_ex",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'st'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 79}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 35878,
                                       "gcc/analyzer/saved_diagnostic/snode": 2036,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct datetime_state *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 21},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'st'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 3002,
                                                                       "startColumn": 21,
                                                                       "endColumn": 85},
                                                            "contextRegion": {"startLine": 3002,
                                                                              "snippet": {"text": "    total_seconds = PyNumber_TrueDivide(total_microseconds, CONST_US_PER_SECOND(st));\n"}}},
                                       "logicalLocations": [{"name": "delta_total_seconds",
                                                             "fullyQualifiedName": "delta_total_seconds",
                                                             "decoratedName": "delta_total_seconds",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6707,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 6707,
                                                                                                                           "snippet": {"text": "datetime_timestamp(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'datetime_timestamp'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6711,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 6711,
                                                                                                                           "snippet": {"text": "    if (HASTZINFO(self) && self->tzinfo != Py_None) {\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6712,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 6712,
                                                                                                                           "snippet": {"text": "        PyObject *current_mod = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 551,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6713,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 31},
                                                                                                         "contextRegion": {"startLine": 6713,
                                                                                                                           "snippet": {"text": "        datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'datetime_timestamp'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 161,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 49},
                                                                                                         "contextRegion": {"startLine": 161,
                                                                                                                           "snippet": {"text": "        mod = PyImport_ImportModule(\"_datetime\");\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 162,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 162,
                                                                                                                           "snippet": {"text": "        if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mod' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 166,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 166,
                                                                                                                           "snippet": {"text": "    datetime_state *st = get_module_state(mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'get_module_state' from '_get_current_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 105,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 105,
                                                                                                                           "snippet": {"text": "    void *state = _PyModule_GetState(module);\n"}}},
                                                                                    "logicalLocations": [{"name": "get_module_state",
                                                                                                          "fullyQualifiedName": "get_module_state",
                                                                                                          "decoratedName": "get_module_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_PyModule_GetState' from 'get_module_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "_get_current_state",
                                                                                                                                     "fullyQualifiedName": "_get_current_state",
                                                                                                                                     "decoratedName": "_get_current_state",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_moduleobject.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 37,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 37,
                                                                                                                           "snippet": {"text": "    return ((PyModuleObject *)mod)->md_state;\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyModule_GetState",
                                                                                                          "fullyQualifiedName": "_PyModule_GetState",
                                                                                                          "decoratedName": "_PyModule_GetState",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 552,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6713,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 31},
                                                                                                         "contextRegion": {"startLine": 6713,
                                                                                                                           "snippet": {"text": "        datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'datetime_timestamp' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 554,
                                                                                                                                 "dst_idx": 557,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6718,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 6718,
                                                                                                                           "snippet": {"text": "        if (delta == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'delta' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 554,
                                                                                                                                 "dst_idx": 557,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6720,
                                                                                                                    "startColumn": 18,
                                                                                                                    "endColumn": 50},
                                                                                                         "contextRegion": {"startLine": 6720,
                                                                                                                           "snippet": {"text": "        result = delta_total_seconds(delta, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 557,
                                                                                                                                 "dst_idx": 2032,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6720,
                                                                                                                    "startColumn": 18,
                                                                                                                    "endColumn": 50},
                                                                                                         "contextRegion": {"startLine": 6720,
                                                                                                                           "snippet": {"text": "        result = delta_total_seconds(delta, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'delta_total_seconds' from 'datetime_timestamp'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2990,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 2990,
                                                                                                                           "snippet": {"text": "delta_total_seconds(PyObject *self, PyObject *Py_UNUSED(ignored))\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_total_seconds'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2033,
                                                                                                                                 "dst_idx": 2461,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2995,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 73},
                                                                                                         "contextRegion": {"startLine": 2995,
                                                                                                                           "snippet": {"text": "    total_microseconds = delta_to_microseconds((PyDateTime_Delta *)self);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'delta_to_microseconds' from 'delta_total_seconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2110,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 2110,
                                                                                                                           "snippet": {"text": "delta_to_microseconds(PyDateTime_Delta *self)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'delta_to_microseconds'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2462,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3330,
                                                                                                                                 "dst_idx": 3332,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 161,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 49},
                                                                                                         "contextRegion": {"startLine": 161,
                                                                                                                           "snippet": {"text": "        mod = PyImport_ImportModule(\"_datetime\");\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 162,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 162,
                                                                                                                           "snippet": {"text": "        if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mod' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 166,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 166,
                                                                                                                           "snippet": {"text": "    datetime_state *st = get_module_state(mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'get_module_state' from '_get_current_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 105,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 105,
                                                                                                                           "snippet": {"text": "    void *state = _PyModule_GetState(module);\n"}}},
                                                                                    "logicalLocations": [{"name": "get_module_state",
                                                                                                          "fullyQualifiedName": "get_module_state",
                                                                                                          "decoratedName": "get_module_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_PyModule_GetState' from 'get_module_state'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "_get_current_state",
                                                                                                                                     "fullyQualifiedName": "_get_current_state",
                                                                                                                                     "decoratedName": "_get_current_state",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 4,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3332,
                                                                                                                                 "dst_idx": 3333,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_moduleobject.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 37,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 37,
                                                                                                                           "snippet": {"text": "    return ((PyModuleObject *)mod)->md_state;\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyModule_GetState",
                                                                                                          "fullyQualifiedName": "_PyModule_GetState",
                                                                                                          "decoratedName": "_PyModule_GetState",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 6,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2463,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2118,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 2118,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_to_microseconds' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2121,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2121,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2463,
                                                                                                                                 "dst_idx": 2465,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2123,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 2123,
                                                                                                                           "snippet": {"text": "    x2 = PyNumber_Multiply(x1, CONST_SEC_PER_DAY(st));        /* days in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2465,
                                                                                                                                 "dst_idx": 2467,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2124,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2124,
                                                                                                                           "snippet": {"text": "    if (x2 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2465,
                                                                                                                                 "dst_idx": 2467,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2126,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2126,
                                                                                                                           "snippet": {"text": "    Py_SETREF(x1, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2468,
                                                                                                                                 "dst_idx": 2470,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2130,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2130,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2468,
                                                                                                                                 "dst_idx": 2470,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2132,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 2132,
                                                                                                                           "snippet": {"text": "    x3 = PyNumber_Add(x1, x2);          /* days and seconds in seconds */\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2470,
                                                                                                                                 "dst_idx": 2472,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2133,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2133,
                                                                                                                           "snippet": {"text": "    if (x3 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 38},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(39)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2470,
                                                                                                                                 "dst_idx": 2472,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2135,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2135,
                                                                                                                           "snippet": {"text": "    Py_DECREF(x1);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 39},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(40)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2474,
                                                                                                                                 "dst_idx": 2476,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2141,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2141,
                                                                                                                           "snippet": {"text": "    if (x1 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 40},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(41)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2474,
                                                                                                                                 "dst_idx": 2476,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2143,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2143,
                                                                                                                           "snippet": {"text": "    Py_SETREF(x3, NULL);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 41},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(42)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2477,
                                                                                                                                 "dst_idx": 2479,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2147,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2147,
                                                                                                                           "snippet": {"text": "    if (x2 == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 42},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(43)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2477,
                                                                                                                                 "dst_idx": 2479,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2149,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 34},
                                                                                                         "contextRegion": {"startLine": 2149,
                                                                                                                           "snippet": {"text": "    result = PyNumber_Add(x1, x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 43},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(44)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2154,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2154,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x2);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 44},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(45)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2482,
                                                                                                                                 "dst_idx": 2483,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'x2' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 45},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(46)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2482,
                                                                                                                                 "dst_idx": 2483,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1036,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 1036,
                                                                                                                           "snippet": {"text": "        Py_DECREF(op);\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 46},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(47)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2155,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2155,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(x3);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_XDECREF' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 47},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(48)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "delta_to_microseconds",
                                                                                                                                     "fullyQualifiedName": "delta_to_microseconds",
                                                                                                                                     "decoratedName": "delta_to_microseconds",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2485,
                                                                                                                                 "dst_idx": 2488,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'x3' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 48},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(49)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2485,
                                                                                                                                 "dst_idx": 2488,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2156,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2156,
                                                                                                                           "snippet": {"text": "    RELEASE_CURRENT_STATE(st, current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_to_microseconds",
                                                                                                          "fullyQualifiedName": "delta_to_microseconds",
                                                                                                          "decoratedName": "delta_to_microseconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 49},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(50)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 2490,
                                                                                                                                 "dst_idx": 2034,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2995,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 73},
                                                                                                         "contextRegion": {"startLine": 2995,
                                                                                                                           "snippet": {"text": "    total_microseconds = delta_to_microseconds((PyDateTime_Delta *)self);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'delta_total_seconds' from 'delta_to_microseconds'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 50},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(51)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2034,
                                                                                                                                 "dst_idx": 2035,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2996,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2996,
                                                                                                                           "snippet": {"text": "    if (total_microseconds == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'total_microseconds' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 51},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(52)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 2034,
                                                                                                                                 "dst_idx": 2035,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2999,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 26},
                                                                                                         "contextRegion": {"startLine": 2999,
                                                                                                                           "snippet": {"text": "    PyObject *current_mod = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 52},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(53)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 2035,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3000,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 3000,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'delta_total_seconds'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 53},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(54)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 54},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(55)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 55},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(56)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 56},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(57)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 2036,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3000,
                                                                                                                    "startColumn": 26,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 3000,
                                                                                                                           "snippet": {"text": "    datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "return of NULL to 'delta_total_seconds' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 57},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(58)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3002,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 85},
                                                                                                         "contextRegion": {"startLine": 3002,
                                                                                                                           "snippet": {"text": "    total_seconds = PyNumber_TrueDivide(total_microseconds, CONST_US_PER_SECOND(st));\n"}}},
                                                                                    "logicalLocations": [{"name": "delta_total_seconds",
                                                                                                          "fullyQualifiedName": "delta_total_seconds",
                                                                                                          "decoratedName": "delta_total_seconds",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'st'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 58}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 31461,
                                       "gcc/analyzer/saved_diagnostic/snode": 552,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct datetime_state *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 16},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'st'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 6716,
                                                                       "startColumn": 17,
                                                                       "endColumn": 69},
                                                            "contextRegion": {"startLine": 6716,
                                                                              "snippet": {"text": "        delta = datetime_subtract((PyObject *)self, CONST_EPOCH(st));\n"}}},
                                       "logicalLocations": [{"name": "datetime_timestamp",
                                                             "fullyQualifiedName": "datetime_timestamp",
                                                             "decoratedName": "datetime_timestamp",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6707,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 6707,
                                                                                                                           "snippet": {"text": "datetime_timestamp(PyDateTime_DateTime *self, PyObject *Py_UNUSED(ignored))\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'datetime_timestamp'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6711,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 6711,
                                                                                                                           "snippet": {"text": "    if (HASTZINFO(self) && self->tzinfo != Py_None) {\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6712,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 6712,
                                                                                                                           "snippet": {"text": "        PyObject *current_mod = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 551,
                                                                                                                                 "dst_idx": 3327,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6713,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 31},
                                                                                                         "contextRegion": {"startLine": 6713,
                                                                                                                           "snippet": {"text": "        datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_get_current_state' from 'datetime_timestamp'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 150,
                                                                                                                           "snippet": {"text": "_get_current_state(PyObject **p_mod)\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_get_current_state'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 154,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 154,
                                                                                                                           "snippet": {"text": "    if (mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 3329,
                                                                                                                                 "dst_idx": 3330,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 156,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 156,
                                                                                                                           "snippet": {"text": "        if (PyErr_Occurred()) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_current_state",
                                                                                                          "fullyQualifiedName": "_get_current_state",
                                                                                                          "decoratedName": "_get_current_state",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 3335,
                                                                                                                                 "dst_idx": 552,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6713,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 31},
                                                                                                         "contextRegion": {"startLine": 6713,
                                                                                                                           "snippet": {"text": "        datetime_state *st = GET_CURRENT_STATE(current_mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "return of NULL to 'datetime_timestamp' from '_get_current_state'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_datetimemodule.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 6716,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 69},
                                                                                                         "contextRegion": {"startLine": 6716,
                                                                                                                           "snippet": {"text": "        delta = datetime_subtract((PyObject *)self, CONST_EPOCH(st));\n"}}},
                                                                                    "logicalLocations": [{"name": "datetime_timestamp",
                                                                                                          "fullyQualifiedName": "datetime_timestamp",
                                                                                                          "decoratedName": "datetime_timestamp",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'st'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 9}]}]}]}]}]}
