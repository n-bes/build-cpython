{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-null-dereference",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-dereference"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "476",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/476.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "Python/import.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/* Module definition and import implementation */\n\n#include \"Python.h\"\n#include \"pycore_ceval.h\"\n#include \"pycore_hashtable.h\"     // _Py_hashtable_new_full()\n#include \"pycore_import.h\"        // _PyImport_BootstrapImp()\n#include \"pycore_initconfig.h\"    // _PyStatus_OK()\n#include \"pycore_interp.h\"        // struct _import_runtime_state\n#include \"pycore_namespace.h\"     // _PyNamespace_Type\n#include \"pycore_object.h\"        // _Py_SetImmortal()\n#include \"pycore_pyerrors.h\"      // _PyErr_SetString()\n#include \"pycore_pyhash.h\"        // _Py_KeyedHash()\n#include \"pycore_pylifecycle.h\"\n#include \"pycore_pymem.h\"         // _PyMem_SetDefaultAllocator()\n#include \"pycore_pystate.h\"       // _PyInterpreterState_GET()\n#include \"pycore_sysmodule.h\"     // _PySys_Audit()\n#include \"pycore_time.h\"          // _PyTime_AsMicroseconds()\n#include \"pycore_weakref.h\"       // _PyWeakref_GET_REF()\n\n#include \"marshal.h\"              // PyMarshal_ReadObjectFromString()\n#include \"pycore_importdl.h\"      // _PyImport_DynLoadFiletab\n#include \"pydtrace.h\"             // PyDTrace_IMPORT_FIND_LOAD_START_ENABLED()\n#include <stdbool.h>              // bool\n\n#ifdef HAVE_FCNTL_H\n#include <fcntl.h>\n#endif\n\n\n/*[clinic input]\nmodule _imp\n[clinic start generated code]*/\n/*[clinic end generated code: output=da39a3ee5e6b4b0d input=9c332475d8686284]*/\n\n#include \"clinic/import.c.h\"\n\n\n#ifndef NDEBUG\nstatic bool\nis_interpreter_isolated(PyInterpreterState *interp)\n{\n    return !_Py_IsMainInterpreter(interp)\n        && !(interp->feature_flags & Py_RTFLAGS_USE_MAIN_OBMALLOC)\n        && interp->ceval.own_gil;\n}\n#endif\n\n\n/*******************************/\n/* process-global import state */\n/*******************************/\n\n/* This table is defined in config.c: */\nextern struct _inittab _PyImport_Inittab[];\n\n// This is not used after Py_Initialize() is called.\n// (See _PyRuntimeState.imports.inittab.)\nstruct _inittab *PyImport_Inittab = _PyImport_Inittab;\n// When we dynamically allocate a larger table for PyImport_ExtendInittab(),\n// we track the pointer here so we can deallocate it during finalization.\nstatic struct _inittab *inittab_copy = NULL;\n\n\n/*******************************/\n/* runtime-global import state */\n/*******************************/\n\n#define INITTAB _PyRuntime.imports.inittab\n#define LAST_MODULE_INDEX _PyRuntime.imports.last_module_index\n#define EXTENSIONS _PyRuntime.imports.extensions\n\n#define PKGCONTEXT (_PyRuntime.imports.pkgcontext)\n\n\n/*******************************/\n/* interpreter import state */\n/*******************************/\n\n#define MODULES(interp) \\\n    (interp)->imports.modules\n#define MODULES_BY_INDEX(interp) \\\n    (interp)->imports.modules_by_index\n#define IMPORTLIB(interp) \\\n    (interp)->imports.importlib\n#define OVERRIDE_MULTI_INTERP_EXTENSIONS_CHECK(interp) \\\n    (interp)->imports.override_multi_interp_extensions_check\n#define OVERRIDE_FROZEN_MODULES(interp) \\\n    (interp)->imports.override_frozen_modules\n#ifdef HAVE_DLOPEN\n#  define DLOPENFLAGS(interp) \\\n        (interp)->imports.dlopenflags\n#endif\n#define IMPORT_FUNC(interp) \\\n    (interp)->imports.import_func\n\n#define IMPORT_LOCK(interp) \\\n    (interp)->imports.lock\n\n#define FIND_AND_LOAD(interp) \\\n    (interp)->imports.find_and_load\n\n\n/*******************/\n/* the import lock */\n/*******************/\n\n/* Locking primitives to prevent parallel imports of the same module\n   in different threads to return with a partially loaded module.\n   These calls are serialized by the global interpreter lock. */\n\nvoid\n_PyImport_AcquireLock(PyInterpreterState *interp)\n{\n    _PyRecursiveMutex_Lock(&IMPORT_LOCK(interp));\n}\n\nvoid\n_PyImport_ReleaseLock(PyInterpreterState *interp)\n{\n    _PyRecursiveMutex_Unlock(&IMPORT_LOCK(interp));\n}\n\n\n/***************/\n/* sys.modules */\n/***************/\n\nPyObject *\n_PyImport_InitModules(PyInterpreterState *interp)\n{\n    assert(MODULES(interp) == NULL);\n    MODULES(interp) = PyDict_New();\n    if (MODULES(interp) == NULL) {\n        return NULL;\n    }\n    return MODULES(interp);\n}\n\nPyObject *\n_PyImport_GetModules(PyInterpreterState *interp)\n{\n    return MODULES(interp);\n}\n\nvoid\n_PyImport_ClearModules(PyInterpreterState *interp)\n{\n    Py_SETREF(MODULES(interp), NULL);\n}\n\nstatic inline PyObject *\nget_modules_dict(PyThreadState *tstate, bool fatal)\n{\n    /* Technically, it would make sense to incref the dict,\n     * since sys.modules could be swapped out and decref'ed to 0\n     * before the caller is done using it.  However, that is highly\n     * unlikely, especially since we can rely on a global lock\n     * (i.e. the GIL) for thread-safety. */\n    PyObject *modules = MODULES(tstate->interp);\n    if (modules == NULL) {\n        if (fatal) {\n            Py_FatalError(\"interpreter has no modules dictionary\");\n        }\n        _PyErr_SetString(tstate, PyExc_RuntimeError,\n                         \"unable to get sys.modules\");\n        return NULL;\n    }\n    return modules;\n}\n\nPyObject *\nPyImport_GetModuleDict(void)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    return get_modules_dict(tstate, true);\n}\n\nint\n_PyImport_SetModule(PyObject *name, PyObject *m)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *modules = get_modules_dict(tstate, true);\n    return PyObject_SetItem(modules, name, m);\n}\n\nint\n_PyImport_SetModuleString(const char *name, PyObject *m)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *modules = get_modules_dict(tstate, true);\n    return PyMapping_SetItemString(modules, name, m);\n}\n\nstatic PyObject *\nimport_get_module(PyThreadState *tstate, PyObject *name)\n{\n    PyObject *modules = get_modules_dict(tstate, false);\n    if (modules == NULL) {\n        return NULL;\n    }\n\n    PyObject *m;\n    Py_INCREF(modules);\n    (void)PyMapping_GetOptionalItem(modules, name, &m);\n    Py_DECREF(modules);\n    return m;\n}\n\nstatic int\nimport_ensure_initialized(PyInterpreterState *interp, PyObject *mod, PyObject *name)\n{\n    PyObject *spec;\n\n    /* Optimization: only call _bootstrap._lock_unlock_module() if\n       __spec__._initializing is true.\n       NOTE: because of this, initializing must be set *before*\n       stuffing the new module in sys.modules.\n    */\n    int rc = PyObject_GetOptionalAttr(mod, &_Py_ID(__spec__), &spec);\n    if (rc > 0) {\n        rc = _PyModuleSpec_IsInitializing(spec);\n        Py_DECREF(spec);\n    }\n    if (rc <= 0) {\n        return rc;\n    }\n    /* Wait until module is done importing. */\n    PyObject *value = PyObject_CallMethodOneArg(\n        IMPORTLIB(interp), &_Py_ID(_lock_unlock_module), name);\n    if (value == NULL) {\n        return -1;\n    }\n    Py_DECREF(value);\n    return 0;\n}\n\nstatic void remove_importlib_frames(PyThreadState *tstate);\n\nPyObject *\nPyImport_GetModule(PyObject *name)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *mod;\n\n    mod = import_get_module(tstate, name);\n    if (mod != NULL && mod != Py_None) {\n        if (import_ensure_initialized(tstate->interp, mod, name) < 0) {\n            Py_DECREF(mod);\n            remove_importlib_frames(tstate);\n            return NULL;\n        }\n    }\n    return mod;\n}\n\n/* Get the module object corresponding to a module name.\n   First check the modules dictionary if there's one there,\n   if not, create a new one and insert it in the modules dictionary. */\n\nstatic PyObject *\nimport_add_module(PyThreadState *tstate, PyObject *name)\n{\n    PyObject *modules = get_modules_dict(tstate, false);\n    if (modules == NULL) {\n        return NULL;\n    }\n\n    PyObject *m;\n    if (PyMapping_GetOptionalItem(modules, name, &m) < 0) {\n        return NULL;\n    }\n    if (m != NULL && PyModule_Check(m)) {\n        return m;\n    }\n    Py_XDECREF(m);\n    m = PyModule_NewObject(name);\n    if (m == NULL)\n        return NULL;\n    if (PyObject_SetItem(modules, name, m) != 0) {\n        Py_DECREF(m);\n        return NULL;\n    }\n\n    return m;\n}\n\nPyObject *\nPyImport_AddModuleRef(const char *name)\n{\n    PyObject *name_obj = PyUnicode_FromString(name);\n    if (name_obj == NULL) {\n        return NULL;\n    }\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *module = import_add_module(tstate, name_obj);\n    Py_DECREF(name_obj);\n    return module;\n}\n\n\nPyObject *\nPyImport_AddModuleObject(PyObject *name)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *mod = import_add_module(tstate, name);\n    if (!mod) {\n        return NULL;\n    }\n\n    // gh-86160: PyImport_AddModuleObject() returns a borrowed reference.\n    // Create a weak reference to produce a borrowed reference, since it can\n    // become NULL. sys.modules type can be different than dict and it is not\n    // guaranteed that it keeps a strong reference to the module. It can be a\n    // custom mapping with __getitem__() which returns a new object or removes\n    // returned object, or __setitem__ which does nothing. There is so much\n    // unknown.  With weakref we can be sure that we get either a reference to\n    // live object or NULL.\n    //\n    // Use PyImport_AddModuleRef() to avoid these issues.\n    PyObject *ref = PyWeakref_NewRef(mod, NULL);\n    Py_DECREF(mod);\n    if (ref == NULL) {\n        return NULL;\n    }\n    mod = _PyWeakref_GET_REF(ref);\n    Py_DECREF(ref);\n    Py_XDECREF(mod);\n\n    if (mod == NULL && !PyErr_Occurred()) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"sys.modules does not hold a strong reference \"\n                        \"to the module\");\n    }\n    return mod; /* borrowed reference */\n}\n\n\nPyObject *\nPyImport_AddModule(const char *name)\n{\n    PyObject *nameobj = PyUnicode_FromString(name);\n    if (nameobj == NULL) {\n        return NULL;\n    }\n    PyObject *module = PyImport_AddModuleObject(nameobj);\n    Py_DECREF(nameobj);\n    return module;\n}\n\n\n/* Remove name from sys.modules, if it's there.\n * Can be called with an exception raised.\n * If fail to remove name a new exception will be chained with the old\n * exception, otherwise the old exception is preserved.\n */\nstatic void\nremove_module(PyThreadState *tstate, PyObject *name)\n{\n    PyObject *exc = _PyErr_GetRaisedException(tstate);\n\n    PyObject *modules = get_modules_dict(tstate, true);\n    if (PyDict_CheckExact(modules)) {\n        // Error is reported to the caller\n        (void)PyDict_Pop(modules, name, NULL);\n    }\n    else if (PyMapping_DelItem(modules, name) < 0) {\n        if (_PyErr_ExceptionMatches(tstate, PyExc_KeyError)) {\n            _PyErr_Clear(tstate);\n        }\n    }\n\n    _PyErr_ChainExceptions1(exc);\n}\n\n\n/************************************/\n/* per-interpreter modules-by-index */\n/************************************/\n\nPy_ssize_t\n_PyImport_GetNextModuleIndex(void)\n{\n    return _Py_atomic_add_ssize(&LAST_MODULE_INDEX, 1) + 1;\n}\n\n#ifndef NDEBUG\nstruct extensions_cache_value;\nstatic struct extensions_cache_value * _find_cached_def(PyModuleDef *);\nstatic Py_ssize_t _get_cached_module_index(struct extensions_cache_value *);\n#endif\n\nstatic Py_ssize_t\n_get_module_index_from_def(PyModuleDef *def)\n{\n    Py_ssize_t index = def->m_base.m_index;\n#ifndef NDEBUG\n    struct extensions_cache_value *cached = _find_cached_def(def);\n    assert(cached == NULL || index == _get_cached_module_index(cached));\n#endif\n    return index;\n}\n\nstatic void\n_set_module_index(PyModuleDef *def, Py_ssize_t index)\n{\n    assert(index > 0);\n    if (index == def->m_base.m_index) {\n        /* There's nothing to do. */\n    }\n    else if (def->m_base.m_index == 0) {\n        /* It should have been initialized by PyModuleDef_Init().\n         * We assert here to catch this in dev, but keep going otherwise. */\n        assert(def->m_base.m_index != 0);\n        def->m_base.m_index = index;\n    }\n    else {\n        /* It was already set for a different module.\n         * We replace the old value. */\n        assert(def->m_base.m_index > 0);\n        def->m_base.m_index = index;\n    }\n}\n\nstatic const char *\n_modules_by_index_check(PyInterpreterState *interp, Py_ssize_t index)\n{\n    if (index <= 0) {\n        return \"invalid module index\";\n    }\n    if (MODULES_BY_INDEX(interp) == NULL) {\n        return \"Interpreters module-list not accessible.\";\n    }\n    if (index >= PyList_GET_SIZE(MODULES_BY_INDEX(interp))) {\n        return \"Module index out of bounds.\";\n    }\n    return NULL;\n}\n\nstatic PyObject *\n_modules_by_index_get(PyInterpreterState *interp, Py_ssize_t index)\n{\n    if (_modules_by_index_check(interp, index) != NULL) {\n        return NULL;\n    }\n    PyObject *res = PyList_GET_ITEM(MODULES_BY_INDEX(interp), index);\n    return res==Py_None ? NULL : res;\n}\n\nstatic int\n_modules_by_index_set(PyInterpreterState *interp,\n                      Py_ssize_t index, PyObject *module)\n{\n    assert(index > 0);\n\n    if (MODULES_BY_INDEX(interp) == NULL) {\n        MODULES_BY_INDEX(interp) = PyList_New(0);\n        if (MODULES_BY_INDEX(interp) == NULL) {\n            return -1;\n        }\n    }\n\n    while (PyList_GET_SIZE(MODULES_BY_INDEX(interp)) <= index) {\n        if (PyList_Append(MODULES_BY_INDEX(interp), Py_None) < 0) {\n            return -1;\n        }\n    }\n\n    return PyList_SetItem(MODULES_BY_INDEX(interp), index, Py_NewRef(module));\n}\n\nstatic int\n_modules_by_index_clear_one(PyInterpreterState *interp, Py_ssize_t index)\n{\n    const char *err = _modules_by_index_check(interp, index);\n    if (err != NULL) {\n        Py_FatalError(err);\n        return -1;\n    }\n    return PyList_SetItem(MODULES_BY_INDEX(interp), index, Py_NewRef(Py_None));\n}\n\n\nPyObject*\nPyState_FindModule(PyModuleDef* module)\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    if (module->m_slots) {\n        return NULL;\n    }\n    Py_ssize_t index = _get_module_index_from_def(module);\n    return _modules_by_index_get(interp, index);\n}\n\n/* _PyState_AddModule() has been completely removed from the C-API\n   (and was removed from the limited API in 3.6).  However, we're\n   playing it safe and keeping it around for any stable ABI extensions\n   built against 3.2-3.5. */\nint\n_PyState_AddModule(PyThreadState *tstate, PyObject* module, PyModuleDef* def)\n{\n    if (!def) {\n        assert(_PyErr_Occurred(tstate));\n        return -1;\n    }\n    if (def->m_slots) {\n        _PyErr_SetString(tstate,\n                         PyExc_SystemError,\n                         \"PyState_AddModule called on module with slots\");\n        return -1;\n    }\n    assert(def->m_slots == NULL);\n    Py_ssize_t index = _get_module_index_from_def(def);\n    return _modules_by_index_set(tstate->interp, index, module);\n}\n\nint\nPyState_AddModule(PyObject* module, PyModuleDef* def)\n{\n    if (!def) {\n        Py_FatalError(\"module definition is NULL\");\n        return -1;\n    }\n\n    PyThreadState *tstate = _PyThreadState_GET();\n    if (def->m_slots) {\n        _PyErr_SetString(tstate,\n                         PyExc_SystemError,\n                         \"PyState_AddModule called on module with slots\");\n        return -1;\n    }\n\n    PyInterpreterState *interp = tstate->interp;\n    Py_ssize_t index = _get_module_index_from_def(def);\n    if (MODULES_BY_INDEX(interp) &&\n        index < PyList_GET_SIZE(MODULES_BY_INDEX(interp)) &&\n        module == PyList_GET_ITEM(MODULES_BY_INDEX(interp), index))\n    {\n        _Py_FatalErrorFormat(__func__, \"module %p already added\", module);\n        return -1;\n    }\n\n    assert(def->m_slots == NULL);\n    return _modules_by_index_set(interp, index, module);\n}\n\nint\nPyState_RemoveModule(PyModuleDef* def)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    if (def->m_slots) {\n        _PyErr_SetString(tstate,\n                         PyExc_SystemError,\n                         \"PyState_RemoveModule called on module with slots\");\n        return -1;\n    }\n    Py_ssize_t index = _get_module_index_from_def(def);\n    return _modules_by_index_clear_one(tstate->interp, index);\n}\n\n\n// Used by finalize_modules()\nvoid\n_PyImport_ClearModulesByIndex(PyInterpreterState *interp)\n{\n    if (!MODULES_BY_INDEX(interp)) {\n        return;\n    }\n\n    Py_ssize_t i;\n    for (i = 0; i < PyList_GET_SIZE(MODULES_BY_INDEX(interp)); i++) {\n        PyObject *m = PyList_GET_ITEM(MODULES_BY_INDEX(interp), i);\n        if (PyModule_Check(m)) {\n            /* cleanup the saved copy of module dicts */\n            PyModuleDef *md = PyModule_GetDef(m);\n            if (md) {\n                // XXX Do this more carefully.  The dict might be owned\n                // by another interpreter.\n                Py_CLEAR(md->m_base.m_copy);\n            }\n        }\n    }\n\n    /* Setting modules_by_index to NULL could be dangerous, so we\n       clear the list instead. */\n    if (PyList_SetSlice(MODULES_BY_INDEX(interp),\n                        0, PyList_GET_SIZE(MODULES_BY_INDEX(interp)),\n                        NULL)) {\n        PyErr_FormatUnraisable(\"Exception ignored on clearing interpreters module list\");\n    }\n}\n\n\n/*********************/\n/* extension modules */\n/*********************/\n\n/*\n    It may help to have a big picture view of what happens\n    when an extension is loaded.  This includes when it is imported\n    for the first time.\n\n    Here's a summary, using importlib._bootstrap._load() as a starting point.\n\n    1.  importlib._bootstrap._load()\n    2.    _load():  acquire import lock\n    3.    _load() -> importlib._bootstrap._load_unlocked()\n    4.      _load_unlocked() -> importlib._bootstrap.module_from_spec()\n    5.        module_from_spec() -> ExtensionFileLoader.create_module()\n    6.          create_module() -> _imp.create_dynamic()\n                    (see below)\n    7.        module_from_spec() -> importlib._bootstrap._init_module_attrs()\n    8.      _load_unlocked():  sys.modules[name] = module\n    9.      _load_unlocked() -> ExtensionFileLoader.exec_module()\n    10.       exec_module() -> _imp.exec_dynamic()\n                  (see below)\n    11.   _load():  release import lock\n\n\n    ...for single-phase init modules, where m_size == -1:\n\n    (6). first time  (not found in _PyRuntime.imports.extensions):\n       A. _imp_create_dynamic_impl() -> import_find_extension()\n       B. _imp_create_dynamic_impl() -> _PyImport_GetModInitFunc()\n       C.   _PyImport_GetModInitFunc():  load <module init func>\n       D. _imp_create_dynamic_impl() -> import_run_extension()\n       E.   import_run_extension() -> _PyImport_RunModInitFunc()\n       F.     _PyImport_RunModInitFunc():  call <module init func>\n       G.       <module init func> -> PyModule_Create() -> PyModule_Create2()\n                                          -> PyModule_CreateInitialized()\n       H.         PyModule_CreateInitialized() -> PyModule_New()\n       I.         PyModule_CreateInitialized():  allocate mod->md_state\n       J.         PyModule_CreateInitialized() -> PyModule_AddFunctions()\n       K.         PyModule_CreateInitialized() -> PyModule_SetDocString()\n       L.       PyModule_CreateInitialized():  set mod->md_def\n       M.       <module init func>:  initialize the module, etc.\n       N.   import_run_extension()\n                -> _PyImport_CheckSubinterpIncompatibleExtensionAllowed()\n       O.   import_run_extension():  set __file__\n       P.   import_run_extension() -> update_global_state_for_extension()\n       Q.     update_global_state_for_extension():\n                      copy __dict__ into def->m_base.m_copy\n       R.     update_global_state_for_extension():\n                      add it to _PyRuntime.imports.extensions\n       S.   import_run_extension() -> finish_singlephase_extension()\n       T.     finish_singlephase_extension():\n                      add it to interp->imports.modules_by_index\n       U.     finish_singlephase_extension():  add it to sys.modules\n\n       Step (Q) is skipped for core modules (sys/builtins).\n\n    (6). subsequent times  (found in _PyRuntime.imports.extensions):\n       A. _imp_create_dynamic_impl() -> import_find_extension()\n       B.   import_find_extension() -> reload_singlephase_extension()\n       C.     reload_singlephase_extension()\n                  -> _PyImport_CheckSubinterpIncompatibleExtensionAllowed()\n       D.     reload_singlephase_extension() -> import_add_module()\n       E.       if name in sys.modules:  use that module\n       F.       else:\n                  1. import_add_module() -> PyModule_NewObject()\n                  2. import_add_module():  set it on sys.modules\n       G.     reload_singlephase_extension():  copy the \"m_copy\" dict into __dict__\n       H.     reload_singlephase_extension():  add to modules_by_index\n\n    (10). (every time):\n       A. noop\n\n\n    ...for single-phase init modules, where m_size >= 0:\n\n    (6). not main interpreter and never loaded there - every time  (not found in _PyRuntime.imports.extensions):\n       A-P. (same as for m_size == -1)\n       Q.     _PyImport_RunModInitFunc():  set def->m_base.m_init\n       R. (skipped)\n       S-U. (same as for m_size == -1)\n\n    (6). main interpreter - first time  (not found in _PyRuntime.imports.extensions):\n       A-P. (same as for m_size == -1)\n       Q.     _PyImport_RunModInitFunc():  set def->m_base.m_init\n       R-U. (same as for m_size == -1)\n\n    (6). subsequent times  (found in _PyRuntime.imports.extensions):\n       A. _imp_create_dynamic_impl() -> import_find_extension()\n       B.   import_find_extension() -> reload_singlephase_extension()\n       C.     reload_singlephase_extension()\n                  -> _PyImport_CheckSubinterpIncompatibleExtensionAllowed()\n       D.     reload_singlephase_extension():  call def->m_base.m_init  (see above)\n       E.     reload_singlephase_extension():  add the module to sys.modules\n       F.     reload_singlephase_extension():  add to modules_by_index\n\n    (10). every time:\n       A. noop\n\n\n    ...for multi-phase init modules:\n\n    (6). every time:\n       A. _imp_create_dynamic_impl() -> import_find_extension()  (not found)\n       B. _imp_create_dynamic_impl() -> _PyImport_GetModInitFunc()\n       C.   _PyImport_GetModInitFunc():  load <module init func>\n       D. _imp_create_dynamic_impl() -> import_run_extension()\n       E.   import_run_extension() -> _PyImport_RunModInitFunc()\n       F.     _PyImport_RunModInitFunc():  call <module init func>\n       G.   import_run_extension() -> PyModule_FromDefAndSpec()\n       H.      PyModule_FromDefAndSpec(): gather/check moduledef slots\n       I.      if there's a Py_mod_create slot:\n                 1. PyModule_FromDefAndSpec():  call its function\n       J.      else:\n                 1. PyModule_FromDefAndSpec() -> PyModule_NewObject()\n       K:      PyModule_FromDefAndSpec():  set mod->md_def\n       L.      PyModule_FromDefAndSpec() -> _add_methods_to_object()\n       M.      PyModule_FromDefAndSpec() -> PyModule_SetDocString()\n\n    (10). every time:\n       A. _imp_exec_dynamic_impl() -> exec_builtin_or_dynamic()\n       B.   if mod->md_state == NULL (including if m_size == 0):\n            1. exec_builtin_or_dynamic() -> PyModule_ExecDef()\n            2.   PyModule_ExecDef():  allocate mod->md_state\n            3.   if there's a Py_mod_exec slot:\n                 1. PyModule_ExecDef():  call its function\n */\n\n\n/* Make sure name is fully qualified.\n\n   This is a bit of a hack: when the shared library is loaded,\n   the module name is \"package.module\", but the module calls\n   PyModule_Create*() with just \"module\" for the name.  The shared\n   library loader squirrels away the true name of the module in\n   _PyRuntime.imports.pkgcontext, and PyModule_Create*() will\n   substitute this (if the name actually matches).\n*/\n\n#ifdef HAVE_THREAD_LOCAL\n_Py_thread_local const char *pkgcontext = NULL;\n# undef PKGCONTEXT\n# define PKGCONTEXT pkgcontext\n#endif\n\nconst char *\n_PyImport_ResolveNameWithPackageContext(const char *name)\n{\n#ifndef HAVE_THREAD_LOCAL\n    PyThread_acquire_lock(EXTENSIONS.mutex, WAIT_LOCK);\n#endif\n    if (PKGCONTEXT != NULL) {\n        const char *p = strrchr(PKGCONTEXT, '.');\n        if (p != NULL && strcmp(name, p+1) == 0) {\n            name = PKGCONTEXT;\n            PKGCONTEXT = NULL;\n        }\n    }\n#ifndef HAVE_THREAD_LOCAL\n    PyThread_release_lock(EXTENSIONS.mutex);\n#endif\n    return name;\n}\n\nconst char *\n_PyImport_SwapPackageContext(const char *newcontext)\n{\n#ifndef HAVE_THREAD_LOCAL\n    PyThread_acquire_lock(EXTENSIONS.mutex, WAIT_LOCK);\n#endif\n    const char *oldcontext = PKGCONTEXT;\n    PKGCONTEXT = newcontext;\n#ifndef HAVE_THREAD_LOCAL\n    PyThread_release_lock(EXTENSIONS.mutex);\n#endif\n    return oldcontext;\n}\n\n#ifdef HAVE_DLOPEN\nint\n_PyImport_GetDLOpenFlags(PyInterpreterState *interp)\n{\n    return DLOPENFLAGS(interp);\n}\n\nvoid\n_PyImport_SetDLOpenFlags(PyInterpreterState *interp, int new_val)\n{\n    DLOPENFLAGS(interp) = new_val;\n}\n#endif  // HAVE_DLOPEN\n\n\n/* Common implementation for _imp.exec_dynamic and _imp.exec_builtin */\nstatic int\nexec_builtin_or_dynamic(PyObject *mod) {\n    PyModuleDef *def;\n    void *state;\n\n    if (!PyModule_Check(mod)) {\n        return 0;\n    }\n\n    def = PyModule_GetDef(mod);\n    if (def == NULL) {\n        return 0;\n    }\n\n    state = PyModule_GetState(mod);\n    if (state) {\n        /* Already initialized; skip reload */\n        return 0;\n    }\n\n    return PyModule_ExecDef(mod, def);\n}\n\n\nstatic int clear_singlephase_extension(PyInterpreterState *interp,\n                                       PyObject *name, PyObject *filename);\n\n// Currently, this is only used for testing.\n// (See _testinternalcapi.clear_extension().)\nint\n_PyImport_ClearExtension(PyObject *name, PyObject *filename)\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n\n    /* Clearing a module's C globals is up to the module. */\n    if (clear_singlephase_extension(interp, name, filename) < 0) {\n        return -1;\n    }\n\n    // In the future we'll probably also make sure the extension's\n    // file handle (and DL handle) is closed (requires saving it).\n\n    return 0;\n}\n\n\n/*****************************/\n/* single-phase init modules */\n/*****************************/\n\n/*\nWe support a number of kinds of single-phase init builtin/extension modules:\n\n* \"basic\"\n    * no module state (PyModuleDef.m_size == -1)\n    * does not support repeated init (we use PyModuleDef.m_base.m_copy)\n    * may have process-global state\n    * the module's def is cached in _PyRuntime.imports.extensions,\n      by (name, filename)\n* \"reinit\"\n    * no module state (PyModuleDef.m_size == 0)\n    * supports repeated init (m_copy is never used)\n    * should not have any process-global state\n    * its def is never cached in _PyRuntime.imports.extensions\n      (except, currently, under the main interpreter, for some reason)\n* \"with state\"  (almost the same as reinit)\n    * has module state (PyModuleDef.m_size > 0)\n    * supports repeated init (m_copy is never used)\n    * should not have any process-global state\n    * its def is never cached in _PyRuntime.imports.extensions\n      (except, currently, under the main interpreter, for some reason)\n\nThere are also variants within those classes:\n\n* two or more modules share a PyModuleDef\n    * a module's init func uses another module's PyModuleDef\n    * a module's init func calls another's module's init func\n    * a module's init \"func\" is actually a variable statically initialized\n      to another module's init func\n* two or modules share \"methods\"\n    * a module's init func copies another module's PyModuleDef\n      (with a different name)\n* (basic-only) two or modules share process-global state\n\nIn the first case, where modules share a PyModuleDef, the following\nnotable weirdness happens:\n\n* the module's __name__ matches the def, not the requested name\n* the last module (with the same def) to be imported for the first time wins\n    * returned by PyState_Find_Module() (via interp->modules_by_index)\n    * (non-basic-only) its init func is used when re-loading any of them\n      (via the def's m_init)\n    * (basic-only) the copy of its __dict__ is used when re-loading any of them\n      (via the def's m_copy)\n\nHowever, the following happens as expected:\n\n* a new module object (with its own __dict__) is created for each request\n* the module's __spec__ has the requested name\n* the loaded module is cached in sys.modules under the requested name\n* the m_index field of the shared def is not changed,\n  so at least PyState_FindModule() will always look in the same place\n\nFor \"basic\" modules there are other quirks:\n\n* (whether sharing a def or not) when loaded the first time,\n  m_copy is set before _init_module_attrs() is called\n  in importlib._bootstrap.module_from_spec(),\n  so when the module is re-loaded, the previous value\n  for __wpec__ (and others) is reset, possibly unexpectedly.\n\nGenerally, when multiple interpreters are involved, some of the above\ngets even messier.\n*/\n\nstatic inline void\nextensions_lock_acquire(void)\n{\n    PyMutex_Lock(&_PyRuntime.imports.extensions.mutex);\n}\n\nstatic inline void\nextensions_lock_release(void)\n{\n    PyMutex_Unlock(&_PyRuntime.imports.extensions.mutex);\n}\n\n\n/* Magic for extension modules (built-in as well as dynamically\n   loaded).  To prevent initializing an extension module more than\n   once, we keep a static dictionary 'extensions' keyed by the tuple\n   (module name, module name)  (for built-in modules) or by\n   (filename, module name) (for dynamically loaded modules), containing these\n   modules.  A copy of the module's dictionary is stored by calling\n   fix_up_extension() immediately after the module initialization\n   function succeeds.  A copy can be retrieved from there by calling\n   import_find_extension().\n\n   Modules which do support multiple initialization set their m_size\n   field to a non-negative number (indicating the size of the\n   module-specific state). They are still recorded in the extensions\n   dictionary, to avoid loading shared libraries twice.\n*/\n\ntypedef struct cached_m_dict {\n    /* A shallow copy of the original module's __dict__. */\n    PyObject *copied;\n    /* The interpreter that owns the copy. */\n    int64_t interpid;\n} *cached_m_dict_t;\n\nstruct extensions_cache_value {\n    PyModuleDef *def;\n\n    /* The function used to re-initialize the module.\n       This is only set for legacy (single-phase init) extension modules\n       and only used for those that support multiple initializations\n       (m_size >= 0).\n       It is set by update_global_state_for_extension(). */\n    PyModInitFunction m_init;\n\n    /* The module's index into its interpreter's modules_by_index cache.\n       This is set for all extension modules but only used for legacy ones.\n       (See PyInterpreterState.modules_by_index for more info.) */\n    Py_ssize_t m_index;\n\n    /* A copy of the module's __dict__ after the first time it was loaded.\n       This is only set/used for legacy modules that do not support\n       multiple initializations.\n       It is set exclusively by fixup_cached_def(). */\n    cached_m_dict_t m_dict;\n    struct cached_m_dict _m_dict;\n\n    _Py_ext_module_origin origin;\n\n#ifdef Py_GIL_DISABLED\n    /* The module's md_gil slot, for legacy modules that are reinitialized from\n       m_dict rather than calling their initialization function again. */\n    void *md_gil;\n#endif\n};\n\nstatic struct extensions_cache_value *\nalloc_extensions_cache_value(void)\n{\n    struct extensions_cache_value *value\n            = PyMem_RawMalloc(sizeof(struct extensions_cache_value));\n    if (value == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    *value = (struct extensions_cache_value){0};\n    return value;\n}\n\nstatic void\nfree_extensions_cache_value(struct extensions_cache_value *value)\n{\n    PyMem_RawFree(value);\n}\n\nstatic Py_ssize_t\n_get_cached_module_index(struct extensions_cache_value *cached)\n{\n    assert(cached->m_index > 0);\n    return cached->m_index;\n}\n\nstatic void\nfixup_cached_def(struct extensions_cache_value *value)\n{\n    /* For the moment, the values in the def's m_base may belong\n     * to another module, and we're replacing them here.  This can\n     * cause problems later if the old module is reloaded.\n     *\n     * Also, we don't decref any old cached values first when we\n     * replace them here, in case we need to restore them in the\n     * near future.  Instead, the caller is responsible for wrapping\n     * this up by calling cleanup_old_cached_def() or\n     * restore_old_cached_def() if there was an error. */\n    PyModuleDef *def = value->def;\n    assert(def != NULL);\n\n    /* We assume that all module defs are statically allocated\n       and will never be freed.  Otherwise, we would incref here. */\n    _Py_SetImmortalUntracked((PyObject *)def);\n\n    def->m_base.m_init = value->m_init;\n\n    assert(value->m_index > 0);\n    _set_module_index(def, value->m_index);\n\n    /* Different modules can share the same def, so we can't just\n     * expect m_copy to be NULL. */\n    assert(def->m_base.m_copy == NULL\n           || def->m_base.m_init == NULL\n           || value->m_dict != NULL);\n    if (value->m_dict != NULL) {\n        assert(value->m_dict->copied != NULL);\n        /* As noted above, we don't first decref the old value, if any. */\n        def->m_base.m_copy = Py_NewRef(value->m_dict->copied);\n    }\n}\n\nstatic void\nrestore_old_cached_def(PyModuleDef *def, PyModuleDef_Base *oldbase)\n{\n    def->m_base = *oldbase;\n}\n\nstatic void\ncleanup_old_cached_def(PyModuleDef_Base *oldbase)\n{\n    Py_XDECREF(oldbase->m_copy);\n}\n\nstatic void\ndel_cached_def(struct extensions_cache_value *value)\n{\n    /* If we hadn't made the stored defs immortal, we would decref here.\n       However, this decref would be problematic if the module def were\n       dynamically allocated, it were the last ref, and this function\n       were called with an interpreter other than the def's owner. */\n    assert(value->def == NULL || _Py_IsImmortal(value->def));\n\n    Py_XDECREF(value->def->m_base.m_copy);\n    value->def->m_base.m_copy = NULL;\n}\n\nstatic int\ninit_cached_m_dict(struct extensions_cache_value *value, PyObject *m_dict)\n{\n    assert(value != NULL);\n    /* This should only have been called without an m_dict already set. */\n    assert(value->m_dict == NULL);\n    if (m_dict == NULL) {\n        return 0;\n    }\n    assert(PyDict_Check(m_dict));\n    assert(value->origin != _Py_ext_module_origin_CORE);\n\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    assert(!is_interpreter_isolated(interp));\n\n    /* XXX gh-88216: The copied dict is owned by the current\n     * interpreter.  That's a problem if the interpreter has\n     * its own obmalloc state or if the module is successfully\n     * imported into such an interpreter.  If the interpreter\n     * has its own GIL then there may be data races and\n     * PyImport_ClearModulesByIndex() can crash.  Normally,\n     * a single-phase init module cannot be imported in an\n     * isolated interpreter, but there are ways around that.\n     * Hence, heere be dragons!  Ideally we would instead do\n     * something like make a read-only, immortal copy of the\n     * dict using PyMem_RawMalloc() and store *that* in m_copy.\n     * Then we'd need to make sure to clear that when the\n     * runtime is finalized, rather than in\n     * PyImport_ClearModulesByIndex(). */\n    PyObject *copied = PyDict_Copy(m_dict);\n    if (copied == NULL) {\n        /* We expect this can only be \"out of memory\". */\n        return -1;\n    }\n    // XXX We may want to make the copy immortal.\n\n    value->_m_dict = (struct cached_m_dict){\n        .copied=copied,\n        .interpid=PyInterpreterState_GetID(interp),\n    };\n\n    value->m_dict = &value->_m_dict;\n    return 0;\n}\n\nstatic void\ndel_cached_m_dict(struct extensions_cache_value *value)\n{\n    if (value->m_dict != NULL) {\n        assert(value->m_dict == &value->_m_dict);\n        assert(value->m_dict->copied != NULL);\n        /* In the future we can take advantage of m_dict->interpid\n         * to decref the dict using the owning interpreter. */\n        Py_XDECREF(value->m_dict->copied);\n        value->m_dict = NULL;\n    }\n}\n\nstatic PyObject * get_core_module_dict(\n        PyInterpreterState *interp, PyObject *name, PyObject *path);\n\nstatic PyObject *\nget_cached_m_dict(struct extensions_cache_value *value,\n                  PyObject *name, PyObject *path)\n{\n    assert(value != NULL);\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    /* It might be a core module (e.g. sys & builtins),\n       for which we don't cache m_dict. */\n    if (value->origin == _Py_ext_module_origin_CORE) {\n        return get_core_module_dict(interp, name, path);\n    }\n    assert(value->def != NULL);\n    // XXX Switch to value->m_dict.\n    PyObject *m_dict = value->def->m_base.m_copy;\n    Py_XINCREF(m_dict);\n    return m_dict;\n}\n\nstatic void\ndel_extensions_cache_value(struct extensions_cache_value *value)\n{\n    if (value != NULL) {\n        del_cached_m_dict(value);\n        del_cached_def(value);\n        free_extensions_cache_value(value);\n    }\n}\n\nstatic void *\nhashtable_key_from_2_strings(PyObject *str1, PyObject *str2, const char sep)\n{\n    Py_ssize_t str1_len, str2_len;\n    const char *str1_data = PyUnicode_AsUTF8AndSize(str1, &str1_len);\n    const char *str2_data = PyUnicode_AsUTF8AndSize(str2, &str2_len);\n    if (str1_data == NULL || str2_data == NULL) {\n        return NULL;\n    }\n    /* Make sure sep and the NULL byte won't cause an overflow. */\n    assert(SIZE_MAX - str1_len - str2_len > 2);\n    size_t size = str1_len + 1 + str2_len + 1;\n\n    // XXX Use a buffer if it's a temp value (every case but \"set\").\n    char *key = PyMem_RawMalloc(size);\n    if (key == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    strncpy(key, str1_data, str1_len);\n    key[str1_len] = sep;\n    strncpy(key + str1_len + 1, str2_data, str2_len + 1);\n    assert(strlen(key) == size - 1);\n    return key;\n}\n\nstatic Py_uhash_t\nhashtable_hash_str(const void *key)\n{\n    return _Py_HashBytes(key, strlen((const char *)key));\n}\n\nstatic int\nhashtable_compare_str(const void *key1, const void *key2)\n{\n    return strcmp((const char *)key1, (const char *)key2) == 0;\n}\n\nstatic void\nhashtable_destroy_str(void *ptr)\n{\n    PyMem_RawFree(ptr);\n}\n\n#ifndef NDEBUG\nstruct hashtable_next_match_def_data {\n    PyModuleDef *def;\n    struct extensions_cache_value *matched;\n};\n\nstatic int\nhashtable_next_match_def(_Py_hashtable_t *ht,\n                         const void *key, const void *value, void *user_data)\n{\n    if (value == NULL) {\n        /* It was previously deleted. */\n        return 0;\n    }\n    struct hashtable_next_match_def_data *data\n            = (struct hashtable_next_match_def_data *)user_data;\n    struct extensions_cache_value *cur\n            = (struct extensions_cache_value *)value;\n    if (cur->def == data->def) {\n        data->matched = cur;\n        return 1;\n    }\n    return 0;\n}\n\nstatic struct extensions_cache_value *\n_find_cached_def(PyModuleDef *def)\n{\n    struct hashtable_next_match_def_data data = {0};\n    (void)_Py_hashtable_foreach(\n            EXTENSIONS.hashtable, hashtable_next_match_def, &data);\n    return data.matched;\n}\n#endif\n\n#define HTSEP ':'\n\nstatic int\n_extensions_cache_init(void)\n{\n    _Py_hashtable_allocator_t alloc = {PyMem_RawMalloc, PyMem_RawFree};\n    EXTENSIONS.hashtable = _Py_hashtable_new_full(\n        hashtable_hash_str,\n        hashtable_compare_str,\n        hashtable_destroy_str,  // key\n        (_Py_hashtable_destroy_func)del_extensions_cache_value,  // value\n        &alloc\n    );\n    if (EXTENSIONS.hashtable == NULL) {\n        PyErr_NoMemory();\n        return -1;\n    }\n    return 0;\n}\n\nstatic _Py_hashtable_entry_t *\n_extensions_cache_find_unlocked(PyObject *path, PyObject *name,\n                                void **p_key)\n{\n    if (EXTENSIONS.hashtable == NULL) {\n        return NULL;\n    }\n    void *key = hashtable_key_from_2_strings(path, name, HTSEP);\n    if (key == NULL) {\n        return NULL;\n    }\n    _Py_hashtable_entry_t *entry =\n            _Py_hashtable_get_entry(EXTENSIONS.hashtable, key);\n    if (p_key != NULL) {\n        *p_key = key;\n    }\n    else {\n        hashtable_destroy_str(key);\n    }\n    return entry;\n}\n\n/* This can only fail with \"out of memory\". */\nstatic struct extensions_cache_value *\n_extensions_cache_get(PyObject *path, PyObject *name)\n{\n    struct extensions_cache_value *value = NULL;\n    extensions_lock_acquire();\n\n    _Py_hashtable_entry_t *entry =\n            _extensions_cache_find_unlocked(path, name, NULL);\n    if (entry == NULL) {\n        /* It was never added. */\n        goto finally;\n    }\n    value = (struct extensions_cache_value *)entry->value;\n\nfinally:\n    extensions_lock_release();\n    return value;\n}\n\n/* This can only fail with \"out of memory\". */\nstatic struct extensions_cache_value *\n_extensions_cache_set(PyObject *path, PyObject *name,\n                      PyModuleDef *def, PyModInitFunction m_init,\n                      Py_ssize_t m_index, PyObject *m_dict,\n                      _Py_ext_module_origin origin, void *md_gil)\n{\n    struct extensions_cache_value *value = NULL;\n    void *key = NULL;\n    struct extensions_cache_value *newvalue = NULL;\n    PyModuleDef_Base olddefbase = def->m_base;\n\n    assert(def != NULL);\n    assert(m_init == NULL || m_dict == NULL);\n    /* We expect the same symbol to be used and the shared object file\n     * to have remained loaded, so it must be the same pointer. */\n    assert(def->m_base.m_init == NULL || def->m_base.m_init == m_init);\n    /* For now we don't worry about comparing value->m_copy. */\n    assert(def->m_base.m_copy == NULL || m_dict != NULL);\n    assert((origin == _Py_ext_module_origin_DYNAMIC) == (name != path));\n    assert(origin != _Py_ext_module_origin_CORE || m_dict == NULL);\n\n    extensions_lock_acquire();\n\n    if (EXTENSIONS.hashtable == NULL) {\n        if (_extensions_cache_init() < 0) {\n            goto finally;\n        }\n    }\n\n    /* Create a cached value to populate for the module. */\n    _Py_hashtable_entry_t *entry =\n            _extensions_cache_find_unlocked(path, name, &key);\n    value = entry == NULL\n        ? NULL\n        : (struct extensions_cache_value *)entry->value;\n    /* We should never be updating an existing cache value. */\n    assert(value == NULL);\n    if (value != NULL) {\n        PyErr_Format(PyExc_SystemError,\n                     \"extension module %R is already cached\", name);\n        goto finally;\n    }\n    newvalue = alloc_extensions_cache_value();\n    if (newvalue == NULL) {\n        goto finally;\n    }\n\n    /* Populate the new cache value data. */\n    *newvalue = (struct extensions_cache_value){\n        .def=def,\n        .m_init=m_init,\n        .m_index=m_index,\n        /* m_dict is set by set_cached_m_dict(). */\n        .origin=origin,\n#ifdef Py_GIL_DISABLED\n        .md_gil=md_gil,\n#endif\n    };\n#ifndef Py_GIL_DISABLED\n    (void)md_gil;\n#endif\n    if (init_cached_m_dict(newvalue, m_dict) < 0) {\n        goto finally;\n    }\n    fixup_cached_def(newvalue);\n\n    if (entry == NULL) {\n        /* It was never added. */\n        if (_Py_hashtable_set(EXTENSIONS.hashtable, key, newvalue) < 0) {\n            PyErr_NoMemory();\n            goto finally;\n        }\n        /* The hashtable owns the key now. */\n        key = NULL;\n    }\n    else if (value == NULL) {\n        /* It was previously deleted. */\n        entry->value = newvalue;\n    }\n    else {\n        /* We are updating the entry for an existing module. */\n        /* We expect def to be static, so it must be the same pointer. */\n        assert(value->def == def);\n        /* We expect the same symbol to be used and the shared object file\n         * to have remained loaded, so it must be the same pointer. */\n        assert(value->m_init == m_init);\n        /* The same module can't switch between caching __dict__ and not. */\n        assert((value->m_dict == NULL) == (m_dict == NULL));\n        /* This shouldn't ever happen. */\n        Py_UNREACHABLE();\n    }\n\n    value = newvalue;\n\nfinally:\n    if (value == NULL) {\n        restore_old_cached_def(def, &olddefbase);\n        if (newvalue != NULL) {\n            del_extensions_cache_value(newvalue);\n        }\n    }\n    else {\n        cleanup_old_cached_def(&olddefbase);\n    }\n\n    extensions_lock_release();\n    if (key != NULL) {\n        hashtable_destroy_str(key);\n    }\n\n    return value;\n}\n\nstatic void\n_extensions_cache_delete(PyObject *path, PyObject *name)\n{\n    extensions_lock_acquire();\n\n    if (EXTENSIONS.hashtable == NULL) {\n        /* It was never added. */\n        goto finally;\n    }\n\n    _Py_hashtable_entry_t *entry =\n            _extensions_cache_find_unlocked(path, name, NULL);\n    if (entry == NULL) {\n        /* It was never added. */\n        goto finally;\n    }\n    if (entry->value == NULL) {\n        /* It was already removed. */\n        goto finally;\n    }\n    struct extensions_cache_value *value = entry->value;\n    entry->value = NULL;\n\n    del_extensions_cache_value(value);\n\nfinally:\n    extensions_lock_release();\n}\n\nstatic void\n_extensions_cache_clear_all(void)\n{\n    /* The runtime (i.e. main interpreter) must be finalizing,\n       so we don't need to worry about the lock. */\n    _Py_hashtable_destroy(EXTENSIONS.hashtable);\n    EXTENSIONS.hashtable = NULL;\n}\n\n#undef HTSEP\n\n\nstatic bool\ncheck_multi_interp_extensions(PyInterpreterState *interp)\n{\n    int override = OVERRIDE_MULTI_INTERP_EXTENSIONS_CHECK(interp);\n    if (override < 0) {\n        return false;\n    }\n    else if (override > 0) {\n        return true;\n    }\n    else if (_PyInterpreterState_HasFeature(\n                interp, Py_RTFLAGS_MULTI_INTERP_EXTENSIONS)) {\n        return true;\n    }\n    return false;\n}\n\nint\n_PyImport_CheckSubinterpIncompatibleExtensionAllowed(const char *name)\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    if (check_multi_interp_extensions(interp)) {\n        assert(!_Py_IsMainInterpreter(interp));\n        PyErr_Format(PyExc_ImportError,\n                     \"module %s does not support loading in subinterpreters\",\n                     name);\n        return -1;\n    }\n    return 0;\n}\n\n#ifdef Py_GIL_DISABLED\nint\n_PyImport_CheckGILForModule(PyObject* module, PyObject *module_name)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    if (module == NULL) {\n        _PyEval_DisableGIL(tstate);\n        return 0;\n    }\n\n    if (!PyModule_Check(module) ||\n        ((PyModuleObject *)module)->md_gil == Py_MOD_GIL_USED) {\n        if (_PyEval_EnableGILPermanent(tstate)) {\n            int warn_result = PyErr_WarnFormat(\n                PyExc_RuntimeWarning,\n                1,\n                \"The global interpreter lock (GIL) has been enabled to load \"\n                \"module '%U', which has not declared that it can run safely \"\n                \"without the GIL. To override this behavior and keep the GIL \"\n                \"disabled (at your own risk), run with PYTHON_GIL=0 or -Xgil=0.\",\n                module_name\n            );\n            if (warn_result < 0) {\n                return warn_result;\n            }\n        }\n\n        const PyConfig *config = _PyInterpreterState_GetConfig(tstate->interp);\n        if (config->enable_gil == _PyConfig_GIL_DEFAULT && config->verbose) {\n            PySys_FormatStderr(\"# loading module '%U', which requires the GIL\\n\",\n                               module_name);\n        }\n    }\n    else {\n        _PyEval_DisableGIL(tstate);\n    }\n\n    return 0;\n}\n#endif\n\nstatic PyThreadState *\nswitch_to_main_interpreter(PyThreadState *tstate)\n{\n    if (_Py_IsMainInterpreter(tstate->interp)) {\n        return tstate;\n    }\n    PyThreadState *main_tstate = _PyThreadState_NewBound(\n            _PyInterpreterState_Main(), _PyThreadState_WHENCE_EXEC);\n    if (main_tstate == NULL) {\n        return NULL;\n    }\n#ifndef NDEBUG\n    PyThreadState *old_tstate = PyThreadState_Swap(main_tstate);\n    assert(old_tstate == tstate);\n#else\n    (void)PyThreadState_Swap(main_tstate);\n#endif\n    return main_tstate;\n}\n\nstatic void\nswitch_back_from_main_interpreter(PyThreadState *tstate,\n                                  PyThreadState *main_tstate,\n                                  PyObject *tempobj)\n{\n    assert(main_tstate == PyThreadState_GET());\n    assert(_Py_IsMainInterpreter(main_tstate->interp));\n    assert(tstate->interp != main_tstate->interp);\n\n    /* Handle any exceptions, which we cannot propagate directly\n     * to the subinterpreter. */\n    if (PyErr_Occurred()) {\n        if (PyErr_ExceptionMatches(PyExc_MemoryError)) {\n            /* We trust it will be caught again soon. */\n            PyErr_Clear();\n        }\n        else {\n            /* Printing the exception should be sufficient. */\n            PyErr_PrintEx(0);\n        }\n    }\n\n    Py_XDECREF(tempobj);\n\n    PyThreadState_Clear(main_tstate);\n    (void)PyThreadState_Swap(tstate);\n    PyThreadState_Delete(main_tstate);\n}\n\nstatic PyObject *\nget_core_module_dict(PyInterpreterState *interp,\n                     PyObject *name, PyObject *path)\n{\n    /* Only builtin modules are core. */\n    if (path == name) {\n        assert(!PyErr_Occurred());\n        if (PyUnicode_CompareWithASCIIString(name, \"sys\") == 0) {\n            return Py_NewRef(interp->sysdict_copy);\n        }\n        assert(!PyErr_Occurred());\n        if (PyUnicode_CompareWithASCIIString(name, \"builtins\") == 0) {\n            return Py_NewRef(interp->builtins_copy);\n        }\n        assert(!PyErr_Occurred());\n    }\n    return NULL;\n}\n\n#ifndef NDEBUG\nstatic inline int\nis_core_module(PyInterpreterState *interp, PyObject *name, PyObject *path)\n{\n    /* This might be called before the core dict copies are in place,\n       so we can't rely on get_core_module_dict() here. */\n    if (path == name) {\n        if (PyUnicode_CompareWithASCIIString(name, \"sys\") == 0) {\n            return 1;\n        }\n        if (PyUnicode_CompareWithASCIIString(name, \"builtins\") == 0) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\n\nstatic _Py_ext_module_kind\n_get_extension_kind(PyModuleDef *def, bool check_size)\n{\n    _Py_ext_module_kind kind;\n    if (def == NULL) {\n        /* It must be a module created by reload_singlephase_extension()\n         * from m_copy.  Ideally we'd do away with this case. */\n        kind = _Py_ext_module_kind_SINGLEPHASE;\n    }\n    else if (def->m_slots != NULL) {\n        kind = _Py_ext_module_kind_MULTIPHASE;\n    }\n    else if (check_size && def->m_size == -1) {\n        kind = _Py_ext_module_kind_SINGLEPHASE;\n    }\n    else if (def->m_base.m_init != NULL) {\n        kind = _Py_ext_module_kind_SINGLEPHASE;\n    }\n    else {\n        // This is probably single-phase init, but a multi-phase\n        // module *can* have NULL m_slots.\n        kind = _Py_ext_module_kind_UNKNOWN;\n    }\n    return kind;\n}\n\n/* The module might not be fully initialized yet\n * and PyModule_FromDefAndSpec() checks m_size\n * so we skip m_size. */\n#define assert_multiphase_def(def)                                  \\\n    do {                                                            \\\n        _Py_ext_module_kind kind = _get_extension_kind(def, false); \\\n        assert(kind == _Py_ext_module_kind_MULTIPHASE               \\\n                /* m_slots can be NULL. */                          \\\n                || kind == _Py_ext_module_kind_UNKNOWN);            \\\n    } while (0)\n\n#define assert_singlephase_def(def)                                 \\\n    do {                                                            \\\n        _Py_ext_module_kind kind = _get_extension_kind(def, true);  \\\n        assert(kind == _Py_ext_module_kind_SINGLEPHASE              \\\n                || kind == _Py_ext_module_kind_UNKNOWN);            \\\n    } while (0)\n\n#define assert_singlephase(cached)                                          \\\n    do {                                                                    \\\n        _Py_ext_module_kind kind = _get_extension_kind(cached->def, true);  \\\n        assert(kind == _Py_ext_module_kind_SINGLEPHASE);                    \\\n    } while (0)\n\n#else  /* defined(NDEBUG) */\n#define assert_multiphase_def(def)\n#define assert_singlephase_def(def)\n#define assert_singlephase(cached)\n#endif\n\n\nstruct singlephase_global_update {\n    PyModInitFunction m_init;\n    Py_ssize_t m_index;\n    PyObject *m_dict;\n    _Py_ext_module_origin origin;\n    void *md_gil;\n};\n\nstatic struct extensions_cache_value *\nupdate_global_state_for_extension(PyThreadState *tstate,\n                                  PyObject *path, PyObject *name,\n                                  PyModuleDef *def,\n                                  struct singlephase_global_update *singlephase)\n{\n    struct extensions_cache_value *cached = NULL;\n    PyModInitFunction m_init = NULL;\n    PyObject *m_dict = NULL;\n\n    /* Set up for _extensions_cache_set(). */\n    if (singlephase == NULL) {\n        assert(def->m_base.m_init == NULL);\n        assert(def->m_base.m_copy == NULL);\n    }\n    else {\n        if (singlephase->m_init != NULL) {\n            assert(singlephase->m_dict == NULL);\n            assert(def->m_base.m_copy == NULL);\n            assert(def->m_size >= 0);\n            /* Remember pointer to module init function. */\n            // XXX If two modules share a def then def->m_base will\n            // reflect the last one added (here) to the global cache.\n            // We should prevent this somehow.  The simplest solution\n            // is probably to store m_copy/m_init in the cache along\n            // with the def, rather than within the def.\n            m_init = singlephase->m_init;\n        }\n        else if (singlephase->m_dict == NULL) {\n            /* It must be a core builtin module. */\n            assert(is_core_module(tstate->interp, name, path));\n            assert(def->m_size == -1);\n            assert(def->m_base.m_copy == NULL);\n            assert(def->m_base.m_init == NULL);\n        }\n        else {\n            assert(PyDict_Check(singlephase->m_dict));\n            // gh-88216: Extensions and def->m_base.m_copy can be updated\n            // when the extension module doesn't support sub-interpreters.\n            assert(def->m_size == -1);\n            assert(!is_core_module(tstate->interp, name, path));\n            assert(PyUnicode_CompareWithASCIIString(name, \"sys\") != 0);\n            assert(PyUnicode_CompareWithASCIIString(name, \"builtins\") != 0);\n            m_dict = singlephase->m_dict;\n        }\n    }\n\n    /* Add the module's def to the global cache. */\n    // XXX Why special-case the main interpreter?\n    if (_Py_IsMainInterpreter(tstate->interp) || def->m_size == -1) {\n#ifndef NDEBUG\n        cached = _extensions_cache_get(path, name);\n        assert(cached == NULL || cached->def == def);\n#endif\n        cached = _extensions_cache_set(\n                path, name, def, m_init, singlephase->m_index, m_dict,\n                singlephase->origin, singlephase->md_gil);\n        if (cached == NULL) {\n            // XXX Ignore this error?  Doing so would effectively\n            // mark the module as not loadable.\n            return NULL;\n        }\n    }\n\n    return cached;\n}\n\n/* For multi-phase init modules, the module is finished\n * by PyModule_FromDefAndSpec(). */\nstatic int\nfinish_singlephase_extension(PyThreadState *tstate, PyObject *mod,\n                             struct extensions_cache_value *cached,\n                             PyObject *name, PyObject *modules)\n{\n    assert(mod != NULL && PyModule_Check(mod));\n    assert(cached->def == _PyModule_GetDef(mod));\n\n    Py_ssize_t index = _get_cached_module_index(cached);\n    if (_modules_by_index_set(tstate->interp, index, mod) < 0) {\n        return -1;\n    }\n\n    if (modules != NULL) {\n        if (PyObject_SetItem(modules, name, mod) < 0) {\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\n\nstatic PyObject *\nreload_singlephase_extension(PyThreadState *tstate,\n                             struct extensions_cache_value *cached,\n                             struct _Py_ext_module_loader_info *info)\n{\n    PyModuleDef *def = cached->def;\n    assert(def != NULL);\n    assert_singlephase(cached);\n    PyObject *mod = NULL;\n\n    /* It may have been successfully imported previously\n       in an interpreter that allows legacy modules\n       but is not allowed in the current interpreter. */\n    const char *name_buf = PyUnicode_AsUTF8(info->name);\n    assert(name_buf != NULL);\n    if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n        return NULL;\n    }\n\n    PyObject *modules = get_modules_dict(tstate, true);\n    if (def->m_size == -1) {\n        /* Module does not support repeated initialization */\n        assert(cached->m_init == NULL);\n        assert(def->m_base.m_init == NULL);\n        // XXX Copying the cached dict may break interpreter isolation.\n        // We could solve this by temporarily acquiring the original\n        // interpreter's GIL.\n        PyObject *m_copy = get_cached_m_dict(cached, info->name, info->path);\n        if (m_copy == NULL) {\n            assert(!PyErr_Occurred());\n            return NULL;\n        }\n        mod = import_add_module(tstate, info->name);\n        if (mod == NULL) {\n            Py_DECREF(m_copy);\n            return NULL;\n        }\n        PyObject *mdict = PyModule_GetDict(mod);\n        if (mdict == NULL) {\n            Py_DECREF(m_copy);\n            Py_DECREF(mod);\n            return NULL;\n        }\n        int rc = PyDict_Update(mdict, m_copy);\n        Py_DECREF(m_copy);\n        if (rc < 0) {\n            Py_DECREF(mod);\n            return NULL;\n        }\n#ifdef Py_GIL_DISABLED\n        if (def->m_base.m_copy != NULL) {\n            // For non-core modules, fetch the GIL slot that was stored by\n            // import_run_extension().\n            ((PyModuleObject *)mod)->md_gil = cached->md_gil;\n        }\n#endif\n        /* We can't set mod->md_def if it's missing,\n         * because _PyImport_ClearModulesByIndex() might break\n         * due to violating interpreter isolation.\n         * See the note in set_cached_m_dict().\n         * Until that is solved, we leave md_def set to NULL. */\n        assert(_PyModule_GetDef(mod) == NULL\n               || _PyModule_GetDef(mod) == def);\n    }\n    else {\n        assert(cached->m_dict == NULL);\n        assert(def->m_base.m_copy == NULL);\n        // XXX Use cached->m_init.\n        PyModInitFunction p0 = def->m_base.m_init;\n        if (p0 == NULL) {\n            assert(!PyErr_Occurred());\n            return NULL;\n        }\n        struct _Py_ext_module_loader_result res;\n        if (_PyImport_RunModInitFunc(p0, info, &res) < 0) {\n            _Py_ext_module_loader_result_apply_error(&res, name_buf);\n            return NULL;\n        }\n        assert(!PyErr_Occurred());\n        assert(res.err == NULL);\n        assert(res.kind == _Py_ext_module_kind_SINGLEPHASE);\n        mod = res.module;\n        /* Tchnically, the init function could return a different module def.\n         * Then we would probably need to update the global cache.\n         * However, we don't expect anyone to change the def. */\n        assert(res.def == def);\n        _Py_ext_module_loader_result_clear(&res);\n\n        /* Remember the filename as the __file__ attribute */\n        if (info->filename != NULL) {\n            if (PyModule_AddObjectRef(mod, \"__file__\", info->filename) < 0) {\n                PyErr_Clear(); /* Not important enough to report */\n            }\n        }\n\n        if (PyObject_SetItem(modules, info->name, mod) == -1) {\n            Py_DECREF(mod);\n            return NULL;\n        }\n    }\n\n    Py_ssize_t index = _get_cached_module_index(cached);\n    if (_modules_by_index_set(tstate->interp, index, mod) < 0) {\n        PyMapping_DelItem(modules, info->name);\n        Py_DECREF(mod);\n        return NULL;\n    }\n\n    return mod;\n}\n\nstatic PyObject *\nimport_find_extension(PyThreadState *tstate,\n                      struct _Py_ext_module_loader_info *info,\n                      struct extensions_cache_value **p_cached)\n{\n    /* Only single-phase init modules will be in the cache. */\n    struct extensions_cache_value *cached\n            = _extensions_cache_get(info->path, info->name);\n    if (cached == NULL) {\n        return NULL;\n    }\n    assert(cached->def != NULL);\n    assert_singlephase(cached);\n    *p_cached = cached;\n\n    /* It may have been successfully imported previously\n       in an interpreter that allows legacy modules\n       but is not allowed in the current interpreter. */\n    const char *name_buf = PyUnicode_AsUTF8(info->name);\n    assert(name_buf != NULL);\n    if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n        return NULL;\n    }\n\n    PyObject *mod = reload_singlephase_extension(tstate, cached, info);\n    if (mod == NULL) {\n        return NULL;\n    }\n\n    int verbose = _PyInterpreterState_GetConfig(tstate->interp)->verbose;\n    if (verbose) {\n        PySys_FormatStderr(\"import %U # previously loaded (%R)\\n\",\n                           info->name, info->path);\n    }\n\n    return mod;\n}\n\nstatic PyObject *\nimport_run_extension(PyThreadState *tstate, PyModInitFunction p0,\n                     struct _Py_ext_module_loader_info *info,\n                     PyObject *spec, PyObject *modules)\n{\n    /* Core modules go through _PyImport_FixupBuiltin(). */\n    assert(!is_core_module(tstate->interp, info->name, info->path));\n\n    PyObject *mod = NULL;\n    PyModuleDef *def = NULL;\n    struct extensions_cache_value *cached = NULL;\n    const char *name_buf = PyBytes_AS_STRING(info->name_encoded);\n\n    /* We cannot know if the module is single-phase init or\n     * multi-phase init until after we call its init function. Even\n     * in isolated interpreters (that do not support single-phase init),\n     * the init function will run without restriction.  For multi-phase\n     * init modules that isn't a problem because the init function only\n     * runs PyModuleDef_Init() on the module's def and then returns it.\n     *\n     * However, for single-phase init the module's init function will\n     * create the module, create other objects (and allocate other\n     * memory), populate it and its module state, and initialze static\n     * types.  Some modules store other objects and data in global C\n     * variables and register callbacks with the runtime/stdlib or\n     * even external libraries (which is part of why we can't just\n     * dlclose() the module in the error case).  That's a problem\n     * for isolated interpreters since all of the above happens\n     * and only then * will the import fail.  Memory will leak,\n     * callbacks will still get used, and sometimes there\n     * will be crashes (memory access violations\n     * and use-after-free).\n     *\n     * To put it another way, if the module is single-phase init\n     * then the import will probably break interpreter isolation\n     * and should fail ASAP.  However, the module's init function\n     * will still get run.  That means it may still store state\n     * in the shared-object/DLL address space (which never gets\n     * closed/cleared), including objects (e.g. static types).\n     * This is a problem for isolated subinterpreters since each\n     * has its own object allocator.  If the loaded shared-object\n     * still holds a reference to an object after the corresponding\n     * interpreter has finalized then either we must let it leak\n     * or else any later use of that object by another interpreter\n     * (or across multiple init-fini cycles) will crash the process.\n     *\n     * To avoid all of that, we make sure the module's init function\n     * is always run first with the main interpreter active.  If it was\n     * already the main interpreter then we can continue loading the\n     * module like normal.  Otherwise, right after the init function,\n     * we take care of some import state bookkeeping, switch back\n     * to the subinterpreter, check for single-phase init,\n     * and then continue loading like normal. */\n\n    bool switched = false;\n    /* We *could* leave in place a legacy interpreter here\n     * (one that shares obmalloc/GIL with main interp),\n     * but there isn't a big advantage, we anticipate\n     * such interpreters will be increasingly uncommon,\n     * and the code is a bit simpler if we always switch\n     * to the main interpreter. */\n    PyThreadState *main_tstate = switch_to_main_interpreter(tstate);\n    if (main_tstate == NULL) {\n        return NULL;\n    }\n    else if (main_tstate != tstate) {\n        switched = true;\n        /* In the switched case, we could play it safe\n         * by getting the main interpreter's import lock here.\n         * It's unlikely to matter though. */\n    }\n\n    struct _Py_ext_module_loader_result res;\n    int rc = _PyImport_RunModInitFunc(p0, info, &res);\n    if (rc < 0) {\n        /* We discard res.def. */\n        assert(res.module == NULL);\n    }\n    else {\n        assert(!PyErr_Occurred());\n        assert(res.err == NULL);\n\n        mod = res.module;\n        res.module = NULL;\n        def = res.def;\n        assert(def != NULL);\n\n        /* Do anything else that should be done\n         * while still using the main interpreter. */\n        if (res.kind == _Py_ext_module_kind_SINGLEPHASE) {\n            /* Remember the filename as the __file__ attribute */\n            if (info->filename != NULL) {\n                PyObject *filename = NULL;\n                if (switched) {\n                    // The original filename may be allocated by subinterpreter's\n                    // obmalloc, so we create a copy here.\n                    filename = _PyUnicode_Copy(info->filename);\n                    if (filename == NULL) {\n                        return NULL;\n                    }\n                } else {\n                    filename = Py_NewRef(info->filename);\n                }\n                // XXX There's a refleak somewhere with the filename.\n                // Until we can track it down, we immortalize it.\n                PyInterpreterState *interp = _PyInterpreterState_GET();\n                _PyUnicode_InternImmortal(interp, &filename);\n\n                if (PyModule_AddObjectRef(mod, \"__file__\", filename) < 0) {\n                    PyErr_Clear(); /* Not important enough to report */\n                }\n            }\n\n            /* Update global import state. */\n            assert(def->m_base.m_index != 0);\n            struct singlephase_global_update singlephase = {\n                // XXX Modules that share a def should each get their own index,\n                // whereas currently they share (which means the per-interpreter\n                // cache is less reliable than it should be).\n                .m_index=def->m_base.m_index,\n                .origin=info->origin,\n#ifdef Py_GIL_DISABLED\n                .md_gil=((PyModuleObject *)mod)->md_gil,\n#endif\n            };\n            // gh-88216: Extensions and def->m_base.m_copy can be updated\n            // when the extension module doesn't support sub-interpreters.\n            if (def->m_size == -1) {\n                /* We will reload from m_copy. */\n                assert(def->m_base.m_init == NULL);\n                singlephase.m_dict = PyModule_GetDict(mod);\n                assert(singlephase.m_dict != NULL);\n            }\n            else {\n                /* We will reload via the init function. */\n                assert(def->m_size >= 0);\n                assert(def->m_base.m_copy == NULL);\n                singlephase.m_init = p0;\n            }\n            cached = update_global_state_for_extension(\n                    tstate, info->path, info->name, def, &singlephase);\n            if (cached == NULL) {\n                assert(PyErr_Occurred());\n                goto main_finally;\n            }\n        }\n    }\n\nmain_finally:\n    /* Switch back to the subinterpreter. */\n    if (switched) {\n        assert(main_tstate != tstate);\n        switch_back_from_main_interpreter(tstate, main_tstate, mod);\n        /* Any module we got from the init function will have to be\n         * reloaded in the subinterpreter. */\n        mod = NULL;\n    }\n\n    /*****************************************************************/\n    /* At this point we are back to the interpreter we started with. */\n    /*****************************************************************/\n\n    /* Finally we handle the error return from _PyImport_RunModInitFunc(). */\n    if (rc < 0) {\n        _Py_ext_module_loader_result_apply_error(&res, name_buf);\n        goto error;\n    }\n\n    if (res.kind == _Py_ext_module_kind_MULTIPHASE) {\n        assert_multiphase_def(def);\n        assert(mod == NULL);\n        /* Note that we cheat a little by not repeating the calls\n         * to _PyImport_GetModInitFunc() and _PyImport_RunModInitFunc(). */\n        mod = PyModule_FromDefAndSpec(def, spec);\n        if (mod == NULL) {\n            goto error;\n        }\n    }\n    else {\n        assert(res.kind == _Py_ext_module_kind_SINGLEPHASE);\n        assert_singlephase_def(def);\n\n        if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n            goto error;\n        }\n        assert(!PyErr_Occurred());\n\n        if (switched) {\n            /* We switched to the main interpreter to run the init\n             * function, so now we will \"reload\" the module from the\n             * cached data using the original subinterpreter. */\n            assert(mod == NULL);\n            mod = reload_singlephase_extension(tstate, cached, info);\n            if (mod == NULL) {\n                goto error;\n            }\n            assert(!PyErr_Occurred());\n            assert(PyModule_Check(mod));\n        }\n        else {\n            assert(mod != NULL);\n            assert(PyModule_Check(mod));\n\n            /* Update per-interpreter import state. */\n            PyObject *modules = get_modules_dict(tstate, true);\n            if (finish_singlephase_extension(\n                    tstate, mod, cached, info->name, modules) < 0)\n            {\n                goto error;\n            }\n        }\n    }\n\n    _Py_ext_module_loader_result_clear(&res);\n    return mod;\n\nerror:\n    Py_XDECREF(mod);\n    _Py_ext_module_loader_result_clear(&res);\n    return NULL;\n}\n\n\nstatic int\nclear_singlephase_extension(PyInterpreterState *interp,\n                            PyObject *name, PyObject *path)\n{\n    struct extensions_cache_value *cached = _extensions_cache_get(path, name);\n    if (cached == NULL) {\n        if (PyErr_Occurred()) {\n            return -1;\n        }\n        return 0;\n    }\n    PyModuleDef *def = cached->def;\n\n    /* Clear data set when the module was initially loaded. */\n    def->m_base.m_init = NULL;\n    Py_CLEAR(def->m_base.m_copy);\n    def->m_base.m_index = 0;\n\n    /* Clear the PyState_*Module() cache entry. */\n    Py_ssize_t index = _get_cached_module_index(cached);\n    if (_modules_by_index_check(interp, index) == NULL) {\n        if (_modules_by_index_clear_one(interp, index) < 0) {\n            return -1;\n        }\n    }\n\n    /* We must use the main interpreter to clean up the cache.\n     * See the note in import_run_extension(). */\n    PyThreadState *tstate = PyThreadState_GET();\n    PyThreadState *main_tstate = switch_to_main_interpreter(tstate);\n    if (main_tstate == NULL) {\n        return -1;\n    }\n\n    /* Clear the cached module def. */\n    _extensions_cache_delete(path, name);\n\n    if (main_tstate != tstate) {\n        switch_back_from_main_interpreter(tstate, main_tstate, NULL);\n    }\n\n    return 0;\n}\n\n\n/*******************/\n/* builtin modules */\n/*******************/\n\nint\n_PyImport_FixupBuiltin(PyThreadState *tstate, PyObject *mod, const char *name,\n                       PyObject *modules)\n{\n    int res = -1;\n    assert(mod != NULL && PyModule_Check(mod));\n\n    PyObject *nameobj;\n    nameobj = PyUnicode_InternFromString(name);\n    if (nameobj == NULL) {\n        return -1;\n    }\n\n    PyModuleDef *def = PyModule_GetDef(mod);\n    if (def == NULL) {\n        PyErr_BadInternalCall();\n        goto finally;\n    }\n\n    /* We only use _PyImport_FixupBuiltin() for the core builtin modules\n     * (sys and builtins).  These modules are single-phase init with no\n     * module state, but we also don't populate def->m_base.m_copy\n     * for them. */\n    assert(is_core_module(tstate->interp, nameobj, nameobj));\n    assert_singlephase_def(def);\n    assert(def->m_size == -1);\n    assert(def->m_base.m_copy == NULL);\n    assert(def->m_base.m_index >= 0);\n\n    /* We aren't using import_find_extension() for core modules,\n     * so we have to do the extra check to make sure the module\n     * isn't already in the global cache before calling\n     * update_global_state_for_extension(). */\n    struct extensions_cache_value *cached\n            = _extensions_cache_get(nameobj, nameobj);\n    if (cached == NULL) {\n        struct singlephase_global_update singlephase = {\n            .m_index=def->m_base.m_index,\n            /* We don't want def->m_base.m_copy populated. */\n            .m_dict=NULL,\n            .origin=_Py_ext_module_origin_CORE,\n#ifdef Py_GIL_DISABLED\n            /* Unused when m_dict == NULL. */\n            .md_gil=NULL,\n#endif\n        };\n        cached = update_global_state_for_extension(\n                tstate, nameobj, nameobj, def, &singlephase);\n        if (cached == NULL) {\n            goto finally;\n        }\n    }\n\n    if (finish_singlephase_extension(tstate, mod, cached, nameobj, modules) < 0) {\n        goto finally;\n    }\n\n    res = 0;\n\nfinally:\n    Py_DECREF(nameobj);\n    return res;\n}\n\n/* Helper to test for built-in module */\n\nstatic int\nis_builtin(PyObject *name)\n{\n    int i;\n    struct _inittab *inittab = INITTAB;\n    for (i = 0; inittab[i].name != NULL; i++) {\n        if (_PyUnicode_EqualToASCIIString(name, inittab[i].name)) {\n            if (inittab[i].initfunc == NULL)\n                return -1;\n            else\n                return 1;\n        }\n    }\n    return 0;\n}\n\nstatic PyObject*\ncreate_builtin(PyThreadState *tstate, PyObject *name, PyObject *spec)\n{\n    struct _Py_ext_module_loader_info info;\n    if (_Py_ext_module_loader_info_init_for_builtin(&info, name) < 0) {\n        return NULL;\n    }\n\n    struct extensions_cache_value *cached = NULL;\n    PyObject *mod = import_find_extension(tstate, &info, &cached);\n    if (mod != NULL) {\n        assert(!_PyErr_Occurred(tstate));\n        assert(cached != NULL);\n        /* The module might not have md_def set in certain reload cases. */\n        assert(_PyModule_GetDef(mod) == NULL\n                || cached->def == _PyModule_GetDef(mod));\n        assert_singlephase(cached);\n        goto finally;\n    }\n    else if (_PyErr_Occurred(tstate)) {\n        goto finally;\n    }\n\n    /* If the module was added to the global cache\n     * but def->m_base.m_copy was cleared (e.g. subinterp fini)\n     * then we have to do a little dance here. */\n    if (cached != NULL) {\n        assert(cached->def->m_base.m_copy == NULL);\n        /* For now we clear the cache and move on. */\n        _extensions_cache_delete(info.path, info.name);\n    }\n\n    struct _inittab *found = NULL;\n    for (struct _inittab *p = INITTAB; p->name != NULL; p++) {\n        if (_PyUnicode_EqualToASCIIString(info.name, p->name)) {\n            found = p;\n        }\n    }\n    if (found == NULL) {\n        // not found\n        mod = Py_NewRef(Py_None);\n        goto finally;\n    }\n\n    PyModInitFunction p0 = (PyModInitFunction)found->initfunc;\n    if (p0 == NULL) {\n        /* Cannot re-init internal module (\"sys\" or \"builtins\") */\n        assert(is_core_module(tstate->interp, info.name, info.path));\n        mod = import_add_module(tstate, info.name);\n        goto finally;\n    }\n\n#ifdef Py_GIL_DISABLED\n    // This call (and the corresponding call to _PyImport_CheckGILForModule())\n    // would ideally be inside import_run_extension(). They are kept in the\n    // callers for now because that would complicate the control flow inside\n    // import_run_extension(). It should be possible to restructure\n    // import_run_extension() to address this.\n    _PyEval_EnableGILTransient(tstate);\n#endif\n    /* Now load it. */\n    mod = import_run_extension(\n                    tstate, p0, &info, spec, get_modules_dict(tstate, true));\n#ifdef Py_GIL_DISABLED\n    if (_PyImport_CheckGILForModule(mod, info.name) < 0) {\n        Py_CLEAR(mod);\n        goto finally;\n    }\n#endif\n\nfinally:\n    _Py_ext_module_loader_info_clear(&info);\n    return mod;\n}\n\n\n/*****************************/\n/* the builtin modules table */\n/*****************************/\n\n/* API for embedding applications that want to add their own entries\n   to the table of built-in modules.  This should normally be called\n   *before* Py_Initialize().  When the table resize fails, -1 is\n   returned and the existing table is unchanged.\n\n   After a similar function by Just van Rossum. */\n\nint\nPyImport_ExtendInittab(struct _inittab *newtab)\n{\n    struct _inittab *p;\n    size_t i, n;\n    int res = 0;\n\n    if (INITTAB != NULL) {\n        Py_FatalError(\"PyImport_ExtendInittab() may not be called after Py_Initialize()\");\n    }\n\n    /* Count the number of entries in both tables */\n    for (n = 0; newtab[n].name != NULL; n++)\n        ;\n    if (n == 0)\n        return 0; /* Nothing to do */\n    for (i = 0; PyImport_Inittab[i].name != NULL; i++)\n        ;\n\n    /* Force default raw memory allocator to get a known allocator to be able\n       to release the memory in _PyImport_Fini2() */\n    PyMemAllocatorEx old_alloc;\n    _PyMem_SetDefaultAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n\n    /* Allocate new memory for the combined table */\n    p = NULL;\n    if (i + n <= SIZE_MAX / sizeof(struct _inittab) - 1) {\n        size_t size = sizeof(struct _inittab) * (i + n + 1);\n        p = PyMem_RawRealloc(inittab_copy, size);\n    }\n    if (p == NULL) {\n        res = -1;\n        goto done;\n    }\n\n    /* Copy the tables into the new memory at the first call\n       to PyImport_ExtendInittab(). */\n    if (inittab_copy != PyImport_Inittab) {\n        memcpy(p, PyImport_Inittab, (i+1) * sizeof(struct _inittab));\n    }\n    memcpy(p + i, newtab, (n + 1) * sizeof(struct _inittab));\n    PyImport_Inittab = inittab_copy = p;\n\ndone:\n    PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n    return res;\n}\n\n/* Shorthand to add a single entry given a name and a function */\n\nint\nPyImport_AppendInittab(const char *name, PyObject* (*initfunc)(void))\n{\n    struct _inittab newtab[2];\n\n    if (INITTAB != NULL) {\n        Py_FatalError(\"PyImport_AppendInittab() may not be called after Py_Initialize()\");\n    }\n\n    memset(newtab, '\\0', sizeof newtab);\n\n    newtab[0].name = name;\n    newtab[0].initfunc = initfunc;\n\n    return PyImport_ExtendInittab(newtab);\n}\n\n\n/* the internal table */\n\nstatic int\ninit_builtin_modules_table(void)\n{\n    size_t size;\n    for (size = 0; PyImport_Inittab[size].name != NULL; size++)\n        ;\n    size++;\n\n    /* Make the copy. */\n    struct _inittab *copied = PyMem_RawMalloc(size * sizeof(struct _inittab));\n    if (copied == NULL) {\n        return -1;\n    }\n    memcpy(copied, PyImport_Inittab, size * sizeof(struct _inittab));\n    INITTAB = copied;\n    return 0;\n}\n\nstatic void\nfini_builtin_modules_table(void)\n{\n    struct _inittab *inittab = INITTAB;\n    INITTAB = NULL;\n    PyMem_RawFree(inittab);\n}\n\nPyObject *\n_PyImport_GetBuiltinModuleNames(void)\n{\n    PyObject *list = PyList_New(0);\n    if (list == NULL) {\n        return NULL;\n    }\n    struct _inittab *inittab = INITTAB;\n    for (Py_ssize_t i = 0; inittab[i].name != NULL; i++) {\n        PyObject *name = PyUnicode_FromString(inittab[i].name);\n        if (name == NULL) {\n            Py_DECREF(list);\n            return NULL;\n        }\n        if (PyList_Append(list, name) < 0) {\n            Py_DECREF(name);\n            Py_DECREF(list);\n            return NULL;\n        }\n        Py_DECREF(name);\n    }\n    return list;\n}\n\n\n/********************/\n/* the magic number */\n/********************/\n\n/* Helper for pythonrun.c -- return magic number and tag. */\n\nlong\nPyImport_GetMagicNumber(void)\n{\n    long res;\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    PyObject *external, *pyc_magic;\n\n    external = PyObject_GetAttrString(IMPORTLIB(interp), \"_bootstrap_external\");\n    if (external == NULL)\n        return -1;\n    pyc_magic = PyObject_GetAttrString(external, \"_RAW_MAGIC_NUMBER\");\n    Py_DECREF(external);\n    if (pyc_magic == NULL)\n        return -1;\n    res = PyLong_AsLong(pyc_magic);\n    Py_DECREF(pyc_magic);\n    return res;\n}\n\n\nextern const char * _PySys_ImplCacheTag;\n\nconst char *\nPyImport_GetMagicTag(void)\n{\n    return _PySys_ImplCacheTag;\n}\n\n\n/*********************************/\n/* a Python module's code object */\n/*********************************/\n\n/* Execute a code object in a module and return the module object\n * WITH INCREMENTED REFERENCE COUNT.  If an error occurs, name is\n * removed from sys.modules, to avoid leaving damaged module objects\n * in sys.modules.  The caller may wish to restore the original\n * module object (if any) in this case; PyImport_ReloadModule is an\n * example.\n *\n * Note that PyImport_ExecCodeModuleWithPathnames() is the preferred, richer\n * interface.  The other two exist primarily for backward compatibility.\n */\nPyObject *\nPyImport_ExecCodeModule(const char *name, PyObject *co)\n{\n    return PyImport_ExecCodeModuleWithPathnames(\n        name, co, (char *)NULL, (char *)NULL);\n}\n\nPyObject *\nPyImport_ExecCodeModuleEx(const char *name, PyObject *co, const char *pathname)\n{\n    return PyImport_ExecCodeModuleWithPathnames(\n        name, co, pathname, (char *)NULL);\n}\n\nPyObject *\nPyImport_ExecCodeModuleWithPathnames(const char *name, PyObject *co,\n                                     const char *pathname,\n                                     const char *cpathname)\n{\n    PyObject *m = NULL;\n    PyObject *nameobj, *pathobj = NULL, *cpathobj = NULL, *external= NULL;\n\n    nameobj = PyUnicode_FromString(name);\n    if (nameobj == NULL)\n        return NULL;\n\n    if (cpathname != NULL) {\n        cpathobj = PyUnicode_DecodeFSDefault(cpathname);\n        if (cpathobj == NULL)\n            goto error;\n    }\n    else\n        cpathobj = NULL;\n\n    if (pathname != NULL) {\n        pathobj = PyUnicode_DecodeFSDefault(pathname);\n        if (pathobj == NULL)\n            goto error;\n    }\n    else if (cpathobj != NULL) {\n        PyInterpreterState *interp = _PyInterpreterState_GET();\n\n        if (interp == NULL) {\n            Py_FatalError(\"no current interpreter\");\n        }\n\n        external= PyObject_GetAttrString(IMPORTLIB(interp),\n                                         \"_bootstrap_external\");\n        if (external != NULL) {\n            pathobj = PyObject_CallMethodOneArg(\n                external, &_Py_ID(_get_sourcefile), cpathobj);\n            Py_DECREF(external);\n        }\n        if (pathobj == NULL)\n            PyErr_Clear();\n    }\n    else\n        pathobj = NULL;\n\n    m = PyImport_ExecCodeModuleObject(nameobj, co, pathobj, cpathobj);\nerror:\n    Py_DECREF(nameobj);\n    Py_XDECREF(pathobj);\n    Py_XDECREF(cpathobj);\n    return m;\n}\n\nstatic PyObject *\nmodule_dict_for_exec(PyThreadState *tstate, PyObject *name)\n{\n    PyObject *m, *d;\n\n    m = import_add_module(tstate, name);\n    if (m == NULL)\n        return NULL;\n    /* If the module is being reloaded, we get the old module back\n       and re-use its dict to exec the new code. */\n    d = PyModule_GetDict(m);\n    int r = PyDict_Contains(d, &_Py_ID(__builtins__));\n    if (r == 0) {\n        r = PyDict_SetItem(d, &_Py_ID(__builtins__), PyEval_GetBuiltins());\n    }\n    if (r < 0) {\n        remove_module(tstate, name);\n        Py_DECREF(m);\n        return NULL;\n    }\n\n    Py_INCREF(d);\n    Py_DECREF(m);\n    return d;\n}\n\nstatic PyObject *\nexec_code_in_module(PyThreadState *tstate, PyObject *name,\n                    PyObject *module_dict, PyObject *code_object)\n{\n    PyObject *v, *m;\n\n    v = PyEval_EvalCode(code_object, module_dict, module_dict);\n    if (v == NULL) {\n        remove_module(tstate, name);\n        return NULL;\n    }\n    Py_DECREF(v);\n\n    m = import_get_module(tstate, name);\n    if (m == NULL && !_PyErr_Occurred(tstate)) {\n        _PyErr_Format(tstate, PyExc_ImportError,\n                      \"Loaded module %R not found in sys.modules\",\n                      name);\n    }\n\n    return m;\n}\n\nPyObject*\nPyImport_ExecCodeModuleObject(PyObject *name, PyObject *co, PyObject *pathname,\n                              PyObject *cpathname)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *d, *external, *res;\n\n    d = module_dict_for_exec(tstate, name);\n    if (d == NULL) {\n        return NULL;\n    }\n\n    if (pathname == NULL) {\n        pathname = ((PyCodeObject *)co)->co_filename;\n    }\n    external = PyObject_GetAttrString(IMPORTLIB(tstate->interp),\n                                      \"_bootstrap_external\");\n    if (external == NULL) {\n        Py_DECREF(d);\n        return NULL;\n    }\n    res = PyObject_CallMethodObjArgs(external, &_Py_ID(_fix_up_module),\n                                     d, name, pathname, cpathname, NULL);\n    Py_DECREF(external);\n    if (res != NULL) {\n        Py_DECREF(res);\n        res = exec_code_in_module(tstate, name, d, co);\n    }\n    Py_DECREF(d);\n    return res;\n}\n\n\nstatic void\nupdate_code_filenames(PyCodeObject *co, PyObject *oldname, PyObject *newname)\n{\n    PyObject *constants, *tmp;\n    Py_ssize_t i, n;\n\n    if (PyUnicode_Compare(co->co_filename, oldname))\n        return;\n\n    Py_XSETREF(co->co_filename, Py_NewRef(newname));\n\n    constants = co->co_consts;\n    n = PyTuple_GET_SIZE(constants);\n    for (i = 0; i < n; i++) {\n        tmp = PyTuple_GET_ITEM(constants, i);\n        if (PyCode_Check(tmp))\n            update_code_filenames((PyCodeObject *)tmp,\n                                  oldname, newname);\n    }\n}\n\nstatic void\nupdate_compiled_module(PyCodeObject *co, PyObject *newname)\n{\n    PyObject *oldname;\n\n    if (PyUnicode_Compare(co->co_filename, newname) == 0)\n        return;\n\n    oldname = co->co_filename;\n    Py_INCREF(oldname);\n    update_code_filenames(co, oldname, newname);\n    Py_DECREF(oldname);\n}\n\n\n/******************/\n/* frozen modules */\n/******************/\n\n/* Return true if the name is an alias.  In that case, \"alias\" is set\n   to the original module name.  If it is an alias but the original\n   module isn't known then \"alias\" is set to NULL while true is returned. */\nstatic bool\nresolve_module_alias(const char *name, const struct _module_alias *aliases,\n                     const char **alias)\n{\n    const struct _module_alias *entry;\n    for (entry = aliases; ; entry++) {\n        if (entry->name == NULL) {\n            /* It isn't an alias. */\n            return false;\n        }\n        if (strcmp(name, entry->name) == 0) {\n            if (alias != NULL) {\n                *alias = entry->orig;\n            }\n            return true;\n        }\n    }\n}\n\nstatic bool\nuse_frozen(void)\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    int override = OVERRIDE_FROZEN_MODULES(interp);\n    if (override > 0) {\n        return true;\n    }\n    else if (override < 0) {\n        return false;\n    }\n    else {\n        return interp->config.use_frozen_modules;\n    }\n}\n\nstatic PyObject *\nlist_frozen_module_names(void)\n{\n    PyObject *names = PyList_New(0);\n    if (names == NULL) {\n        return NULL;\n    }\n    bool enabled = use_frozen();\n    const struct _frozen *p;\n#define ADD_MODULE(name) \\\n    do { \\\n        PyObject *nameobj = PyUnicode_FromString(name); \\\n        if (nameobj == NULL) { \\\n            goto error; \\\n        } \\\n        int res = PyList_Append(names, nameobj); \\\n        Py_DECREF(nameobj); \\\n        if (res != 0) { \\\n            goto error; \\\n        } \\\n    } while(0)\n    // We always use the bootstrap modules.\n    for (p = _PyImport_FrozenBootstrap; ; p++) {\n        if (p->name == NULL) {\n            break;\n        }\n        ADD_MODULE(p->name);\n    }\n    // Frozen stdlib modules may be disabled.\n    for (p = _PyImport_FrozenStdlib; ; p++) {\n        if (p->name == NULL) {\n            break;\n        }\n        if (enabled) {\n            ADD_MODULE(p->name);\n        }\n    }\n    for (p = _PyImport_FrozenTest; ; p++) {\n        if (p->name == NULL) {\n            break;\n        }\n        if (enabled) {\n            ADD_MODULE(p->name);\n        }\n    }\n#undef ADD_MODULE\n    // Add any custom modules.\n    if (PyImport_FrozenModules != NULL) {\n        for (p = PyImport_FrozenModules; ; p++) {\n            if (p->name == NULL) {\n                break;\n            }\n            PyObject *nameobj = PyUnicode_FromString(p->name);\n            if (nameobj == NULL) {\n                goto error;\n            }\n            int found = PySequence_Contains(names, nameobj);\n            if (found < 0) {\n                Py_DECREF(nameobj);\n                goto error;\n            }\n            else if (found) {\n                Py_DECREF(nameobj);\n            }\n            else {\n                int res = PyList_Append(names, nameobj);\n                Py_DECREF(nameobj);\n                if (res != 0) {\n                    goto error;\n                }\n            }\n        }\n    }\n    return names;\n\nerror:\n    Py_DECREF(names);\n    return NULL;\n}\n\ntypedef enum {\n    FROZEN_OKAY,\n    FROZEN_BAD_NAME,    // The given module name wasn't valid.\n    FROZEN_NOT_FOUND,   // It wasn't in PyImport_FrozenModules.\n    FROZEN_DISABLED,    // -X frozen_modules=off (and not essential)\n    FROZEN_EXCLUDED,    /* The PyImport_FrozenModules entry has NULL \"code\"\n                           (module is present but marked as unimportable, stops search). */\n    FROZEN_INVALID,     /* The PyImport_FrozenModules entry is bogus\n                           (eg. does not contain executable code). */\n} frozen_status;\n\nstatic inline void\nset_frozen_error(frozen_status status, PyObject *modname)\n{\n    const char *err = NULL;\n    switch (status) {\n        case FROZEN_BAD_NAME:\n        case FROZEN_NOT_FOUND:\n            err = \"No such frozen object named %R\";\n            break;\n        case FROZEN_DISABLED:\n            err = \"Frozen modules are disabled and the frozen object named %R is not essential\";\n            break;\n        case FROZEN_EXCLUDED:\n            err = \"Excluded frozen object named %R\";\n            break;\n        case FROZEN_INVALID:\n            err = \"Frozen object named %R is invalid\";\n            break;\n        case FROZEN_OKAY:\n            // There was no error.\n            break;\n        default:\n            Py_UNREACHABLE();\n    }\n    if (err != NULL) {\n        PyObject *msg = PyUnicode_FromFormat(err, modname);\n        if (msg == NULL) {\n            PyErr_Clear();\n        }\n        PyErr_SetImportError(msg, modname, NULL);\n        Py_XDECREF(msg);\n    }\n}\n\nstatic const struct _frozen *\nlook_up_frozen(const char *name)\n{\n    const struct _frozen *p;\n    // We always use the bootstrap modules.\n    for (p = _PyImport_FrozenBootstrap; ; p++) {\n        if (p->name == NULL) {\n            // We hit the end-of-list sentinel value.\n            break;\n        }\n        if (strcmp(name, p->name) == 0) {\n            return p;\n        }\n    }\n    // Prefer custom modules, if any.  Frozen stdlib modules can be\n    // disabled here by setting \"code\" to NULL in the array entry.\n    if (PyImport_FrozenModules != NULL) {\n        for (p = PyImport_FrozenModules; ; p++) {\n            if (p->name == NULL) {\n                break;\n            }\n            if (strcmp(name, p->name) == 0) {\n                return p;\n            }\n        }\n    }\n    // Frozen stdlib modules may be disabled.\n    if (use_frozen()) {\n        for (p = _PyImport_FrozenStdlib; ; p++) {\n            if (p->name == NULL) {\n                break;\n            }\n            if (strcmp(name, p->name) == 0) {\n                return p;\n            }\n        }\n        for (p = _PyImport_FrozenTest; ; p++) {\n            if (p->name == NULL) {\n                break;\n            }\n            if (strcmp(name, p->name) == 0) {\n                return p;\n            }\n        }\n    }\n    return NULL;\n}\n\nstruct frozen_info {\n    PyObject *nameobj;\n    const char *data;\n    Py_ssize_t size;\n    bool is_package;\n    bool is_alias;\n    const char *origname;\n};\n\nstatic frozen_status\nfind_frozen(PyObject *nameobj, struct frozen_info *info)\n{\n    if (info != NULL) {\n        memset(info, 0, sizeof(*info));\n    }\n\n    if (nameobj == NULL || nameobj == Py_None) {\n        return FROZEN_BAD_NAME;\n    }\n    const char *name = PyUnicode_AsUTF8(nameobj);\n    if (name == NULL) {\n        // Note that this function previously used\n        // _PyUnicode_EqualToASCIIString().  We clear the error here\n        // (instead of propagating it) to match the earlier behavior\n        // more closely.\n        PyErr_Clear();\n        return FROZEN_BAD_NAME;\n    }\n\n    const struct _frozen *p = look_up_frozen(name);\n    if (p == NULL) {\n        return FROZEN_NOT_FOUND;\n    }\n    if (info != NULL) {\n        info->nameobj = nameobj;  // borrowed\n        info->data = (const char *)p->code;\n        info->size = p->size;\n        info->is_package = p->is_package;\n        if (p->size < 0) {\n            // backward compatibility with negative size values\n            info->size = -(p->size);\n            info->is_package = true;\n        }\n        info->origname = name;\n        info->is_alias = resolve_module_alias(name, _PyImport_FrozenAliases,\n                                              &info->origname);\n    }\n    if (p->code == NULL) {\n        /* It is frozen but marked as un-importable. */\n        return FROZEN_EXCLUDED;\n    }\n    if (p->code[0] == '\\0' || p->size == 0) {\n        /* Does not contain executable code. */\n        return FROZEN_INVALID;\n    }\n    return FROZEN_OKAY;\n}\n\nstatic PyObject *\nunmarshal_frozen_code(PyInterpreterState *interp, struct frozen_info *info)\n{\n    PyObject *co = PyMarshal_ReadObjectFromString(info->data, info->size);\n    if (co == NULL) {\n        /* Does not contain executable code. */\n        PyErr_Clear();\n        set_frozen_error(FROZEN_INVALID, info->nameobj);\n        return NULL;\n    }\n    if (!PyCode_Check(co)) {\n        // We stick with TypeError for backward compatibility.\n        PyErr_Format(PyExc_TypeError,\n                     \"frozen object %R is not a code object\",\n                     info->nameobj);\n        Py_DECREF(co);\n        return NULL;\n    }\n    return co;\n}\n\n\n/* Initialize a frozen module.\n   Return 1 for success, 0 if the module is not found, and -1 with\n   an exception set if the initialization failed.\n   This function is also used from frozenmain.c */\n\nint\nPyImport_ImportFrozenModuleObject(PyObject *name)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *co, *m, *d = NULL;\n    int err;\n\n    struct frozen_info info;\n    frozen_status status = find_frozen(name, &info);\n    if (status == FROZEN_NOT_FOUND || status == FROZEN_DISABLED) {\n        return 0;\n    }\n    else if (status == FROZEN_BAD_NAME) {\n        return 0;\n    }\n    else if (status != FROZEN_OKAY) {\n        set_frozen_error(status, name);\n        return -1;\n    }\n    co = unmarshal_frozen_code(tstate->interp, &info);\n    if (co == NULL) {\n        return -1;\n    }\n    if (info.is_package) {\n        /* Set __path__ to the empty list */\n        PyObject *l;\n        m = import_add_module(tstate, name);\n        if (m == NULL)\n            goto err_return;\n        d = PyModule_GetDict(m);\n        l = PyList_New(0);\n        if (l == NULL) {\n            Py_DECREF(m);\n            goto err_return;\n        }\n        err = PyDict_SetItemString(d, \"__path__\", l);\n        Py_DECREF(l);\n        Py_DECREF(m);\n        if (err != 0)\n            goto err_return;\n    }\n    d = module_dict_for_exec(tstate, name);\n    if (d == NULL) {\n        goto err_return;\n    }\n    m = exec_code_in_module(tstate, name, d, co);\n    if (m == NULL) {\n        goto err_return;\n    }\n    Py_DECREF(m);\n    /* Set __origname__ (consumed in FrozenImporter._setup_module()). */\n    PyObject *origname;\n    if (info.origname) {\n        origname = PyUnicode_FromString(info.origname);\n        if (origname == NULL) {\n            goto err_return;\n        }\n    }\n    else {\n        origname = Py_NewRef(Py_None);\n    }\n    err = PyDict_SetItemString(d, \"__origname__\", origname);\n    Py_DECREF(origname);\n    if (err != 0) {\n        goto err_return;\n    }\n    Py_DECREF(d);\n    Py_DECREF(co);\n    return 1;\n\nerr_return:\n    Py_XDECREF(d);\n    Py_DECREF(co);\n    return -1;\n}\n\nint\nPyImport_ImportFrozenModule(const char *name)\n{\n    PyObject *nameobj;\n    int ret;\n    nameobj = PyUnicode_InternFromString(name);\n    if (nameobj == NULL)\n        return -1;\n    ret = PyImport_ImportFrozenModuleObject(nameobj);\n    Py_DECREF(nameobj);\n    return ret;\n}\n\n\n/*************/\n/* importlib */\n/*************/\n\n/* Import the _imp extension by calling manually _imp.create_builtin() and\n   _imp.exec_builtin() since importlib is not initialized yet. Initializing\n   importlib requires the _imp module: this function fix the bootstrap issue.\n */\nstatic PyObject*\nbootstrap_imp(PyThreadState *tstate)\n{\n    PyObject *name = PyUnicode_FromString(\"_imp\");\n    if (name == NULL) {\n        return NULL;\n    }\n\n    // Mock a ModuleSpec object just good enough for PyModule_FromDefAndSpec():\n    // an object with just a name attribute.\n    //\n    // _imp.__spec__ is overridden by importlib._bootstrap._instal() anyway.\n    PyObject *attrs = Py_BuildValue(\"{sO}\", \"name\", name);\n    if (attrs == NULL) {\n        goto error;\n    }\n    PyObject *spec = _PyNamespace_New(attrs);\n    Py_DECREF(attrs);\n    if (spec == NULL) {\n        goto error;\n    }\n\n    // Create the _imp module from its definition.\n    PyObject *mod = create_builtin(tstate, name, spec);\n    Py_CLEAR(name);\n    Py_DECREF(spec);\n    if (mod == NULL) {\n        goto error;\n    }\n    assert(mod != Py_None);  // not found\n\n    // Execute the _imp module: call imp_module_exec().\n    if (exec_builtin_or_dynamic(mod) < 0) {\n        Py_DECREF(mod);\n        goto error;\n    }\n    return mod;\n\nerror:\n    Py_XDECREF(name);\n    return NULL;\n}\n\n/* Global initializations.  Can be undone by Py_FinalizeEx().  Don't\n   call this twice without an intervening Py_FinalizeEx() call.  When\n   initializations fail, a fatal error is issued and the function does\n   not return.  On return, the first thread and interpreter state have\n   been created.\n\n   Locking: you must hold the interpreter lock while calling this.\n   (If the lock has not yet been initialized, that's equivalent to\n   having the lock, but you cannot use multiple threads.)\n\n*/\nstatic int\ninit_importlib(PyThreadState *tstate, PyObject *sysmod)\n{\n    assert(!_PyErr_Occurred(tstate));\n\n    PyInterpreterState *interp = tstate->interp;\n    int verbose = _PyInterpreterState_GetConfig(interp)->verbose;\n\n    // Import _importlib through its frozen version, _frozen_importlib.\n    if (verbose) {\n        PySys_FormatStderr(\"import _frozen_importlib # frozen\\n\");\n    }\n    if (PyImport_ImportFrozenModule(\"_frozen_importlib\") <= 0) {\n        return -1;\n    }\n\n    PyObject *importlib = PyImport_AddModuleRef(\"_frozen_importlib\");\n    if (importlib == NULL) {\n        return -1;\n    }\n    IMPORTLIB(interp) = importlib;\n\n    // Import the _imp module\n    if (verbose) {\n        PySys_FormatStderr(\"import _imp # builtin\\n\");\n    }\n    PyObject *imp_mod = bootstrap_imp(tstate);\n    if (imp_mod == NULL) {\n        return -1;\n    }\n    if (_PyImport_SetModuleString(\"_imp\", imp_mod) < 0) {\n        Py_DECREF(imp_mod);\n        return -1;\n    }\n\n    // Install importlib as the implementation of import\n    PyObject *value = PyObject_CallMethod(importlib, \"_install\",\n                                          \"OO\", sysmod, imp_mod);\n    Py_DECREF(imp_mod);\n    if (value == NULL) {\n        return -1;\n    }\n    Py_DECREF(value);\n\n    assert(!_PyErr_Occurred(tstate));\n    return 0;\n}\n\n\nstatic int\ninit_importlib_external(PyInterpreterState *interp)\n{\n    PyObject *value;\n    value = PyObject_CallMethod(IMPORTLIB(interp),\n                                \"_install_external_importers\", \"\");\n    if (value == NULL) {\n        return -1;\n    }\n    Py_DECREF(value);\n    return 0;\n}\n\nPyObject *\n_PyImport_GetImportlibLoader(PyInterpreterState *interp,\n                             const char *loader_name)\n{\n    return PyObject_GetAttrString(IMPORTLIB(interp), loader_name);\n}\n\nPyObject *\n_PyImport_GetImportlibExternalLoader(PyInterpreterState *interp,\n                                     const char *loader_name)\n{\n    PyObject *bootstrap = PyObject_GetAttrString(IMPORTLIB(interp),\n                                                 \"_bootstrap_external\");\n    if (bootstrap == NULL) {\n        return NULL;\n    }\n\n    PyObject *loader_type = PyObject_GetAttrString(bootstrap, loader_name);\n    Py_DECREF(bootstrap);\n    return loader_type;\n}\n\nPyObject *\n_PyImport_BlessMyLoader(PyInterpreterState *interp, PyObject *module_globals)\n{\n    PyObject *external = PyObject_GetAttrString(IMPORTLIB(interp),\n                                                \"_bootstrap_external\");\n    if (external == NULL) {\n        return NULL;\n    }\n\n    PyObject *loader = PyObject_CallMethod(external, \"_bless_my_loader\",\n                                           \"O\", module_globals, NULL);\n    Py_DECREF(external);\n    return loader;\n}\n\nPyObject *\n_PyImport_ImportlibModuleRepr(PyInterpreterState *interp, PyObject *m)\n{\n    return PyObject_CallMethod(IMPORTLIB(interp), \"_module_repr\", \"O\", m);\n}\n\n\n/*******************/\n\n/* Return a finder object for a sys.path/pkg.__path__ item 'p',\n   possibly by fetching it from the path_importer_cache dict. If it\n   wasn't yet cached, traverse path_hooks until a hook is found\n   that can handle the path item. Return None if no hook could;\n   this tells our caller that the path based finder could not find\n   a finder for this path item. Cache the result in\n   path_importer_cache. */\n\nstatic PyObject *\nget_path_importer(PyThreadState *tstate, PyObject *path_importer_cache,\n                  PyObject *path_hooks, PyObject *p)\n{\n    PyObject *importer;\n    Py_ssize_t j, nhooks;\n\n    if (!PyList_Check(path_hooks)) {\n        PyErr_SetString(PyExc_RuntimeError, \"sys.path_hooks is not a list\");\n        return NULL;\n    }\n    if (!PyDict_Check(path_importer_cache)) {\n        PyErr_SetString(PyExc_RuntimeError, \"sys.path_importer_cache is not a dict\");\n        return NULL;\n    }\n\n    nhooks = PyList_Size(path_hooks);\n    if (nhooks < 0)\n        return NULL; /* Shouldn't happen */\n\n    if (PyDict_GetItemRef(path_importer_cache, p, &importer) != 0) {\n        // found or error\n        return importer;\n    }\n    // not found\n    /* set path_importer_cache[p] to None to avoid recursion */\n    if (PyDict_SetItem(path_importer_cache, p, Py_None) != 0)\n        return NULL;\n\n    for (j = 0; j < nhooks; j++) {\n        PyObject *hook = PyList_GetItem(path_hooks, j);\n        if (hook == NULL)\n            return NULL;\n        importer = PyObject_CallOneArg(hook, p);\n        if (importer != NULL)\n            break;\n\n        if (!_PyErr_ExceptionMatches(tstate, PyExc_ImportError)) {\n            return NULL;\n        }\n        _PyErr_Clear(tstate);\n    }\n    if (importer == NULL) {\n        Py_RETURN_NONE;\n    }\n    if (PyDict_SetItem(path_importer_cache, p, importer) < 0) {\n        Py_DECREF(importer);\n        return NULL;\n    }\n    return importer;\n}\n\nPyObject *\nPyImport_GetImporter(PyObject *path)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *path_importer_cache = PySys_GetObject(\"path_importer_cache\");\n    if (path_importer_cache == NULL) {\n        PyErr_SetString(PyExc_RuntimeError, \"lost sys.path_importer_cache\");\n        return NULL;\n    }\n    Py_INCREF(path_importer_cache);\n    PyObject *path_hooks = PySys_GetObject(\"path_hooks\");\n    if (path_hooks == NULL) {\n        PyErr_SetString(PyExc_RuntimeError, \"lost sys.path_hooks\");\n        Py_DECREF(path_importer_cache);\n        return NULL;\n    }\n    Py_INCREF(path_hooks);\n    PyObject *importer = get_path_importer(tstate, path_importer_cache, path_hooks, path);\n    Py_DECREF(path_hooks);\n    Py_DECREF(path_importer_cache);\n    return importer;\n}\n\n\n/*********************/\n/* importing modules */\n/*********************/\n\nint\n_PyImport_InitDefaultImportFunc(PyInterpreterState *interp)\n{\n    // Get the __import__ function\n    PyObject *import_func;\n    if (PyDict_GetItemStringRef(interp->builtins, \"__import__\", &import_func) <= 0) {\n        return -1;\n    }\n    IMPORT_FUNC(interp) = import_func;\n    return 0;\n}\n\nint\n_PyImport_IsDefaultImportFunc(PyInterpreterState *interp, PyObject *func)\n{\n    return func == IMPORT_FUNC(interp);\n}\n\n\n/* Import a module, either built-in, frozen, or external, and return\n   its module object WITH INCREMENTED REFERENCE COUNT */\n\nPyObject *\nPyImport_ImportModule(const char *name)\n{\n    PyObject *pname;\n    PyObject *result;\n\n    pname = PyUnicode_FromString(name);\n    if (pname == NULL)\n        return NULL;\n    result = PyImport_Import(pname);\n    Py_DECREF(pname);\n    return result;\n}\n\n\n/* Import a module without blocking\n *\n * At first it tries to fetch the module from sys.modules. If the module was\n * never loaded before it loads it with PyImport_ImportModule() unless another\n * thread holds the import lock. In the latter case the function raises an\n * ImportError instead of blocking.\n *\n * Returns the module object with incremented ref count.\n */\nPyObject *\nPyImport_ImportModuleNoBlock(const char *name)\n{\n    if (PyErr_WarnEx(PyExc_DeprecationWarning,\n        \"PyImport_ImportModuleNoBlock() is deprecated and scheduled for \"\n        \"removal in Python 3.15. Use PyImport_ImportModule() instead.\", 1))\n    {\n        return NULL;\n    }\n    return PyImport_ImportModule(name);\n}\n\n\n/* Remove importlib frames from the traceback,\n * except in Verbose mode. */\nstatic void\nremove_importlib_frames(PyThreadState *tstate)\n{\n    const char *importlib_filename = \"<frozen importlib._bootstrap>\";\n    const char *external_filename = \"<frozen importlib._bootstrap_external>\";\n    const char *remove_frames = \"_call_with_frames_removed\";\n    int always_trim = 0;\n    int in_importlib = 0;\n    PyObject **prev_link, **outer_link = NULL;\n    PyObject *base_tb = NULL;\n\n    /* Synopsis: if it's an ImportError, we trim all importlib chunks\n       from the traceback. We always trim chunks\n       which end with a call to \"_call_with_frames_removed\". */\n\n    PyObject *exc = _PyErr_GetRaisedException(tstate);\n    if (exc == NULL || _PyInterpreterState_GetConfig(tstate->interp)->verbose) {\n        goto done;\n    }\n\n    if (PyType_IsSubtype(Py_TYPE(exc), (PyTypeObject *) PyExc_ImportError)) {\n        always_trim = 1;\n    }\n\n    assert(PyExceptionInstance_Check(exc));\n    base_tb = PyException_GetTraceback(exc);\n    prev_link = &base_tb;\n    PyObject *tb = base_tb;\n    while (tb != NULL) {\n        assert(PyTraceBack_Check(tb));\n        PyTracebackObject *traceback = (PyTracebackObject *)tb;\n        PyObject *next = (PyObject *) traceback->tb_next;\n        PyFrameObject *frame = traceback->tb_frame;\n        PyCodeObject *code = PyFrame_GetCode(frame);\n        int now_in_importlib;\n\n        now_in_importlib = _PyUnicode_EqualToASCIIString(code->co_filename, importlib_filename) ||\n                           _PyUnicode_EqualToASCIIString(code->co_filename, external_filename);\n        if (now_in_importlib && !in_importlib) {\n            /* This is the link to this chunk of importlib tracebacks */\n            outer_link = prev_link;\n        }\n        in_importlib = now_in_importlib;\n\n        if (in_importlib &&\n            (always_trim ||\n             _PyUnicode_EqualToASCIIString(code->co_name, remove_frames))) {\n            Py_XSETREF(*outer_link, Py_XNewRef(next));\n            prev_link = outer_link;\n        }\n        else {\n            prev_link = (PyObject **) &traceback->tb_next;\n        }\n        Py_DECREF(code);\n        tb = next;\n    }\n    if (base_tb == NULL) {\n        base_tb = Py_None;\n        Py_INCREF(Py_None);\n    }\n    PyException_SetTraceback(exc, base_tb);\ndone:\n    Py_XDECREF(base_tb);\n    _PyErr_SetRaisedException(tstate, exc);\n}\n\n\nstatic PyObject *\nresolve_name(PyThreadState *tstate, PyObject *name, PyObject *globals, int level)\n{\n    PyObject *abs_name;\n    PyObject *package = NULL;\n    PyObject *spec = NULL;\n    Py_ssize_t last_dot;\n    PyObject *base;\n    int level_up;\n\n    if (globals == NULL) {\n        _PyErr_SetString(tstate, PyExc_KeyError, \"'__name__' not in globals\");\n        goto error;\n    }\n    if (!PyDict_Check(globals)) {\n        _PyErr_SetString(tstate, PyExc_TypeError, \"globals must be a dict\");\n        goto error;\n    }\n    if (PyDict_GetItemRef(globals, &_Py_ID(__package__), &package) < 0) {\n        goto error;\n    }\n    if (package == Py_None) {\n        Py_DECREF(package);\n        package = NULL;\n    }\n    if (PyDict_GetItemRef(globals, &_Py_ID(__spec__), &spec) < 0) {\n        goto error;\n    }\n\n    if (package != NULL) {\n        if (!PyUnicode_Check(package)) {\n            _PyErr_SetString(tstate, PyExc_TypeError,\n                             \"package must be a string\");\n            goto error;\n        }\n        else if (spec != NULL && spec != Py_None) {\n            int equal;\n            PyObject *parent = PyObject_GetAttr(spec, &_Py_ID(parent));\n            if (parent == NULL) {\n                goto error;\n            }\n\n            equal = PyObject_RichCompareBool(package, parent, Py_EQ);\n            Py_DECREF(parent);\n            if (equal < 0) {\n                goto error;\n            }\n            else if (equal == 0) {\n                if (PyErr_WarnEx(PyExc_DeprecationWarning,\n                        \"__package__ != __spec__.parent\", 1) < 0) {\n                    goto error;\n                }\n            }\n        }\n    }\n    else if (spec != NULL && spec != Py_None) {\n        package = PyObject_GetAttr(spec, &_Py_ID(parent));\n        if (package == NULL) {\n            goto error;\n        }\n        else if (!PyUnicode_Check(package)) {\n            _PyErr_SetString(tstate, PyExc_TypeError,\n                             \"__spec__.parent must be a string\");\n            goto error;\n        }\n    }\n    else {\n        if (PyErr_WarnEx(PyExc_ImportWarning,\n                    \"can't resolve package from __spec__ or __package__, \"\n                    \"falling back on __name__ and __path__\", 1) < 0) {\n            goto error;\n        }\n\n        if (PyDict_GetItemRef(globals, &_Py_ID(__name__), &package) < 0) {\n            goto error;\n        }\n        if (package == NULL) {\n            _PyErr_SetString(tstate, PyExc_KeyError,\n                             \"'__name__' not in globals\");\n            goto error;\n        }\n\n        if (!PyUnicode_Check(package)) {\n            _PyErr_SetString(tstate, PyExc_TypeError,\n                             \"__name__ must be a string\");\n            goto error;\n        }\n\n        int haspath = PyDict_Contains(globals, &_Py_ID(__path__));\n        if (haspath < 0) {\n            goto error;\n        }\n        if (!haspath) {\n            Py_ssize_t dot;\n\n            dot = PyUnicode_FindChar(package, '.',\n                                        0, PyUnicode_GET_LENGTH(package), -1);\n            if (dot == -2) {\n                goto error;\n            }\n            else if (dot == -1) {\n                goto no_parent_error;\n            }\n            PyObject *substr = PyUnicode_Substring(package, 0, dot);\n            if (substr == NULL) {\n                goto error;\n            }\n            Py_SETREF(package, substr);\n        }\n    }\n\n    last_dot = PyUnicode_GET_LENGTH(package);\n    if (last_dot == 0) {\n        goto no_parent_error;\n    }\n\n    for (level_up = 1; level_up < level; level_up += 1) {\n        last_dot = PyUnicode_FindChar(package, '.', 0, last_dot, -1);\n        if (last_dot == -2) {\n            goto error;\n        }\n        else if (last_dot == -1) {\n            _PyErr_SetString(tstate, PyExc_ImportError,\n                             \"attempted relative import beyond top-level \"\n                             \"package\");\n            goto error;\n        }\n    }\n\n    Py_XDECREF(spec);\n    base = PyUnicode_Substring(package, 0, last_dot);\n    Py_DECREF(package);\n    if (base == NULL || PyUnicode_GET_LENGTH(name) == 0) {\n        return base;\n    }\n\n    abs_name = PyUnicode_FromFormat(\"%U.%U\", base, name);\n    Py_DECREF(base);\n    return abs_name;\n\n  no_parent_error:\n    _PyErr_SetString(tstate, PyExc_ImportError,\n                     \"attempted relative import \"\n                     \"with no known parent package\");\n\n  error:\n    Py_XDECREF(spec);\n    Py_XDECREF(package);\n    return NULL;\n}\n\nstatic PyObject *\nimport_find_and_load(PyThreadState *tstate, PyObject *abs_name)\n{\n    PyObject *mod = NULL;\n    PyInterpreterState *interp = tstate->interp;\n    int import_time = _PyInterpreterState_GetConfig(interp)->import_time;\n#define import_level FIND_AND_LOAD(interp).import_level\n#define accumulated FIND_AND_LOAD(interp).accumulated\n\n    PyTime_t t1 = 0, accumulated_copy = accumulated;\n\n    PyObject *sys_path = PySys_GetObject(\"path\");\n    PyObject *sys_meta_path = PySys_GetObject(\"meta_path\");\n    PyObject *sys_path_hooks = PySys_GetObject(\"path_hooks\");\n    if (_PySys_Audit(tstate, \"import\", \"OOOOO\",\n                     abs_name, Py_None, sys_path ? sys_path : Py_None,\n                     sys_meta_path ? sys_meta_path : Py_None,\n                     sys_path_hooks ? sys_path_hooks : Py_None) < 0) {\n        return NULL;\n    }\n\n\n    /* XOptions is initialized after first some imports.\n     * So we can't have negative cache before completed initialization.\n     * Anyway, importlib._find_and_load is much slower than\n     * _PyDict_GetItemIdWithError().\n     */\n    if (import_time) {\n#define header FIND_AND_LOAD(interp).header\n        if (header) {\n            fputs(\"import time: self [us] | cumulative | imported package\\n\",\n                  stderr);\n            header = 0;\n        }\n#undef header\n\n        import_level++;\n        // ignore error: don't block import if reading the clock fails\n        (void)PyTime_PerfCounterRaw(&t1);\n        accumulated = 0;\n    }\n\n    if (PyDTrace_IMPORT_FIND_LOAD_START_ENABLED())\n        PyDTrace_IMPORT_FIND_LOAD_START(PyUnicode_AsUTF8(abs_name));\n\n    mod = PyObject_CallMethodObjArgs(IMPORTLIB(interp), &_Py_ID(_find_and_load),\n                                     abs_name, IMPORT_FUNC(interp), NULL);\n\n    if (PyDTrace_IMPORT_FIND_LOAD_DONE_ENABLED())\n        PyDTrace_IMPORT_FIND_LOAD_DONE(PyUnicode_AsUTF8(abs_name),\n                                       mod != NULL);\n\n    if (import_time) {\n        PyTime_t t2;\n        (void)PyTime_PerfCounterRaw(&t2);\n        PyTime_t cum = t2 - t1;\n\n        import_level--;\n        fprintf(stderr, \"import time: %9ld | %10ld | %*s%s\\n\",\n                (long)_PyTime_AsMicroseconds(cum - accumulated, _PyTime_ROUND_CEILING),\n                (long)_PyTime_AsMicroseconds(cum, _PyTime_ROUND_CEILING),\n                import_level*2, \"\", PyUnicode_AsUTF8(abs_name));\n\n        accumulated = accumulated_copy + cum;\n    }\n\n    return mod;\n#undef import_level\n#undef accumulated\n}\n\nPyObject *\nPyImport_ImportModuleLevelObject(PyObject *name, PyObject *globals,\n                                 PyObject *locals, PyObject *fromlist,\n                                 int level)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *abs_name = NULL;\n    PyObject *final_mod = NULL;\n    PyObject *mod = NULL;\n    PyObject *package = NULL;\n    PyInterpreterState *interp = tstate->interp;\n    int has_from;\n\n    if (name == NULL) {\n        _PyErr_SetString(tstate, PyExc_ValueError, \"Empty module name\");\n        goto error;\n    }\n\n    /* The below code is importlib.__import__() & _gcd_import(), ported to C\n       for added performance. */\n\n    if (!PyUnicode_Check(name)) {\n        _PyErr_SetString(tstate, PyExc_TypeError,\n                         \"module name must be a string\");\n        goto error;\n    }\n    if (level < 0) {\n        _PyErr_SetString(tstate, PyExc_ValueError, \"level must be >= 0\");\n        goto error;\n    }\n\n    if (level > 0) {\n        abs_name = resolve_name(tstate, name, globals, level);\n        if (abs_name == NULL)\n            goto error;\n    }\n    else {  /* level == 0 */\n        if (PyUnicode_GET_LENGTH(name) == 0) {\n            _PyErr_SetString(tstate, PyExc_ValueError, \"Empty module name\");\n            goto error;\n        }\n        abs_name = Py_NewRef(name);\n    }\n\n    mod = import_get_module(tstate, abs_name);\n    if (mod == NULL && _PyErr_Occurred(tstate)) {\n        goto error;\n    }\n\n    if (mod != NULL && mod != Py_None) {\n        if (import_ensure_initialized(tstate->interp, mod, abs_name) < 0) {\n            goto error;\n        }\n    }\n    else {\n        Py_XDECREF(mod);\n        mod = import_find_and_load(tstate, abs_name);\n        if (mod == NULL) {\n            goto error;\n        }\n    }\n\n    has_from = 0;\n    if (fromlist != NULL && fromlist != Py_None) {\n        has_from = PyObject_IsTrue(fromlist);\n        if (has_from < 0)\n            goto error;\n    }\n    if (!has_from) {\n        Py_ssize_t len = PyUnicode_GET_LENGTH(name);\n        if (level == 0 || len > 0) {\n            Py_ssize_t dot;\n\n            dot = PyUnicode_FindChar(name, '.', 0, len, 1);\n            if (dot == -2) {\n                goto error;\n            }\n\n            if (dot == -1) {\n                /* No dot in module name, simple exit */\n                final_mod = Py_NewRef(mod);\n                goto error;\n            }\n\n            if (level == 0) {\n                PyObject *front = PyUnicode_Substring(name, 0, dot);\n                if (front == NULL) {\n                    goto error;\n                }\n\n                final_mod = PyImport_ImportModuleLevelObject(front, NULL, NULL, NULL, 0);\n                Py_DECREF(front);\n            }\n            else {\n                Py_ssize_t cut_off = len - dot;\n                Py_ssize_t abs_name_len = PyUnicode_GET_LENGTH(abs_name);\n                PyObject *to_return = PyUnicode_Substring(abs_name, 0,\n                                                        abs_name_len - cut_off);\n                if (to_return == NULL) {\n                    goto error;\n                }\n\n                final_mod = import_get_module(tstate, to_return);\n                Py_DECREF(to_return);\n                if (final_mod == NULL) {\n                    if (!_PyErr_Occurred(tstate)) {\n                        _PyErr_Format(tstate, PyExc_KeyError,\n                                      \"%R not in sys.modules as expected\",\n                                      to_return);\n                    }\n                    goto error;\n                }\n            }\n        }\n        else {\n            final_mod = Py_NewRef(mod);\n        }\n    }\n    else {\n        int has_path = PyObject_HasAttrWithError(mod, &_Py_ID(__path__));\n        if (has_path < 0) {\n            goto error;\n        }\n        if (has_path) {\n            final_mod = PyObject_CallMethodObjArgs(\n                        IMPORTLIB(interp), &_Py_ID(_handle_fromlist),\n                        mod, fromlist, IMPORT_FUNC(interp), NULL);\n        }\n        else {\n            final_mod = Py_NewRef(mod);\n        }\n    }\n\n  error:\n    Py_XDECREF(abs_name);\n    Py_XDECREF(mod);\n    Py_XDECREF(package);\n    if (final_mod == NULL) {\n        remove_importlib_frames(tstate);\n    }\n    return final_mod;\n}\n\nPyObject *\nPyImport_ImportModuleLevel(const char *name, PyObject *globals, PyObject *locals,\n                           PyObject *fromlist, int level)\n{\n    PyObject *nameobj, *mod;\n    nameobj = PyUnicode_FromString(name);\n    if (nameobj == NULL)\n        return NULL;\n    mod = PyImport_ImportModuleLevelObject(nameobj, globals, locals,\n                                           fromlist, level);\n    Py_DECREF(nameobj);\n    return mod;\n}\n\n\n/* Re-import a module of any kind and return its module object, WITH\n   INCREMENTED REFERENCE COUNT */\n\nPyObject *\nPyImport_ReloadModule(PyObject *m)\n{\n    PyObject *reloaded_module = NULL;\n    PyObject *importlib = PyImport_GetModule(&_Py_ID(importlib));\n    if (importlib == NULL) {\n        if (PyErr_Occurred()) {\n            return NULL;\n        }\n\n        importlib = PyImport_ImportModule(\"importlib\");\n        if (importlib == NULL) {\n            return NULL;\n        }\n    }\n\n    reloaded_module = PyObject_CallMethodOneArg(importlib, &_Py_ID(reload), m);\n    Py_DECREF(importlib);\n    return reloaded_module;\n}\n\n\n/* Higher-level import emulator which emulates the \"import\" statement\n   more accurately -- it invokes the __import__() function from the\n   builtins of the current globals.  This means that the import is\n   done using whatever import hooks are installed in the current\n   environment.\n   A dummy list [\"__doc__\"] is passed as the 4th argument so that\n   e.g. PyImport_Import(PyUnicode_FromString(\"win32com.client.gencache\"))\n   will return <module \"gencache\"> instead of <module \"win32com\">. */\n\nPyObject *\nPyImport_Import(PyObject *module_name)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    PyObject *globals = NULL;\n    PyObject *import = NULL;\n    PyObject *builtins = NULL;\n    PyObject *r = NULL;\n\n    PyObject *from_list = PyList_New(0);\n    if (from_list == NULL) {\n        goto err;\n    }\n\n    /* Get the builtins from current globals */\n    globals = PyEval_GetGlobals();\n    if (globals != NULL) {\n        Py_INCREF(globals);\n        builtins = PyObject_GetItem(globals, &_Py_ID(__builtins__));\n        if (builtins == NULL)\n            goto err;\n    }\n    else {\n        /* No globals -- use standard builtins, and fake globals */\n        builtins = PyImport_ImportModuleLevel(\"builtins\",\n                                              NULL, NULL, NULL, 0);\n        if (builtins == NULL) {\n            goto err;\n        }\n        globals = Py_BuildValue(\"{OO}\", &_Py_ID(__builtins__), builtins);\n        if (globals == NULL)\n            goto err;\n    }\n\n    /* Get the __import__ function from the builtins */\n    if (PyDict_Check(builtins)) {\n        import = PyObject_GetItem(builtins, &_Py_ID(__import__));\n        if (import == NULL) {\n            _PyErr_SetObject(tstate, PyExc_KeyError, &_Py_ID(__import__));\n        }\n    }\n    else\n        import = PyObject_GetAttr(builtins, &_Py_ID(__import__));\n    if (import == NULL)\n        goto err;\n\n    /* Call the __import__ function with the proper argument list\n       Always use absolute import here.\n       Calling for side-effect of import. */\n    r = PyObject_CallFunction(import, \"OOOOi\", module_name, globals,\n                              globals, from_list, 0, NULL);\n    if (r == NULL)\n        goto err;\n    Py_DECREF(r);\n\n    r = import_get_module(tstate, module_name);\n    if (r == NULL && !_PyErr_Occurred(tstate)) {\n        _PyErr_SetObject(tstate, PyExc_KeyError, module_name);\n    }\n\n  err:\n    Py_XDECREF(globals);\n    Py_XDECREF(builtins);\n    Py_XDECREF(import);\n    Py_XDECREF(from_list);\n\n    return r;\n}\n\n\n/*********************/\n/* runtime lifecycle */\n/*********************/\n\nPyStatus\n_PyImport_Init(void)\n{\n    if (INITTAB != NULL) {\n        return _PyStatus_ERR(\"global import state already initialized\");\n    }\n\n    PyStatus status = _PyStatus_OK();\n\n    /* Force default raw memory allocator to get a known allocator to be able\n       to release the memory in _PyImport_Fini() */\n    PyMemAllocatorEx old_alloc;\n    _PyMem_SetDefaultAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n\n    if (init_builtin_modules_table() != 0) {\n        status = PyStatus_NoMemory();\n        goto done;\n    }\n\ndone:\n    PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n    return status;\n}\n\nvoid\n_PyImport_Fini(void)\n{\n    /* Destroy the database used by _PyImport_{Fixup,Find}Extension */\n    // XXX Should we actually leave them (mostly) intact, since we don't\n    // ever dlclose() the module files?\n    _extensions_cache_clear_all();\n\n    /* Use the same memory allocator as _PyImport_Init(). */\n    PyMemAllocatorEx old_alloc;\n    _PyMem_SetDefaultAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n\n    /* Free memory allocated by _PyImport_Init() */\n    fini_builtin_modules_table();\n\n    PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n}\n\nvoid\n_PyImport_Fini2(void)\n{\n    /* Use the same memory allocator than PyImport_ExtendInittab(). */\n    PyMemAllocatorEx old_alloc;\n    _PyMem_SetDefaultAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n\n    // Reset PyImport_Inittab\n    PyImport_Inittab = _PyImport_Inittab;\n\n    /* Free memory allocated by PyImport_ExtendInittab() */\n    PyMem_RawFree(inittab_copy);\n    inittab_copy = NULL;\n\n    PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &old_alloc);\n}\n\n\n/*************************/\n/* interpreter lifecycle */\n/*************************/\n\nPyStatus\n_PyImport_InitCore(PyThreadState *tstate, PyObject *sysmod, int importlib)\n{\n    // XXX Initialize here: interp->modules and interp->import_func.\n    // XXX Initialize here: sys.modules and sys.meta_path.\n\n    if (importlib) {\n        /* This call sets up builtin and frozen import support */\n        if (init_importlib(tstate, sysmod) < 0) {\n            return _PyStatus_ERR(\"failed to initialize importlib\");\n        }\n    }\n\n    return _PyStatus_OK();\n}\n\n/* In some corner cases it is important to be sure that the import\n   machinery has been initialized (or not cleaned up yet).  For\n   example, see issue #4236 and PyModule_Create2(). */\n\nint\n_PyImport_IsInitialized(PyInterpreterState *interp)\n{\n    if (MODULES(interp) == NULL)\n        return 0;\n    return 1;\n}\n\n/* Clear the direct per-interpreter import state, if not cleared already. */\nvoid\n_PyImport_ClearCore(PyInterpreterState *interp)\n{\n    /* interp->modules should have been cleaned up and cleared already\n       by _PyImport_FiniCore(). */\n    Py_CLEAR(MODULES(interp));\n    Py_CLEAR(MODULES_BY_INDEX(interp));\n    Py_CLEAR(IMPORTLIB(interp));\n    Py_CLEAR(IMPORT_FUNC(interp));\n}\n\nvoid\n_PyImport_FiniCore(PyInterpreterState *interp)\n{\n    int verbose = _PyInterpreterState_GetConfig(interp)->verbose;\n\n    if (_PySys_ClearAttrString(interp, \"meta_path\", verbose) < 0) {\n        PyErr_FormatUnraisable(\"Exception ignored on clearing sys.meta_path\");\n    }\n\n    // XXX Pull in most of finalize_modules() in pylifecycle.c.\n\n    if (_PySys_ClearAttrString(interp, \"modules\", verbose) < 0) {\n        PyErr_FormatUnraisable(\"Exception ignored on clearing sys.modules\");\n    }\n\n    _PyImport_ClearCore(interp);\n}\n\n// XXX Add something like _PyImport_Disable() for use early in interp fini?\n\n\n/* \"external\" imports */\n\nstatic int\ninit_zipimport(PyThreadState *tstate, int verbose)\n{\n    PyObject *path_hooks = PySys_GetObject(\"path_hooks\");\n    if (path_hooks == NULL) {\n        _PyErr_SetString(tstate, PyExc_RuntimeError,\n                         \"unable to get sys.path_hooks\");\n        return -1;\n    }\n\n    if (verbose) {\n        PySys_WriteStderr(\"# installing zipimport hook\\n\");\n    }\n\n    PyObject *zipimporter = _PyImport_GetModuleAttrString(\"zipimport\", \"zipimporter\");\n    if (zipimporter == NULL) {\n        _PyErr_Clear(tstate); /* No zipimporter object -- okay */\n        if (verbose) {\n            PySys_WriteStderr(\"# can't import zipimport.zipimporter\\n\");\n        }\n    }\n    else {\n        /* sys.path_hooks.insert(0, zipimporter) */\n        int err = PyList_Insert(path_hooks, 0, zipimporter);\n        Py_DECREF(zipimporter);\n        if (err < 0) {\n            return -1;\n        }\n        if (verbose) {\n            PySys_WriteStderr(\"# installed zipimport hook\\n\");\n        }\n    }\n\n    return 0;\n}\n\nPyStatus\n_PyImport_InitExternal(PyThreadState *tstate)\n{\n    int verbose = _PyInterpreterState_GetConfig(tstate->interp)->verbose;\n\n    // XXX Initialize here: sys.path_hooks and sys.path_importer_cache.\n\n    if (init_importlib_external(tstate->interp) != 0) {\n        _PyErr_Print(tstate);\n        return _PyStatus_ERR(\"external importer setup failed\");\n    }\n\n    if (init_zipimport(tstate, verbose) != 0) {\n        PyErr_Print();\n        return _PyStatus_ERR(\"initializing zipimport failed\");\n    }\n\n    return _PyStatus_OK();\n}\n\nvoid\n_PyImport_FiniExternal(PyInterpreterState *interp)\n{\n    int verbose = _PyInterpreterState_GetConfig(interp)->verbose;\n\n    // XXX Uninstall importlib metapath importers here?\n\n    if (_PySys_ClearAttrString(interp, \"path_importer_cache\", verbose) < 0) {\n        PyErr_FormatUnraisable(\"Exception ignored on clearing sys.path_importer_cache\");\n    }\n    if (_PySys_ClearAttrString(interp, \"path_hooks\", verbose) < 0) {\n        PyErr_FormatUnraisable(\"Exception ignored on clearing sys.path_hooks\");\n    }\n}\n\n\n/******************/\n/* module helpers */\n/******************/\n\nPyObject *\n_PyImport_GetModuleAttr(PyObject *modname, PyObject *attrname)\n{\n    PyObject *mod = PyImport_Import(modname);\n    if (mod == NULL) {\n        return NULL;\n    }\n    PyObject *result = PyObject_GetAttr(mod, attrname);\n    Py_DECREF(mod);\n    return result;\n}\n\nPyObject *\n_PyImport_GetModuleAttrString(const char *modname, const char *attrname)\n{\n    PyObject *pmodname = PyUnicode_FromString(modname);\n    if (pmodname == NULL) {\n        return NULL;\n    }\n    PyObject *pattrname = PyUnicode_FromString(attrname);\n    if (pattrname == NULL) {\n        Py_DECREF(pmodname);\n        return NULL;\n    }\n    PyObject *result = _PyImport_GetModuleAttr(pmodname, pattrname);\n    Py_DECREF(pattrname);\n    Py_DECREF(pmodname);\n    return result;\n}\n\n\n/**************/\n/* the module */\n/**************/\n\n/*[clinic input]\n_imp.lock_held\n\nReturn True if the import lock is currently held, else False.\n\nOn platforms without threads, return False.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_lock_held_impl(PyObject *module)\n/*[clinic end generated code: output=8b89384b5e1963fc input=9b088f9b217d9bdf]*/\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    return PyBool_FromLong(PyMutex_IsLocked(&IMPORT_LOCK(interp).mutex));\n}\n\n/*[clinic input]\n_imp.acquire_lock\n\nAcquires the interpreter's import lock for the current thread.\n\nThis lock should be used by import hooks to ensure thread-safety when importing\nmodules. On platforms without threads, this function does nothing.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_acquire_lock_impl(PyObject *module)\n/*[clinic end generated code: output=1aff58cb0ee1b026 input=4a2d4381866d5fdc]*/\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    _PyImport_AcquireLock(interp);\n    Py_RETURN_NONE;\n}\n\n/*[clinic input]\n_imp.release_lock\n\nRelease the interpreter's import lock.\n\nOn platforms without threads, this function does nothing.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_release_lock_impl(PyObject *module)\n/*[clinic end generated code: output=7faab6d0be178b0a input=934fb11516dd778b]*/\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    if (!_PyRecursiveMutex_IsLockedByCurrentThread(&IMPORT_LOCK(interp))) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"not holding the import lock\");\n        return NULL;\n    }\n    _PyImport_ReleaseLock(interp);\n    Py_RETURN_NONE;\n}\n\n\n/*[clinic input]\n_imp._fix_co_filename\n\n    code: object(type=\"PyCodeObject *\", subclass_of=\"&PyCode_Type\")\n        Code object to change.\n\n    path: unicode\n        File path to use.\n    /\n\nChanges code.co_filename to specify the passed-in file path.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp__fix_co_filename_impl(PyObject *module, PyCodeObject *code,\n                           PyObject *path)\n/*[clinic end generated code: output=1d002f100235587d input=895ba50e78b82f05]*/\n\n{\n    update_compiled_module(code, path);\n\n    Py_RETURN_NONE;\n}\n\n\n/*[clinic input]\n_imp.create_builtin\n\n    spec: object\n    /\n\nCreate an extension module.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_create_builtin(PyObject *module, PyObject *spec)\n/*[clinic end generated code: output=ace7ff22271e6f39 input=37f966f890384e47]*/\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n\n    PyObject *name = PyObject_GetAttrString(spec, \"name\");\n    if (name == NULL) {\n        return NULL;\n    }\n\n    if (!PyUnicode_Check(name)) {\n        PyErr_Format(PyExc_TypeError,\n                     \"name must be string, not %.200s\",\n                     Py_TYPE(name)->tp_name);\n        Py_DECREF(name);\n        return NULL;\n    }\n\n    PyObject *mod = create_builtin(tstate, name, spec);\n    Py_DECREF(name);\n    return mod;\n}\n\n\n/*[clinic input]\n_imp.extension_suffixes\n\nReturns the list of file suffixes used to identify extension modules.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_extension_suffixes_impl(PyObject *module)\n/*[clinic end generated code: output=0bf346e25a8f0cd3 input=ecdeeecfcb6f839e]*/\n{\n    PyObject *list;\n\n    list = PyList_New(0);\n    if (list == NULL)\n        return NULL;\n#ifdef HAVE_DYNAMIC_LOADING\n    const char *suffix;\n    unsigned int index = 0;\n\n    while ((suffix = _PyImport_DynLoadFiletab[index])) {\n        PyObject *item = PyUnicode_FromString(suffix);\n        if (item == NULL) {\n            Py_DECREF(list);\n            return NULL;\n        }\n        if (PyList_Append(list, item) < 0) {\n            Py_DECREF(list);\n            Py_DECREF(item);\n            return NULL;\n        }\n        Py_DECREF(item);\n        index += 1;\n    }\n#endif\n    return list;\n}\n\n/*[clinic input]\n_imp.init_frozen\n\n    name: unicode\n    /\n\nInitializes a frozen module.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_init_frozen_impl(PyObject *module, PyObject *name)\n/*[clinic end generated code: output=fc0511ed869fd69c input=13019adfc04f3fb3]*/\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n    int ret;\n\n    ret = PyImport_ImportFrozenModuleObject(name);\n    if (ret < 0)\n        return NULL;\n    if (ret == 0) {\n        Py_RETURN_NONE;\n    }\n    return import_add_module(tstate, name);\n}\n\n/*[clinic input]\n_imp.find_frozen\n\n    name: unicode\n    /\n    *\n    withdata: bool = False\n\nReturn info about the corresponding frozen module (if there is one) or None.\n\nThe returned info (a 2-tuple):\n\n * data         the raw marshalled bytes\n * is_package   whether or not it is a package\n * origname     the originally frozen module's name, or None if not\n                a stdlib module (this will usually be the same as\n                the module's current name)\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_find_frozen_impl(PyObject *module, PyObject *name, int withdata)\n/*[clinic end generated code: output=8c1c3c7f925397a5 input=22a8847c201542fd]*/\n{\n    struct frozen_info info;\n    frozen_status status = find_frozen(name, &info);\n    if (status == FROZEN_NOT_FOUND || status == FROZEN_DISABLED) {\n        Py_RETURN_NONE;\n    }\n    else if (status == FROZEN_BAD_NAME) {\n        Py_RETURN_NONE;\n    }\n    else if (status != FROZEN_OKAY) {\n        set_frozen_error(status, name);\n        return NULL;\n    }\n\n    PyObject *data = NULL;\n    if (withdata) {\n        data = PyMemoryView_FromMemory((char *)info.data, info.size, PyBUF_READ);\n        if (data == NULL) {\n            return NULL;\n        }\n    }\n\n    PyObject *origname = NULL;\n    if (info.origname != NULL && info.origname[0] != '\\0') {\n        origname = PyUnicode_FromString(info.origname);\n        if (origname == NULL) {\n            Py_DECREF(data);\n            return NULL;\n        }\n    }\n\n    PyObject *result = PyTuple_Pack(3, data ? data : Py_None,\n                                    info.is_package ? Py_True : Py_False,\n                                    origname ? origname : Py_None);\n    Py_XDECREF(origname);\n    Py_XDECREF(data);\n    return result;\n}\n\n/*[clinic input]\n_imp.get_frozen_object\n\n    name: unicode\n    data as dataobj: object = None\n    /\n\nCreate a code object for a frozen module.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_get_frozen_object_impl(PyObject *module, PyObject *name,\n                            PyObject *dataobj)\n/*[clinic end generated code: output=54368a673a35e745 input=034bdb88f6460b7b]*/\n{\n    struct frozen_info info = {0};\n    Py_buffer buf = {0};\n    if (PyObject_CheckBuffer(dataobj)) {\n        if (PyObject_GetBuffer(dataobj, &buf, PyBUF_SIMPLE) != 0) {\n            return NULL;\n        }\n        info.data = (const char *)buf.buf;\n        info.size = buf.len;\n    }\n    else if (dataobj != Py_None) {\n        _PyArg_BadArgument(\"get_frozen_object\", \"argument 2\", \"bytes\", dataobj);\n        return NULL;\n    }\n    else {\n        frozen_status status = find_frozen(name, &info);\n        if (status != FROZEN_OKAY) {\n            set_frozen_error(status, name);\n            return NULL;\n        }\n    }\n\n    if (info.nameobj == NULL) {\n        info.nameobj = name;\n    }\n    if (info.size == 0) {\n        /* Does not contain executable code. */\n        set_frozen_error(FROZEN_INVALID, name);\n        return NULL;\n    }\n\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    PyObject *codeobj = unmarshal_frozen_code(interp, &info);\n    if (dataobj != Py_None) {\n        PyBuffer_Release(&buf);\n    }\n    return codeobj;\n}\n\n/*[clinic input]\n_imp.is_frozen_package\n\n    name: unicode\n    /\n\nReturns True if the module name is of a frozen package.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_is_frozen_package_impl(PyObject *module, PyObject *name)\n/*[clinic end generated code: output=e70cbdb45784a1c9 input=81b6cdecd080fbb8]*/\n{\n    struct frozen_info info;\n    frozen_status status = find_frozen(name, &info);\n    if (status != FROZEN_OKAY && status != FROZEN_EXCLUDED) {\n        set_frozen_error(status, name);\n        return NULL;\n    }\n    return PyBool_FromLong(info.is_package);\n}\n\n/*[clinic input]\n_imp.is_builtin\n\n    name: unicode\n    /\n\nReturns True if the module name corresponds to a built-in module.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_is_builtin_impl(PyObject *module, PyObject *name)\n/*[clinic end generated code: output=3bfd1162e2d3be82 input=86befdac021dd1c7]*/\n{\n    return PyLong_FromLong(is_builtin(name));\n}\n\n/*[clinic input]\n_imp.is_frozen\n\n    name: unicode\n    /\n\nReturns True if the module name corresponds to a frozen module.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_is_frozen_impl(PyObject *module, PyObject *name)\n/*[clinic end generated code: output=01f408f5ec0f2577 input=7301dbca1897d66b]*/\n{\n    struct frozen_info info;\n    frozen_status status = find_frozen(name, &info);\n    if (status != FROZEN_OKAY) {\n        Py_RETURN_FALSE;\n    }\n    Py_RETURN_TRUE;\n}\n\n/*[clinic input]\n_imp._frozen_module_names\n\nReturns the list of available frozen modules.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp__frozen_module_names_impl(PyObject *module)\n/*[clinic end generated code: output=80609ef6256310a8 input=76237fbfa94460d2]*/\n{\n    return list_frozen_module_names();\n}\n\n/*[clinic input]\n_imp._override_frozen_modules_for_tests\n\n    override: int\n    /\n\n(internal-only) Override PyConfig.use_frozen_modules.\n\n(-1: \"off\", 1: \"on\", 0: no override)\nSee frozen_modules() in Lib/test/support/import_helper.py.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp__override_frozen_modules_for_tests_impl(PyObject *module, int override)\n/*[clinic end generated code: output=36d5cb1594160811 input=8f1f95a3ef21aec3]*/\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    OVERRIDE_FROZEN_MODULES(interp) = override;\n    Py_RETURN_NONE;\n}\n\n/*[clinic input]\n_imp._override_multi_interp_extensions_check\n\n    override: int\n    /\n\n(internal-only) Override PyInterpreterConfig.check_multi_interp_extensions.\n\n(-1: \"never\", 1: \"always\", 0: no override)\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp__override_multi_interp_extensions_check_impl(PyObject *module,\n                                                  int override)\n/*[clinic end generated code: output=3ff043af52bbf280 input=e086a2ea181f92ae]*/\n{\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    if (_Py_IsMainInterpreter(interp)) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"_imp._override_multi_interp_extensions_check() \"\n                        \"cannot be used in the main interpreter\");\n        return NULL;\n    }\n#ifdef Py_GIL_DISABLED\n    PyErr_SetString(PyExc_RuntimeError,\n                    \"_imp._override_multi_interp_extensions_check() \"\n                    \"cannot be used in the free-threaded build\");\n    return NULL;\n#else\n    int oldvalue = OVERRIDE_MULTI_INTERP_EXTENSIONS_CHECK(interp);\n    OVERRIDE_MULTI_INTERP_EXTENSIONS_CHECK(interp) = override;\n    return PyLong_FromLong(oldvalue);\n#endif\n}\n\n#ifdef HAVE_DYNAMIC_LOADING\n\n/*[clinic input]\n_imp.create_dynamic\n\n    spec: object\n    file: object = NULL\n    /\n\nCreate an extension module.\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_create_dynamic_impl(PyObject *module, PyObject *spec, PyObject *file)\n/*[clinic end generated code: output=83249b827a4fde77 input=c31b954f4cf4e09d]*/\n{\n    PyObject *mod = NULL;\n    PyThreadState *tstate = _PyThreadState_GET();\n\n    struct _Py_ext_module_loader_info info;\n    if (_Py_ext_module_loader_info_init_from_spec(&info, spec) < 0) {\n        return NULL;\n    }\n\n    struct extensions_cache_value *cached = NULL;\n    mod = import_find_extension(tstate, &info, &cached);\n    if (mod != NULL) {\n        assert(!_PyErr_Occurred(tstate));\n        assert(cached != NULL);\n        /* The module might not have md_def set in certain reload cases. */\n        assert(_PyModule_GetDef(mod) == NULL\n                || cached->def == _PyModule_GetDef(mod));\n        assert_singlephase(cached);\n        goto finally;\n    }\n    else if (_PyErr_Occurred(tstate)) {\n        goto finally;\n    }\n    /* Otherwise it must be multi-phase init or the first time it's loaded. */\n\n    /* If the module was added to the global cache\n     * but def->m_base.m_copy was cleared (e.g. subinterp fini)\n     * then we have to do a little dance here. */\n    if (cached != NULL) {\n        assert(cached->def->m_base.m_copy == NULL);\n        /* For now we clear the cache and move on. */\n        _extensions_cache_delete(info.path, info.name);\n    }\n\n    if (PySys_Audit(\"import\", \"OOOOO\", info.name, info.filename,\n                    Py_None, Py_None, Py_None) < 0)\n    {\n        goto finally;\n    }\n\n    /* We would move this (and the fclose() below) into\n     * _PyImport_GetModInitFunc(), but it isn't clear if the intervening\n     * code relies on fp still being open. */\n    FILE *fp;\n    if (file != NULL) {\n        fp = _Py_fopen_obj(info.filename, \"r\");\n        if (fp == NULL) {\n            goto finally;\n        }\n    }\n    else {\n        fp = NULL;\n    }\n\n    PyModInitFunction p0 = _PyImport_GetModInitFunc(&info, fp);\n    if (p0 == NULL) {\n        goto finally;\n    }\n\n#ifdef Py_GIL_DISABLED\n    // This call (and the corresponding call to _PyImport_CheckGILForModule())\n    // would ideally be inside import_run_extension(). They are kept in the\n    // callers for now because that would complicate the control flow inside\n    // import_run_extension(). It should be possible to restructure\n    // import_run_extension() to address this.\n    _PyEval_EnableGILTransient(tstate);\n#endif\n    mod = import_run_extension(\n                    tstate, p0, &info, spec, get_modules_dict(tstate, true));\n#ifdef Py_GIL_DISABLED\n    if (_PyImport_CheckGILForModule(mod, info.name) < 0) {\n        Py_CLEAR(mod);\n        goto finally;\n    }\n#endif\n\n    // XXX Shouldn't this happen in the error cases too (i.e. in \"finally\")?\n    if (fp) {\n        fclose(fp);\n    }\n\nfinally:\n    _Py_ext_module_loader_info_clear(&info);\n    return mod;\n}\n\n/*[clinic input]\n_imp.exec_dynamic -> int\n\n    mod: object\n    /\n\nInitialize an extension module.\n[clinic start generated code]*/\n\nstatic int\n_imp_exec_dynamic_impl(PyObject *module, PyObject *mod)\n/*[clinic end generated code: output=f5720ac7b465877d input=9fdbfcb250280d3a]*/\n{\n    return exec_builtin_or_dynamic(mod);\n}\n\n\n#endif /* HAVE_DYNAMIC_LOADING */\n\n/*[clinic input]\n_imp.exec_builtin -> int\n\n    mod: object\n    /\n\nInitialize a built-in module.\n[clinic start generated code]*/\n\nstatic int\n_imp_exec_builtin_impl(PyObject *module, PyObject *mod)\n/*[clinic end generated code: output=0262447b240c038e input=7beed5a2f12a60ca]*/\n{\n    return exec_builtin_or_dynamic(mod);\n}\n\n/*[clinic input]\n_imp.source_hash\n\n    key: long\n    source: Py_buffer\n[clinic start generated code]*/\n\nstatic PyObject *\n_imp_source_hash_impl(PyObject *module, long key, Py_buffer *source)\n/*[clinic end generated code: output=edb292448cf399ea input=9aaad1e590089789]*/\n{\n    union {\n        uint64_t x;\n        char data[sizeof(uint64_t)];\n    } hash;\n    hash.x = _Py_KeyedHash((uint64_t)key, source->buf, source->len);\n#if !PY_LITTLE_ENDIAN\n    // Force to little-endian. There really ought to be a succinct standard way\n    // to do this.\n    for (size_t i = 0; i < sizeof(hash.data)/2; i++) {\n        char tmp = hash.data[i];\n        hash.data[i] = hash.data[sizeof(hash.data) - i - 1];\n        hash.data[sizeof(hash.data) - i - 1] = tmp;\n    }\n#endif\n    return PyBytes_FromStringAndSize(hash.data, sizeof(hash.data));\n}\n\n\nPyDoc_STRVAR(doc_imp,\n\"(Extremely) low-level import machinery bits as used by importlib.\");\n\nstatic PyMethodDef imp_methods[] = {\n    _IMP_EXTENSION_SUFFIXES_METHODDEF\n    _IMP_LOCK_HELD_METHODDEF\n    _IMP_ACQUIRE_LOCK_METHODDEF\n    _IMP_RELEASE_LOCK_METHODDEF\n    _IMP_FIND_FROZEN_METHODDEF\n    _IMP_GET_FROZEN_OBJECT_METHODDEF\n    _IMP_IS_FROZEN_PACKAGE_METHODDEF\n    _IMP_CREATE_BUILTIN_METHODDEF\n    _IMP_INIT_FROZEN_METHODDEF\n    _IMP_IS_BUILTIN_METHODDEF\n    _IMP_IS_FROZEN_METHODDEF\n    _IMP__FROZEN_MODULE_NAMES_METHODDEF\n    _IMP__OVERRIDE_FROZEN_MODULES_FOR_TESTS_METHODDEF\n    _IMP__OVERRIDE_MULTI_INTERP_EXTENSIONS_CHECK_METHODDEF\n    _IMP_CREATE_DYNAMIC_METHODDEF\n    _IMP_EXEC_DYNAMIC_METHODDEF\n    _IMP_EXEC_BUILTIN_METHODDEF\n    _IMP__FIX_CO_FILENAME_METHODDEF\n    _IMP_SOURCE_HASH_METHODDEF\n    {NULL, NULL}  /* sentinel */\n};\n\n\nstatic int\nimp_module_exec(PyObject *module)\n{\n    const wchar_t *mode = _Py_GetConfig()->check_hash_pycs_mode;\n    PyObject *pyc_mode = PyUnicode_FromWideChar(mode, -1);\n    if (PyModule_Add(module, \"check_hash_based_pycs\", pyc_mode) < 0) {\n        return -1;\n    }\n\n    return 0;\n}\n\n\nstatic PyModuleDef_Slot imp_slots[] = {\n    {Py_mod_exec, imp_module_exec},\n    {Py_mod_multiple_interpreters, Py_MOD_PER_INTERPRETER_GIL_SUPPORTED},\n    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n    {0, NULL}\n};\n\nstatic struct PyModuleDef imp_module = {\n    PyModuleDef_HEAD_INIT,\n    .m_name = \"_imp\",\n    .m_doc = doc_imp,\n    .m_size = 0,\n    .m_methods = imp_methods,\n    .m_slots = imp_slots,\n};\n\nPyMODINIT_FUNC\nPyInit__imp(void)\n{\n    return PyModuleDef_Init(&imp_module);\n}\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "./Include/cpython/unicodeobject.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_CPYTHON_UNICODEOBJECT_H\n#  error \"this header file must not be included directly\"\n#endif\n\n/* Py_UNICODE was the native Unicode storage format (code unit) used by\n   Python and represents a single Unicode element in the Unicode type.\n   With PEP 393, Py_UNICODE is deprecated and replaced with a\n   typedef to wchar_t. */\nPy_DEPRECATED(3.13) typedef wchar_t PY_UNICODE_TYPE;\nPy_DEPRECATED(3.13) typedef wchar_t Py_UNICODE;\n\n\n/* --- Internal Unicode Operations ---------------------------------------- */\n\n// Static inline functions to work with surrogates\nstatic inline int Py_UNICODE_IS_SURROGATE(Py_UCS4 ch) {\n    return (0xD800 <= ch && ch <= 0xDFFF);\n}\nstatic inline int Py_UNICODE_IS_HIGH_SURROGATE(Py_UCS4 ch) {\n    return (0xD800 <= ch && ch <= 0xDBFF);\n}\nstatic inline int Py_UNICODE_IS_LOW_SURROGATE(Py_UCS4 ch) {\n    return (0xDC00 <= ch && ch <= 0xDFFF);\n}\n\n// Join two surrogate characters and return a single Py_UCS4 value.\nstatic inline Py_UCS4 Py_UNICODE_JOIN_SURROGATES(Py_UCS4 high, Py_UCS4 low)  {\n    assert(Py_UNICODE_IS_HIGH_SURROGATE(high));\n    assert(Py_UNICODE_IS_LOW_SURROGATE(low));\n    return 0x10000 + (((high & 0x03FF) << 10) | (low & 0x03FF));\n}\n\n// High surrogate = top 10 bits added to 0xD800.\n// The character must be in the range [U+10000; U+10ffff].\nstatic inline Py_UCS4 Py_UNICODE_HIGH_SURROGATE(Py_UCS4 ch) {\n    assert(0x10000 <= ch && ch <= 0x10ffff);\n    return (0xD800 - (0x10000 >> 10) + (ch >> 10));\n}\n\n// Low surrogate = bottom 10 bits added to 0xDC00.\n// The character must be in the range [U+10000; U+10ffff].\nstatic inline Py_UCS4 Py_UNICODE_LOW_SURROGATE(Py_UCS4 ch) {\n    assert(0x10000 <= ch && ch <= 0x10ffff);\n    return (0xDC00 + (ch & 0x3FF));\n}\n\n\n/* --- Unicode Type ------------------------------------------------------- */\n\n/* ASCII-only strings created through PyUnicode_New use the PyASCIIObject\n   structure. state.ascii and state.compact are set, and the data\n   immediately follow the structure. utf8_length can be found\n   in the length field; the utf8 pointer is equal to the data pointer. */\ntypedef struct {\n    /* There are 4 forms of Unicode strings:\n\n       - compact ascii:\n\n         * structure = PyASCIIObject\n         * test: PyUnicode_IS_COMPACT_ASCII(op)\n         * kind = PyUnicode_1BYTE_KIND\n         * compact = 1\n         * ascii = 1\n         * (length is the length of the utf8)\n         * (data starts just after the structure)\n         * (since ASCII is decoded from UTF-8, the utf8 string are the data)\n\n       - compact:\n\n         * structure = PyCompactUnicodeObject\n         * test: PyUnicode_IS_COMPACT(op) && !PyUnicode_IS_ASCII(op)\n         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or\n           PyUnicode_4BYTE_KIND\n         * compact = 1\n         * ascii = 0\n         * utf8 is not shared with data\n         * utf8_length = 0 if utf8 is NULL\n         * (data starts just after the structure)\n\n       - legacy string:\n\n         * structure = PyUnicodeObject structure\n         * test: !PyUnicode_IS_COMPACT(op)\n         * kind = PyUnicode_1BYTE_KIND, PyUnicode_2BYTE_KIND or\n           PyUnicode_4BYTE_KIND\n         * compact = 0\n         * data.any is not NULL\n         * utf8 is shared and utf8_length = length with data.any if ascii = 1\n         * utf8_length = 0 if utf8 is NULL\n\n       Compact strings use only one memory block (structure + characters),\n       whereas legacy strings use one block for the structure and one block\n       for characters.\n\n       Legacy strings are created by subclasses of Unicode.\n\n       See also _PyUnicode_CheckConsistency().\n    */\n    PyObject_HEAD\n    Py_ssize_t length;          /* Number of code points in the string */\n    Py_hash_t hash;             /* Hash value; -1 if not set */\n    struct {\n        /* If interned is non-zero, the two references from the\n           dictionary to this object are *not* counted in ob_refcnt.\n           The possible values here are:\n               0: Not Interned\n               1: Interned\n               2: Interned and Immortal\n               3: Interned, Immortal, and Static\n           This categorization allows the runtime to determine the right\n           cleanup mechanism at runtime shutdown. */\n        unsigned int interned:2;\n        /* Character size:\n\n           - PyUnicode_1BYTE_KIND (1):\n\n             * character type = Py_UCS1 (8 bits, unsigned)\n             * all characters are in the range U+0000-U+00FF (latin1)\n             * if ascii is set, all characters are in the range U+0000-U+007F\n               (ASCII), otherwise at least one character is in the range\n               U+0080-U+00FF\n\n           - PyUnicode_2BYTE_KIND (2):\n\n             * character type = Py_UCS2 (16 bits, unsigned)\n             * all characters are in the range U+0000-U+FFFF (BMP)\n             * at least one character is in the range U+0100-U+FFFF\n\n           - PyUnicode_4BYTE_KIND (4):\n\n             * character type = Py_UCS4 (32 bits, unsigned)\n             * all characters are in the range U+0000-U+10FFFF\n             * at least one character is in the range U+10000-U+10FFFF\n         */\n        unsigned int kind:3;\n        /* Compact is with respect to the allocation scheme. Compact unicode\n           objects only require one memory block while non-compact objects use\n           one block for the PyUnicodeObject struct and another for its data\n           buffer. */\n        unsigned int compact:1;\n        /* The string only contains characters in the range U+0000-U+007F (ASCII)\n           and the kind is PyUnicode_1BYTE_KIND. If ascii is set and compact is\n           set, use the PyASCIIObject structure. */\n        unsigned int ascii:1;\n        /* The object is statically allocated. */\n        unsigned int statically_allocated:1;\n        /* Padding to ensure that PyUnicode_DATA() is always aligned to\n           4 bytes (see issue #19537 on m68k). */\n        unsigned int :24;\n    } state;\n} PyASCIIObject;\n\n/* Non-ASCII strings allocated through PyUnicode_New use the\n   PyCompactUnicodeObject structure. state.compact is set, and the data\n   immediately follow the structure. */\ntypedef struct {\n    PyASCIIObject _base;\n    Py_ssize_t utf8_length;     /* Number of bytes in utf8, excluding the\n                                 * terminating \\0. */\n    char *utf8;                 /* UTF-8 representation (null-terminated) */\n} PyCompactUnicodeObject;\n\n/* Object format for Unicode subclasses. */\ntypedef struct {\n    PyCompactUnicodeObject _base;\n    union {\n        void *any;\n        Py_UCS1 *latin1;\n        Py_UCS2 *ucs2;\n        Py_UCS4 *ucs4;\n    } data;                     /* Canonical, smallest-form Unicode buffer */\n} PyUnicodeObject;\n\n\n#define _PyASCIIObject_CAST(op) \\\n    (assert(PyUnicode_Check(op)), \\\n     _Py_CAST(PyASCIIObject*, (op)))\n#define _PyCompactUnicodeObject_CAST(op) \\\n    (assert(PyUnicode_Check(op)), \\\n     _Py_CAST(PyCompactUnicodeObject*, (op)))\n#define _PyUnicodeObject_CAST(op) \\\n    (assert(PyUnicode_Check(op)), \\\n     _Py_CAST(PyUnicodeObject*, (op)))\n\n\n/* --- Flexible String Representation Helper Macros (PEP 393) -------------- */\n\n/* Values for PyASCIIObject.state: */\n\n/* Interning state. */\n#define SSTATE_NOT_INTERNED 0\n#define SSTATE_INTERNED_MORTAL 1\n#define SSTATE_INTERNED_IMMORTAL 2\n#define SSTATE_INTERNED_IMMORTAL_STATIC 3\n\n/* Use only if you know it's a string */\nstatic inline unsigned int PyUnicode_CHECK_INTERNED(PyObject *op) {\n    return _PyASCIIObject_CAST(op)->state.interned;\n}\n#define PyUnicode_CHECK_INTERNED(op) PyUnicode_CHECK_INTERNED(_PyObject_CAST(op))\n\n/* For backward compatibility */\nstatic inline unsigned int PyUnicode_IS_READY(PyObject* Py_UNUSED(op)) {\n    return 1;\n}\n#define PyUnicode_IS_READY(op) PyUnicode_IS_READY(_PyObject_CAST(op))\n\n/* Return true if the string contains only ASCII characters, or 0 if not. The\n   string may be compact (PyUnicode_IS_COMPACT_ASCII) or not, but must be\n   ready. */\nstatic inline unsigned int PyUnicode_IS_ASCII(PyObject *op) {\n    return _PyASCIIObject_CAST(op)->state.ascii;\n}\n#define PyUnicode_IS_ASCII(op) PyUnicode_IS_ASCII(_PyObject_CAST(op))\n\n/* Return true if the string is compact or 0 if not.\n   No type checks or Ready calls are performed. */\nstatic inline unsigned int PyUnicode_IS_COMPACT(PyObject *op) {\n    return _PyASCIIObject_CAST(op)->state.compact;\n}\n#define PyUnicode_IS_COMPACT(op) PyUnicode_IS_COMPACT(_PyObject_CAST(op))\n\n/* Return true if the string is a compact ASCII string (use PyASCIIObject\n   structure), or 0 if not.  No type checks or Ready calls are performed. */\nstatic inline int PyUnicode_IS_COMPACT_ASCII(PyObject *op) {\n    return (_PyASCIIObject_CAST(op)->state.ascii && PyUnicode_IS_COMPACT(op));\n}\n#define PyUnicode_IS_COMPACT_ASCII(op) PyUnicode_IS_COMPACT_ASCII(_PyObject_CAST(op))\n\nenum PyUnicode_Kind {\n/* Return values of the PyUnicode_KIND() function: */\n    PyUnicode_1BYTE_KIND = 1,\n    PyUnicode_2BYTE_KIND = 2,\n    PyUnicode_4BYTE_KIND = 4\n};\n\n// PyUnicode_KIND(): Return one of the PyUnicode_*_KIND values defined above.\n//\n// gh-89653: Converting this macro to a static inline function would introduce\n// new compiler warnings on \"kind < PyUnicode_KIND(str)\" (compare signed and\n// unsigned numbers) where kind type is an int or on\n// \"unsigned int kind = PyUnicode_KIND(str)\" (cast signed to unsigned).\n#define PyUnicode_KIND(op) _Py_RVALUE(_PyASCIIObject_CAST(op)->state.kind)\n\n/* Return a void pointer to the raw unicode buffer. */\nstatic inline void* _PyUnicode_COMPACT_DATA(PyObject *op) {\n    if (PyUnicode_IS_ASCII(op)) {\n        return _Py_STATIC_CAST(void*, (_PyASCIIObject_CAST(op) + 1));\n    }\n    return _Py_STATIC_CAST(void*, (_PyCompactUnicodeObject_CAST(op) + 1));\n}\n\nstatic inline void* _PyUnicode_NONCOMPACT_DATA(PyObject *op) {\n    void *data;\n    assert(!PyUnicode_IS_COMPACT(op));\n    data = _PyUnicodeObject_CAST(op)->data.any;\n    assert(data != NULL);\n    return data;\n}\n\nstatic inline void* PyUnicode_DATA(PyObject *op) {\n    if (PyUnicode_IS_COMPACT(op)) {\n        return _PyUnicode_COMPACT_DATA(op);\n    }\n    return _PyUnicode_NONCOMPACT_DATA(op);\n}\n#define PyUnicode_DATA(op) PyUnicode_DATA(_PyObject_CAST(op))\n\n/* Return pointers to the canonical representation cast to unsigned char,\n   Py_UCS2, or Py_UCS4 for direct character access.\n   No checks are performed, use PyUnicode_KIND() before to ensure\n   these will work correctly. */\n\n#define PyUnicode_1BYTE_DATA(op) _Py_STATIC_CAST(Py_UCS1*, PyUnicode_DATA(op))\n#define PyUnicode_2BYTE_DATA(op) _Py_STATIC_CAST(Py_UCS2*, PyUnicode_DATA(op))\n#define PyUnicode_4BYTE_DATA(op) _Py_STATIC_CAST(Py_UCS4*, PyUnicode_DATA(op))\n\n/* Returns the length of the unicode string. */\nstatic inline Py_ssize_t PyUnicode_GET_LENGTH(PyObject *op) {\n    return _PyASCIIObject_CAST(op)->length;\n}\n#define PyUnicode_GET_LENGTH(op) PyUnicode_GET_LENGTH(_PyObject_CAST(op))\n\n/* Write into the canonical representation, this function does not do any sanity\n   checks and is intended for usage in loops.  The caller should cache the\n   kind and data pointers obtained from other function calls.\n   index is the index in the string (starts at 0) and value is the new\n   code point value which should be written to that location. */\nstatic inline void PyUnicode_WRITE(int kind, void *data,\n                                   Py_ssize_t index, Py_UCS4 value)\n{\n    assert(index >= 0);\n    if (kind == PyUnicode_1BYTE_KIND) {\n        assert(value <= 0xffU);\n        _Py_STATIC_CAST(Py_UCS1*, data)[index] = _Py_STATIC_CAST(Py_UCS1, value);\n    }\n    else if (kind == PyUnicode_2BYTE_KIND) {\n        assert(value <= 0xffffU);\n        _Py_STATIC_CAST(Py_UCS2*, data)[index] = _Py_STATIC_CAST(Py_UCS2, value);\n    }\n    else {\n        assert(kind == PyUnicode_4BYTE_KIND);\n        assert(value <= 0x10ffffU);\n        _Py_STATIC_CAST(Py_UCS4*, data)[index] = value;\n    }\n}\n#define PyUnicode_WRITE(kind, data, index, value) \\\n    PyUnicode_WRITE(_Py_STATIC_CAST(int, kind), _Py_CAST(void*, data), \\\n                    (index), _Py_STATIC_CAST(Py_UCS4, value))\n\n/* Read a code point from the string's canonical representation.  No checks\n   or ready calls are performed. */\nstatic inline Py_UCS4 PyUnicode_READ(int kind,\n                                     const void *data, Py_ssize_t index)\n{\n    assert(index >= 0);\n    if (kind == PyUnicode_1BYTE_KIND) {\n        return _Py_STATIC_CAST(const Py_UCS1*, data)[index];\n    }\n    if (kind == PyUnicode_2BYTE_KIND) {\n        return _Py_STATIC_CAST(const Py_UCS2*, data)[index];\n    }\n    assert(kind == PyUnicode_4BYTE_KIND);\n    return _Py_STATIC_CAST(const Py_UCS4*, data)[index];\n}\n#define PyUnicode_READ(kind, data, index) \\\n    PyUnicode_READ(_Py_STATIC_CAST(int, kind), \\\n                   _Py_STATIC_CAST(const void*, data), \\\n                   (index))\n\n/* PyUnicode_READ_CHAR() is less efficient than PyUnicode_READ() because it\n   calls PyUnicode_KIND() and might call it twice.  For single reads, use\n   PyUnicode_READ_CHAR, for multiple consecutive reads callers should\n   cache kind and use PyUnicode_READ instead. */\nstatic inline Py_UCS4 PyUnicode_READ_CHAR(PyObject *unicode, Py_ssize_t index)\n{\n    int kind;\n\n    assert(index >= 0);\n    // Tolerate reading the NUL character at str[len(str)]\n    assert(index <= PyUnicode_GET_LENGTH(unicode));\n\n    kind = PyUnicode_KIND(unicode);\n    if (kind == PyUnicode_1BYTE_KIND) {\n        return PyUnicode_1BYTE_DATA(unicode)[index];\n    }\n    if (kind == PyUnicode_2BYTE_KIND) {\n        return PyUnicode_2BYTE_DATA(unicode)[index];\n    }\n    assert(kind == PyUnicode_4BYTE_KIND);\n    return PyUnicode_4BYTE_DATA(unicode)[index];\n}\n#define PyUnicode_READ_CHAR(unicode, index) \\\n    PyUnicode_READ_CHAR(_PyObject_CAST(unicode), (index))\n\n/* Return a maximum character value which is suitable for creating another\n   string based on op.  This is always an approximation but more efficient\n   than iterating over the string. */\nstatic inline Py_UCS4 PyUnicode_MAX_CHAR_VALUE(PyObject *op)\n{\n    int kind;\n\n    if (PyUnicode_IS_ASCII(op)) {\n        return 0x7fU;\n    }\n\n    kind = PyUnicode_KIND(op);\n    if (kind == PyUnicode_1BYTE_KIND) {\n       return 0xffU;\n    }\n    if (kind == PyUnicode_2BYTE_KIND) {\n        return 0xffffU;\n    }\n    assert(kind == PyUnicode_4BYTE_KIND);\n    return 0x10ffffU;\n}\n#define PyUnicode_MAX_CHAR_VALUE(op) \\\n    PyUnicode_MAX_CHAR_VALUE(_PyObject_CAST(op))\n\n\n/* === Public API ========================================================= */\n\n/* With PEP 393, this is the recommended way to allocate a new unicode object.\n   This function will allocate the object and its buffer in a single memory\n   block.  Objects created using this function are not resizable. */\nPyAPI_FUNC(PyObject*) PyUnicode_New(\n    Py_ssize_t size,            /* Number of code points in the new string */\n    Py_UCS4 maxchar             /* maximum code point value in the string */\n    );\n\n/* For backward compatibility */\nstatic inline int PyUnicode_READY(PyObject* Py_UNUSED(op))\n{\n    return 0;\n}\n#define PyUnicode_READY(op) PyUnicode_READY(_PyObject_CAST(op))\n\n/* Copy character from one unicode object into another, this function performs\n   character conversion when necessary and falls back to memcpy() if possible.\n\n   Fail if to is too small (smaller than *how_many* or smaller than\n   len(from)-from_start), or if kind(from[from_start:from_start+how_many]) >\n   kind(to), or if *to* has more than 1 reference.\n\n   Return the number of written character, or return -1 and raise an exception\n   on error.\n\n   Pseudo-code:\n\n       how_many = min(how_many, len(from) - from_start)\n       to[to_start:to_start+how_many] = from[from_start:from_start+how_many]\n       return how_many\n\n   Note: The function doesn't write a terminating null character.\n   */\nPyAPI_FUNC(Py_ssize_t) PyUnicode_CopyCharacters(\n    PyObject *to,\n    Py_ssize_t to_start,\n    PyObject *from,\n    Py_ssize_t from_start,\n    Py_ssize_t how_many\n    );\n\n/* Fill a string with a character: write fill_char into\n   unicode[start:start+length].\n\n   Fail if fill_char is bigger than the string maximum character, or if the\n   string has more than 1 reference.\n\n   Return the number of written character, or return -1 and raise an exception\n   on error. */\nPyAPI_FUNC(Py_ssize_t) PyUnicode_Fill(\n    PyObject *unicode,\n    Py_ssize_t start,\n    Py_ssize_t length,\n    Py_UCS4 fill_char\n    );\n\n/* Create a new string from a buffer of Py_UCS1, Py_UCS2 or Py_UCS4 characters.\n   Scan the string to find the maximum character. */\nPyAPI_FUNC(PyObject*) PyUnicode_FromKindAndData(\n    int kind,\n    const void *buffer,\n    Py_ssize_t size);\n\n\n/* --- _PyUnicodeWriter API ----------------------------------------------- */\n\ntypedef struct {\n    PyObject *buffer;\n    void *data;\n    int kind;\n    Py_UCS4 maxchar;\n    Py_ssize_t size;\n    Py_ssize_t pos;\n\n    /* minimum number of allocated characters (default: 0) */\n    Py_ssize_t min_length;\n\n    /* minimum character (default: 127, ASCII) */\n    Py_UCS4 min_char;\n\n    /* If non-zero, overallocate the buffer (default: 0). */\n    unsigned char overallocate;\n\n    /* If readonly is 1, buffer is a shared string (cannot be modified)\n       and size is set to 0. */\n    unsigned char readonly;\n} _PyUnicodeWriter ;\n\n// Initialize a Unicode writer.\n//\n// By default, the minimum buffer size is 0 character and overallocation is\n// disabled. Set min_length, min_char and overallocate attributes to control\n// the allocation of the buffer.\nPyAPI_FUNC(void)\n_PyUnicodeWriter_Init(_PyUnicodeWriter *writer);\n\n/* Prepare the buffer to write 'length' characters\n   with the specified maximum character.\n\n   Return 0 on success, raise an exception and return -1 on error. */\n#define _PyUnicodeWriter_Prepare(WRITER, LENGTH, MAXCHAR)             \\\n    (((MAXCHAR) <= (WRITER)->maxchar                                  \\\n      && (LENGTH) <= (WRITER)->size - (WRITER)->pos)                  \\\n     ? 0                                                              \\\n     : (((LENGTH) == 0)                                               \\\n        ? 0                                                           \\\n        : _PyUnicodeWriter_PrepareInternal((WRITER), (LENGTH), (MAXCHAR))))\n\n/* Don't call this function directly, use the _PyUnicodeWriter_Prepare() macro\n   instead. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_PrepareInternal(_PyUnicodeWriter *writer,\n                                 Py_ssize_t length, Py_UCS4 maxchar);\n\n/* Prepare the buffer to have at least the kind KIND.\n   For example, kind=PyUnicode_2BYTE_KIND ensures that the writer will\n   support characters in range U+000-U+FFFF.\n\n   Return 0 on success, raise an exception and return -1 on error. */\n#define _PyUnicodeWriter_PrepareKind(WRITER, KIND)                    \\\n    ((KIND) <= (WRITER)->kind                                         \\\n     ? 0                                                              \\\n     : _PyUnicodeWriter_PrepareKindInternal((WRITER), (KIND)))\n\n/* Don't call this function directly, use the _PyUnicodeWriter_PrepareKind()\n   macro instead. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_PrepareKindInternal(_PyUnicodeWriter *writer,\n                                     int kind);\n\n/* Append a Unicode character.\n   Return 0 on success, raise an exception and return -1 on error. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_WriteChar(_PyUnicodeWriter *writer,\n    Py_UCS4 ch\n    );\n\n/* Append a Unicode string.\n   Return 0 on success, raise an exception and return -1 on error. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_WriteStr(_PyUnicodeWriter *writer,\n    PyObject *str               /* Unicode string */\n    );\n\n/* Append a substring of a Unicode string.\n   Return 0 on success, raise an exception and return -1 on error. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_WriteSubstring(_PyUnicodeWriter *writer,\n    PyObject *str,              /* Unicode string */\n    Py_ssize_t start,\n    Py_ssize_t end\n    );\n\n/* Append an ASCII-encoded byte string.\n   Return 0 on success, raise an exception and return -1 on error. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_WriteASCIIString(_PyUnicodeWriter *writer,\n    const char *str,           /* ASCII-encoded byte string */\n    Py_ssize_t len             /* number of bytes, or -1 if unknown */\n    );\n\n/* Append a latin1-encoded byte string.\n   Return 0 on success, raise an exception and return -1 on error. */\nPyAPI_FUNC(int)\n_PyUnicodeWriter_WriteLatin1String(_PyUnicodeWriter *writer,\n    const char *str,           /* latin1-encoded byte string */\n    Py_ssize_t len             /* length in bytes */\n    );\n\n/* Get the value of the writer as a Unicode string. Clear the\n   buffer of the writer. Raise an exception and return NULL\n   on error. */\nPyAPI_FUNC(PyObject *)\n_PyUnicodeWriter_Finish(_PyUnicodeWriter *writer);\n\n/* Deallocate memory of a writer (clear its internal buffer). */\nPyAPI_FUNC(void)\n_PyUnicodeWriter_Dealloc(_PyUnicodeWriter *writer);\n\n\n/* --- Manage the default encoding ---------------------------------------- */\n\n/* Returns a pointer to the default encoding (UTF-8) of the\n   Unicode object unicode.\n\n   Like PyUnicode_AsUTF8AndSize(), this also caches the UTF-8 representation\n   in the unicodeobject.\n\n   _PyUnicode_AsString is a #define for PyUnicode_AsUTF8 to\n   support the previous internal function with the same behaviour.\n\n   Use of this API is DEPRECATED since no size information can be\n   extracted from the returned data.\n*/\n\nPyAPI_FUNC(const char *) PyUnicode_AsUTF8(PyObject *unicode);\n\n// Alias kept for backward compatibility\n#define _PyUnicode_AsString PyUnicode_AsUTF8\n\n\n/* === Characters Type APIs =============================================== */\n\n/* These should not be used directly. Use the Py_UNICODE_IS* and\n   Py_UNICODE_TO* macros instead.\n\n   These APIs are implemented in Objects/unicodectype.c.\n\n*/\n\nPyAPI_FUNC(int) _PyUnicode_IsLowercase(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsUppercase(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsTitlecase(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsWhitespace(\n    const Py_UCS4 ch         /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsLinebreak(\n    const Py_UCS4 ch         /* Unicode character */\n    );\n\nPyAPI_FUNC(Py_UCS4) _PyUnicode_ToLowercase(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(Py_UCS4) _PyUnicode_ToUppercase(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(Py_UCS4) _PyUnicode_ToTitlecase(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_ToDecimalDigit(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_ToDigit(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(double) _PyUnicode_ToNumeric(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsDecimalDigit(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsDigit(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsNumeric(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsPrintable(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\nPyAPI_FUNC(int) _PyUnicode_IsAlpha(\n    Py_UCS4 ch       /* Unicode character */\n    );\n\n// Helper array used by Py_UNICODE_ISSPACE().\nPyAPI_DATA(const unsigned char) _Py_ascii_whitespace[];\n\n// Since splitting on whitespace is an important use case, and\n// whitespace in most situations is solely ASCII whitespace, we\n// optimize for the common case by using a quick look-up table\n// _Py_ascii_whitespace (see below) with an inlined check.\nstatic inline int Py_UNICODE_ISSPACE(Py_UCS4 ch) {\n    if (ch < 128) {\n        return _Py_ascii_whitespace[ch];\n    }\n    return _PyUnicode_IsWhitespace(ch);\n}\n\n#define Py_UNICODE_ISLOWER(ch) _PyUnicode_IsLowercase(ch)\n#define Py_UNICODE_ISUPPER(ch) _PyUnicode_IsUppercase(ch)\n#define Py_UNICODE_ISTITLE(ch) _PyUnicode_IsTitlecase(ch)\n#define Py_UNICODE_ISLINEBREAK(ch) _PyUnicode_IsLinebreak(ch)\n\n#define Py_UNICODE_TOLOWER(ch) _PyUnicode_ToLowercase(ch)\n#define Py_UNICODE_TOUPPER(ch) _PyUnicode_ToUppercase(ch)\n#define Py_UNICODE_TOTITLE(ch) _PyUnicode_ToTitlecase(ch)\n\n#define Py_UNICODE_ISDECIMAL(ch) _PyUnicode_IsDecimalDigit(ch)\n#define Py_UNICODE_ISDIGIT(ch) _PyUnicode_IsDigit(ch)\n#define Py_UNICODE_ISNUMERIC(ch) _PyUnicode_IsNumeric(ch)\n#define Py_UNICODE_ISPRINTABLE(ch) _PyUnicode_IsPrintable(ch)\n\n#define Py_UNICODE_TODECIMAL(ch) _PyUnicode_ToDecimalDigit(ch)\n#define Py_UNICODE_TODIGIT(ch) _PyUnicode_ToDigit(ch)\n#define Py_UNICODE_TONUMERIC(ch) _PyUnicode_ToNumeric(ch)\n\n#define Py_UNICODE_ISALPHA(ch) _PyUnicode_IsAlpha(ch)\n\nstatic inline int Py_UNICODE_ISALNUM(Py_UCS4 ch) {\n   return (Py_UNICODE_ISALPHA(ch)\n           || Py_UNICODE_ISDECIMAL(ch)\n           || Py_UNICODE_ISDIGIT(ch)\n           || Py_UNICODE_ISNUMERIC(ch));\n}\n\n\n/* === Misc functions ===================================================== */\n\n// Return an interned Unicode object for an Identifier; may fail if there is no\n// memory.\nPyAPI_FUNC(PyObject*) _PyUnicode_FromId(_Py_Identifier*);\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "./Include/object.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_OBJECT_H\n#define Py_OBJECT_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Object and type object interface */\n\n/*\nObjects are structures allocated on the heap.  Special rules apply to\nthe use of objects to ensure they are properly garbage-collected.\nObjects are never allocated statically or on the stack; they must be\naccessed through special macros and functions only.  (Type objects are\nexceptions to the first rule; the standard types are represented by\nstatically initialized type objects, although work on type/class unification\nfor Python 2.2 made it possible to have heap-allocated type objects too).\n\nAn object has a 'reference count' that is increased or decreased when a\npointer to the object is copied or deleted; when the reference count\nreaches zero there are no references to the object left and it can be\nremoved from the heap.\n\nAn object has a 'type' that determines what it represents and what kind\nof data it contains.  An object's type is fixed when it is created.\nTypes themselves are represented as objects; an object contains a\npointer to the corresponding type object.  The type itself has a type\npointer pointing to the object representing the type 'type', which\ncontains a pointer to itself!.\n\nObjects do not float around in memory; once allocated an object keeps\nthe same size and address.  Objects that must hold variable-size data\ncan contain pointers to variable-size parts of the object.  Not all\nobjects of the same type have the same size; but the size cannot change\nafter allocation.  (These restrictions are made so a reference to an\nobject can be simply a pointer -- moving an object would require\nupdating all the pointers, and changing an object's size would require\nmoving it if there was another object right next to it.)\n\nObjects are always accessed through pointers of the type 'PyObject *'.\nThe type 'PyObject' is a structure that only contains the reference count\nand the type pointer.  The actual memory allocated for an object\ncontains other data that can only be accessed after casting the pointer\nto a pointer to a longer structure type.  This longer type must start\nwith the reference count and type fields; the macro PyObject_HEAD should be\nused for this (to accommodate for future changes).  The implementation\nof a particular object type can cast the object pointer to the proper\ntype and back.\n\nA standard interface exists for objects that contain an array of items\nwhose size is determined when the object is allocated.\n*/\n\n/* Py_DEBUG implies Py_REF_DEBUG. */\n#if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)\n#  define Py_REF_DEBUG\n#endif\n\n/* PyObject_HEAD defines the initial segment of every PyObject. */\n#define PyObject_HEAD                   PyObject ob_base;\n\n/*\nImmortalization:\n\nThe following indicates the immortalization strategy depending on the amount\nof available bits in the reference count field. All strategies are backwards\ncompatible but the specific reference count value or immortalization check\nmight change depending on the specializations for the underlying system.\n\nProper deallocation of immortal instances requires distinguishing between\nstatically allocated immortal instances vs those promoted by the runtime to be\nimmortal. The latter should be the only instances that require\ncleanup during runtime finalization.\n*/\n\n#if SIZEOF_VOID_P > 4\n/*\nIn 64+ bit systems, an object will be marked as immortal by setting all of the\nlower 32 bits of the reference count field, which is equal to: 0xFFFFFFFF\n\nUsing the lower 32 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases will use saturated arithmetic, taking advantage of\nhaving all the lower 32 bits set, which will avoid the reference count to go\nbeyond the refcount limit. Immortality checks for reference count decreases will\nbe done by checking the bit sign flag in the lower 32 bits.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX)\n\n#else\n/*\nIn 32 bit systems, an object will be marked as immortal by setting all of the\nlower 30 bits of the reference count field, which is equal to: 0x3FFFFFFF\n\nUsing the lower 30 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases and decreases will first go through an immortality\ncheck by comparing the reference count field to the immortality reference count.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX >> 2)\n#endif\n\n// Py_GIL_DISABLED builds indicate immortal objects using `ob_ref_local`, which is\n// always 32-bits.\n#ifdef Py_GIL_DISABLED\n#define _Py_IMMORTAL_REFCNT_LOCAL UINT32_MAX\n#endif\n\n// Kept for backward compatibility. It was needed by Py_TRACE_REFS build.\n#define _PyObject_EXTRA_INIT\n\n/* Make all uses of PyObject_HEAD_INIT immortal.\n *\n * Statically allocated objects might be shared between\n * interpreters, so must be marked as immortal.\n */\n#if defined(Py_GIL_DISABLED)\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        0,                          \\\n        0,                          \\\n        { 0 },                      \\\n        0,                          \\\n        _Py_IMMORTAL_REFCNT_LOCAL,  \\\n        0,                          \\\n        (type),                     \\\n    },\n#else\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        { _Py_IMMORTAL_REFCNT },    \\\n        (type)                      \\\n    },\n#endif\n\n#define PyVarObject_HEAD_INIT(type, size) \\\n    {                                     \\\n        PyObject_HEAD_INIT(type)          \\\n        (size)                            \\\n    },\n\n/* PyObject_VAR_HEAD defines the initial segment of all variable-size\n * container objects.  These end with a declaration of an array with 1\n * element, but enough space is malloc'ed so that the array actually\n * has room for ob_size elements.  Note that ob_size is an element count,\n * not necessarily a byte count.\n */\n#define PyObject_VAR_HEAD      PyVarObject ob_base;\n#define Py_INVALID_SIZE (Py_ssize_t)-1\n\n/* Nothing is actually declared to be a PyObject, but every pointer to\n * a Python object can be cast to a PyObject*.  This is inheritance built\n * by hand.  Similarly every pointer to a variable-size Python object can,\n * in addition, be cast to PyVarObject*.\n */\n#ifndef Py_GIL_DISABLED\nstruct _object {\n#if (defined(__GNUC__) || defined(__clang__)) \\\n        && !(defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L)\n    // On C99 and older, anonymous union is a GCC and clang extension\n    __extension__\n#endif\n#ifdef _MSC_VER\n    // Ignore MSC warning C4201: \"nonstandard extension used:\n    // nameless struct/union\"\n    __pragma(warning(push))\n    __pragma(warning(disable: 4201))\n#endif\n    union {\n       Py_ssize_t ob_refcnt;\n#if SIZEOF_VOID_P > 4\n       PY_UINT32_T ob_refcnt_split[2];\n#endif\n    };\n#ifdef _MSC_VER\n    __pragma(warning(pop))\n#endif\n\n    PyTypeObject *ob_type;\n};\n#else\n// Objects that are not owned by any thread use a thread id (tid) of zero.\n// This includes both immortal objects and objects whose reference count\n// fields have been merged.\n#define _Py_UNOWNED_TID             0\n\n// The shared reference count uses the two least-significant bits to store\n// flags. The remaining bits are used to store the reference count.\n#define _Py_REF_SHARED_SHIFT        2\n#define _Py_REF_SHARED_FLAG_MASK    0x3\n\n// The shared flags are initialized to zero.\n#define _Py_REF_SHARED_INIT         0x0\n#define _Py_REF_MAYBE_WEAKREF       0x1\n#define _Py_REF_QUEUED              0x2\n#define _Py_REF_MERGED              0x3\n\n// Create a shared field from a refcnt and desired flags\n#define _Py_REF_SHARED(refcnt, flags) (((refcnt) << _Py_REF_SHARED_SHIFT) + (flags))\n\nstruct _object {\n    // ob_tid stores the thread id (or zero). It is also used by the GC and the\n    // trashcan mechanism as a linked list pointer and by the GC to store the\n    // computed \"gc_refs\" refcount.\n    uintptr_t ob_tid;\n    uint16_t _padding;\n    PyMutex ob_mutex;           // per-object lock\n    uint8_t ob_gc_bits;         // gc-related state\n    uint32_t ob_ref_local;      // local reference count\n    Py_ssize_t ob_ref_shared;   // shared (atomic) reference count\n    PyTypeObject *ob_type;\n};\n#endif\n\n/* Cast argument to PyObject* type. */\n#define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))\n\ntypedef struct {\n    PyObject ob_base;\n    Py_ssize_t ob_size; /* Number of items in variable part */\n} PyVarObject;\n\n/* Cast argument to PyVarObject* type. */\n#define _PyVarObject_CAST(op) _Py_CAST(PyVarObject*, (op))\n\n\n// Test if the 'x' object is the 'y' object, the same as \"x is y\" in Python.\nPyAPI_FUNC(int) Py_Is(PyObject *x, PyObject *y);\n#define Py_Is(x, y) ((x) == (y))\n\n#if defined(Py_GIL_DISABLED) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(uintptr_t) _Py_GetThreadLocal_Addr(void);\n\nstatic inline uintptr_t\n_Py_ThreadId(void)\n{\n    uintptr_t tid;\n#if defined(_MSC_VER) && defined(_M_X64)\n    tid = __readgsqword(48);\n#elif defined(_MSC_VER) && defined(_M_IX86)\n    tid = __readfsdword(24);\n#elif defined(_MSC_VER) && defined(_M_ARM64)\n    tid = __getReg(18);\n#elif defined(__i386__)\n    __asm__(\"movl %%gs:0, %0\" : \"=r\" (tid));  // 32-bit always uses GS\n#elif defined(__MACH__) && defined(__x86_64__)\n    __asm__(\"movq %%gs:0, %0\" : \"=r\" (tid));  // x86_64 macOSX uses GS\n#elif defined(__x86_64__)\n   __asm__(\"movq %%fs:0, %0\" : \"=r\" (tid));  // x86_64 Linux, BSD uses FS\n#elif defined(__arm__)\n    __asm__ (\"mrc p15, 0, %0, c13, c0, 3\\nbic %0, %0, #3\" : \"=r\" (tid));\n#elif defined(__aarch64__) && defined(__APPLE__)\n    __asm__ (\"mrs %0, tpidrro_el0\" : \"=r\" (tid));\n#elif defined(__aarch64__)\n    __asm__ (\"mrs %0, tpidr_el0\" : \"=r\" (tid));\n#elif defined(__powerpc64__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r13 is reserved for use as system thread ID by the Power 64-bit ABI.\n    register uintptr_t tp __asm__ (\"r13\");\n    __asm__(\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__powerpc__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r2 is reserved for use as system thread ID by the Power 32-bit ABI.\n    register uintptr_t tp __asm__ (\"r2\");\n    __asm__ (\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__s390__) && defined(__GNUC__)\n    // Both GCC and Clang have supported __builtin_thread_pointer\n    // for s390 from long time ago.\n    tid = (uintptr_t)__builtin_thread_pointer();\n#elif defined(__riscv)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // tp is Thread Pointer provided by the RISC-V ABI.\n    __asm__ (\"mv %0, tp\" : \"=r\" (tid));\n    #endif\n#else\n    // Fallback to a portable implementation if we do not have a faster\n    // platform-specific implementation.\n    tid = _Py_GetThreadLocal_Addr();\n#endif\n  return tid;\n}\n\nstatic inline Py_ALWAYS_INLINE int\n_Py_IsOwnedByCurrentThread(PyObject *ob)\n{\n#ifdef _Py_THREAD_SANITIZER\n    return _Py_atomic_load_uintptr_relaxed(&ob->ob_tid) == _Py_ThreadId();\n#else\n    return ob->ob_tid == _Py_ThreadId();\n#endif\n}\n#endif\n\nstatic inline Py_ssize_t Py_REFCNT(PyObject *ob) {\n#if !defined(Py_GIL_DISABLED)\n    return ob->ob_refcnt;\n#else\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&ob->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return _Py_IMMORTAL_REFCNT;\n    }\n    Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&ob->ob_ref_shared);\n    return _Py_STATIC_CAST(Py_ssize_t, local) +\n           Py_ARITHMETIC_RIGHT_SHIFT(Py_ssize_t, shared, _Py_REF_SHARED_SHIFT);\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_REFCNT(ob) Py_REFCNT(_PyObject_CAST(ob))\n#endif\n\n\n// bpo-39573: The Py_SET_TYPE() function must be used to set an object type.\nstatic inline PyTypeObject* Py_TYPE(PyObject *ob) {\n    return ob->ob_type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyLong_Type;\nPyAPI_DATA(PyTypeObject) PyBool_Type;\n\n// bpo-39573: The Py_SET_SIZE() function must be used to set an object size.\nstatic inline Py_ssize_t Py_SIZE(PyObject *ob) {\n    assert(ob->ob_type != &PyLong_Type);\n    assert(ob->ob_type != &PyBool_Type);\n    return  _PyVarObject_CAST(ob)->ob_size;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SIZE(ob) Py_SIZE(_PyObject_CAST(ob))\n#endif\n\nstatic inline Py_ALWAYS_INLINE int _Py_IsImmortal(PyObject *op)\n{\n#if defined(Py_GIL_DISABLED)\n    return (_Py_atomic_load_uint32_relaxed(&op->ob_ref_local) ==\n            _Py_IMMORTAL_REFCNT_LOCAL);\n#elif SIZEOF_VOID_P > 4\n    return (_Py_CAST(PY_INT32_T, op->ob_refcnt) < 0);\n#else\n    return (op->ob_refcnt == _Py_IMMORTAL_REFCNT);\n#endif\n}\n#define _Py_IsImmortal(op) _Py_IsImmortal(_PyObject_CAST(op))\n\nstatic inline int Py_IS_TYPE(PyObject *ob, PyTypeObject *type) {\n    return Py_TYPE(ob) == type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))\n#endif\n\n\n// Py_SET_REFCNT() implementation for stable ABI\nPyAPI_FUNC(void) _Py_SetRefcnt(PyObject *ob, Py_ssize_t refcnt);\n\nstatic inline void Py_SET_REFCNT(PyObject *ob, Py_ssize_t refcnt) {\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030d0000\n    // Stable ABI implements Py_SET_REFCNT() as a function call\n    // on limited C API version 3.13 and newer.\n    _Py_SetRefcnt(ob, refcnt);\n#else\n    // This immortal check is for code that is unaware of immortal objects.\n    // The runtime tracks these objects and we should avoid as much\n    // as possible having extensions inadvertently change the refcnt\n    // of an immortalized object.\n    if (_Py_IsImmortal(ob)) {\n        return;\n    }\n\n#ifndef Py_GIL_DISABLED\n    ob->ob_refcnt = refcnt;\n#else\n    if (_Py_IsOwnedByCurrentThread(ob)) {\n        if ((size_t)refcnt > (size_t)UINT32_MAX) {\n            // On overflow, make the object immortal\n            ob->ob_tid = _Py_UNOWNED_TID;\n            ob->ob_ref_local = _Py_IMMORTAL_REFCNT_LOCAL;\n            ob->ob_ref_shared = 0;\n        }\n        else {\n            // Set local refcount to desired refcount and shared refcount\n            // to zero, but preserve the shared refcount flags.\n            ob->ob_ref_local = _Py_STATIC_CAST(uint32_t, refcnt);\n            ob->ob_ref_shared &= _Py_REF_SHARED_FLAG_MASK;\n        }\n    }\n    else {\n        // Set local refcount to zero and shared refcount to desired refcount.\n        // Mark the object as merged.\n        ob->ob_tid = _Py_UNOWNED_TID;\n        ob->ob_ref_local = 0;\n        ob->ob_ref_shared = _Py_REF_SHARED(refcnt, _Py_REF_MERGED);\n    }\n#endif  // Py_GIL_DISABLED\n#endif  // Py_LIMITED_API+0 < 0x030d0000\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_REFCNT(ob, refcnt) Py_SET_REFCNT(_PyObject_CAST(ob), (refcnt))\n#endif\n\n\nstatic inline void Py_SET_TYPE(PyObject *ob, PyTypeObject *type) {\n    ob->ob_type = type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_TYPE(ob, type) Py_SET_TYPE(_PyObject_CAST(ob), type)\n#endif\n\nstatic inline void Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) {\n    assert(ob->ob_base.ob_type != &PyLong_Type);\n    assert(ob->ob_base.ob_type != &PyBool_Type);\n#ifdef Py_GIL_DISABLED\n    _Py_atomic_store_ssize_relaxed(&ob->ob_size, size);\n#else\n    ob->ob_size = size;\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_SIZE(ob, size) Py_SET_SIZE(_PyVarObject_CAST(ob), (size))\n#endif\n\n\n/*\nType objects contain a string containing the type name (to help somewhat\nin debugging), the allocation parameters (see PyObject_New() and\nPyObject_NewVar()),\nand methods for accessing objects of the type.  Methods are optional, a\nnil pointer meaning that particular kind of access is not available for\nthis type.  The Py_DECREF() macro uses the tp_dealloc method without\nchecking for a nil pointer; it should always be implemented except if\nthe implementation can guarantee that the reference count will never\nreach zero (e.g., for statically allocated type objects).\n\nNB: the methods for certain type groups are now contained in separate\nmethod blocks.\n*/\n\ntypedef PyObject * (*unaryfunc)(PyObject *);\ntypedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\ntypedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ntypedef int (*inquiry)(PyObject *);\ntypedef Py_ssize_t (*lenfunc)(PyObject *);\ntypedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\ntypedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\ntypedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\ntypedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\ntypedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);\n\ntypedef int (*objobjproc)(PyObject *, PyObject *);\ntypedef int (*visitproc)(PyObject *, void *);\ntypedef int (*traverseproc)(PyObject *, visitproc, void *);\n\n\ntypedef void (*freefunc)(void *);\ntypedef void (*destructor)(PyObject *);\ntypedef PyObject *(*getattrfunc)(PyObject *, char *);\ntypedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\ntypedef int (*setattrfunc)(PyObject *, char *, PyObject *);\ntypedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*reprfunc)(PyObject *);\ntypedef Py_hash_t (*hashfunc)(PyObject *);\ntypedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ntypedef PyObject *(*getiterfunc) (PyObject *);\ntypedef PyObject *(*iternextfunc) (PyObject *);\ntypedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*initproc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);\ntypedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030c0000 // 3.12\ntypedef PyObject *(*vectorcallfunc)(PyObject *callable, PyObject *const *args,\n                                    size_t nargsf, PyObject *kwnames);\n#endif\n\ntypedef struct{\n    int slot;    /* slot id, see below */\n    void *pfunc; /* function pointer */\n} PyType_Slot;\n\ntypedef struct{\n    const char* name;\n    int basicsize;\n    int itemsize;\n    unsigned int flags;\n    PyType_Slot *slots; /* terminated by slot==0. */\n} PyType_Spec;\n\nPyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000\nPyAPI_FUNC(void*) PyType_GetSlot(PyTypeObject*, int);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03090000\nPyAPI_FUNC(PyObject*) PyType_FromModuleAndSpec(PyObject *, PyType_Spec *, PyObject *);\nPyAPI_FUNC(PyObject *) PyType_GetModule(PyTypeObject *);\nPyAPI_FUNC(void *) PyType_GetModuleState(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030B0000\nPyAPI_FUNC(PyObject *) PyType_GetName(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GetQualName(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030D0000\nPyAPI_FUNC(PyObject *) PyType_GetFullyQualifiedName(PyTypeObject *type);\nPyAPI_FUNC(PyObject *) PyType_GetModuleName(PyTypeObject *type);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\nPyAPI_FUNC(PyObject *) PyType_FromMetaclass(PyTypeObject*, PyObject*, PyType_Spec*, PyObject*);\nPyAPI_FUNC(void *) PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls);\nPyAPI_FUNC(Py_ssize_t) PyType_GetTypeDataSize(PyTypeObject *cls);\n#endif\n\n/* Generic type check */\nPyAPI_FUNC(int) PyType_IsSubtype(PyTypeObject *, PyTypeObject *);\n\nstatic inline int PyObject_TypeCheck(PyObject *ob, PyTypeObject *type) {\n    return Py_IS_TYPE(ob, type) || PyType_IsSubtype(Py_TYPE(ob), type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyType_Type; /* built-in 'type' */\nPyAPI_DATA(PyTypeObject) PyBaseObject_Type; /* built-in 'object' */\nPyAPI_DATA(PyTypeObject) PySuper_Type; /* built-in 'super' */\n\nPyAPI_FUNC(unsigned long) PyType_GetFlags(PyTypeObject*);\n\nPyAPI_FUNC(int) PyType_Ready(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GenericAlloc(PyTypeObject *, Py_ssize_t);\nPyAPI_FUNC(PyObject *) PyType_GenericNew(PyTypeObject *,\n                                               PyObject *, PyObject *);\nPyAPI_FUNC(unsigned int) PyType_ClearCache(void);\nPyAPI_FUNC(void) PyType_Modified(PyTypeObject *);\n\n/* Generic operations on objects */\nPyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);\nPyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);\nPyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);\nPyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttrString(PyObject *v, const char *name);\nPyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);\nPyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_GetOptionalAttr(PyObject *, PyObject *, PyObject **);\nPyAPI_FUNC(int) PyObject_GetOptionalAttrString(PyObject *, const char *, PyObject **);\n#endif\nPyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttr(PyObject *v, PyObject *name);\nPyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_HasAttrWithError(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_HasAttrStringWithError(PyObject *, const char *);\n#endif\nPyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *, PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);\n#endif\nPyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);\nPyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);\nPyAPI_FUNC(int) PyObject_IsTrue(PyObject *);\nPyAPI_FUNC(int) PyObject_Not(PyObject *);\nPyAPI_FUNC(int) PyCallable_Check(PyObject *);\nPyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);\n\n/* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a\n   list of strings.  PyObject_Dir(NULL) is like builtins.dir(),\n   returning the names of the current locals.  In this case, if there are\n   no current locals, NULL is returned, and PyErr_Occurred() is false.\n*/\nPyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);\n\n/* Helpers for printing recursive container types */\nPyAPI_FUNC(int) Py_ReprEnter(PyObject *);\nPyAPI_FUNC(void) Py_ReprLeave(PyObject *);\n\n/* Flag bits for printing: */\n#define Py_PRINT_RAW    1       /* No string quotes etc. */\n\n/*\nType flags (tp_flags)\n\nThese flags are used to change expected features and behavior for a\nparticular type.\n\nArbitration of the flag bit positions will need to be coordinated among\nall extension writers who publicly release their extensions (this will\nbe fewer than you might expect!).\n\nMost flags were removed as of Python 3.0 to make room for new flags.  (Some\nflags are not for backwards compatibility but to indicate the presence of an\noptional feature; these flags remain of course.)\n\nType definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.\n\nCode can use PyType_HasFeature(type_ob, flag_value) to test whether the\ngiven type object has a specified feature.\n*/\n\n#ifndef Py_LIMITED_API\n\n/* Track types initialized using _PyStaticType_InitBuiltin(). */\n#define _Py_TPFLAGS_STATIC_BUILTIN (1 << 1)\n\n/* The values array is placed inline directly after the rest of\n * the object. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_INLINE_VALUES (1 << 2)\n\n/* Placement of weakref pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_weaklistoffset.\n */\n#define Py_TPFLAGS_MANAGED_WEAKREF (1 << 3)\n\n/* Placement of dict (and values) pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_dictoffset. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_MANAGED_DICT (1 << 4)\n\n#define Py_TPFLAGS_PREHEADER (Py_TPFLAGS_MANAGED_WEAKREF | Py_TPFLAGS_MANAGED_DICT)\n\n/* Set if instances of the type object are treated as sequences for pattern matching */\n#define Py_TPFLAGS_SEQUENCE (1 << 5)\n/* Set if instances of the type object are treated as mappings for pattern matching */\n#define Py_TPFLAGS_MAPPING (1 << 6)\n#endif\n\n/* Disallow creating instances of the type: set tp_new to NULL and don't create\n * the \"__new__\" key in the type dictionary. */\n#define Py_TPFLAGS_DISALLOW_INSTANTIATION (1UL << 7)\n\n/* Set if the type object is immutable: type attributes cannot be set nor deleted */\n#define Py_TPFLAGS_IMMUTABLETYPE (1UL << 8)\n\n/* Set if the type object is dynamically allocated */\n#define Py_TPFLAGS_HEAPTYPE (1UL << 9)\n\n/* Set if the type allows subclassing */\n#define Py_TPFLAGS_BASETYPE (1UL << 10)\n\n/* Set if the type implements the vectorcall protocol (PEP 590) */\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\n#define Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)\n#ifndef Py_LIMITED_API\n// Backwards compatibility alias for API that was provisional in Python 3.8\n#define _Py_TPFLAGS_HAVE_VECTORCALL Py_TPFLAGS_HAVE_VECTORCALL\n#endif\n#endif\n\n/* Set if the type is 'ready' -- fully initialized */\n#define Py_TPFLAGS_READY (1UL << 12)\n\n/* Set while the type is being 'readied', to prevent recursive ready calls */\n#define Py_TPFLAGS_READYING (1UL << 13)\n\n/* Objects support garbage collection (see objimpl.h) */\n#define Py_TPFLAGS_HAVE_GC (1UL << 14)\n\n/* These two bits are preserved for Stackless Python, next after this is 17 */\n#ifdef STACKLESS\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)\n#else\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0\n#endif\n\n/* Objects behave like an unbound method */\n#define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)\n\n/* Unused. Legacy flag */\n#define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)\n\n/* Type is abstract and cannot be instantiated */\n#define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)\n\n// This undocumented flag gives certain built-ins their unique pattern-matching\n// behavior, which allows a single positional subpattern to match against the\n// subject itself (rather than a mapped attribute on it):\n#define _Py_TPFLAGS_MATCH_SELF (1UL << 22)\n\n/* Items (ob_size*tp_itemsize) are found at the end of an instance's memory */\n#define Py_TPFLAGS_ITEMS_AT_END (1UL << 23)\n\n/* These flags are used to determine if a type is a subclass. */\n#define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)\n#define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)\n#define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)\n#define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)\n#define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)\n#define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)\n#define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)\n#define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)\n\n#define Py_TPFLAGS_DEFAULT  ( \\\n                 Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \\\n                0)\n\n/* NOTE: Some of the following flags reuse lower bits (removed as part of the\n * Python 3.0 transition). */\n\n/* The following flags are kept for compatibility; in previous\n * versions they indicated presence of newer tp_* fields on the\n * type struct.\n * Starting with 3.8, binary compatibility of C extensions across\n * feature releases of Python is not supported anymore (except when\n * using the stable ABI, in which all classes are created dynamically,\n * using the interpreter's memory layout.)\n * Note that older extensions using the stable ABI set these flags,\n * so the bits must not be repurposed.\n */\n#define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)\n#define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)\n\n\n/*\nThe macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement\nreference counts.  Py_DECREF calls the object's deallocator function when\nthe refcount falls to 0; for\nobjects that don't contain references to other objects or heap memory\nthis can be the standard function free().  Both macros can be used\nwherever a void expression is allowed.  The argument must not be a\nNULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.\nThe macro _Py_NewReference(op) initialize reference counts to 1, and\nin special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional\nbookkeeping appropriate to the special build.\n\nWe assume that the reference count field can never overflow; this can\nbe proven when the size of the field is the same as the pointer size, so\nwe ignore the possibility.  Provided a C int is at least 32 bits (which\nis implicitly assumed in many parts of this code), that's enough for\nabout 2**31 references to an object.\n\nXXX The following became out of date in Python 2.2, but I'm not sure\nXXX what the full truth is now.  Certainly, heap-allocated type objects\nXXX can and should be deallocated.\nType objects should never be deallocated; the type pointer in an object\nis not considered to be a reference to the type object, to save\ncomplications in the deallocation function.  (This is actually a\ndecision that's up to the implementer of each new type so if you want,\nyou can count such references to the type object.)\n*/\n\n#if defined(Py_REF_DEBUG) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,\n                                      PyObject *op);\nPyAPI_FUNC(void) _Py_INCREF_IncRefTotal(void);\nPyAPI_FUNC(void) _Py_DECREF_DecRefTotal(void);\n#endif  // Py_REF_DEBUG && !Py_LIMITED_API\n\nPyAPI_FUNC(void) _Py_Dealloc(PyObject *);\n\n/*\nThese are provided as conveniences to Python runtime embedders, so that\nthey can have object code that is not dependent on Python compilation flags.\n*/\nPyAPI_FUNC(void) Py_IncRef(PyObject *);\nPyAPI_FUNC(void) Py_DecRef(PyObject *);\n\n// Similar to Py_IncRef() and Py_DecRef() but the argument must be non-NULL.\n// Private functions used by Py_INCREF() and Py_DECREF().\nPyAPI_FUNC(void) _Py_IncRef(PyObject *);\nPyAPI_FUNC(void) _Py_DecRef(PyObject *);\n\nstatic inline Py_ALWAYS_INLINE void Py_INCREF(PyObject *op)\n{\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n    // Stable ABI implements Py_INCREF() as a function call on limited C API\n    // version 3.12 and newer, and on Python built in debug mode. _Py_IncRef()\n    // was added to Python 3.10.0a7, use Py_IncRef() on older Python versions.\n    // Py_IncRef() accepts NULL whereas _Py_IncRef() doesn't.\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_IncRef(op);\n#  else\n    Py_IncRef(op);\n#  endif\n#else\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n#if defined(Py_GIL_DISABLED)\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    uint32_t new_local = local + 1;\n    if (new_local == 0) {\n        // local is equal to _Py_IMMORTAL_REFCNT: do nothing\n        return;\n    }\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, new_local);\n    }\n    else {\n        _Py_atomic_add_ssize(&op->ob_ref_shared, (1 << _Py_REF_SHARED_SHIFT));\n    }\n#elif SIZEOF_VOID_P > 4\n    // Portable saturated add, branching on the carry flag and set low bits\n    PY_UINT32_T cur_refcnt = op->ob_refcnt_split[PY_BIG_ENDIAN];\n    PY_UINT32_T new_refcnt = cur_refcnt + 1;\n    if (new_refcnt == 0) {\n        // cur_refcnt is equal to _Py_IMMORTAL_REFCNT: the object is immortal,\n        // do nothing\n        return;\n    }\n    op->ob_refcnt_split[PY_BIG_ENDIAN] = new_refcnt;\n#else\n    // Explicitly check immortality against the immortal value\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    op->ob_refcnt++;\n#endif\n    _Py_INCREF_STAT_INC();\n#ifdef Py_REF_DEBUG\n    _Py_INCREF_IncRefTotal();\n#endif\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))\n#endif\n\n\n#if !defined(Py_LIMITED_API) && defined(Py_GIL_DISABLED)\n// Implements Py_DECREF on objects not owned by the current thread.\nPyAPI_FUNC(void) _Py_DecRefShared(PyObject *);\nPyAPI_FUNC(void) _Py_DecRefSharedDebug(PyObject *, const char *, int);\n\n// Called from Py_DECREF by the owning thread when the local refcount reaches\n// zero. The call will deallocate the object if the shared refcount is also\n// zero. Otherwise, the thread gives up ownership and merges the reference\n// count fields.\nPyAPI_FUNC(void) _Py_MergeZeroLocalRefcount(PyObject *);\n#endif\n\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n// Stable ABI implements Py_DECREF() as a function call on limited C API\n// version 3.12 and newer, and on Python built in debug mode. _Py_DecRef() was\n// added to Python 3.10.0a7, use Py_DecRef() on older Python versions.\n// Py_DecRef() accepts NULL whereas _Py_IncRef() doesn't.\nstatic inline void Py_DECREF(PyObject *op) {\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_DecRef(op);\n#  else\n    Py_DecRef(op);\n#  endif\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED) && defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        if (local == 0) {\n            _Py_NegativeRefcount(filename, lineno, op);\n        }\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefSharedDebug(op, filename, lineno);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED)\nstatic inline void Py_DECREF(PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefShared(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    if (op->ob_refcnt <= 0) {\n        _Py_NegativeRefcount(filename, lineno, op);\n    }\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#else\nstatic inline Py_ALWAYS_INLINE void Py_DECREF(PyObject *op)\n{\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n#endif\n\n\n/* Safely decref `op` and set `op` to NULL, especially useful in tp_clear\n * and tp_dealloc implementations.\n *\n * Note that \"the obvious\" code can be deadly:\n *\n *     Py_XDECREF(op);\n *     op = NULL;\n *\n * Typically, `op` is something like self->containee, and `self` is done\n * using its `containee` member.  In the code sequence above, suppose\n * `containee` is non-NULL with a refcount of 1.  Its refcount falls to\n * 0 on the first line, which can trigger an arbitrary amount of code,\n * possibly including finalizers (like __del__ methods or weakref callbacks)\n * coded in Python, which in turn can release the GIL and allow other threads\n * to run, etc.  Such code may even invoke methods of `self` again, or cause\n * cyclic gc to trigger, but-- oops! --self->containee still points to the\n * object being torn down, and it may be in an insane state while being torn\n * down.  This has in fact been a rich historic source of miserable (rare &\n * hard-to-diagnose) segfaulting (and other) bugs.\n *\n * The safe way is:\n *\n *      Py_CLEAR(op);\n *\n * That arranges to set `op` to NULL _before_ decref'ing, so that any code\n * triggered as a side-effect of `op` getting torn down no longer believes\n * `op` points to a valid object.\n *\n * There are cases where it's safe to use the naive code, but they're brittle.\n * For example, if `op` points to a Python integer, you know that destroying\n * one of those can't cause problems -- but in part that relies on that\n * Python integers aren't currently weakly referencable.  Best practice is\n * to use Py_CLEAR() even if you can't think of a reason for why you need to.\n *\n * gh-98724: Use a temporary variable to only evaluate the macro argument once,\n * to avoid the duplication of side effects if the argument has side effects.\n *\n * gh-99701: If the PyObject* type is used with casting arguments to PyObject*,\n * the code can be miscompiled with strict aliasing because of type punning.\n * With strict aliasing, a compiler considers that two pointers of different\n * types cannot read or write the same memory which enables optimization\n * opportunities.\n *\n * If available, use _Py_TYPEOF() to use the 'op' type for temporary variables,\n * and so avoid type punning. Otherwise, use memcpy() which causes type erasure\n * and so prevents the compiler to reuse an old cached 'op' value after\n * Py_CLEAR().\n */\n#ifdef _Py_TYPEOF\n#define Py_CLEAR(op) \\\n    do { \\\n        _Py_TYPEOF(op)* _tmp_op_ptr = &(op); \\\n        _Py_TYPEOF(op) _tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            *_tmp_op_ptr = _Py_NULL; \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#else\n#define Py_CLEAR(op) \\\n    do { \\\n        PyObject **_tmp_op_ptr = _Py_CAST(PyObject**, &(op)); \\\n        PyObject *_tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            PyObject *_null_ptr = _Py_NULL; \\\n            memcpy(_tmp_op_ptr, &_null_ptr, sizeof(PyObject*)); \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#endif\n\n\n/* Function to use in case the object pointer can be NULL: */\nstatic inline void Py_XINCREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_INCREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))\n#endif\n\nstatic inline void Py_XDECREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_DECREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XDECREF(op) Py_XDECREF(_PyObject_CAST(op))\n#endif\n\n// Create a new strong reference to an object:\n// increment the reference count of the object and return the object.\nPyAPI_FUNC(PyObject*) Py_NewRef(PyObject *obj);\n\n// Similar to Py_NewRef(), but the object can be NULL.\nPyAPI_FUNC(PyObject*) Py_XNewRef(PyObject *obj);\n\nstatic inline PyObject* _Py_NewRef(PyObject *obj)\n{\n    Py_INCREF(obj);\n    return obj;\n}\n\nstatic inline PyObject* _Py_XNewRef(PyObject *obj)\n{\n    Py_XINCREF(obj);\n    return obj;\n}\n\n// Py_NewRef() and Py_XNewRef() are exported as functions for the stable ABI.\n// Names overridden with macros by static inline functions for best\n// performances.\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_NewRef(obj) _Py_NewRef(_PyObject_CAST(obj))\n#  define Py_XNewRef(obj) _Py_XNewRef(_PyObject_CAST(obj))\n#else\n#  define Py_NewRef(obj) _Py_NewRef(obj)\n#  define Py_XNewRef(obj) _Py_XNewRef(obj)\n#endif\n\n\n#define Py_CONSTANT_NONE 0\n#define Py_CONSTANT_FALSE 1\n#define Py_CONSTANT_TRUE 2\n#define Py_CONSTANT_ELLIPSIS 3\n#define Py_CONSTANT_NOT_IMPLEMENTED 4\n#define Py_CONSTANT_ZERO 5\n#define Py_CONSTANT_ONE 6\n#define Py_CONSTANT_EMPTY_STR 7\n#define Py_CONSTANT_EMPTY_BYTES 8\n#define Py_CONSTANT_EMPTY_TUPLE 9\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject*) Py_GetConstant(unsigned int constant_id);\nPyAPI_FUNC(PyObject*) Py_GetConstantBorrowed(unsigned int constant_id);\n#endif\n\n\n/*\n_Py_NoneStruct is an object of undefined type which can be used in contexts\nwhere NULL (nil) is not suitable (since NULL often means 'error').\n*/\nPyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_None Py_GetConstantBorrowed(Py_CONSTANT_NONE)\n#else\n#  define Py_None (&_Py_NoneStruct)\n#endif\n\n// Test if an object is the None singleton, the same as \"x is None\" in Python.\nPyAPI_FUNC(int) Py_IsNone(PyObject *x);\n#define Py_IsNone(x) Py_Is((x), Py_None)\n\n/* Macro for returning Py_None from a function */\n#define Py_RETURN_NONE return Py_None\n\n/*\nPy_NotImplemented is a singleton used to signal that an operation is\nnot implemented for a given type combination.\n*/\nPyAPI_DATA(PyObject) _Py_NotImplementedStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_NotImplemented Py_GetConstantBorrowed(Py_CONSTANT_NOT_IMPLEMENTED)\n#else\n#  define Py_NotImplemented (&_Py_NotImplementedStruct)\n#endif\n\n/* Macro for returning Py_NotImplemented from a function */\n#define Py_RETURN_NOTIMPLEMENTED return Py_NotImplemented\n\n/* Rich comparison opcodes */\n#define Py_LT 0\n#define Py_LE 1\n#define Py_EQ 2\n#define Py_NE 3\n#define Py_GT 4\n#define Py_GE 5\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000\n/* Result of calling PyIter_Send */\ntypedef enum {\n    PYGEN_RETURN = 0,\n    PYGEN_ERROR = -1,\n    PYGEN_NEXT = 1,\n} PySendResult;\n#endif\n\n/*\n * Macro for implementing rich comparisons\n *\n * Needs to be a macro because any C-comparable type can be used.\n */\n#define Py_RETURN_RICHCOMPARE(val1, val2, op)                               \\\n    do {                                                                    \\\n        switch (op) {                                                       \\\n        case Py_EQ: if ((val1) == (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_NE: if ((val1) != (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_LT: if ((val1) < (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_GT: if ((val1) > (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_LE: if ((val1) <= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_GE: if ((val1) >= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        default:                                                            \\\n            Py_UNREACHABLE();                                               \\\n        }                                                                   \\\n    } while (0)\n\n\n/*\nMore conventions\n================\n\nArgument Checking\n-----------------\n\nFunctions that take objects as arguments normally don't check for nil\narguments, but they do check the type of the argument, and return an\nerror if the function doesn't apply to the type.\n\nFailure Modes\n-------------\n\nFunctions may fail for a variety of reasons, including running out of\nmemory.  This is communicated to the caller in two ways: an error string\nis set (see errors.h), and the function result differs: functions that\nnormally return a pointer return NULL for failure, functions returning\nan integer return -1 (which could be a legal return value too!), and\nother functions return 0 for success and -1 for failure.\nCallers should always check for errors before using the result.  If\nan error was set, the caller must either explicitly clear it, or pass\nthe error on to its caller.\n\nReference Counts\n----------------\n\nIt takes a while to get used to the proper usage of reference counts.\n\nFunctions that create an object set the reference count to 1; such new\nobjects must be stored somewhere or destroyed again with Py_DECREF().\nSome functions that 'store' objects, such as PyTuple_SetItem() and\nPyList_SetItem(),\ndon't increment the reference count of the object, since the most\nfrequent use is to store a fresh object.  Functions that 'retrieve'\nobjects, such as PyTuple_GetItem() and PyDict_GetItemString(), also\ndon't increment\nthe reference count, since most frequently the object is only looked at\nquickly.  Thus, to retrieve an object and store it again, the caller\nmust call Py_INCREF() explicitly.\n\nNOTE: functions that 'consume' a reference count, like\nPyList_SetItem(), consume the reference even if the object wasn't\nsuccessfully stored, to simplify error handling.\n\nIt seems attractive to make other functions that take an object as\nargument consume a reference count; however, this may quickly get\nconfusing (even the current practice is already confusing).  Consider\nit carefully, it may save lots of calls to Py_INCREF() and Py_DECREF() at\ntimes.\n*/\n\n#ifndef Py_LIMITED_API\n#  define Py_CPYTHON_OBJECT_H\n#  include \"cpython/object.h\"\n#  undef Py_CPYTHON_OBJECT_H\n#endif\n\n\nstatic inline int\nPyType_HasFeature(PyTypeObject *type, unsigned long feature)\n{\n    unsigned long flags;\n#ifdef Py_LIMITED_API\n    // PyTypeObject is opaque in the limited C API\n    flags = PyType_GetFlags(type);\n#else\n#   ifdef Py_GIL_DISABLED\n        flags = _Py_atomic_load_ulong_relaxed(&type->tp_flags);\n#   else\n        flags = type->tp_flags;\n#   endif\n#endif\n    return ((flags & feature) != 0);\n}\n\n#define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))\n\nstatic inline int PyType_Check(PyObject *op) {\n    return PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))\n#endif\n\n#define _PyType_CAST(op) \\\n    (assert(PyType_Check(op)), _Py_CAST(PyTypeObject*, (op)))\n\nstatic inline int PyType_CheckExact(PyObject *op) {\n    return Py_IS_TYPE(op, &PyType_Type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_CheckExact(op) PyType_CheckExact(_PyObject_CAST(op))\n#endif\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject *) PyType_GetModuleByDef(PyTypeObject *, PyModuleDef *);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n#endif   // !Py_OBJECT_H\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "./Include/internal/pycore_pyerrors.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_INTERNAL_PYERRORS_H\n#define Py_INTERNAL_PYERRORS_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef Py_BUILD_CORE\n#  error \"this header requires Py_BUILD_CORE define\"\n#endif\n\n\n/* Error handling definitions */\n\nextern _PyErr_StackItem* _PyErr_GetTopmostException(PyThreadState *tstate);\nextern PyObject* _PyErr_GetHandledException(PyThreadState *);\nextern void _PyErr_SetHandledException(PyThreadState *, PyObject *);\nextern void _PyErr_GetExcInfo(PyThreadState *, PyObject **, PyObject **, PyObject **);\n\n// Export for '_testinternalcapi' shared extension\nPyAPI_FUNC(void) _PyErr_SetKeyError(PyObject *);\n\n\n// Like PyErr_Format(), but saves current exception as __context__ and\n// __cause__.\n// Export for '_sqlite3' shared extension.\nPyAPI_FUNC(PyObject*) _PyErr_FormatFromCause(\n    PyObject *exception,\n    const char *format,   /* ASCII-encoded string  */\n    ...\n    );\n\nextern int _PyException_AddNote(\n     PyObject *exc,\n     PyObject *note);\n\nextern int _PyErr_CheckSignals(void);\n\n/* Support for adding program text to SyntaxErrors */\n\n// Export for test_peg_generator\nPyAPI_FUNC(PyObject*) _PyErr_ProgramDecodedTextObject(\n    PyObject *filename,\n    int lineno,\n    const char* encoding);\n\nextern PyObject* _PyUnicodeTranslateError_Create(\n    PyObject *object,\n    Py_ssize_t start,\n    Py_ssize_t end,\n    const char *reason          /* UTF-8 encoded string */\n    );\n\nextern void _Py_NO_RETURN _Py_FatalErrorFormat(\n    const char *func,\n    const char *format,\n    ...);\n\nextern PyObject* _PyErr_SetImportErrorWithNameFrom(\n        PyObject *,\n        PyObject *,\n        PyObject *,\n        PyObject *);\n\n\n/* runtime lifecycle */\n\nextern PyStatus _PyErr_InitTypes(PyInterpreterState *);\nextern void _PyErr_FiniTypes(PyInterpreterState *);\n\n\n/* other API */\n\nstatic inline PyObject* _PyErr_Occurred(PyThreadState *tstate)\n{\n    assert(tstate != NULL);\n    if (tstate->current_exception == NULL) {\n        return NULL;\n    }\n    return (PyObject *)Py_TYPE(tstate->current_exception);\n}\n\nstatic inline void _PyErr_ClearExcState(_PyErr_StackItem *exc_state)\n{\n    Py_CLEAR(exc_state->exc_value);\n}\n\nextern PyObject* _PyErr_StackItemToExcInfoTuple(\n    _PyErr_StackItem *err_info);\n\nextern void _PyErr_Fetch(\n    PyThreadState *tstate,\n    PyObject **type,\n    PyObject **value,\n    PyObject **traceback);\n\nextern PyObject* _PyErr_GetRaisedException(PyThreadState *tstate);\n\nPyAPI_FUNC(int) _PyErr_ExceptionMatches(\n    PyThreadState *tstate,\n    PyObject *exc);\n\nextern void _PyErr_SetRaisedException(PyThreadState *tstate, PyObject *exc);\n\nextern void _PyErr_Restore(\n    PyThreadState *tstate,\n    PyObject *type,\n    PyObject *value,\n    PyObject *traceback);\n\nextern void _PyErr_SetObject(\n    PyThreadState *tstate,\n    PyObject *type,\n    PyObject *value);\n\nextern void _PyErr_ChainStackItem(void);\n\nPyAPI_FUNC(void) _PyErr_Clear(PyThreadState *tstate);\n\nextern void _PyErr_SetNone(PyThreadState *tstate, PyObject *exception);\n\nextern PyObject* _PyErr_NoMemory(PyThreadState *tstate);\n\nPyAPI_FUNC(void) _PyErr_SetString(\n    PyThreadState *tstate,\n    PyObject *exception,\n    const char *string);\n\nPyAPI_FUNC(PyObject*) _PyErr_Format(\n    PyThreadState *tstate,\n    PyObject *exception,\n    const char *format,\n    ...);\n\nextern void _PyErr_NormalizeException(\n    PyThreadState *tstate,\n    PyObject **exc,\n    PyObject **val,\n    PyObject **tb);\n\nextern PyObject* _PyErr_FormatFromCauseTstate(\n    PyThreadState *tstate,\n    PyObject *exception,\n    const char *format,\n    ...);\n\nextern PyObject* _PyExc_CreateExceptionGroup(\n    const char *msg,\n    PyObject *excs);\n\nextern PyObject* _PyExc_PrepReraiseStar(\n    PyObject *orig,\n    PyObject *excs);\n\nextern int _PyErr_CheckSignalsTstate(PyThreadState *tstate);\n\nextern void _Py_DumpExtensionModules(int fd, PyInterpreterState *interp);\nextern PyObject* _Py_CalculateSuggestions(PyObject *dir, PyObject *name);\nextern PyObject* _Py_Offer_Suggestions(PyObject* exception);\n\n// Export for '_testinternalcapi' shared extension\nPyAPI_FUNC(Py_ssize_t) _Py_UTF8_Edit_Cost(PyObject *str_a, PyObject *str_b,\n                                          Py_ssize_t max_cost);\n\nvoid _PyErr_FormatNote(const char *format, ...);\n\n/* Context manipulation (PEP 3134) */\n\nPy_DEPRECATED(3.12) extern void _PyErr_ChainExceptions(PyObject *, PyObject *, PyObject *);\n\n// implementation detail for the codeop module.\n// Exported for test.test_peg_generator.test_c_parser\nPyAPI_DATA(PyTypeObject) _PyExc_IncompleteInputError;\n#define PyExc_IncompleteInputError ((PyObject *)(&_PyExc_IncompleteInputError))\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_INTERNAL_PYERRORS_H */\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 4944,
                                       "gcc/analyzer/saved_diagnostic/snode": 1342,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct extensions_cache_value *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 2},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'cached'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 993,
                                                                       "startColumn": 12,
                                                                       "endColumn": 27},
                                                            "contextRegion": {"startLine": 993,
                                                                              "snippet": {"text": "    return cached->m_index;\n"}}},
                                       "logicalLocations": [{"name": "finish_singlephase_extension",
                                                             "fullyQualifiedName": "finish_singlephase_extension",
                                                             "decoratedName": "finish_singlephase_extension",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4638,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 25},
                                                                                                         "contextRegion": {"startLine": 4638,
                                                                                                                           "snippet": {"text": "_imp_create_dynamic_impl(PyObject *module, PyObject *spec, PyObject *file)\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_imp_create_dynamic_impl'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 48,
                                                                                                                                 "dst_idx": 49,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4645,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4645,
                                                                                                                           "snippet": {"text": "    if (_Py_ext_module_loader_info_init_from_spec(&info, spec) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 48,
                                                                                                                                 "dst_idx": 49,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4649,
                                                                                                                    "startColumn": 36,
                                                                                                                    "endColumn": 42},
                                                                                                         "contextRegion": {"startLine": 4649,
                                                                                                                           "snippet": {"text": "    struct extensions_cache_value *cached = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4649,
                                                                                                                    "startColumn": 36,
                                                                                                                    "endColumn": 42},
                                                                                                         "contextRegion": {"startLine": 4649,
                                                                                                                           "snippet": {"text": "    struct extensions_cache_value *cached = NULL;\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'cached' is NULL"}},
                                                                       "kinds": ["release",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 49,
                                                                                                                                 "dst_idx": 1277,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4650,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endColumn": 56},
                                                                                                         "contextRegion": {"startLine": 4650,
                                                                                                                           "snippet": {"text": "    mod = import_find_extension(tstate, &info, &cached);\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'import_find_extension' from '_imp_create_dynamic_impl'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1870,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 1870,
                                                                                                                           "snippet": {"text": "import_find_extension(PyThreadState *tstate,\n"}}},
                                                                                    "logicalLocations": [{"name": "import_find_extension",
                                                                                                          "fullyQualifiedName": "import_find_extension",
                                                                                                          "decoratedName": "import_find_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'import_find_extension'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1278,
                                                                                                                                 "dst_idx": 1461,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1876,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 60},
                                                                                                         "contextRegion": {"startLine": 1876,
                                                                                                                           "snippet": {"text": "            = _extensions_cache_get(info->path, info->name);\n"}}},
                                                                                    "logicalLocations": [{"name": "import_find_extension",
                                                                                                          "fullyQualifiedName": "import_find_extension",
                                                                                                          "decoratedName": "import_find_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_extensions_cache_get' from 'import_find_extension'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1270,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 1270,
                                                                                                                           "snippet": {"text": "_extensions_cache_get(PyObject *path, PyObject *name)\n"}}},
                                                                                    "logicalLocations": [{"name": "_extensions_cache_get",
                                                                                                          "fullyQualifiedName": "_extensions_cache_get",
                                                                                                          "decoratedName": "_extensions_cache_get",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_extensions_cache_get'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1466,
                                                                                                                                 "dst_idx": 1467,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1277,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1277,
                                                                                                                           "snippet": {"text": "    if (entry == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_extensions_cache_get",
                                                                                                          "fullyQualifiedName": "_extensions_cache_get",
                                                                                                          "decoratedName": "_extensions_cache_get",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'entry' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1466,
                                                                                                                                 "dst_idx": 1467,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1279,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 1279,
                                                                                                                           "snippet": {"text": "        goto finally;\n"}}},
                                                                                    "logicalLocations": [{"name": "_extensions_cache_get",
                                                                                                          "fullyQualifiedName": "_extensions_cache_get",
                                                                                                          "decoratedName": "_extensions_cache_get",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1473,
                                                                                                                                 "dst_idx": 1279,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1876,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 60},
                                                                                                         "contextRegion": {"startLine": 1876,
                                                                                                                           "snippet": {"text": "            = _extensions_cache_get(info->path, info->name);\n"}}},
                                                                                    "logicalLocations": [{"name": "import_find_extension",
                                                                                                          "fullyQualifiedName": "import_find_extension",
                                                                                                          "decoratedName": "import_find_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'import_find_extension' from '_extensions_cache_get'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1279,
                                                                                                                                 "dst_idx": 1280,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1877,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1877,
                                                                                                                           "snippet": {"text": "    if (cached == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_find_extension",
                                                                                                          "fullyQualifiedName": "import_find_extension",
                                                                                                          "decoratedName": "import_find_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'cached' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1279,
                                                                                                                                 "dst_idx": 1280,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "import_find_extension",
                                                                                                          "fullyQualifiedName": "import_find_extension",
                                                                                                          "decoratedName": "import_find_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1289,
                                                                                                                                 "dst_idx": 50,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4650,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endColumn": 56},
                                                                                                         "contextRegion": {"startLine": 4650,
                                                                                                                           "snippet": {"text": "    mod = import_find_extension(tstate, &info, &cached);\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to '_imp_create_dynamic_impl' from 'import_find_extension'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 50,
                                                                                                                                 "dst_idx": 52,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4651,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4651,
                                                                                                                           "snippet": {"text": "    if (mod != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4660,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 4660,
                                                                                                                           "snippet": {"text": "    else if (_PyErr_Occurred(tstate)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_PyErr_Occurred' from '_imp_create_dynamic_impl'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "_imp_create_dynamic_impl",
                                                                                                                                     "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                                                     "decoratedName": "_imp_create_dynamic_impl",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 50,
                                                                                                                                 "dst_idx": 52,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pyerrors.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 76,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 34},
                                                                                                         "contextRegion": {"startLine": 76,
                                                                                                                           "snippet": {"text": "    if (tstate->current_exception == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyErr_Occurred",
                                                                                                          "fullyQualifiedName": "_PyErr_Occurred",
                                                                                                          "decoratedName": "_PyErr_Occurred",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4668,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 4668,
                                                                                                                           "snippet": {"text": "    if (cached != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'cached' is NULL"}},
                                                                       "kinds": ["release",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 56,
                                                                                                                                 "dst_idx": 59,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4668,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4668,
                                                                                                                           "snippet": {"text": "    if (cached != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 56,
                                                                                                                                 "dst_idx": 59,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4674,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 4675,
                                                                                                                    "endColumn": 47},
                                                                                                         "contextRegion": {"startLine": 4674,
                                                                                                                           "endLine": 4675,
                                                                                                                           "snippet": {"text": "    if (PySys_Audit(\"import\", \"OOOOO\", info.name, info.filename,\n                    Py_None, Py_None, Py_None) < 0)\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 59,
                                                                                                                                 "dst_idx": 61,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4674,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4674,
                                                                                                                           "snippet": {"text": "    if (PySys_Audit(\"import\", \"OOOOO\", info.name, info.filename,\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 59,
                                                                                                                                 "dst_idx": 61,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4684,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4684,
                                                                                                                           "snippet": {"text": "    if (file != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 61,
                                                                                                                                 "dst_idx": 62,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4684,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4684,
                                                                                                                           "snippet": {"text": "    if (file != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'file' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 61,
                                                                                                                                 "dst_idx": 62,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4685,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 47},
                                                                                                         "contextRegion": {"startLine": 4685,
                                                                                                                           "snippet": {"text": "        fp = _Py_fopen_obj(info.filename, \"r\");\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 62,
                                                                                                                                 "dst_idx": 64,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4686,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 4686,
                                                                                                                           "snippet": {"text": "        if (fp == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'fp' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 62,
                                                                                                                                 "dst_idx": 64,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4694,
                                                                                                                    "startColumn": 28,
                                                                                                                    "endColumn": 63},
                                                                                                         "contextRegion": {"startLine": 4694,
                                                                                                                           "snippet": {"text": "    PyModInitFunction p0 = _PyImport_GetModInitFunc(&info, fp);\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 64,
                                                                                                                                 "dst_idx": 66,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4695,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 4695,
                                                                                                                           "snippet": {"text": "    if (p0 == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'p0' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 64,
                                                                                                                                 "dst_idx": 66,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4707,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endLine": 4708,
                                                                                                                    "endColumn": 77},
                                                                                                         "contextRegion": {"startLine": 4707,
                                                                                                                           "endLine": 4708,
                                                                                                                           "snippet": {"text": "    mod = import_run_extension(\n                    tstate, p0, &info, spec, get_modules_dict(tstate, true));\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 66,
                                                                                                                                 "dst_idx": 1778,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4707,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endLine": 4708,
                                                                                                                    "endColumn": 77},
                                                                                                         "contextRegion": {"startLine": 4707,
                                                                                                                           "endLine": 4708,
                                                                                                                           "snippet": {"text": "    mod = import_run_extension(\n                    tstate, p0, &info, spec, get_modules_dict(tstate, true));\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'get_modules_dict' from '_imp_create_dynamic_impl'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 152,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 17},
                                                                                                         "contextRegion": {"startLine": 152,
                                                                                                                           "snippet": {"text": "get_modules_dict(PyThreadState *tstate, bool fatal)\n"}}},
                                                                                    "logicalLocations": [{"name": "get_modules_dict",
                                                                                                          "fullyQualifiedName": "get_modules_dict",
                                                                                                          "decoratedName": "get_modules_dict",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'get_modules_dict'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1779,
                                                                                                                                 "dst_idx": 1782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 160,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 160,
                                                                                                                           "snippet": {"text": "    if (modules == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "get_modules_dict",
                                                                                                          "fullyQualifiedName": "get_modules_dict",
                                                                                                          "decoratedName": "get_modules_dict",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'modules' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1779,
                                                                                                                                 "dst_idx": 1782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "get_modules_dict",
                                                                                                          "fullyQualifiedName": "get_modules_dict",
                                                                                                          "decoratedName": "get_modules_dict",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1783,
                                                                                                                                 "dst_idx": 67,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4707,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endLine": 4708,
                                                                                                                    "endColumn": 77},
                                                                                                         "contextRegion": {"startLine": 4707,
                                                                                                                           "endLine": 4708,
                                                                                                                           "snippet": {"text": "    mod = import_run_extension(\n                    tstate, p0, &info, spec, get_modules_dict(tstate, true));\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to '_imp_create_dynamic_impl' from 'get_modules_dict'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 67,
                                                                                                                                 "dst_idx": 1226,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4707,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endLine": 4708,
                                                                                                                    "endColumn": 77},
                                                                                                         "contextRegion": {"startLine": 4707,
                                                                                                                           "endLine": 4708,
                                                                                                                           "snippet": {"text": "    mod = import_run_extension(\n                    tstate, p0, &info, spec, get_modules_dict(tstate, true));\n"}}},
                                                                                    "logicalLocations": [{"name": "_imp_create_dynamic_impl",
                                                                                                          "fullyQualifiedName": "_imp_create_dynamic_impl",
                                                                                                          "decoratedName": "_imp_create_dynamic_impl",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'import_run_extension' from '_imp_create_dynamic_impl'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1908,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 1908,
                                                                                                                           "snippet": {"text": "import_run_extension(PyThreadState *tstate, PyModInitFunction p0,\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'import_run_extension'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1228,
                                                                                                                                 "dst_idx": 1230,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1969,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1969,
                                                                                                                           "snippet": {"text": "    if (main_tstate == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'main_tstate' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1228,
                                                                                                                                 "dst_idx": 1230,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1972,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 1972,
                                                                                                                           "snippet": {"text": "    else if (main_tstate != tstate) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1232,
                                                                                                                                 "dst_idx": 1233,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1981,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1981,
                                                                                                                           "snippet": {"text": "    if (rc < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'rc >= 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 38},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(39)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1232,
                                                                                                                                 "dst_idx": 1233,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1989,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 25},
                                                                                                         "contextRegion": {"startLine": 1989,
                                                                                                                           "snippet": {"text": "        mod = res.module;\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 39},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(40)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1233,
                                                                                                                                 "dst_idx": 1251,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1996,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 1996,
                                                                                                                           "snippet": {"text": "        if (res.kind == _Py_ext_module_kind_SINGLEPHASE) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 40},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(41)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1233,
                                                                                                                                 "dst_idx": 1251,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2055,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 2055,
                                                                                                                           "snippet": {"text": "main_finally:\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 41},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(42)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1251,
                                                                                                                                 "dst_idx": 1254,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2057,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2057,
                                                                                                                           "snippet": {"text": "    if (switched) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'switched == 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 42},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(43)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1251,
                                                                                                                                 "dst_idx": 1254,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2070,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2070,
                                                                                                                           "snippet": {"text": "    if (rc < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 43},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(44)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1254,
                                                                                                                                 "dst_idx": 1257,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2070,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2070,
                                                                                                                           "snippet": {"text": "    if (rc < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'rc >= 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 44},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(45)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1254,
                                                                                                                                 "dst_idx": 1257,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2075,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 17},
                                                                                                         "contextRegion": {"startLine": 2075,
                                                                                                                           "snippet": {"text": "    if (res.kind == _Py_ext_module_kind_MULTIPHASE) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 45},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(46)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1257,
                                                                                                                                 "dst_idx": 1260,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2075,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2075,
                                                                                                                           "snippet": {"text": "    if (res.kind == _Py_ext_module_kind_MULTIPHASE) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 46},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(47)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1257,
                                                                                                                                 "dst_idx": 1260,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2089,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 75},
                                                                                                         "contextRegion": {"startLine": 2089,
                                                                                                                           "snippet": {"text": "        if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 47},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(48)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1260,
                                                                                                                                 "dst_idx": 1388,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2089,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 75},
                                                                                                         "contextRegion": {"startLine": 2089,
                                                                                                                           "snippet": {"text": "        if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_PyImport_CheckSubinterpIncompatibleExtensionAllowed' from 'import_run_extension'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 48},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(49)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1461,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 53},
                                                                                                         "contextRegion": {"startLine": 1461,
                                                                                                                           "snippet": {"text": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed(const char *name)\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "fullyQualifiedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "decoratedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyImport_CheckSubinterpIncompatibleExtensionAllowed'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 49},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(50)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1389,
                                                                                                                                 "dst_idx": 1395,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1464,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 46},
                                                                                                         "contextRegion": {"startLine": 1464,
                                                                                                                           "snippet": {"text": "    if (check_multi_interp_extensions(interp)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "fullyQualifiedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "decoratedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'check_multi_interp_extensions' from '_PyImport_CheckSubinterpIncompatibleExtensionAllowed'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 50},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(51)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1444,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 1444,
                                                                                                                           "snippet": {"text": "check_multi_interp_extensions(PyInterpreterState *interp)\n"}}},
                                                                                    "logicalLocations": [{"name": "check_multi_interp_extensions",
                                                                                                          "fullyQualifiedName": "check_multi_interp_extensions",
                                                                                                          "decoratedName": "check_multi_interp_extensions",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'check_multi_interp_extensions'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 51},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(52)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1396,
                                                                                                                                 "dst_idx": 1397,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1447,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1447,
                                                                                                                           "snippet": {"text": "    if (override < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "check_multi_interp_extensions",
                                                                                                          "fullyQualifiedName": "check_multi_interp_extensions",
                                                                                                          "decoratedName": "check_multi_interp_extensions",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'override < 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 52},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(53)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1396,
                                                                                                                                 "dst_idx": 1397,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "check_multi_interp_extensions",
                                                                                                          "fullyQualifiedName": "check_multi_interp_extensions",
                                                                                                          "decoratedName": "check_multi_interp_extensions",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 53},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(54)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1402,
                                                                                                                                 "dst_idx": 1390,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1464,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 46},
                                                                                                         "contextRegion": {"startLine": 1464,
                                                                                                                           "snippet": {"text": "    if (check_multi_interp_extensions(interp)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "fullyQualifiedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "decoratedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to '_PyImport_CheckSubinterpIncompatibleExtensionAllowed' from 'check_multi_interp_extensions'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 54},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(55)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1390,
                                                                                                                                 "dst_idx": 1393,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1464,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1464,
                                                                                                                           "snippet": {"text": "    if (check_multi_interp_extensions(interp)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "fullyQualifiedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "decoratedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 55},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(56)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1390,
                                                                                                                                 "dst_idx": 1393,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "fullyQualifiedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "decoratedName": "_PyImport_CheckSubinterpIncompatibleExtensionAllowed",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 56},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(57)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1394,
                                                                                                                                 "dst_idx": 1261,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2089,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 75},
                                                                                                         "contextRegion": {"startLine": 2089,
                                                                                                                           "snippet": {"text": "        if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'import_run_extension' from '_PyImport_CheckSubinterpIncompatibleExtensionAllowed'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 57},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(58)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1261,
                                                                                                                                 "dst_idx": 1263,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2089,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 2089,
                                                                                                                           "snippet": {"text": "        if (_PyImport_CheckSubinterpIncompatibleExtensionAllowed(name_buf) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 58},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(59)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1261,
                                                                                                                                 "dst_idx": 1263,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2094,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 2094,
                                                                                                                           "snippet": {"text": "        if (switched) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 59},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(60)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1263,
                                                                                                                                 "dst_idx": 1267,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2094,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 2094,
                                                                                                                           "snippet": {"text": "        if (switched) {\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'switched == 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 60},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(61)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1263,
                                                                                                                                 "dst_idx": 1267,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2111,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 63},
                                                                                                         "contextRegion": {"startLine": 2111,
                                                                                                                           "snippet": {"text": "            PyObject *modules = get_modules_dict(tstate, true);\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 61},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(62)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1267,
                                                                                                                                 "dst_idx": 1778,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2111,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 63},
                                                                                                         "contextRegion": {"startLine": 2111,
                                                                                                                           "snippet": {"text": "            PyObject *modules = get_modules_dict(tstate, true);\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'get_modules_dict' from 'import_run_extension'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 62},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(63)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 152,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 17},
                                                                                                         "contextRegion": {"startLine": 152,
                                                                                                                           "snippet": {"text": "get_modules_dict(PyThreadState *tstate, bool fatal)\n"}}},
                                                                                    "logicalLocations": [{"name": "get_modules_dict",
                                                                                                          "fullyQualifiedName": "get_modules_dict",
                                                                                                          "decoratedName": "get_modules_dict",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'get_modules_dict'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 63},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(64)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1779,
                                                                                                                                 "dst_idx": 1782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 160,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 160,
                                                                                                                           "snippet": {"text": "    if (modules == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "get_modules_dict",
                                                                                                          "fullyQualifiedName": "get_modules_dict",
                                                                                                          "decoratedName": "get_modules_dict",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'modules' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 64},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(65)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1779,
                                                                                                                                 "dst_idx": 1782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "get_modules_dict",
                                                                                                          "fullyQualifiedName": "get_modules_dict",
                                                                                                          "decoratedName": "get_modules_dict",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 65},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(66)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1783,
                                                                                                                                 "dst_idx": 1268,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2111,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 63},
                                                                                                         "contextRegion": {"startLine": 2111,
                                                                                                                           "snippet": {"text": "            PyObject *modules = get_modules_dict(tstate, true);\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'import_run_extension' from 'get_modules_dict'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 66},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(67)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1268,
                                                                                                                                 "dst_idx": 1341,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2112,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endLine": 2113,
                                                                                                                    "endColumn": 62},
                                                                                                         "contextRegion": {"startLine": 2112,
                                                                                                                           "endLine": 2113,
                                                                                                                           "snippet": {"text": "            if (finish_singlephase_extension(\n                    tstate, mod, cached, info->name, modules) < 0)\n"}}},
                                                                                    "logicalLocations": [{"name": "import_run_extension",
                                                                                                          "fullyQualifiedName": "import_run_extension",
                                                                                                          "decoratedName": "import_run_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'finish_singlephase_extension' from 'import_run_extension'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 67},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(68)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1736,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 1736,
                                                                                                                           "snippet": {"text": "finish_singlephase_extension(PyThreadState *tstate, PyObject *mod,\n"}}},
                                                                                    "logicalLocations": [{"name": "finish_singlephase_extension",
                                                                                                          "fullyQualifiedName": "finish_singlephase_extension",
                                                                                                          "decoratedName": "finish_singlephase_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'finish_singlephase_extension'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 68},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(69)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1743,
                                                                                                                    "startColumn": 24,
                                                                                                                    "endColumn": 25},
                                                                                                         "contextRegion": {"startLine": 1743,
                                                                                                                           "snippet": {"text": "    Py_ssize_t index = _get_cached_module_index(cached);\n"}}},
                                                                                    "logicalLocations": [{"name": "finish_singlephase_extension",
                                                                                                          "fullyQualifiedName": "finish_singlephase_extension",
                                                                                                          "decoratedName": "finish_singlephase_extension",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_get_cached_module_index' from 'finish_singlephase_extension'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 69},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(70)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "finish_singlephase_extension",
                                                                                                                                     "fullyQualifiedName": "finish_singlephase_extension",
                                                                                                                                     "decoratedName": "finish_singlephase_extension",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 3},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 993,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 993,
                                                                                                                           "snippet": {"text": "    return cached->m_index;\n"}}},
                                                                                    "logicalLocations": [{"name": "_get_cached_module_index",
                                                                                                          "fullyQualifiedName": "_get_cached_module_index",
                                                                                                          "decoratedName": "_get_cached_module_index",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'cached'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 70}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 24330,
                                       "gcc/analyzer/saved_diagnostic/snode": 560,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct PyObject * *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 19},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'outer_link'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 3459,
                                                                       "startColumn": 13,
                                                                       "endColumn": 14},
                                                            "contextRegion": {"startLine": 3459,
                                                                              "snippet": {"text": "            Py_XSETREF(*outer_link, Py_XNewRef(next));\n"}}},
                                       "logicalLocations": [{"name": "remove_importlib_frames",
                                                             "fullyQualifiedName": "remove_importlib_frames",
                                                             "decoratedName": "remove_importlib_frames",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4171,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 4171,
                                                                                                                           "snippet": {"text": "_PyImport_GetModuleAttr(PyObject *modname, PyObject *attrname)\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyImport_GetModuleAttr",
                                                                                                          "fullyQualifiedName": "_PyImport_GetModuleAttr",
                                                                                                          "decoratedName": "_PyImport_GetModuleAttr",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyImport_GetModuleAttr'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 211,
                                                                                                                                 "dst_idx": 310,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 4173,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 4173,
                                                                                                                           "snippet": {"text": "    PyObject *mod = PyImport_Import(modname);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyImport_GetModuleAttr",
                                                                                                          "fullyQualifiedName": "_PyImport_GetModuleAttr",
                                                                                                          "decoratedName": "_PyImport_GetModuleAttr",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'PyImport_Import' from '_PyImport_GetModuleAttr'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3894,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 3894,
                                                                                                                           "snippet": {"text": "PyImport_Import(PyObject *module_name)\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_Import",
                                                                                                          "fullyQualifiedName": "PyImport_Import",
                                                                                                          "decoratedName": "PyImport_Import",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'PyImport_Import'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 311,
                                                                                                                                 "dst_idx": 314,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3903,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3903,
                                                                                                                           "snippet": {"text": "    if (from_list == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_Import",
                                                                                                          "fullyQualifiedName": "PyImport_Import",
                                                                                                          "decoratedName": "PyImport_Import",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'from_list' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 311,
                                                                                                                                 "dst_idx": 314,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3908,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 34},
                                                                                                         "contextRegion": {"startLine": 3908,
                                                                                                                           "snippet": {"text": "    globals = PyEval_GetGlobals();\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_Import",
                                                                                                          "fullyQualifiedName": "PyImport_Import",
                                                                                                          "decoratedName": "PyImport_Import",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 314,
                                                                                                                                 "dst_idx": 319,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3909,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3909,
                                                                                                                           "snippet": {"text": "    if (globals != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_Import",
                                                                                                          "fullyQualifiedName": "PyImport_Import",
                                                                                                          "decoratedName": "PyImport_Import",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'globals' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 314,
                                                                                                                                 "dst_idx": 319,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3917,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endLine": 3918,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 3917,
                                                                                                                           "endLine": 3918,
                                                                                                                           "snippet": {"text": "        builtins = PyImport_ImportModuleLevel(\"builtins\",\n                                              NULL, NULL, NULL, 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_Import",
                                                                                                          "fullyQualifiedName": "PyImport_Import",
                                                                                                          "decoratedName": "PyImport_Import",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 319,
                                                                                                                                 "dst_idx": 360,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3917,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endLine": 3918,
                                                                                                                    "endColumn": 67},
                                                                                                         "contextRegion": {"startLine": 3917,
                                                                                                                           "endLine": 3918,
                                                                                                                           "snippet": {"text": "        builtins = PyImport_ImportModuleLevel(\"builtins\",\n                                              NULL, NULL, NULL, 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_Import",
                                                                                                          "fullyQualifiedName": "PyImport_Import",
                                                                                                          "decoratedName": "PyImport_Import",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'PyImport_ImportModuleLevel' from 'PyImport_Import'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3845,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 3845,
                                                                                                                           "snippet": {"text": "PyImport_ImportModuleLevel(const char *name, PyObject *globals, PyObject *locals,\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevel",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevel",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevel",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'PyImport_ImportModuleLevel'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 361,
                                                                                                                                 "dst_idx": 362,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3850,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3850,
                                                                                                                           "snippet": {"text": "    if (nameobj == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevel",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevel",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevel",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'nameobj' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 361,
                                                                                                                                 "dst_idx": 362,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3852,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endLine": 3853,
                                                                                                                    "endColumn": 60},
                                                                                                         "contextRegion": {"startLine": 3852,
                                                                                                                           "endLine": 3853,
                                                                                                                           "snippet": {"text": "    mod = PyImport_ImportModuleLevelObject(nameobj, globals, locals,\n                                           fromlist, level);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevel",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevel",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevel",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 362,
                                                                                                                                 "dst_idx": 369,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3852,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endLine": 3853,
                                                                                                                    "endColumn": 60},
                                                                                                         "contextRegion": {"startLine": 3852,
                                                                                                                           "endLine": 3853,
                                                                                                                           "snippet": {"text": "    mod = PyImport_ImportModuleLevelObject(nameobj, globals, locals,\n                                           fromlist, level);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevel",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevel",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevel",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'PyImport_ImportModuleLevelObject' from 'PyImport_ImportModuleLevel'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3702,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 33},
                                                                                                         "contextRegion": {"startLine": 3702,
                                                                                                                           "snippet": {"text": "PyImport_ImportModuleLevelObject(PyObject *name, PyObject *globals,\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 370,
                                                                                                                                 "dst_idx": 373,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3714,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3714,
                                                                                                                           "snippet": {"text": "    if (name == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'name' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3722,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 11},
                                                                                                         "contextRegion": {"startLine": 3722,
                                                                                                                           "snippet": {"text": "    if (!PyUnicode_Check(name)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_TYPE' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 4,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 370,
                                                                                                                                 "dst_idx": 373,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 330,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 330,
                                                                                                                           "snippet": {"text": "    return ob->ob_type;\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_TYPE",
                                                                                                          "fullyQualifiedName": "Py_TYPE",
                                                                                                          "decoratedName": "Py_TYPE",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 373,
                                                                                                                                 "dst_idx": 375,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3722,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3722,
                                                                                                                           "snippet": {"text": "    if (!PyUnicode_Check(name)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 373,
                                                                                                                                 "dst_idx": 375,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3727,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3727,
                                                                                                                           "snippet": {"text": "    if (level < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 375,
                                                                                                                                 "dst_idx": 377,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3727,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3727,
                                                                                                                           "snippet": {"text": "    if (level < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'level >= 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 375,
                                                                                                                                 "dst_idx": 377,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3732,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3732,
                                                                                                                           "snippet": {"text": "    if (level > 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 377,
                                                                                                                                 "dst_idx": 381,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3732,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3732,
                                                                                                                           "snippet": {"text": "    if (level > 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'level == 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3738,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 3738,
                                                                                                                           "snippet": {"text": "        if (PyUnicode_GET_LENGTH(name) == 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'PyUnicode_GET_LENGTH' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 4,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 377,
                                                                                                                                 "dst_idx": 381,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/unicodeobject.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 280,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 43},
                                                                                                         "contextRegion": {"startLine": 280,
                                                                                                                           "snippet": {"text": "    return _PyASCIIObject_CAST(op)->length;\n"}}},
                                                                                    "logicalLocations": [{"name": "PyUnicode_GET_LENGTH",
                                                                                                          "fullyQualifiedName": "PyUnicode_GET_LENGTH",
                                                                                                          "decoratedName": "PyUnicode_GET_LENGTH",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 381,
                                                                                                                                 "dst_idx": 383,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3738,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 3738,
                                                                                                                           "snippet": {"text": "        if (PyUnicode_GET_LENGTH(name) == 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3742,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 3742,
                                                                                                                           "snippet": {"text": "        abs_name = Py_NewRef(name);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_Py_NewRef' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1052,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 1052,
                                                                                                                           "snippet": {"text": "    Py_INCREF(obj);\n"}}},
                                                                                    "logicalLocations": [{"name": "_Py_NewRef",
                                                                                                          "fullyQualifiedName": "_Py_NewRef",
                                                                                                          "decoratedName": "_Py_NewRef",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_INCREF' from '_Py_NewRef'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 4,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 381,
                                                                                                                                 "dst_idx": 383,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 818,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 818,
                                                                                                                           "snippet": {"text": "    PY_UINT32_T cur_refcnt = op->ob_refcnt_split[PY_BIG_ENDIAN];\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_INCREF",
                                                                                                          "fullyQualifiedName": "Py_INCREF",
                                                                                                          "decoratedName": "Py_INCREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 6,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 441,
                                                                                                                                 "dst_idx": 1959,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3835,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 3835,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(abs_name);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'Py_XDECREF' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1033,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 1033,
                                                                                                                           "snippet": {"text": "static inline void Py_XDECREF(PyObject *op)\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'Py_XDECREF'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1960,
                                                                                                                                 "dst_idx": 1961,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'op' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1036,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 1036,
                                                                                                                           "snippet": {"text": "        Py_DECREF(op);\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Py_DECREF' from 'Py_XDECREF'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 938,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 10},
                                                                                                         "contextRegion": {"startLine": 938,
                                                                                                                           "snippet": {"text": "    if (_Py_IsImmortal(op)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_DECREF",
                                                                                                          "fullyQualifiedName": "Py_DECREF",
                                                                                                          "decoratedName": "Py_DECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_Py_IsImmortal' from 'Py_DECREF'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 6,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "Py_XDECREF",
                                                                                                                                     "fullyQualifiedName": "Py_XDECREF",
                                                                                                                                     "decoratedName": "Py_XDECREF",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 5,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1960,
                                                                                                                                 "dst_idx": 1961,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 355,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 355,
                                                                                                                           "snippet": {"text": "    return (_Py_CAST(PY_INT32_T, op->ob_refcnt) < 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "_Py_IsImmortal",
                                                                                                          "fullyQualifiedName": "_Py_IsImmortal",
                                                                                                          "decoratedName": "_Py_IsImmortal",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 7,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1965,
                                                                                                                                 "dst_idx": 442,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3835,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 3835,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(abs_name);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'PyImport_ImportModuleLevelObject' from 'Py_XDECREF'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 442,
                                                                                                                                 "dst_idx": 1959,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3836,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 3836,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'Py_XDECREF' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1033,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 1033,
                                                                                                                           "snippet": {"text": "static inline void Py_XDECREF(PyObject *op)\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'Py_XDECREF'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1960,
                                                                                                                                 "dst_idx": 1964,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'op' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1960,
                                                                                                                                 "dst_idx": 1964,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1038,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 2},
                                                                                                         "contextRegion": {"startLine": 1038,
                                                                                                                           "snippet": {"text": "}\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 38},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(39)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1965,
                                                                                                                                 "dst_idx": 443,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3836,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 3836,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(mod);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'PyImport_ImportModuleLevelObject' from 'Py_XDECREF'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 39},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(40)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 443,
                                                                                                                                 "dst_idx": 1959,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3837,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 3837,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(package);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'Py_XDECREF' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 40},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(41)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1033,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 30},
                                                                                                         "contextRegion": {"startLine": 1033,
                                                                                                                           "snippet": {"text": "static inline void Py_XDECREF(PyObject *op)\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'Py_XDECREF'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 41},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(42)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1960,
                                                                                                                                 "dst_idx": 1964,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1035,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 1035,
                                                                                                                           "snippet": {"text": "    if (op != _Py_NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'op' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 42},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(43)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1960,
                                                                                                                                 "dst_idx": 1964,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1038,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 2},
                                                                                                         "contextRegion": {"startLine": 1038,
                                                                                                                           "snippet": {"text": "}\n"}}},
                                                                                    "logicalLocations": [{"name": "Py_XDECREF",
                                                                                                          "fullyQualifiedName": "Py_XDECREF",
                                                                                                          "decoratedName": "Py_XDECREF",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 43},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(44)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1965,
                                                                                                                                 "dst_idx": 444,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3837,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 3837,
                                                                                                                           "snippet": {"text": "    Py_XDECREF(package);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'PyImport_ImportModuleLevelObject' from 'Py_XDECREF'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 44},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(45)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 444,
                                                                                                                                 "dst_idx": 445,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3838,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3838,
                                                                                                                           "snippet": {"text": "    if (final_mod == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'final_mod' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 45},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(46)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 444,
                                                                                                                                 "dst_idx": 445,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3839,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 3839,
                                                                                                                           "snippet": {"text": "        remove_importlib_frames(tstate);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 46},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(47)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 445,
                                                                                                                                 "dst_idx": 546,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3839,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 3839,
                                                                                                                           "snippet": {"text": "        remove_importlib_frames(tstate);\n"}}},
                                                                                    "logicalLocations": [{"name": "PyImport_ImportModuleLevelObject",
                                                                                                          "fullyQualifiedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "decoratedName": "PyImport_ImportModuleLevelObject",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'remove_importlib_frames' from 'PyImport_ImportModuleLevelObject'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 47},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(48)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3413,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 3413,
                                                                                                                           "snippet": {"text": "remove_importlib_frames(PyThreadState *tstate)\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'remove_importlib_frames'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 48},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(49)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3428,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 3428,
                                                                                                                           "snippet": {"text": "    if (exc == NULL || _PyInterpreterState_GetConfig(tstate->interp)->verbose) {\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 49},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(50)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3432,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 75},
                                                                                                         "contextRegion": {"startLine": 3432,
                                                                                                                           "snippet": {"text": "    if (PyType_IsSubtype(Py_TYPE(exc), (PyTypeObject *) PyExc_ImportError)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 50},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(51)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 570,
                                                                                                                                 "dst_idx": 553,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3440,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 3440,
                                                                                                                           "snippet": {"text": "    while (tb != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'tb' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 51},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(52)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 570,
                                                                                                                                 "dst_idx": 553,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3443,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 3443,
                                                                                                                           "snippet": {"text": "        PyObject *next = (PyObject *) traceback->tb_next;\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 52},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(53)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 556,
                                                                                                                                 "dst_idx": 557,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3450,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 3450,
                                                                                                                           "snippet": {"text": "        if (now_in_importlib && !in_importlib) {\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 53},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(54)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 556,
                                                                                                                                 "dst_idx": 557,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3456,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 3456,
                                                                                                                           "snippet": {"text": "        if (in_importlib &&\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 54},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(55)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 570,
                                                                                                                                 "dst_idx": 553,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3440,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 3440,
                                                                                                                           "snippet": {"text": "    while (tb != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'tb' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 55},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(56)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 570,
                                                                                                                                 "dst_idx": 553,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3443,
                                                                                                                    "startColumn": 19,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 3443,
                                                                                                                           "snippet": {"text": "        PyObject *next = (PyObject *) traceback->tb_next;\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 56},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(57)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 556,
                                                                                                                                 "dst_idx": 557,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3450,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 3450,
                                                                                                                           "snippet": {"text": "        if (now_in_importlib && !in_importlib) {\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 57},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(58)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 556,
                                                                                                                                 "dst_idx": 557,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3456,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 3456,
                                                                                                                           "snippet": {"text": "        if (in_importlib &&\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 58},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(59)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/import.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 3459,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 3459,
                                                                                                                           "snippet": {"text": "            Py_XSETREF(*outer_link, Py_XNewRef(next));\n"}}},
                                                                                    "logicalLocations": [{"name": "remove_importlib_frames",
                                                                                                          "fullyQualifiedName": "remove_importlib_frames",
                                                                                                          "decoratedName": "remove_importlib_frames",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'outer_link'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 5,
                                                                       "executionOrder": 59}]}]}]}]}]}
