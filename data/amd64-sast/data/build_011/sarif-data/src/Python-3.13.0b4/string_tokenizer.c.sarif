{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "GNU C11", "fullName": "GNU C11 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)", "version": "13.2.0", "informationUri": "https://gcc.gnu.org/gcc-13/", "rules": [{"id": "-Wanalyzer-deref-before-check", "helpUri": "https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-deref-before-check"}]}}, "invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}}, "artifacts": [{"location": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "contents": {"text": "#include \"Python.h\"\n#include \"errcode.h\"\n\n#include \"helpers.h\"\n#include \"../lexer/state.h\"\n\nstatic int\ntok_underflow_string(struct tok_state *tok) {\n    char *end = strchr(tok->inp, '\\n');\n    if (end != NULL) {\n        end++;\n    }\n    else {\n        end = strchr(tok->inp, '\\0');\n        if (end == tok->inp) {\n            tok->done = E_EOF;\n            return 0;\n        }\n    }\n    if (tok->start == NULL) {\n        tok->buf = tok->cur;\n    }\n    tok->line_start = tok->cur;\n    ADVANCE_LINENO();\n    tok->inp = end;\n    return 1;\n}\n\n/* Fetch a byte from TOK, using the string buffer. */\nstatic int\nbuf_getc(struct tok_state *tok) {\n    return Py_CHARMASK(*tok->str++);\n}\n\n/* Unfetch a byte from TOK, using the string buffer. */\nstatic void\nbuf_ungetc(int c, struct tok_state *tok) {\n    tok->str--;\n    assert(Py_CHARMASK(*tok->str) == c);        /* tok->cur may point to read-only segment */\n}\n\n/* Set the readline function for TOK to ENC. For the string-based\n   tokenizer, this means to just record the encoding. */\nstatic int\nbuf_setreadl(struct tok_state *tok, const char* enc) {\n    tok->enc = enc;\n    return 1;\n}\n\n/* Decode a byte string STR for use as the buffer of TOK.\n   Look for encoding declarations inside STR, and record them\n   inside TOK.  */\nstatic char *\ndecode_str(const char *input, int single, struct tok_state *tok, int preserve_crlf)\n{\n    PyObject* utf8 = NULL;\n    char *str;\n    const char *s;\n    const char *newl[2] = {NULL, NULL};\n    int lineno = 0;\n    tok->input = str = _PyTokenizer_translate_newlines(input, single, preserve_crlf, tok);\n    if (str == NULL)\n        return NULL;\n    tok->enc = NULL;\n    tok->str = str;\n    if (!_PyTokenizer_check_bom(buf_getc, buf_ungetc, buf_setreadl, tok))\n        return _PyTokenizer_error_ret(tok);\n    str = tok->str;             /* string after BOM if any */\n    assert(str);\n    if (tok->enc != NULL) {\n        utf8 = _PyTokenizer_translate_into_utf8(str, tok->enc);\n        if (utf8 == NULL)\n            return _PyTokenizer_error_ret(tok);\n        str = PyBytes_AsString(utf8);\n    }\n    for (s = str;; s++) {\n        if (*s == '\\0') break;\n        else if (*s == '\\n') {\n            assert(lineno < 2);\n            newl[lineno] = s;\n            lineno++;\n            if (lineno == 2) break;\n        }\n    }\n    tok->enc = NULL;\n    /* need to check line 1 and 2 separately since check_coding_spec\n       assumes a single line as input */\n    if (newl[0]) {\n        if (!_PyTokenizer_check_coding_spec(str, newl[0] - str, tok, buf_setreadl)) {\n            return NULL;\n        }\n        if (tok->enc == NULL && tok->decoding_state != STATE_NORMAL && newl[1]) {\n            if (!_PyTokenizer_check_coding_spec(newl[0]+1, newl[1] - newl[0],\n                                   tok, buf_setreadl))\n                return NULL;\n        }\n    }\n    if (tok->enc != NULL) {\n        assert(utf8 == NULL);\n        utf8 = _PyTokenizer_translate_into_utf8(str, tok->enc);\n        if (utf8 == NULL)\n            return _PyTokenizer_error_ret(tok);\n        str = PyBytes_AS_STRING(utf8);\n    }\n    assert(tok->decoding_buffer == NULL);\n    tok->decoding_buffer = utf8; /* CAUTION */\n    return str;\n}\n\n/* Set up tokenizer for string */\nstruct tok_state *\n_PyTokenizer_FromString(const char *str, int exec_input, int preserve_crlf)\n{\n    struct tok_state *tok = _PyTokenizer_tok_new();\n    char *decoded;\n\n    if (tok == NULL)\n        return NULL;\n    decoded = decode_str(str, exec_input, tok, preserve_crlf);\n    if (decoded == NULL) {\n        _PyTokenizer_Free(tok);\n        return NULL;\n    }\n\n    tok->buf = tok->cur = tok->inp = decoded;\n    tok->end = decoded;\n    tok->underflow = &tok_underflow_string;\n    return tok;\n}\n"}, "sourceLanguage": "c"}], "results": [{"ruleId": "-Wanalyzer-deref-before-check", "level": "warning", "message": {"text": "check of 'str' for NULL after already dereferencing it"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 88, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 88, "snippet": {"text": "    if (newl[0]) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 62, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 62, "snippet": {"text": "    if (str == NULL)\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'str' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 64, "startColumn": 5, "endColumn": 8}, "contextRegion": {"startLine": 64, "snippet": {"text": "    tok->enc = NULL;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 66, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 66, "snippet": {"text": "    if (!_PyTokenizer_check_bom(buf_getc, buf_ungetc, buf_setreadl, tok))\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 68, "startColumn": 5, "endColumn": 8}, "contextRegion": {"startLine": 68, "snippet": {"text": "    str = tok->str;             /* string after BOM if any */\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 69, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 69, "snippet": {"text": "    assert(str);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'str' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 70, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 70, "snippet": {"text": "    if (tok->enc != NULL) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 70, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 70, "snippet": {"text": "    if (tok->enc != NULL) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 71, "startColumn": 9, "endColumn": 13}, "contextRegion": {"startLine": 71, "snippet": {"text": "        utf8 = _PyTokenizer_translate_into_utf8(str, tok->enc);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 72, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 72, "snippet": {"text": "        if (utf8 == NULL)\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'utf8' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 74, "startColumn": 9, "endColumn": 12}, "contextRegion": {"startLine": 74, "snippet": {"text": "        str = PyBytes_AsString(utf8);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 77, "startColumn": 13, "endColumn": 15}, "contextRegion": {"startLine": 77, "snippet": {"text": "        if (*s == '\\0') break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "pointer 'str' is dereferenced here"}}, "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 77, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 77, "snippet": {"text": "        if (*s == '\\0') break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 78, "startColumn": 14, "endColumn": 16}, "contextRegion": {"startLine": 78, "snippet": {"text": "        else if (*s == '\\n') {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 78, "startColumn": 17, "endColumn": 18}, "contextRegion": {"startLine": 78, "snippet": {"text": "        else if (*s == '\\n') {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 79, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 79, "snippet": {"text": "            assert(lineno < 2);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 79, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 79, "snippet": {"text": "            assert(lineno < 2);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'lineno <= 1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 80, "startColumn": 13, "endColumn": 17}, "contextRegion": {"startLine": 80, "snippet": {"text": "            newl[lineno] = s;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 82, "startColumn": 16, "endColumn": 17}, "contextRegion": {"startLine": 82, "snippet": {"text": "            if (lineno == 2) break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'lineno != 2')..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 76, "startColumn": 20, "endColumn": 23}, "contextRegion": {"startLine": 76, "snippet": {"text": "    for (s = str;; s++) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 77, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 77, "snippet": {"text": "        if (*s == '\\0') break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 85, "startColumn": 5, "endColumn": 8}, "contextRegion": {"startLine": 85, "snippet": {"text": "    tok->enc = NULL;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 88, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 88, "snippet": {"text": "    if (newl[0]) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "pointer 'str' is checked for NULL here but it was already dereferenced at (11)"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-deref-before-check", "level": "warning", "message": {"text": "check of 'str' for NULL after already dereferencing it"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 88, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 88, "snippet": {"text": "    if (newl[0]) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 112, "startColumn": 1, "endColumn": 24}, "contextRegion": {"startLine": 112, "snippet": {"text": "_PyTokenizer_FromString(const char *str, int exec_input, int preserve_crlf)\n"}}}, "logicalLocations": [{"name": "_PyTokenizer_FromString", "fullyQualifiedName": "_PyTokenizer_FromString", "decoratedName": "_PyTokenizer_FromString", "kind": "function"}], "message": {"text": "entry to '_PyTokenizer_FromString'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 117, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 117, "snippet": {"text": "    if (tok == NULL)\n"}}}, "logicalLocations": [{"name": "_PyTokenizer_FromString", "fullyQualifiedName": "_PyTokenizer_FromString", "decoratedName": "_PyTokenizer_FromString", "kind": "function"}], "message": {"text": "following 'false' branch (when 'tok' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 119, "startColumn": 5, "endColumn": 12}, "contextRegion": {"startLine": 119, "snippet": {"text": "    decoded = decode_str(str, exec_input, tok, preserve_crlf);\n"}}}, "logicalLocations": [{"name": "_PyTokenizer_FromString", "fullyQualifiedName": "_PyTokenizer_FromString", "decoratedName": "_PyTokenizer_FromString", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 119, "startColumn": 15, "endColumn": 62}, "contextRegion": {"startLine": 119, "snippet": {"text": "    decoded = decode_str(str, exec_input, tok, preserve_crlf);\n"}}}, "logicalLocations": [{"name": "_PyTokenizer_FromString", "fullyQualifiedName": "_PyTokenizer_FromString", "decoratedName": "_PyTokenizer_FromString", "kind": "function"}], "message": {"text": "calling 'decode_str' from '_PyTokenizer_FromString'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 54, "startColumn": 1, "endColumn": 11}, "contextRegion": {"startLine": 54, "snippet": {"text": "decode_str(const char *input, int single, struct tok_state *tok, int preserve_crlf)\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "entry to 'decode_str'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 62, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 62, "snippet": {"text": "    if (str == NULL)\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'str' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 64, "startColumn": 5, "endColumn": 8}, "contextRegion": {"startLine": 64, "snippet": {"text": "    tok->enc = NULL;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 66, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 66, "snippet": {"text": "    if (!_PyTokenizer_check_bom(buf_getc, buf_ungetc, buf_setreadl, tok))\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 68, "startColumn": 5, "endColumn": 8}, "contextRegion": {"startLine": 68, "snippet": {"text": "    str = tok->str;             /* string after BOM if any */\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 69, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 69, "snippet": {"text": "    assert(str);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'str' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 70, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 70, "snippet": {"text": "    if (tok->enc != NULL) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 70, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 70, "snippet": {"text": "    if (tok->enc != NULL) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 71, "startColumn": 9, "endColumn": 13}, "contextRegion": {"startLine": 71, "snippet": {"text": "        utf8 = _PyTokenizer_translate_into_utf8(str, tok->enc);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 72, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 72, "snippet": {"text": "        if (utf8 == NULL)\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'utf8' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 74, "startColumn": 9, "endColumn": 12}, "contextRegion": {"startLine": 74, "snippet": {"text": "        str = PyBytes_AsString(utf8);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 77, "startColumn": 13, "endColumn": 15}, "contextRegion": {"startLine": 77, "snippet": {"text": "        if (*s == '\\0') break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "pointer 'str' is dereferenced here"}}, "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 77, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 77, "snippet": {"text": "        if (*s == '\\0') break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 78, "startColumn": 14, "endColumn": 16}, "contextRegion": {"startLine": 78, "snippet": {"text": "        else if (*s == '\\n') {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 78, "startColumn": 17, "endColumn": 18}, "contextRegion": {"startLine": 78, "snippet": {"text": "        else if (*s == '\\n') {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 79, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 79, "snippet": {"text": "            assert(lineno < 2);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 79, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 79, "snippet": {"text": "            assert(lineno < 2);\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'lineno <= 1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 80, "startColumn": 13, "endColumn": 17}, "contextRegion": {"startLine": 80, "snippet": {"text": "            newl[lineno] = s;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 82, "startColumn": 16, "endColumn": 17}, "contextRegion": {"startLine": 82, "snippet": {"text": "            if (lineno == 2) break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'false' branch (when 'lineno != 2')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 76, "startColumn": 20, "endColumn": 23}, "contextRegion": {"startLine": 76, "snippet": {"text": "    for (s = str;; s++) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 77, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 77, "snippet": {"text": "        if (*s == '\\0') break;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "following 'true' branch..."}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 85, "startColumn": 5, "endColumn": 8}, "contextRegion": {"startLine": 85, "snippet": {"text": "    tok->enc = NULL;\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/tokenizer/string_tokenizer.c", "uriBaseId": "PWD"}, "region": {"startLine": 88, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 88, "snippet": {"text": "    if (newl[0]) {\n"}}}, "logicalLocations": [{"name": "decode_str", "fullyQualifiedName": "decode_str", "decoratedName": "decode_str", "kind": "function"}], "message": {"text": "pointer 'str' is checked for NULL here but it was already dereferenced at (16)"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}]}]}
