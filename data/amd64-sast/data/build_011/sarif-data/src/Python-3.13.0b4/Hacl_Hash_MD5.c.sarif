{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "GNU C11", "fullName": "GNU C11 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)", "version": "13.2.0", "informationUri": "https://gcc.gnu.org/gcc-13/", "rules": [{"id": "-Wanalyzer-possible-null-dereference", "helpUri": "https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-possible-null-dereference"}]}}, "taxonomies": [{"name": "CWE", "version": "4.7", "organization": "MITRE", "shortDescription": {"text": "The MITRE Common Weakness Enumeration"}, "taxa": [{"id": "690", "helpUri": "https://cwe.mitre.org/data/definitions/690.html"}]}], "invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}}, "artifacts": [{"location": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "contents": {"text": "/* MIT License\n *\n * Copyright (c) 2016-2022 INRIA, CMU and Microsoft Corporation\n * Copyright (c) 2022-2023 HACL* Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n#include \"internal/Hacl_Hash_MD5.h\"\n\nstatic uint32_t _h0[4U] = { 0x67452301U, 0xefcdab89U, 0x98badcfeU, 0x10325476U };\n\nstatic uint32_t\n_t[64U] =\n  {\n    0xd76aa478U, 0xe8c7b756U, 0x242070dbU, 0xc1bdceeeU, 0xf57c0fafU, 0x4787c62aU, 0xa8304613U,\n    0xfd469501U, 0x698098d8U, 0x8b44f7afU, 0xffff5bb1U, 0x895cd7beU, 0x6b901122U, 0xfd987193U,\n    0xa679438eU, 0x49b40821U, 0xf61e2562U, 0xc040b340U, 0x265e5a51U, 0xe9b6c7aaU, 0xd62f105dU,\n    0x02441453U, 0xd8a1e681U, 0xe7d3fbc8U, 0x21e1cde6U, 0xc33707d6U, 0xf4d50d87U, 0x455a14edU,\n    0xa9e3e905U, 0xfcefa3f8U, 0x676f02d9U, 0x8d2a4c8aU, 0xfffa3942U, 0x8771f681U, 0x6d9d6122U,\n    0xfde5380cU, 0xa4beea44U, 0x4bdecfa9U, 0xf6bb4b60U, 0xbebfbc70U, 0x289b7ec6U, 0xeaa127faU,\n    0xd4ef3085U, 0x4881d05U, 0xd9d4d039U, 0xe6db99e5U, 0x1fa27cf8U, 0xc4ac5665U, 0xf4292244U,\n    0x432aff97U, 0xab9423a7U, 0xfc93a039U, 0x655b59c3U, 0x8f0ccc92U, 0xffeff47dU, 0x85845dd1U,\n    0x6fa87e4fU, 0xfe2ce6e0U, 0xa3014314U, 0x4e0811a1U, 0xf7537e82U, 0xbd3af235U, 0x2ad7d2bbU,\n    0xeb86d391U\n  };\n\nvoid Hacl_Hash_MD5_init(uint32_t *s)\n{\n  KRML_MAYBE_FOR4(i, 0U, 4U, 1U, s[i] = _h0[i];);\n}\n\nstatic void update(uint32_t *abcd, uint8_t *x)\n{\n  uint32_t aa = abcd[0U];\n  uint32_t bb = abcd[1U];\n  uint32_t cc = abcd[2U];\n  uint32_t dd = abcd[3U];\n  uint32_t va = abcd[0U];\n  uint32_t vb0 = abcd[1U];\n  uint32_t vc0 = abcd[2U];\n  uint32_t vd0 = abcd[3U];\n  uint8_t *b0 = x;\n  uint32_t u = load32_le(b0);\n  uint32_t xk = u;\n  uint32_t ti0 = _t[0U];\n  uint32_t\n  v =\n    vb0\n    +\n      ((va + ((vb0 & vc0) | (~vb0 & vd0)) + xk + ti0)\n      << 7U\n      | (va + ((vb0 & vc0) | (~vb0 & vd0)) + xk + ti0) >> 25U);\n  abcd[0U] = v;\n  uint32_t va0 = abcd[3U];\n  uint32_t vb1 = abcd[0U];\n  uint32_t vc1 = abcd[1U];\n  uint32_t vd1 = abcd[2U];\n  uint8_t *b1 = x + 4U;\n  uint32_t u0 = load32_le(b1);\n  uint32_t xk0 = u0;\n  uint32_t ti1 = _t[1U];\n  uint32_t\n  v0 =\n    vb1\n    +\n      ((va0 + ((vb1 & vc1) | (~vb1 & vd1)) + xk0 + ti1)\n      << 12U\n      | (va0 + ((vb1 & vc1) | (~vb1 & vd1)) + xk0 + ti1) >> 20U);\n  abcd[3U] = v0;\n  uint32_t va1 = abcd[2U];\n  uint32_t vb2 = abcd[3U];\n  uint32_t vc2 = abcd[0U];\n  uint32_t vd2 = abcd[1U];\n  uint8_t *b2 = x + 8U;\n  uint32_t u1 = load32_le(b2);\n  uint32_t xk1 = u1;\n  uint32_t ti2 = _t[2U];\n  uint32_t\n  v1 =\n    vb2\n    +\n      ((va1 + ((vb2 & vc2) | (~vb2 & vd2)) + xk1 + ti2)\n      << 17U\n      | (va1 + ((vb2 & vc2) | (~vb2 & vd2)) + xk1 + ti2) >> 15U);\n  abcd[2U] = v1;\n  uint32_t va2 = abcd[1U];\n  uint32_t vb3 = abcd[2U];\n  uint32_t vc3 = abcd[3U];\n  uint32_t vd3 = abcd[0U];\n  uint8_t *b3 = x + 12U;\n  uint32_t u2 = load32_le(b3);\n  uint32_t xk2 = u2;\n  uint32_t ti3 = _t[3U];\n  uint32_t\n  v2 =\n    vb3\n    +\n      ((va2 + ((vb3 & vc3) | (~vb3 & vd3)) + xk2 + ti3)\n      << 22U\n      | (va2 + ((vb3 & vc3) | (~vb3 & vd3)) + xk2 + ti3) >> 10U);\n  abcd[1U] = v2;\n  uint32_t va3 = abcd[0U];\n  uint32_t vb4 = abcd[1U];\n  uint32_t vc4 = abcd[2U];\n  uint32_t vd4 = abcd[3U];\n  uint8_t *b4 = x + 16U;\n  uint32_t u3 = load32_le(b4);\n  uint32_t xk3 = u3;\n  uint32_t ti4 = _t[4U];\n  uint32_t\n  v3 =\n    vb4\n    +\n      ((va3 + ((vb4 & vc4) | (~vb4 & vd4)) + xk3 + ti4)\n      << 7U\n      | (va3 + ((vb4 & vc4) | (~vb4 & vd4)) + xk3 + ti4) >> 25U);\n  abcd[0U] = v3;\n  uint32_t va4 = abcd[3U];\n  uint32_t vb5 = abcd[0U];\n  uint32_t vc5 = abcd[1U];\n  uint32_t vd5 = abcd[2U];\n  uint8_t *b5 = x + 20U;\n  uint32_t u4 = load32_le(b5);\n  uint32_t xk4 = u4;\n  uint32_t ti5 = _t[5U];\n  uint32_t\n  v4 =\n    vb5\n    +\n      ((va4 + ((vb5 & vc5) | (~vb5 & vd5)) + xk4 + ti5)\n      << 12U\n      | (va4 + ((vb5 & vc5) | (~vb5 & vd5)) + xk4 + ti5) >> 20U);\n  abcd[3U] = v4;\n  uint32_t va5 = abcd[2U];\n  uint32_t vb6 = abcd[3U];\n  uint32_t vc6 = abcd[0U];\n  uint32_t vd6 = abcd[1U];\n  uint8_t *b6 = x + 24U;\n  uint32_t u5 = load32_le(b6);\n  uint32_t xk5 = u5;\n  uint32_t ti6 = _t[6U];\n  uint32_t\n  v5 =\n    vb6\n    +\n      ((va5 + ((vb6 & vc6) | (~vb6 & vd6)) + xk5 + ti6)\n      << 17U\n      | (va5 + ((vb6 & vc6) | (~vb6 & vd6)) + xk5 + ti6) >> 15U);\n  abcd[2U] = v5;\n  uint32_t va6 = abcd[1U];\n  uint32_t vb7 = abcd[2U];\n  uint32_t vc7 = abcd[3U];\n  uint32_t vd7 = abcd[0U];\n  uint8_t *b7 = x + 28U;\n  uint32_t u6 = load32_le(b7);\n  uint32_t xk6 = u6;\n  uint32_t ti7 = _t[7U];\n  uint32_t\n  v6 =\n    vb7\n    +\n      ((va6 + ((vb7 & vc7) | (~vb7 & vd7)) + xk6 + ti7)\n      << 22U\n      | (va6 + ((vb7 & vc7) | (~vb7 & vd7)) + xk6 + ti7) >> 10U);\n  abcd[1U] = v6;\n  uint32_t va7 = abcd[0U];\n  uint32_t vb8 = abcd[1U];\n  uint32_t vc8 = abcd[2U];\n  uint32_t vd8 = abcd[3U];\n  uint8_t *b8 = x + 32U;\n  uint32_t u7 = load32_le(b8);\n  uint32_t xk7 = u7;\n  uint32_t ti8 = _t[8U];\n  uint32_t\n  v7 =\n    vb8\n    +\n      ((va7 + ((vb8 & vc8) | (~vb8 & vd8)) + xk7 + ti8)\n      << 7U\n      | (va7 + ((vb8 & vc8) | (~vb8 & vd8)) + xk7 + ti8) >> 25U);\n  abcd[0U] = v7;\n  uint32_t va8 = abcd[3U];\n  uint32_t vb9 = abcd[0U];\n  uint32_t vc9 = abcd[1U];\n  uint32_t vd9 = abcd[2U];\n  uint8_t *b9 = x + 36U;\n  uint32_t u8 = load32_le(b9);\n  uint32_t xk8 = u8;\n  uint32_t ti9 = _t[9U];\n  uint32_t\n  v8 =\n    vb9\n    +\n      ((va8 + ((vb9 & vc9) | (~vb9 & vd9)) + xk8 + ti9)\n      << 12U\n      | (va8 + ((vb9 & vc9) | (~vb9 & vd9)) + xk8 + ti9) >> 20U);\n  abcd[3U] = v8;\n  uint32_t va9 = abcd[2U];\n  uint32_t vb10 = abcd[3U];\n  uint32_t vc10 = abcd[0U];\n  uint32_t vd10 = abcd[1U];\n  uint8_t *b10 = x + 40U;\n  uint32_t u9 = load32_le(b10);\n  uint32_t xk9 = u9;\n  uint32_t ti10 = _t[10U];\n  uint32_t\n  v9 =\n    vb10\n    +\n      ((va9 + ((vb10 & vc10) | (~vb10 & vd10)) + xk9 + ti10)\n      << 17U\n      | (va9 + ((vb10 & vc10) | (~vb10 & vd10)) + xk9 + ti10) >> 15U);\n  abcd[2U] = v9;\n  uint32_t va10 = abcd[1U];\n  uint32_t vb11 = abcd[2U];\n  uint32_t vc11 = abcd[3U];\n  uint32_t vd11 = abcd[0U];\n  uint8_t *b11 = x + 44U;\n  uint32_t u10 = load32_le(b11);\n  uint32_t xk10 = u10;\n  uint32_t ti11 = _t[11U];\n  uint32_t\n  v10 =\n    vb11\n    +\n      ((va10 + ((vb11 & vc11) | (~vb11 & vd11)) + xk10 + ti11)\n      << 22U\n      | (va10 + ((vb11 & vc11) | (~vb11 & vd11)) + xk10 + ti11) >> 10U);\n  abcd[1U] = v10;\n  uint32_t va11 = abcd[0U];\n  uint32_t vb12 = abcd[1U];\n  uint32_t vc12 = abcd[2U];\n  uint32_t vd12 = abcd[3U];\n  uint8_t *b12 = x + 48U;\n  uint32_t u11 = load32_le(b12);\n  uint32_t xk11 = u11;\n  uint32_t ti12 = _t[12U];\n  uint32_t\n  v11 =\n    vb12\n    +\n      ((va11 + ((vb12 & vc12) | (~vb12 & vd12)) + xk11 + ti12)\n      << 7U\n      | (va11 + ((vb12 & vc12) | (~vb12 & vd12)) + xk11 + ti12) >> 25U);\n  abcd[0U] = v11;\n  uint32_t va12 = abcd[3U];\n  uint32_t vb13 = abcd[0U];\n  uint32_t vc13 = abcd[1U];\n  uint32_t vd13 = abcd[2U];\n  uint8_t *b13 = x + 52U;\n  uint32_t u12 = load32_le(b13);\n  uint32_t xk12 = u12;\n  uint32_t ti13 = _t[13U];\n  uint32_t\n  v12 =\n    vb13\n    +\n      ((va12 + ((vb13 & vc13) | (~vb13 & vd13)) + xk12 + ti13)\n      << 12U\n      | (va12 + ((vb13 & vc13) | (~vb13 & vd13)) + xk12 + ti13) >> 20U);\n  abcd[3U] = v12;\n  uint32_t va13 = abcd[2U];\n  uint32_t vb14 = abcd[3U];\n  uint32_t vc14 = abcd[0U];\n  uint32_t vd14 = abcd[1U];\n  uint8_t *b14 = x + 56U;\n  uint32_t u13 = load32_le(b14);\n  uint32_t xk13 = u13;\n  uint32_t ti14 = _t[14U];\n  uint32_t\n  v13 =\n    vb14\n    +\n      ((va13 + ((vb14 & vc14) | (~vb14 & vd14)) + xk13 + ti14)\n      << 17U\n      | (va13 + ((vb14 & vc14) | (~vb14 & vd14)) + xk13 + ti14) >> 15U);\n  abcd[2U] = v13;\n  uint32_t va14 = abcd[1U];\n  uint32_t vb15 = abcd[2U];\n  uint32_t vc15 = abcd[3U];\n  uint32_t vd15 = abcd[0U];\n  uint8_t *b15 = x + 60U;\n  uint32_t u14 = load32_le(b15);\n  uint32_t xk14 = u14;\n  uint32_t ti15 = _t[15U];\n  uint32_t\n  v14 =\n    vb15\n    +\n      ((va14 + ((vb15 & vc15) | (~vb15 & vd15)) + xk14 + ti15)\n      << 22U\n      | (va14 + ((vb15 & vc15) | (~vb15 & vd15)) + xk14 + ti15) >> 10U);\n  abcd[1U] = v14;\n  uint32_t va15 = abcd[0U];\n  uint32_t vb16 = abcd[1U];\n  uint32_t vc16 = abcd[2U];\n  uint32_t vd16 = abcd[3U];\n  uint8_t *b16 = x + 4U;\n  uint32_t u15 = load32_le(b16);\n  uint32_t xk15 = u15;\n  uint32_t ti16 = _t[16U];\n  uint32_t\n  v15 =\n    vb16\n    +\n      ((va15 + ((vb16 & vd16) | (vc16 & ~vd16)) + xk15 + ti16)\n      << 5U\n      | (va15 + ((vb16 & vd16) | (vc16 & ~vd16)) + xk15 + ti16) >> 27U);\n  abcd[0U] = v15;\n  uint32_t va16 = abcd[3U];\n  uint32_t vb17 = abcd[0U];\n  uint32_t vc17 = abcd[1U];\n  uint32_t vd17 = abcd[2U];\n  uint8_t *b17 = x + 24U;\n  uint32_t u16 = load32_le(b17);\n  uint32_t xk16 = u16;\n  uint32_t ti17 = _t[17U];\n  uint32_t\n  v16 =\n    vb17\n    +\n      ((va16 + ((vb17 & vd17) | (vc17 & ~vd17)) + xk16 + ti17)\n      << 9U\n      | (va16 + ((vb17 & vd17) | (vc17 & ~vd17)) + xk16 + ti17) >> 23U);\n  abcd[3U] = v16;\n  uint32_t va17 = abcd[2U];\n  uint32_t vb18 = abcd[3U];\n  uint32_t vc18 = abcd[0U];\n  uint32_t vd18 = abcd[1U];\n  uint8_t *b18 = x + 44U;\n  uint32_t u17 = load32_le(b18);\n  uint32_t xk17 = u17;\n  uint32_t ti18 = _t[18U];\n  uint32_t\n  v17 =\n    vb18\n    +\n      ((va17 + ((vb18 & vd18) | (vc18 & ~vd18)) + xk17 + ti18)\n      << 14U\n      | (va17 + ((vb18 & vd18) | (vc18 & ~vd18)) + xk17 + ti18) >> 18U);\n  abcd[2U] = v17;\n  uint32_t va18 = abcd[1U];\n  uint32_t vb19 = abcd[2U];\n  uint32_t vc19 = abcd[3U];\n  uint32_t vd19 = abcd[0U];\n  uint8_t *b19 = x;\n  uint32_t u18 = load32_le(b19);\n  uint32_t xk18 = u18;\n  uint32_t ti19 = _t[19U];\n  uint32_t\n  v18 =\n    vb19\n    +\n      ((va18 + ((vb19 & vd19) | (vc19 & ~vd19)) + xk18 + ti19)\n      << 20U\n      | (va18 + ((vb19 & vd19) | (vc19 & ~vd19)) + xk18 + ti19) >> 12U);\n  abcd[1U] = v18;\n  uint32_t va19 = abcd[0U];\n  uint32_t vb20 = abcd[1U];\n  uint32_t vc20 = abcd[2U];\n  uint32_t vd20 = abcd[3U];\n  uint8_t *b20 = x + 20U;\n  uint32_t u19 = load32_le(b20);\n  uint32_t xk19 = u19;\n  uint32_t ti20 = _t[20U];\n  uint32_t\n  v19 =\n    vb20\n    +\n      ((va19 + ((vb20 & vd20) | (vc20 & ~vd20)) + xk19 + ti20)\n      << 5U\n      | (va19 + ((vb20 & vd20) | (vc20 & ~vd20)) + xk19 + ti20) >> 27U);\n  abcd[0U] = v19;\n  uint32_t va20 = abcd[3U];\n  uint32_t vb21 = abcd[0U];\n  uint32_t vc21 = abcd[1U];\n  uint32_t vd21 = abcd[2U];\n  uint8_t *b21 = x + 40U;\n  uint32_t u20 = load32_le(b21);\n  uint32_t xk20 = u20;\n  uint32_t ti21 = _t[21U];\n  uint32_t\n  v20 =\n    vb21\n    +\n      ((va20 + ((vb21 & vd21) | (vc21 & ~vd21)) + xk20 + ti21)\n      << 9U\n      | (va20 + ((vb21 & vd21) | (vc21 & ~vd21)) + xk20 + ti21) >> 23U);\n  abcd[3U] = v20;\n  uint32_t va21 = abcd[2U];\n  uint32_t vb22 = abcd[3U];\n  uint32_t vc22 = abcd[0U];\n  uint32_t vd22 = abcd[1U];\n  uint8_t *b22 = x + 60U;\n  uint32_t u21 = load32_le(b22);\n  uint32_t xk21 = u21;\n  uint32_t ti22 = _t[22U];\n  uint32_t\n  v21 =\n    vb22\n    +\n      ((va21 + ((vb22 & vd22) | (vc22 & ~vd22)) + xk21 + ti22)\n      << 14U\n      | (va21 + ((vb22 & vd22) | (vc22 & ~vd22)) + xk21 + ti22) >> 18U);\n  abcd[2U] = v21;\n  uint32_t va22 = abcd[1U];\n  uint32_t vb23 = abcd[2U];\n  uint32_t vc23 = abcd[3U];\n  uint32_t vd23 = abcd[0U];\n  uint8_t *b23 = x + 16U;\n  uint32_t u22 = load32_le(b23);\n  uint32_t xk22 = u22;\n  uint32_t ti23 = _t[23U];\n  uint32_t\n  v22 =\n    vb23\n    +\n      ((va22 + ((vb23 & vd23) | (vc23 & ~vd23)) + xk22 + ti23)\n      << 20U\n      | (va22 + ((vb23 & vd23) | (vc23 & ~vd23)) + xk22 + ti23) >> 12U);\n  abcd[1U] = v22;\n  uint32_t va23 = abcd[0U];\n  uint32_t vb24 = abcd[1U];\n  uint32_t vc24 = abcd[2U];\n  uint32_t vd24 = abcd[3U];\n  uint8_t *b24 = x + 36U;\n  uint32_t u23 = load32_le(b24);\n  uint32_t xk23 = u23;\n  uint32_t ti24 = _t[24U];\n  uint32_t\n  v23 =\n    vb24\n    +\n      ((va23 + ((vb24 & vd24) | (vc24 & ~vd24)) + xk23 + ti24)\n      << 5U\n      | (va23 + ((vb24 & vd24) | (vc24 & ~vd24)) + xk23 + ti24) >> 27U);\n  abcd[0U] = v23;\n  uint32_t va24 = abcd[3U];\n  uint32_t vb25 = abcd[0U];\n  uint32_t vc25 = abcd[1U];\n  uint32_t vd25 = abcd[2U];\n  uint8_t *b25 = x + 56U;\n  uint32_t u24 = load32_le(b25);\n  uint32_t xk24 = u24;\n  uint32_t ti25 = _t[25U];\n  uint32_t\n  v24 =\n    vb25\n    +\n      ((va24 + ((vb25 & vd25) | (vc25 & ~vd25)) + xk24 + ti25)\n      << 9U\n      | (va24 + ((vb25 & vd25) | (vc25 & ~vd25)) + xk24 + ti25) >> 23U);\n  abcd[3U] = v24;\n  uint32_t va25 = abcd[2U];\n  uint32_t vb26 = abcd[3U];\n  uint32_t vc26 = abcd[0U];\n  uint32_t vd26 = abcd[1U];\n  uint8_t *b26 = x + 12U;\n  uint32_t u25 = load32_le(b26);\n  uint32_t xk25 = u25;\n  uint32_t ti26 = _t[26U];\n  uint32_t\n  v25 =\n    vb26\n    +\n      ((va25 + ((vb26 & vd26) | (vc26 & ~vd26)) + xk25 + ti26)\n      << 14U\n      | (va25 + ((vb26 & vd26) | (vc26 & ~vd26)) + xk25 + ti26) >> 18U);\n  abcd[2U] = v25;\n  uint32_t va26 = abcd[1U];\n  uint32_t vb27 = abcd[2U];\n  uint32_t vc27 = abcd[3U];\n  uint32_t vd27 = abcd[0U];\n  uint8_t *b27 = x + 32U;\n  uint32_t u26 = load32_le(b27);\n  uint32_t xk26 = u26;\n  uint32_t ti27 = _t[27U];\n  uint32_t\n  v26 =\n    vb27\n    +\n      ((va26 + ((vb27 & vd27) | (vc27 & ~vd27)) + xk26 + ti27)\n      << 20U\n      | (va26 + ((vb27 & vd27) | (vc27 & ~vd27)) + xk26 + ti27) >> 12U);\n  abcd[1U] = v26;\n  uint32_t va27 = abcd[0U];\n  uint32_t vb28 = abcd[1U];\n  uint32_t vc28 = abcd[2U];\n  uint32_t vd28 = abcd[3U];\n  uint8_t *b28 = x + 52U;\n  uint32_t u27 = load32_le(b28);\n  uint32_t xk27 = u27;\n  uint32_t ti28 = _t[28U];\n  uint32_t\n  v27 =\n    vb28\n    +\n      ((va27 + ((vb28 & vd28) | (vc28 & ~vd28)) + xk27 + ti28)\n      << 5U\n      | (va27 + ((vb28 & vd28) | (vc28 & ~vd28)) + xk27 + ti28) >> 27U);\n  abcd[0U] = v27;\n  uint32_t va28 = abcd[3U];\n  uint32_t vb29 = abcd[0U];\n  uint32_t vc29 = abcd[1U];\n  uint32_t vd29 = abcd[2U];\n  uint8_t *b29 = x + 8U;\n  uint32_t u28 = load32_le(b29);\n  uint32_t xk28 = u28;\n  uint32_t ti29 = _t[29U];\n  uint32_t\n  v28 =\n    vb29\n    +\n      ((va28 + ((vb29 & vd29) | (vc29 & ~vd29)) + xk28 + ti29)\n      << 9U\n      | (va28 + ((vb29 & vd29) | (vc29 & ~vd29)) + xk28 + ti29) >> 23U);\n  abcd[3U] = v28;\n  uint32_t va29 = abcd[2U];\n  uint32_t vb30 = abcd[3U];\n  uint32_t vc30 = abcd[0U];\n  uint32_t vd30 = abcd[1U];\n  uint8_t *b30 = x + 28U;\n  uint32_t u29 = load32_le(b30);\n  uint32_t xk29 = u29;\n  uint32_t ti30 = _t[30U];\n  uint32_t\n  v29 =\n    vb30\n    +\n      ((va29 + ((vb30 & vd30) | (vc30 & ~vd30)) + xk29 + ti30)\n      << 14U\n      | (va29 + ((vb30 & vd30) | (vc30 & ~vd30)) + xk29 + ti30) >> 18U);\n  abcd[2U] = v29;\n  uint32_t va30 = abcd[1U];\n  uint32_t vb31 = abcd[2U];\n  uint32_t vc31 = abcd[3U];\n  uint32_t vd31 = abcd[0U];\n  uint8_t *b31 = x + 48U;\n  uint32_t u30 = load32_le(b31);\n  uint32_t xk30 = u30;\n  uint32_t ti31 = _t[31U];\n  uint32_t\n  v30 =\n    vb31\n    +\n      ((va30 + ((vb31 & vd31) | (vc31 & ~vd31)) + xk30 + ti31)\n      << 20U\n      | (va30 + ((vb31 & vd31) | (vc31 & ~vd31)) + xk30 + ti31) >> 12U);\n  abcd[1U] = v30;\n  uint32_t va31 = abcd[0U];\n  uint32_t vb32 = abcd[1U];\n  uint32_t vc32 = abcd[2U];\n  uint32_t vd32 = abcd[3U];\n  uint8_t *b32 = x + 20U;\n  uint32_t u31 = load32_le(b32);\n  uint32_t xk31 = u31;\n  uint32_t ti32 = _t[32U];\n  uint32_t\n  v31 =\n    vb32\n    +\n      ((va31 + (vb32 ^ (vc32 ^ vd32)) + xk31 + ti32)\n      << 4U\n      | (va31 + (vb32 ^ (vc32 ^ vd32)) + xk31 + ti32) >> 28U);\n  abcd[0U] = v31;\n  uint32_t va32 = abcd[3U];\n  uint32_t vb33 = abcd[0U];\n  uint32_t vc33 = abcd[1U];\n  uint32_t vd33 = abcd[2U];\n  uint8_t *b33 = x + 32U;\n  uint32_t u32 = load32_le(b33);\n  uint32_t xk32 = u32;\n  uint32_t ti33 = _t[33U];\n  uint32_t\n  v32 =\n    vb33\n    +\n      ((va32 + (vb33 ^ (vc33 ^ vd33)) + xk32 + ti33)\n      << 11U\n      | (va32 + (vb33 ^ (vc33 ^ vd33)) + xk32 + ti33) >> 21U);\n  abcd[3U] = v32;\n  uint32_t va33 = abcd[2U];\n  uint32_t vb34 = abcd[3U];\n  uint32_t vc34 = abcd[0U];\n  uint32_t vd34 = abcd[1U];\n  uint8_t *b34 = x + 44U;\n  uint32_t u33 = load32_le(b34);\n  uint32_t xk33 = u33;\n  uint32_t ti34 = _t[34U];\n  uint32_t\n  v33 =\n    vb34\n    +\n      ((va33 + (vb34 ^ (vc34 ^ vd34)) + xk33 + ti34)\n      << 16U\n      | (va33 + (vb34 ^ (vc34 ^ vd34)) + xk33 + ti34) >> 16U);\n  abcd[2U] = v33;\n  uint32_t va34 = abcd[1U];\n  uint32_t vb35 = abcd[2U];\n  uint32_t vc35 = abcd[3U];\n  uint32_t vd35 = abcd[0U];\n  uint8_t *b35 = x + 56U;\n  uint32_t u34 = load32_le(b35);\n  uint32_t xk34 = u34;\n  uint32_t ti35 = _t[35U];\n  uint32_t\n  v34 =\n    vb35\n    +\n      ((va34 + (vb35 ^ (vc35 ^ vd35)) + xk34 + ti35)\n      << 23U\n      | (va34 + (vb35 ^ (vc35 ^ vd35)) + xk34 + ti35) >> 9U);\n  abcd[1U] = v34;\n  uint32_t va35 = abcd[0U];\n  uint32_t vb36 = abcd[1U];\n  uint32_t vc36 = abcd[2U];\n  uint32_t vd36 = abcd[3U];\n  uint8_t *b36 = x + 4U;\n  uint32_t u35 = load32_le(b36);\n  uint32_t xk35 = u35;\n  uint32_t ti36 = _t[36U];\n  uint32_t\n  v35 =\n    vb36\n    +\n      ((va35 + (vb36 ^ (vc36 ^ vd36)) + xk35 + ti36)\n      << 4U\n      | (va35 + (vb36 ^ (vc36 ^ vd36)) + xk35 + ti36) >> 28U);\n  abcd[0U] = v35;\n  uint32_t va36 = abcd[3U];\n  uint32_t vb37 = abcd[0U];\n  uint32_t vc37 = abcd[1U];\n  uint32_t vd37 = abcd[2U];\n  uint8_t *b37 = x + 16U;\n  uint32_t u36 = load32_le(b37);\n  uint32_t xk36 = u36;\n  uint32_t ti37 = _t[37U];\n  uint32_t\n  v36 =\n    vb37\n    +\n      ((va36 + (vb37 ^ (vc37 ^ vd37)) + xk36 + ti37)\n      << 11U\n      | (va36 + (vb37 ^ (vc37 ^ vd37)) + xk36 + ti37) >> 21U);\n  abcd[3U] = v36;\n  uint32_t va37 = abcd[2U];\n  uint32_t vb38 = abcd[3U];\n  uint32_t vc38 = abcd[0U];\n  uint32_t vd38 = abcd[1U];\n  uint8_t *b38 = x + 28U;\n  uint32_t u37 = load32_le(b38);\n  uint32_t xk37 = u37;\n  uint32_t ti38 = _t[38U];\n  uint32_t\n  v37 =\n    vb38\n    +\n      ((va37 + (vb38 ^ (vc38 ^ vd38)) + xk37 + ti38)\n      << 16U\n      | (va37 + (vb38 ^ (vc38 ^ vd38)) + xk37 + ti38) >> 16U);\n  abcd[2U] = v37;\n  uint32_t va38 = abcd[1U];\n  uint32_t vb39 = abcd[2U];\n  uint32_t vc39 = abcd[3U];\n  uint32_t vd39 = abcd[0U];\n  uint8_t *b39 = x + 40U;\n  uint32_t u38 = load32_le(b39);\n  uint32_t xk38 = u38;\n  uint32_t ti39 = _t[39U];\n  uint32_t\n  v38 =\n    vb39\n    +\n      ((va38 + (vb39 ^ (vc39 ^ vd39)) + xk38 + ti39)\n      << 23U\n      | (va38 + (vb39 ^ (vc39 ^ vd39)) + xk38 + ti39) >> 9U);\n  abcd[1U] = v38;\n  uint32_t va39 = abcd[0U];\n  uint32_t vb40 = abcd[1U];\n  uint32_t vc40 = abcd[2U];\n  uint32_t vd40 = abcd[3U];\n  uint8_t *b40 = x + 52U;\n  uint32_t u39 = load32_le(b40);\n  uint32_t xk39 = u39;\n  uint32_t ti40 = _t[40U];\n  uint32_t\n  v39 =\n    vb40\n    +\n      ((va39 + (vb40 ^ (vc40 ^ vd40)) + xk39 + ti40)\n      << 4U\n      | (va39 + (vb40 ^ (vc40 ^ vd40)) + xk39 + ti40) >> 28U);\n  abcd[0U] = v39;\n  uint32_t va40 = abcd[3U];\n  uint32_t vb41 = abcd[0U];\n  uint32_t vc41 = abcd[1U];\n  uint32_t vd41 = abcd[2U];\n  uint8_t *b41 = x;\n  uint32_t u40 = load32_le(b41);\n  uint32_t xk40 = u40;\n  uint32_t ti41 = _t[41U];\n  uint32_t\n  v40 =\n    vb41\n    +\n      ((va40 + (vb41 ^ (vc41 ^ vd41)) + xk40 + ti41)\n      << 11U\n      | (va40 + (vb41 ^ (vc41 ^ vd41)) + xk40 + ti41) >> 21U);\n  abcd[3U] = v40;\n  uint32_t va41 = abcd[2U];\n  uint32_t vb42 = abcd[3U];\n  uint32_t vc42 = abcd[0U];\n  uint32_t vd42 = abcd[1U];\n  uint8_t *b42 = x + 12U;\n  uint32_t u41 = load32_le(b42);\n  uint32_t xk41 = u41;\n  uint32_t ti42 = _t[42U];\n  uint32_t\n  v41 =\n    vb42\n    +\n      ((va41 + (vb42 ^ (vc42 ^ vd42)) + xk41 + ti42)\n      << 16U\n      | (va41 + (vb42 ^ (vc42 ^ vd42)) + xk41 + ti42) >> 16U);\n  abcd[2U] = v41;\n  uint32_t va42 = abcd[1U];\n  uint32_t vb43 = abcd[2U];\n  uint32_t vc43 = abcd[3U];\n  uint32_t vd43 = abcd[0U];\n  uint8_t *b43 = x + 24U;\n  uint32_t u42 = load32_le(b43);\n  uint32_t xk42 = u42;\n  uint32_t ti43 = _t[43U];\n  uint32_t\n  v42 =\n    vb43\n    +\n      ((va42 + (vb43 ^ (vc43 ^ vd43)) + xk42 + ti43)\n      << 23U\n      | (va42 + (vb43 ^ (vc43 ^ vd43)) + xk42 + ti43) >> 9U);\n  abcd[1U] = v42;\n  uint32_t va43 = abcd[0U];\n  uint32_t vb44 = abcd[1U];\n  uint32_t vc44 = abcd[2U];\n  uint32_t vd44 = abcd[3U];\n  uint8_t *b44 = x + 36U;\n  uint32_t u43 = load32_le(b44);\n  uint32_t xk43 = u43;\n  uint32_t ti44 = _t[44U];\n  uint32_t\n  v43 =\n    vb44\n    +\n      ((va43 + (vb44 ^ (vc44 ^ vd44)) + xk43 + ti44)\n      << 4U\n      | (va43 + (vb44 ^ (vc44 ^ vd44)) + xk43 + ti44) >> 28U);\n  abcd[0U] = v43;\n  uint32_t va44 = abcd[3U];\n  uint32_t vb45 = abcd[0U];\n  uint32_t vc45 = abcd[1U];\n  uint32_t vd45 = abcd[2U];\n  uint8_t *b45 = x + 48U;\n  uint32_t u44 = load32_le(b45);\n  uint32_t xk44 = u44;\n  uint32_t ti45 = _t[45U];\n  uint32_t\n  v44 =\n    vb45\n    +\n      ((va44 + (vb45 ^ (vc45 ^ vd45)) + xk44 + ti45)\n      << 11U\n      | (va44 + (vb45 ^ (vc45 ^ vd45)) + xk44 + ti45) >> 21U);\n  abcd[3U] = v44;\n  uint32_t va45 = abcd[2U];\n  uint32_t vb46 = abcd[3U];\n  uint32_t vc46 = abcd[0U];\n  uint32_t vd46 = abcd[1U];\n  uint8_t *b46 = x + 60U;\n  uint32_t u45 = load32_le(b46);\n  uint32_t xk45 = u45;\n  uint32_t ti46 = _t[46U];\n  uint32_t\n  v45 =\n    vb46\n    +\n      ((va45 + (vb46 ^ (vc46 ^ vd46)) + xk45 + ti46)\n      << 16U\n      | (va45 + (vb46 ^ (vc46 ^ vd46)) + xk45 + ti46) >> 16U);\n  abcd[2U] = v45;\n  uint32_t va46 = abcd[1U];\n  uint32_t vb47 = abcd[2U];\n  uint32_t vc47 = abcd[3U];\n  uint32_t vd47 = abcd[0U];\n  uint8_t *b47 = x + 8U;\n  uint32_t u46 = load32_le(b47);\n  uint32_t xk46 = u46;\n  uint32_t ti47 = _t[47U];\n  uint32_t\n  v46 =\n    vb47\n    +\n      ((va46 + (vb47 ^ (vc47 ^ vd47)) + xk46 + ti47)\n      << 23U\n      | (va46 + (vb47 ^ (vc47 ^ vd47)) + xk46 + ti47) >> 9U);\n  abcd[1U] = v46;\n  uint32_t va47 = abcd[0U];\n  uint32_t vb48 = abcd[1U];\n  uint32_t vc48 = abcd[2U];\n  uint32_t vd48 = abcd[3U];\n  uint8_t *b48 = x;\n  uint32_t u47 = load32_le(b48);\n  uint32_t xk47 = u47;\n  uint32_t ti48 = _t[48U];\n  uint32_t\n  v47 =\n    vb48\n    +\n      ((va47 + (vc48 ^ (vb48 | ~vd48)) + xk47 + ti48)\n      << 6U\n      | (va47 + (vc48 ^ (vb48 | ~vd48)) + xk47 + ti48) >> 26U);\n  abcd[0U] = v47;\n  uint32_t va48 = abcd[3U];\n  uint32_t vb49 = abcd[0U];\n  uint32_t vc49 = abcd[1U];\n  uint32_t vd49 = abcd[2U];\n  uint8_t *b49 = x + 28U;\n  uint32_t u48 = load32_le(b49);\n  uint32_t xk48 = u48;\n  uint32_t ti49 = _t[49U];\n  uint32_t\n  v48 =\n    vb49\n    +\n      ((va48 + (vc49 ^ (vb49 | ~vd49)) + xk48 + ti49)\n      << 10U\n      | (va48 + (vc49 ^ (vb49 | ~vd49)) + xk48 + ti49) >> 22U);\n  abcd[3U] = v48;\n  uint32_t va49 = abcd[2U];\n  uint32_t vb50 = abcd[3U];\n  uint32_t vc50 = abcd[0U];\n  uint32_t vd50 = abcd[1U];\n  uint8_t *b50 = x + 56U;\n  uint32_t u49 = load32_le(b50);\n  uint32_t xk49 = u49;\n  uint32_t ti50 = _t[50U];\n  uint32_t\n  v49 =\n    vb50\n    +\n      ((va49 + (vc50 ^ (vb50 | ~vd50)) + xk49 + ti50)\n      << 15U\n      | (va49 + (vc50 ^ (vb50 | ~vd50)) + xk49 + ti50) >> 17U);\n  abcd[2U] = v49;\n  uint32_t va50 = abcd[1U];\n  uint32_t vb51 = abcd[2U];\n  uint32_t vc51 = abcd[3U];\n  uint32_t vd51 = abcd[0U];\n  uint8_t *b51 = x + 20U;\n  uint32_t u50 = load32_le(b51);\n  uint32_t xk50 = u50;\n  uint32_t ti51 = _t[51U];\n  uint32_t\n  v50 =\n    vb51\n    +\n      ((va50 + (vc51 ^ (vb51 | ~vd51)) + xk50 + ti51)\n      << 21U\n      | (va50 + (vc51 ^ (vb51 | ~vd51)) + xk50 + ti51) >> 11U);\n  abcd[1U] = v50;\n  uint32_t va51 = abcd[0U];\n  uint32_t vb52 = abcd[1U];\n  uint32_t vc52 = abcd[2U];\n  uint32_t vd52 = abcd[3U];\n  uint8_t *b52 = x + 48U;\n  uint32_t u51 = load32_le(b52);\n  uint32_t xk51 = u51;\n  uint32_t ti52 = _t[52U];\n  uint32_t\n  v51 =\n    vb52\n    +\n      ((va51 + (vc52 ^ (vb52 | ~vd52)) + xk51 + ti52)\n      << 6U\n      | (va51 + (vc52 ^ (vb52 | ~vd52)) + xk51 + ti52) >> 26U);\n  abcd[0U] = v51;\n  uint32_t va52 = abcd[3U];\n  uint32_t vb53 = abcd[0U];\n  uint32_t vc53 = abcd[1U];\n  uint32_t vd53 = abcd[2U];\n  uint8_t *b53 = x + 12U;\n  uint32_t u52 = load32_le(b53);\n  uint32_t xk52 = u52;\n  uint32_t ti53 = _t[53U];\n  uint32_t\n  v52 =\n    vb53\n    +\n      ((va52 + (vc53 ^ (vb53 | ~vd53)) + xk52 + ti53)\n      << 10U\n      | (va52 + (vc53 ^ (vb53 | ~vd53)) + xk52 + ti53) >> 22U);\n  abcd[3U] = v52;\n  uint32_t va53 = abcd[2U];\n  uint32_t vb54 = abcd[3U];\n  uint32_t vc54 = abcd[0U];\n  uint32_t vd54 = abcd[1U];\n  uint8_t *b54 = x + 40U;\n  uint32_t u53 = load32_le(b54);\n  uint32_t xk53 = u53;\n  uint32_t ti54 = _t[54U];\n  uint32_t\n  v53 =\n    vb54\n    +\n      ((va53 + (vc54 ^ (vb54 | ~vd54)) + xk53 + ti54)\n      << 15U\n      | (va53 + (vc54 ^ (vb54 | ~vd54)) + xk53 + ti54) >> 17U);\n  abcd[2U] = v53;\n  uint32_t va54 = abcd[1U];\n  uint32_t vb55 = abcd[2U];\n  uint32_t vc55 = abcd[3U];\n  uint32_t vd55 = abcd[0U];\n  uint8_t *b55 = x + 4U;\n  uint32_t u54 = load32_le(b55);\n  uint32_t xk54 = u54;\n  uint32_t ti55 = _t[55U];\n  uint32_t\n  v54 =\n    vb55\n    +\n      ((va54 + (vc55 ^ (vb55 | ~vd55)) + xk54 + ti55)\n      << 21U\n      | (va54 + (vc55 ^ (vb55 | ~vd55)) + xk54 + ti55) >> 11U);\n  abcd[1U] = v54;\n  uint32_t va55 = abcd[0U];\n  uint32_t vb56 = abcd[1U];\n  uint32_t vc56 = abcd[2U];\n  uint32_t vd56 = abcd[3U];\n  uint8_t *b56 = x + 32U;\n  uint32_t u55 = load32_le(b56);\n  uint32_t xk55 = u55;\n  uint32_t ti56 = _t[56U];\n  uint32_t\n  v55 =\n    vb56\n    +\n      ((va55 + (vc56 ^ (vb56 | ~vd56)) + xk55 + ti56)\n      << 6U\n      | (va55 + (vc56 ^ (vb56 | ~vd56)) + xk55 + ti56) >> 26U);\n  abcd[0U] = v55;\n  uint32_t va56 = abcd[3U];\n  uint32_t vb57 = abcd[0U];\n  uint32_t vc57 = abcd[1U];\n  uint32_t vd57 = abcd[2U];\n  uint8_t *b57 = x + 60U;\n  uint32_t u56 = load32_le(b57);\n  uint32_t xk56 = u56;\n  uint32_t ti57 = _t[57U];\n  uint32_t\n  v56 =\n    vb57\n    +\n      ((va56 + (vc57 ^ (vb57 | ~vd57)) + xk56 + ti57)\n      << 10U\n      | (va56 + (vc57 ^ (vb57 | ~vd57)) + xk56 + ti57) >> 22U);\n  abcd[3U] = v56;\n  uint32_t va57 = abcd[2U];\n  uint32_t vb58 = abcd[3U];\n  uint32_t vc58 = abcd[0U];\n  uint32_t vd58 = abcd[1U];\n  uint8_t *b58 = x + 24U;\n  uint32_t u57 = load32_le(b58);\n  uint32_t xk57 = u57;\n  uint32_t ti58 = _t[58U];\n  uint32_t\n  v57 =\n    vb58\n    +\n      ((va57 + (vc58 ^ (vb58 | ~vd58)) + xk57 + ti58)\n      << 15U\n      | (va57 + (vc58 ^ (vb58 | ~vd58)) + xk57 + ti58) >> 17U);\n  abcd[2U] = v57;\n  uint32_t va58 = abcd[1U];\n  uint32_t vb59 = abcd[2U];\n  uint32_t vc59 = abcd[3U];\n  uint32_t vd59 = abcd[0U];\n  uint8_t *b59 = x + 52U;\n  uint32_t u58 = load32_le(b59);\n  uint32_t xk58 = u58;\n  uint32_t ti59 = _t[59U];\n  uint32_t\n  v58 =\n    vb59\n    +\n      ((va58 + (vc59 ^ (vb59 | ~vd59)) + xk58 + ti59)\n      << 21U\n      | (va58 + (vc59 ^ (vb59 | ~vd59)) + xk58 + ti59) >> 11U);\n  abcd[1U] = v58;\n  uint32_t va59 = abcd[0U];\n  uint32_t vb60 = abcd[1U];\n  uint32_t vc60 = abcd[2U];\n  uint32_t vd60 = abcd[3U];\n  uint8_t *b60 = x + 16U;\n  uint32_t u59 = load32_le(b60);\n  uint32_t xk59 = u59;\n  uint32_t ti60 = _t[60U];\n  uint32_t\n  v59 =\n    vb60\n    +\n      ((va59 + (vc60 ^ (vb60 | ~vd60)) + xk59 + ti60)\n      << 6U\n      | (va59 + (vc60 ^ (vb60 | ~vd60)) + xk59 + ti60) >> 26U);\n  abcd[0U] = v59;\n  uint32_t va60 = abcd[3U];\n  uint32_t vb61 = abcd[0U];\n  uint32_t vc61 = abcd[1U];\n  uint32_t vd61 = abcd[2U];\n  uint8_t *b61 = x + 44U;\n  uint32_t u60 = load32_le(b61);\n  uint32_t xk60 = u60;\n  uint32_t ti61 = _t[61U];\n  uint32_t\n  v60 =\n    vb61\n    +\n      ((va60 + (vc61 ^ (vb61 | ~vd61)) + xk60 + ti61)\n      << 10U\n      | (va60 + (vc61 ^ (vb61 | ~vd61)) + xk60 + ti61) >> 22U);\n  abcd[3U] = v60;\n  uint32_t va61 = abcd[2U];\n  uint32_t vb62 = abcd[3U];\n  uint32_t vc62 = abcd[0U];\n  uint32_t vd62 = abcd[1U];\n  uint8_t *b62 = x + 8U;\n  uint32_t u61 = load32_le(b62);\n  uint32_t xk61 = u61;\n  uint32_t ti62 = _t[62U];\n  uint32_t\n  v61 =\n    vb62\n    +\n      ((va61 + (vc62 ^ (vb62 | ~vd62)) + xk61 + ti62)\n      << 15U\n      | (va61 + (vc62 ^ (vb62 | ~vd62)) + xk61 + ti62) >> 17U);\n  abcd[2U] = v61;\n  uint32_t va62 = abcd[1U];\n  uint32_t vb = abcd[2U];\n  uint32_t vc = abcd[3U];\n  uint32_t vd = abcd[0U];\n  uint8_t *b63 = x + 36U;\n  uint32_t u62 = load32_le(b63);\n  uint32_t xk62 = u62;\n  uint32_t ti = _t[63U];\n  uint32_t\n  v62 =\n    vb\n    +\n      ((va62 + (vc ^ (vb | ~vd)) + xk62 + ti)\n      << 21U\n      | (va62 + (vc ^ (vb | ~vd)) + xk62 + ti) >> 11U);\n  abcd[1U] = v62;\n  uint32_t a = abcd[0U];\n  uint32_t b = abcd[1U];\n  uint32_t c = abcd[2U];\n  uint32_t d = abcd[3U];\n  abcd[0U] = a + aa;\n  abcd[1U] = b + bb;\n  abcd[2U] = c + cc;\n  abcd[3U] = d + dd;\n}\n\nstatic void pad(uint64_t len, uint8_t *dst)\n{\n  uint8_t *dst1 = dst;\n  dst1[0U] = 0x80U;\n  uint8_t *dst2 = dst + 1U;\n  for (uint32_t i = 0U; i < (128U - (9U + (uint32_t)(len % (uint64_t)64U))) % 64U; i++)\n  {\n    dst2[i] = 0U;\n  }\n  uint8_t *dst3 = dst + 1U + (128U - (9U + (uint32_t)(len % (uint64_t)64U))) % 64U;\n  store64_le(dst3, len << 3U);\n}\n\nvoid Hacl_Hash_MD5_finish(uint32_t *s, uint8_t *dst)\n{\n  KRML_MAYBE_FOR4(i, 0U, 4U, 1U, store32_le(dst + i * 4U, s[i]););\n}\n\nvoid Hacl_Hash_MD5_update_multi(uint32_t *s, uint8_t *blocks, uint32_t n_blocks)\n{\n  for (uint32_t i = 0U; i < n_blocks; i++)\n  {\n    uint32_t sz = 64U;\n    uint8_t *block = blocks + sz * i;\n    update(s, block);\n  }\n}\n\nvoid\nHacl_Hash_MD5_update_last(uint32_t *s, uint64_t prev_len, uint8_t *input, uint32_t input_len)\n{\n  uint32_t blocks_n = input_len / 64U;\n  uint32_t blocks_len = blocks_n * 64U;\n  uint8_t *blocks = input;\n  uint32_t rest_len = input_len - blocks_len;\n  uint8_t *rest = input + blocks_len;\n  Hacl_Hash_MD5_update_multi(s, blocks, blocks_n);\n  uint64_t total_input_len = prev_len + (uint64_t)input_len;\n  uint32_t pad_len = 1U + (128U - (9U + (uint32_t)(total_input_len % (uint64_t)64U))) % 64U + 8U;\n  uint32_t tmp_len = rest_len + pad_len;\n  uint8_t tmp_twoblocks[128U] = { 0U };\n  uint8_t *tmp = tmp_twoblocks;\n  uint8_t *tmp_rest = tmp;\n  uint8_t *tmp_pad = tmp + rest_len;\n  memcpy(tmp_rest, rest, rest_len * sizeof (uint8_t));\n  pad(total_input_len, tmp_pad);\n  Hacl_Hash_MD5_update_multi(s, tmp, tmp_len / 64U);\n}\n\nvoid Hacl_Hash_MD5_hash_oneshot(uint8_t *output, uint8_t *input, uint32_t input_len)\n{\n  uint32_t s[4U] = { 0x67452301U, 0xefcdab89U, 0x98badcfeU, 0x10325476U };\n  uint32_t blocks_n0 = input_len / 64U;\n  uint32_t blocks_n1;\n  if (input_len % 64U == 0U && blocks_n0 > 0U)\n  {\n    blocks_n1 = blocks_n0 - 1U;\n  }\n  else\n  {\n    blocks_n1 = blocks_n0;\n  }\n  uint32_t blocks_len0 = blocks_n1 * 64U;\n  uint8_t *blocks0 = input;\n  uint32_t rest_len0 = input_len - blocks_len0;\n  uint8_t *rest0 = input + blocks_len0;\n  uint32_t blocks_n = blocks_n1;\n  uint32_t blocks_len = blocks_len0;\n  uint8_t *blocks = blocks0;\n  uint32_t rest_len = rest_len0;\n  uint8_t *rest = rest0;\n  Hacl_Hash_MD5_update_multi(s, blocks, blocks_n);\n  Hacl_Hash_MD5_update_last(s, (uint64_t)blocks_len, rest, rest_len);\n  Hacl_Hash_MD5_finish(s, output);\n}\n\nHacl_Streaming_MD_state_32 *Hacl_Hash_MD5_malloc(void)\n{\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(64U, sizeof (uint8_t));\n  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(4U, sizeof (uint32_t));\n  Hacl_Streaming_MD_state_32\n  s = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  Hacl_Streaming_MD_state_32\n  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n  p[0U] = s;\n  Hacl_Hash_MD5_init(block_state);\n  return p;\n}\n\nvoid Hacl_Hash_MD5_reset(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint32_t *block_state = scrut.block_state;\n  Hacl_Hash_MD5_init(block_state);\n  Hacl_Streaming_MD_state_32\n  tmp = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  state[0U] = tmp;\n}\n\n/**\n0 = success, 1 = max length exceeded\n*/\nHacl_Streaming_Types_error_code\nHacl_Hash_MD5_update(Hacl_Streaming_MD_state_32 *state, uint8_t *chunk, uint32_t chunk_len)\n{\n  Hacl_Streaming_MD_state_32 s = *state;\n  uint64_t total_len = s.total_len;\n  if ((uint64_t)chunk_len > 2305843009213693951ULL - total_len)\n  {\n    return Hacl_Streaming_Types_MaximumLengthExceeded;\n  }\n  uint32_t sz;\n  if (total_len % (uint64_t)64U == 0ULL && total_len > 0ULL)\n  {\n    sz = 64U;\n  }\n  else\n  {\n    sz = (uint32_t)(total_len % (uint64_t)64U);\n  }\n  if (chunk_len <= 64U - sz)\n  {\n    Hacl_Streaming_MD_state_32 s1 = *state;\n    uint32_t *block_state1 = s1.block_state;\n    uint8_t *buf = s1.buf;\n    uint64_t total_len1 = s1.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)64U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 64U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)64U);\n    }\n    uint8_t *buf2 = buf + sz1;\n    memcpy(buf2, chunk, chunk_len * sizeof (uint8_t));\n    uint64_t total_len2 = total_len1 + (uint64_t)chunk_len;\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len2\n        }\n      );\n  }\n  else if (sz == 0U)\n  {\n    Hacl_Streaming_MD_state_32 s1 = *state;\n    uint32_t *block_state1 = s1.block_state;\n    uint8_t *buf = s1.buf;\n    uint64_t total_len1 = s1.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)64U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 64U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)64U);\n    }\n    if (!(sz1 == 0U))\n    {\n      Hacl_Hash_MD5_update_multi(block_state1, buf, 1U);\n    }\n    uint32_t ite;\n    if ((uint64_t)chunk_len % (uint64_t)64U == 0ULL && (uint64_t)chunk_len > 0ULL)\n    {\n      ite = 64U;\n    }\n    else\n    {\n      ite = (uint32_t)((uint64_t)chunk_len % (uint64_t)64U);\n    }\n    uint32_t n_blocks = (chunk_len - ite) / 64U;\n    uint32_t data1_len = n_blocks * 64U;\n    uint32_t data2_len = chunk_len - data1_len;\n    uint8_t *data1 = chunk;\n    uint8_t *data2 = chunk + data1_len;\n    Hacl_Hash_MD5_update_multi(block_state1, data1, data1_len / 64U);\n    uint8_t *dst = buf;\n    memcpy(dst, data2, data2_len * sizeof (uint8_t));\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len1 + (uint64_t)chunk_len\n        }\n      );\n  }\n  else\n  {\n    uint32_t diff = 64U - sz;\n    uint8_t *chunk1 = chunk;\n    uint8_t *chunk2 = chunk + diff;\n    Hacl_Streaming_MD_state_32 s1 = *state;\n    uint32_t *block_state10 = s1.block_state;\n    uint8_t *buf0 = s1.buf;\n    uint64_t total_len10 = s1.total_len;\n    uint32_t sz10;\n    if (total_len10 % (uint64_t)64U == 0ULL && total_len10 > 0ULL)\n    {\n      sz10 = 64U;\n    }\n    else\n    {\n      sz10 = (uint32_t)(total_len10 % (uint64_t)64U);\n    }\n    uint8_t *buf2 = buf0 + sz10;\n    memcpy(buf2, chunk1, diff * sizeof (uint8_t));\n    uint64_t total_len2 = total_len10 + (uint64_t)diff;\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state10,\n          .buf = buf0,\n          .total_len = total_len2\n        }\n      );\n    Hacl_Streaming_MD_state_32 s10 = *state;\n    uint32_t *block_state1 = s10.block_state;\n    uint8_t *buf = s10.buf;\n    uint64_t total_len1 = s10.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)64U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 64U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)64U);\n    }\n    if (!(sz1 == 0U))\n    {\n      Hacl_Hash_MD5_update_multi(block_state1, buf, 1U);\n    }\n    uint32_t ite;\n    if\n    ((uint64_t)(chunk_len - diff) % (uint64_t)64U == 0ULL && (uint64_t)(chunk_len - diff) > 0ULL)\n    {\n      ite = 64U;\n    }\n    else\n    {\n      ite = (uint32_t)((uint64_t)(chunk_len - diff) % (uint64_t)64U);\n    }\n    uint32_t n_blocks = (chunk_len - diff - ite) / 64U;\n    uint32_t data1_len = n_blocks * 64U;\n    uint32_t data2_len = chunk_len - diff - data1_len;\n    uint8_t *data1 = chunk2;\n    uint8_t *data2 = chunk2 + data1_len;\n    Hacl_Hash_MD5_update_multi(block_state1, data1, data1_len / 64U);\n    uint8_t *dst = buf;\n    memcpy(dst, data2, data2_len * sizeof (uint8_t));\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len1 + (uint64_t)(chunk_len - diff)\n        }\n      );\n  }\n  return Hacl_Streaming_Types_Success;\n}\n\nvoid Hacl_Hash_MD5_digest(Hacl_Streaming_MD_state_32 *state, uint8_t *output)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint32_t *block_state = scrut.block_state;\n  uint8_t *buf_ = scrut.buf;\n  uint64_t total_len = scrut.total_len;\n  uint32_t r;\n  if (total_len % (uint64_t)64U == 0ULL && total_len > 0ULL)\n  {\n    r = 64U;\n  }\n  else\n  {\n    r = (uint32_t)(total_len % (uint64_t)64U);\n  }\n  uint8_t *buf_1 = buf_;\n  uint32_t tmp_block_state[4U] = { 0U };\n  memcpy(tmp_block_state, block_state, 4U * sizeof (uint32_t));\n  uint32_t ite;\n  if (r % 64U == 0U && r > 0U)\n  {\n    ite = 64U;\n  }\n  else\n  {\n    ite = r % 64U;\n  }\n  uint8_t *buf_last = buf_1 + r - ite;\n  uint8_t *buf_multi = buf_1;\n  Hacl_Hash_MD5_update_multi(tmp_block_state, buf_multi, 0U);\n  uint64_t prev_len_last = total_len - (uint64_t)r;\n  Hacl_Hash_MD5_update_last(tmp_block_state, prev_len_last, buf_last, r);\n  Hacl_Hash_MD5_finish(tmp_block_state, output);\n}\n\nvoid Hacl_Hash_MD5_free(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint32_t *block_state = scrut.block_state;\n  KRML_HOST_FREE(block_state);\n  KRML_HOST_FREE(buf);\n  KRML_HOST_FREE(state);\n}\n\nHacl_Streaming_MD_state_32 *Hacl_Hash_MD5_copy(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint32_t *block_state0 = scrut.block_state;\n  uint8_t *buf0 = scrut.buf;\n  uint64_t total_len0 = scrut.total_len;\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(64U, sizeof (uint8_t));\n  memcpy(buf, buf0, 64U * sizeof (uint8_t));\n  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(4U, sizeof (uint32_t));\n  memcpy(block_state, block_state0, 4U * sizeof (uint32_t));\n  Hacl_Streaming_MD_state_32\n  s = { .block_state = block_state, .buf = buf, .total_len = total_len0 };\n  Hacl_Streaming_MD_state_32\n  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n  p[0U] = s;\n  return p;\n}\n\nvoid Hacl_Hash_MD5_hash(uint8_t *output, uint8_t *input, uint32_t input_len)\n{\n  Hacl_Hash_MD5_hash_oneshot(output, input, input_len);\n}\n\n"}, "sourceLanguage": "c"}], "results": [{"ruleId": "-Wanalyzer-possible-null-dereference", "taxa": [{"id": "690", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "dereference of possibly-NULL 's'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 47, "startColumn": 3, "endColumn": 4}, "contextRegion": {"startLine": 47, "snippet": {"text": "  KRML_MAYBE_FOR4(i, 0U, 4U, 1U, s[i] = _h0[i];);\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_init", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_init", "decoratedName": "python_hashlib_Hacl_Hash_MD5_init", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1166, "startColumn": 29, "endColumn": 30}, "contextRegion": {"startLine": 1166, "snippet": {"text": "Hacl_Streaming_MD_state_32 *Hacl_Hash_MD5_malloc(void)\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_malloc", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_malloc", "decoratedName": "python_hashlib_Hacl_Hash_MD5_malloc", "kind": "function"}], "message": {"text": "entry to 'python_hashlib_Hacl_Hash_MD5_malloc'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1169, "startColumn": 39, "endColumn": 78}, "contextRegion": {"startLine": 1169, "snippet": {"text": "  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(4U, sizeof (uint32_t));\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_malloc", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_malloc", "decoratedName": "python_hashlib_Hacl_Hash_MD5_malloc", "kind": "function"}], "message": {"text": "this call could return NULL"}}, "kinds": ["acquire", "memory"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1175, "startColumn": 3, "endColumn": 34}, "contextRegion": {"startLine": 1175, "snippet": {"text": "  Hacl_Hash_MD5_init(block_state);\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_malloc", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_malloc", "decoratedName": "python_hashlib_Hacl_Hash_MD5_malloc", "kind": "function"}], "message": {"text": "calling 'python_hashlib_Hacl_Hash_MD5_init' from 'python_hashlib_Hacl_Hash_MD5_malloc'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 45, "startColumn": 6, "endColumn": 7}, "contextRegion": {"startLine": 45, "snippet": {"text": "void Hacl_Hash_MD5_init(uint32_t *s)\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_init", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_init", "decoratedName": "python_hashlib_Hacl_Hash_MD5_init", "kind": "function"}], "message": {"text": "entry to 'python_hashlib_Hacl_Hash_MD5_init'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 47, "startColumn": 3, "endColumn": 4}, "contextRegion": {"startLine": 47, "snippet": {"text": "  KRML_MAYBE_FOR4(i, 0U, 4U, 1U, s[i] = _h0[i];);\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_init", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_init", "decoratedName": "python_hashlib_Hacl_Hash_MD5_init", "kind": "function"}], "message": {"text": "'s' could be NULL: unchecked value from (2)"}}, "kinds": ["danger"], "nestingLevel": 2}]}]}]}, {"ruleId": "-Wanalyzer-possible-null-dereference", "taxa": [{"id": "690", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "dereference of possibly-NULL 'p'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1174, "startColumn": 3, "endColumn": 12}, "contextRegion": {"startLine": 1174, "snippet": {"text": "  p[0U] = s;\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_malloc", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_malloc", "decoratedName": "python_hashlib_Hacl_Hash_MD5_malloc", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1173, "startColumn": 38, "endColumn": 91}, "contextRegion": {"startLine": 1173, "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_malloc", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_malloc", "decoratedName": "python_hashlib_Hacl_Hash_MD5_malloc", "kind": "function"}], "message": {"text": "this call could return NULL"}}, "kinds": ["acquire", "memory"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1174, "startColumn": 3, "endColumn": 12}, "contextRegion": {"startLine": 1174, "snippet": {"text": "  p[0U] = s;\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_malloc", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_malloc", "decoratedName": "python_hashlib_Hacl_Hash_MD5_malloc", "kind": "function"}], "message": {"text": "'p' could be NULL: unchecked value from (1)"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}, {"ruleId": "-Wanalyzer-possible-null-dereference", "taxa": [{"id": "690", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "dereference of possibly-NULL 'p'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1422, "startColumn": 3, "endColumn": 12}, "contextRegion": {"startLine": 1422, "snippet": {"text": "  p[0U] = s;\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_copy", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_copy", "decoratedName": "python_hashlib_Hacl_Hash_MD5_copy", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1421, "startColumn": 38, "endColumn": 91}, "contextRegion": {"startLine": 1421, "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_copy", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_copy", "decoratedName": "python_hashlib_Hacl_Hash_MD5_copy", "kind": "function"}], "message": {"text": "this call could return NULL"}}, "kinds": ["acquire", "memory"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_MD5.c", "uriBaseId": "PWD"}, "region": {"startLine": 1422, "startColumn": 3, "endColumn": 12}, "contextRegion": {"startLine": 1422, "snippet": {"text": "  p[0U] = s;\n"}}}, "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_MD5_copy", "fullyQualifiedName": "python_hashlib_Hacl_Hash_MD5_copy", "decoratedName": "python_hashlib_Hacl_Hash_MD5_copy", "kind": "function"}], "message": {"text": "'p' could be NULL: unchecked value from (1)"}}, "kinds": ["danger"], "nestingLevel": 1}]}]}]}]}]}
