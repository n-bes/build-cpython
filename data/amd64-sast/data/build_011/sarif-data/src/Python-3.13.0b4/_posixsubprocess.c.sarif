{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "GNU C11", "fullName": "GNU C11 (Ubuntu 13.2.0-23ubuntu4) version 13.2.0 (x86_64-linux-gnu)", "version": "13.2.0", "informationUri": "https://gcc.gnu.org/gcc-13/", "rules": [{"id": "-Wanalyzer-fd-leak", "helpUri": "https://gcc.gnu.org/onlinedocs/gcc/Static-Analyzer-Options.html#index-Wanalyzer-fd-leak"}]}}, "taxonomies": [{"name": "CWE", "version": "4.7", "organization": "MITRE", "shortDescription": {"text": "The MITRE Common Weakness Enumeration"}, "taxa": [{"id": "775", "helpUri": "https://cwe.mitre.org/data/definitions/775.html"}]}], "invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}}, "artifacts": [{"location": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "contents": {"text": "/* Authors: Gregory P. Smith & Jeffrey Yasskin */\n#ifndef Py_BUILD_CORE_BUILTIN\n#  define Py_BUILD_CORE_MODULE 1\n#endif\n\n#include \"Python.h\"\n#include \"pycore_fileutils.h\"\n#include \"pycore_pystate.h\"\n#include \"pycore_signal.h\"        // _Py_RestoreSignals()\n#if defined(HAVE_PIPE2) && !defined(_GNU_SOURCE)\n#  define _GNU_SOURCE\n#endif\n#include <unistd.h>               // close()\n#include <fcntl.h>                // fcntl()\n#ifdef HAVE_SYS_TYPES_H\n#  include <sys/types.h>\n#endif\n#if defined(HAVE_SYS_STAT_H)\n#  include <sys/stat.h>           // stat()\n#endif\n#ifdef HAVE_SYS_SYSCALL_H\n#  include <sys/syscall.h>\n#endif\n#if defined(HAVE_SYS_RESOURCE_H)\n#  include <sys/resource.h>\n#endif\n#ifdef HAVE_DIRENT_H\n#  include <dirent.h>             // opendir()\n#endif\n#if defined(HAVE_SETGROUPS)\n#  include <grp.h>                // setgroups()\n#endif\n\n#include \"posixmodule.h\"\n\n#ifdef _Py_MEMORY_SANITIZER\n# include <sanitizer/msan_interface.h>\n#endif\n\n#if defined(__ANDROID__) && __ANDROID_API__ < 21 && !defined(SYS_getdents64)\n# include <sys/linux-syscalls.h>\n# define SYS_getdents64  __NR_getdents64\n#endif\n\n#if defined(__linux__) && defined(HAVE_VFORK) && defined(HAVE_SIGNAL_H) && \\\n    defined(HAVE_PTHREAD_SIGMASK) && !defined(HAVE_BROKEN_PTHREAD_SIGMASK)\n/* If this is ever expanded to non-Linux platforms, verify what calls are\n * allowed after vfork(). Ex: setsid() may be disallowed on macOS? */\n# include <signal.h>\n# define VFORK_USABLE 1\n#endif\n\n#if defined(__sun) && defined(__SVR4)\n/* readdir64 is used to work around Solaris 9 bug 6395699. */\n# define readdir readdir64\n# define dirent dirent64\n# if !defined(HAVE_DIRFD)\n/* Some versions of Solaris lack dirfd(). */\n#  define dirfd(dirp) ((dirp)->dd_fd)\n#  define HAVE_DIRFD\n# endif\n#endif\n\n#if defined(__FreeBSD__) || (defined(__APPLE__) && defined(__MACH__)) || defined(__DragonFly__)\n# define FD_DIR \"/dev/fd\"\n#else\n# define FD_DIR \"/proc/self/fd\"\n#endif\n\n#ifdef NGROUPS_MAX\n#define MAX_GROUPS NGROUPS_MAX\n#else\n#define MAX_GROUPS 64\n#endif\n\n#define POSIX_CALL(call)   do { if ((call) == -1) goto error; } while (0)\n\nstatic struct PyModuleDef _posixsubprocessmodule;\n\n/*[clinic input]\nmodule _posixsubprocess\n[clinic start generated code]*/\n/*[clinic end generated code: output=da39a3ee5e6b4b0d input=c62211df27cf7334]*/\n\n/*[python input]\nclass pid_t_converter(CConverter):\n    type = 'pid_t'\n    format_unit = '\" _Py_PARSE_PID \"'\n\n    def parse_arg(self, argname, displayname, *, limited_capi):\n        return self.format_code(\"\"\"\n            {paramname} = PyLong_AsPid({argname});\n            if ({paramname} == -1 && PyErr_Occurred()) {{{{\n                goto exit;\n            }}}}\n            \"\"\",\n            argname=argname)\n[python start generated code]*/\n/*[python end generated code: output=da39a3ee5e6b4b0d input=c94349aa1aad151d]*/\n\n#include \"clinic/_posixsubprocess.c.h\"\n\n/* Convert ASCII to a positive int, no libc call. no overflow. -1 on error. */\nstatic int\n_pos_int_from_ascii(const char *name)\n{\n    int num = 0;\n    while (*name >= '0' && *name <= '9') {\n        num = num * 10 + (*name - '0');\n        ++name;\n    }\n    if (*name)\n        return -1;  /* Non digit found, not a number. */\n    return num;\n}\n\n\n#if defined(__FreeBSD__) || defined(__DragonFly__)\n/* When /dev/fd isn't mounted it is often a static directory populated\n * with 0 1 2 or entries for 0 .. 63 on FreeBSD, NetBSD, OpenBSD and DragonFlyBSD.\n * NetBSD and OpenBSD have a /proc fs available (though not necessarily\n * mounted) and do not have fdescfs for /dev/fd.  MacOS X has a devfs\n * that properly supports /dev/fd.\n */\nstatic int\n_is_fdescfs_mounted_on_dev_fd(void)\n{\n    struct stat dev_stat;\n    struct stat dev_fd_stat;\n    if (stat(\"/dev\", &dev_stat) != 0)\n        return 0;\n    if (stat(FD_DIR, &dev_fd_stat) != 0)\n        return 0;\n    if (dev_stat.st_dev == dev_fd_stat.st_dev)\n        return 0;  /* / == /dev == /dev/fd means it is static. #fail */\n    return 1;\n}\n#endif\n\n\n/* Returns 1 if there is a problem with fd_sequence, 0 otherwise. */\nstatic int\n_sanity_check_python_fd_sequence(PyObject *fd_sequence)\n{\n    Py_ssize_t seq_idx;\n    long prev_fd = -1;\n    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n        PyObject* py_fd = PyTuple_GET_ITEM(fd_sequence, seq_idx);\n        long iter_fd;\n        if (!PyLong_Check(py_fd)) {\n            return 1;\n        }\n        iter_fd = PyLong_AsLong(py_fd);\n        if (iter_fd < 0 || iter_fd <= prev_fd || iter_fd > INT_MAX) {\n            /* Negative, overflow, unsorted, too big for a fd. */\n            return 1;\n        }\n        prev_fd = iter_fd;\n    }\n    return 0;\n}\n\n\n/* Is fd found in the sorted Python Sequence? */\nstatic int\n_is_fd_in_sorted_fd_sequence(int fd, int *fd_sequence,\n                             Py_ssize_t fd_sequence_len)\n{\n    /* Binary search. */\n    Py_ssize_t search_min = 0;\n    Py_ssize_t search_max = fd_sequence_len - 1;\n    if (search_max < 0)\n        return 0;\n    do {\n        long middle = (search_min + search_max) / 2;\n        long middle_fd = fd_sequence[middle];\n        if (fd == middle_fd)\n            return 1;\n        if (fd > middle_fd)\n            search_min = middle + 1;\n        else\n            search_max = middle - 1;\n    } while (search_min <= search_max);\n    return 0;\n}\n\n\n// Forward declaration\nstatic void _Py_FreeCharPArray(char *const array[]);\n\n/*\n * Flatten a sequence of bytes() objects into a C array of\n * NULL terminated string pointers with a NULL char* terminating the array.\n * (ie: an argv or env list)\n *\n * Memory allocated for the returned list is allocated using PyMem_Malloc()\n * and MUST be freed by _Py_FreeCharPArray().\n */\nstatic char *const *\n_PySequence_BytesToCharpArray(PyObject* self)\n{\n    char **array;\n    Py_ssize_t i, argc;\n    PyObject *item = NULL;\n    Py_ssize_t size;\n\n    argc = PySequence_Size(self);\n    if (argc == -1)\n        return NULL;\n\n    assert(argc >= 0);\n\n    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    array = PyMem_Malloc((argc + 1) * sizeof(char *));\n    if (array == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    for (i = 0; i < argc; ++i) {\n        char *data;\n        item = PySequence_GetItem(self, i);\n        if (item == NULL) {\n            /* NULL terminate before freeing. */\n            array[i] = NULL;\n            goto fail;\n        }\n        /* check for embedded null bytes */\n        if (PyBytes_AsStringAndSize(item, &data, NULL) < 0) {\n            /* NULL terminate before freeing. */\n            array[i] = NULL;\n            goto fail;\n        }\n        size = PyBytes_GET_SIZE(item) + 1;\n        array[i] = PyMem_Malloc(size);\n        if (!array[i]) {\n            PyErr_NoMemory();\n            goto fail;\n        }\n        memcpy(array[i], data, size);\n        Py_DECREF(item);\n    }\n    array[argc] = NULL;\n\n    return array;\n\nfail:\n    Py_XDECREF(item);\n    _Py_FreeCharPArray(array);\n    return NULL;\n}\n\n\n/* Free's a NULL terminated char** array of C strings. */\nstatic void\n_Py_FreeCharPArray(char *const array[])\n{\n    Py_ssize_t i;\n    for (i = 0; array[i] != NULL; ++i) {\n        PyMem_Free(array[i]);\n    }\n    PyMem_Free((void*)array);\n}\n\n\n/*\n * Do all the Python C API calls in the parent process to turn the pass_fds\n * \"py_fds_to_keep\" tuple into a C array.  The caller owns allocation and\n * freeing of the array.\n *\n * On error an unknown number of array elements may have been filled in.\n * A Python exception has been set when an error is returned.\n *\n * Returns: -1 on error, 0 on success.\n */\nstatic int\nconvert_fds_to_keep_to_c(PyObject *py_fds_to_keep, int *c_fds_to_keep)\n{\n    Py_ssize_t i, len;\n\n    len = PyTuple_GET_SIZE(py_fds_to_keep);\n    for (i = 0; i < len; ++i) {\n        PyObject* fdobj = PyTuple_GET_ITEM(py_fds_to_keep, i);\n        long fd = PyLong_AsLong(fdobj);\n        if (fd == -1 && PyErr_Occurred()) {\n            return -1;\n        }\n        if (fd < 0 || fd > INT_MAX) {\n            PyErr_SetString(PyExc_ValueError,\n                            \"fd out of range in fds_to_keep.\");\n            return -1;\n        }\n        c_fds_to_keep[i] = (int)fd;\n    }\n    return 0;\n}\n\n\n/* This function must be async-signal-safe as it is called from child_exec()\n * after fork() or vfork().\n */\nstatic int\nmake_inheritable(int *c_fds_to_keep, Py_ssize_t len, int errpipe_write)\n{\n    Py_ssize_t i;\n\n    for (i = 0; i < len; ++i) {\n        int fd = c_fds_to_keep[i];\n        if (fd == errpipe_write) {\n            /* errpipe_write is part of fds_to_keep. It must be closed at\n               exec(), but kept open in the child process until exec() is\n               called. */\n            continue;\n        }\n        if (_Py_set_inheritable_async_safe(fd, 1, NULL) < 0)\n            return -1;\n    }\n    return 0;\n}\n\n\n/* Get the maximum file descriptor that could be opened by this process.\n * This function is async signal safe for use between fork() and exec().\n */\nstatic long\nsafe_get_max_fd(void)\n{\n    long local_max_fd;\n#if defined(__NetBSD__)\n    local_max_fd = fcntl(0, F_MAXFD);\n    if (local_max_fd >= 0)\n        return local_max_fd;\n#endif\n#if defined(HAVE_SYS_RESOURCE_H) && defined(__OpenBSD__)\n    struct rlimit rl;\n    /* Not on the POSIX async signal safe functions list but likely\n     * safe.  TODO - Someone should audit OpenBSD to make sure. */\n    if (getrlimit(RLIMIT_NOFILE, &rl) >= 0)\n        return (long) rl.rlim_max;\n#endif\n#ifdef _SC_OPEN_MAX\n    local_max_fd = sysconf(_SC_OPEN_MAX);\n    if (local_max_fd == -1)\n#endif\n        local_max_fd = 256;  /* Matches legacy Lib/subprocess.py behavior. */\n    return local_max_fd;\n}\n\n\n/* Close all file descriptors in the given range except for those in\n * fds_to_keep by invoking closer on each subrange.\n *\n * If end_fd == -1, it's guessed via safe_get_max_fd(), but it isn't\n * possible to know for sure what the max fd to go up to is for\n * processes with the capability of raising their maximum, or in case\n * a process opened a high fd and then lowered its maximum.\n */\nstatic int\n_close_range_except(int start_fd,\n                    int end_fd,\n                    int *fds_to_keep,\n                    Py_ssize_t fds_to_keep_len,\n                    int (*closer)(int, int))\n{\n    if (end_fd == -1) {\n        end_fd = Py_MIN(safe_get_max_fd(), INT_MAX);\n    }\n    Py_ssize_t keep_seq_idx;\n    /* As fds_to_keep is sorted we can loop through the list closing\n     * fds in between any in the keep list falling within our range. */\n    for (keep_seq_idx = 0; keep_seq_idx < fds_to_keep_len; ++keep_seq_idx) {\n        int keep_fd = fds_to_keep[keep_seq_idx];\n        if (keep_fd < start_fd)\n            continue;\n        if (closer(start_fd, keep_fd - 1) != 0)\n            return -1;\n        start_fd = keep_fd + 1;\n    }\n    if (start_fd <= end_fd) {\n        if (closer(start_fd, end_fd) != 0)\n            return -1;\n    }\n    return 0;\n}\n\n#if defined(__linux__) && defined(HAVE_SYS_SYSCALL_H)\n/* It doesn't matter if d_name has room for NAME_MAX chars; we're using this\n * only to read a directory of short file descriptor number names.  The kernel\n * will return an error if we didn't give it enough space.  Highly Unlikely.\n * This structure is very old and stable: It will not change unless the kernel\n * chooses to break compatibility with all existing binaries.  Highly Unlikely.\n */\nstruct linux_dirent64 {\n   unsigned long long d_ino;\n   long long d_off;\n   unsigned short d_reclen;     /* Length of this linux_dirent */\n   unsigned char  d_type;\n   char           d_name[256];  /* Filename (null-terminated) */\n};\n\nstatic int\n_brute_force_closer(int first, int last)\n{\n    for (int i = first; i <= last; i++) {\n        /* Ignore errors */\n        (void)close(i);\n    }\n    return 0;\n}\n\n/* Close all open file descriptors in the range from start_fd and higher\n * Do not close any in the sorted fds_to_keep list.\n *\n * This version is async signal safe as it does not make any unsafe C library\n * calls, malloc calls or handle any locks.  It is _unfortunate_ to be forced\n * to resort to making a kernel system call directly but this is the ONLY api\n * available that does no harm.  opendir/readdir/closedir perform memory\n * allocation and locking so while they usually work they are not guaranteed\n * to (especially if you have replaced your malloc implementation).  A version\n * of this function that uses those can be found in the _maybe_unsafe variant.\n *\n * This is Linux specific because that is all I am ready to test it on.  It\n * should be easy to add OS specific dirent or dirent64 structures and modify\n * it with some cpp #define magic to work on other OSes as well if you want.\n */\nstatic void\n_close_open_fds_safe(int start_fd, int *fds_to_keep, Py_ssize_t fds_to_keep_len)\n{\n    int fd_dir_fd;\n\n    fd_dir_fd = _Py_open_noraise(FD_DIR, O_RDONLY);\n    if (fd_dir_fd == -1) {\n        /* No way to get a list of open fds. */\n        _close_range_except(start_fd, -1,\n                            fds_to_keep, fds_to_keep_len,\n                            _brute_force_closer);\n        return;\n    } else {\n        char buffer[sizeof(struct linux_dirent64)];\n        int bytes;\n        while ((bytes = syscall(SYS_getdents64, fd_dir_fd,\n                                (struct linux_dirent64 *)buffer,\n                                sizeof(buffer))) > 0) {\n            struct linux_dirent64 *entry;\n            int offset;\n#ifdef _Py_MEMORY_SANITIZER\n            __msan_unpoison(buffer, bytes);\n#endif\n            for (offset = 0; offset < bytes; offset += entry->d_reclen) {\n                int fd;\n                entry = (struct linux_dirent64 *)(buffer + offset);\n                if ((fd = _pos_int_from_ascii(entry->d_name)) < 0)\n                    continue;  /* Not a number. */\n                if (fd != fd_dir_fd && fd >= start_fd &&\n                    !_is_fd_in_sorted_fd_sequence(fd, fds_to_keep,\n                                                  fds_to_keep_len)) {\n                    close(fd);\n                }\n            }\n        }\n        close(fd_dir_fd);\n    }\n}\n\n#define _close_open_fds_fallback _close_open_fds_safe\n\n#else  /* NOT (defined(__linux__) && defined(HAVE_SYS_SYSCALL_H)) */\n\nstatic int\n_unsafe_closer(int first, int last)\n{\n    _Py_closerange(first, last);\n    return 0;\n}\n\n/* Close all open file descriptors from start_fd and higher.\n * Do not close any in the sorted fds_to_keep tuple.\n *\n * This function violates the strict use of async signal safe functions. :(\n * It calls opendir(), readdir() and closedir().  Of these, the one most\n * likely to ever cause a problem is opendir() as it performs an internal\n * malloc().  Practically this should not be a problem.  The Java VM makes the\n * same calls between fork and exec in its own UNIXProcess_md.c implementation.\n *\n * readdir_r() is not used because it provides no benefit.  It is typically\n * implemented as readdir() followed by memcpy().  See also:\n *   http://womble.decadent.org.uk/readdir_r-advisory.html\n */\nstatic void\n_close_open_fds_maybe_unsafe(int start_fd, int *fds_to_keep,\n                             Py_ssize_t fds_to_keep_len)\n{\n    DIR *proc_fd_dir;\n#ifndef HAVE_DIRFD\n    while (_is_fd_in_sorted_fd_sequence(start_fd, fds_to_keep,\n                                        fds_to_keep_len)) {\n        ++start_fd;\n    }\n    /* Close our lowest fd before we call opendir so that it is likely to\n     * reuse that fd otherwise we might close opendir's file descriptor in\n     * our loop.  This trick assumes that fd's are allocated on a lowest\n     * available basis. */\n    close(start_fd);\n    ++start_fd;\n#endif\n\n#if defined(__FreeBSD__) || defined(__DragonFly__)\n    if (!_is_fdescfs_mounted_on_dev_fd())\n        proc_fd_dir = NULL;\n    else\n#endif\n        proc_fd_dir = opendir(FD_DIR);\n    if (!proc_fd_dir) {\n        /* No way to get a list of open fds. */\n        _close_range_except(start_fd, -1, fds_to_keep, fds_to_keep_len,\n                            _unsafe_closer);\n    } else {\n        struct dirent *dir_entry;\n#ifdef HAVE_DIRFD\n        int fd_used_by_opendir = dirfd(proc_fd_dir);\n#else\n        int fd_used_by_opendir = start_fd - 1;\n#endif\n        errno = 0;\n        while ((dir_entry = readdir(proc_fd_dir))) {\n            int fd;\n            if ((fd = _pos_int_from_ascii(dir_entry->d_name)) < 0)\n                continue;  /* Not a number. */\n            if (fd != fd_used_by_opendir && fd >= start_fd &&\n                !_is_fd_in_sorted_fd_sequence(fd, fds_to_keep,\n                                              fds_to_keep_len)) {\n                close(fd);\n            }\n            errno = 0;\n        }\n        if (errno) {\n            /* readdir error, revert behavior. Highly Unlikely. */\n            _close_range_except(start_fd, -1, fds_to_keep, fds_to_keep_len,\n                                _unsafe_closer);\n        }\n        closedir(proc_fd_dir);\n    }\n}\n\n#define _close_open_fds_fallback _close_open_fds_maybe_unsafe\n\n#endif  /* else NOT (defined(__linux__) && defined(HAVE_SYS_SYSCALL_H)) */\n\n/* We can use close_range() library function only if it's known to be\n * async-signal-safe.\n *\n * On Linux, glibc explicitly documents it to be a thin wrapper over\n * the system call, and other C libraries are likely to follow glibc.\n */\n#if defined(HAVE_CLOSE_RANGE) && \\\n    (defined(__linux__) || defined(__FreeBSD__))\n#define HAVE_ASYNC_SAFE_CLOSE_RANGE\n\nstatic int\n_close_range_closer(int first, int last)\n{\n    return close_range(first, last, 0);\n}\n#endif\n\nstatic void\n_close_open_fds(int start_fd, int *fds_to_keep, Py_ssize_t fds_to_keep_len)\n{\n#ifdef HAVE_ASYNC_SAFE_CLOSE_RANGE\n    if (_close_range_except(\n            start_fd, INT_MAX, fds_to_keep, fds_to_keep_len,\n            _close_range_closer) == 0) {\n        return;\n    }\n#endif\n    _close_open_fds_fallback(start_fd, fds_to_keep, fds_to_keep_len);\n}\n\n#ifdef VFORK_USABLE\n/* Reset dispositions for all signals to SIG_DFL except for ignored\n * signals. This way we ensure that no signal handlers can run\n * after we unblock signals in a child created by vfork().\n */\nstatic void\nreset_signal_handlers(const sigset_t *child_sigmask)\n{\n    struct sigaction sa_dfl = {.sa_handler = SIG_DFL};\n    for (int sig = 1; sig < _NSIG; sig++) {\n        /* Dispositions for SIGKILL and SIGSTOP can't be changed. */\n        if (sig == SIGKILL || sig == SIGSTOP) {\n            continue;\n        }\n\n        /* There is no need to reset the disposition of signals that will\n         * remain blocked across execve() since the kernel will do it. */\n        if (sigismember(child_sigmask, sig) == 1) {\n            continue;\n        }\n\n        struct sigaction sa;\n        /* C libraries usually return EINVAL for signals used\n         * internally (e.g. for thread cancellation), so simply\n         * skip errors here. */\n        if (sigaction(sig, NULL, &sa) == -1) {\n            continue;\n        }\n\n        /* void *h works as these fields are both pointer types already. */\n        void *h = (sa.sa_flags & SA_SIGINFO ? (void *)sa.sa_sigaction :\n                                              (void *)sa.sa_handler);\n        if (h == SIG_IGN || h == SIG_DFL) {\n            continue;\n        }\n\n        /* This call can't reasonably fail, but if it does, terminating\n         * the child seems to be too harsh, so ignore errors. */\n        (void) sigaction(sig, &sa_dfl, NULL);\n    }\n}\n#endif /* VFORK_USABLE */\n\n\n/*\n * This function is code executed in the child process immediately after\n * (v)fork to set things up and call exec().\n *\n * All of the code in this function must only use async-signal-safe functions,\n * listed at `man 7 signal` or\n * http://www.opengroup.org/onlinepubs/009695399/functions/xsh_chap02_04.html.\n *\n * This restriction is documented at\n * http://www.opengroup.org/onlinepubs/009695399/functions/fork.html.\n *\n * If this function is called after vfork(), even more care must be taken.\n * The lack of preparations that C libraries normally take on fork(),\n * as well as sharing the address space with the parent, might make even\n * async-signal-safe functions vfork-unsafe. In particular, on Linux,\n * set*id() and setgroups() library functions must not be called, since\n * they have to interact with the library-level thread list and send\n * library-internal signals to implement per-process credentials semantics\n * required by POSIX but not supported natively on Linux. Another reason to\n * avoid this family of functions is that sharing an address space between\n * processes running with different privileges is inherently insecure.\n * See https://bugs.python.org/issue35823 for discussion and references.\n *\n * In some C libraries, setrlimit() has the same thread list/signalling\n * behavior since resource limits were per-thread attributes before\n * Linux 2.6.10. Musl, as of 1.2.1, is known to have this issue\n * (https://www.openwall.com/lists/musl/2020/10/15/6).\n *\n * If vfork-unsafe functionality is desired after vfork(), consider using\n * syscall() to obtain it.\n */\nPy_NO_INLINE static void\nchild_exec(char *const exec_array[],\n           char *const argv[],\n           char *const envp[],\n           const char *cwd,\n           int p2cread, int p2cwrite,\n           int c2pread, int c2pwrite,\n           int errread, int errwrite,\n           int errpipe_read, int errpipe_write,\n           int close_fds, int restore_signals,\n           int call_setsid, pid_t pgid_to_set,\n           gid_t gid,\n           Py_ssize_t extra_group_size, const gid_t *extra_groups,\n           uid_t uid, int child_umask,\n           const void *child_sigmask,\n           int *fds_to_keep, Py_ssize_t fds_to_keep_len,\n           PyObject *preexec_fn,\n           PyObject *preexec_fn_args_tuple)\n{\n    int i, saved_errno;\n    PyObject *result;\n    /* Indicate to the parent that the error happened before exec(). */\n    const char *err_msg = \"noexec\";\n    /* Buffer large enough to hold a hex integer.  We can't malloc. */\n    char hex_errno[sizeof(saved_errno)*2+1];\n\n    if (make_inheritable(fds_to_keep, fds_to_keep_len, errpipe_write) < 0)\n        goto error;\n\n    /* Close parent's pipe ends. */\n    if (p2cwrite != -1)\n        POSIX_CALL(close(p2cwrite));\n    if (c2pread != -1)\n        POSIX_CALL(close(c2pread));\n    if (errread != -1)\n        POSIX_CALL(close(errread));\n    POSIX_CALL(close(errpipe_read));\n\n    /* When duping fds, if there arises a situation where one of the fds is\n       either 0, 1 or 2, it is possible that it is overwritten (#12607). */\n    if (c2pwrite == 0) {\n        POSIX_CALL(c2pwrite = dup(c2pwrite));\n        /* issue32270 */\n        if (_Py_set_inheritable_async_safe(c2pwrite, 0, NULL) < 0) {\n            goto error;\n        }\n    }\n    while (errwrite == 0 || errwrite == 1) {\n        POSIX_CALL(errwrite = dup(errwrite));\n        /* issue32270 */\n        if (_Py_set_inheritable_async_safe(errwrite, 0, NULL) < 0) {\n            goto error;\n        }\n    }\n\n    /* Dup fds for child.\n       dup2() removes the CLOEXEC flag but we must do it ourselves if dup2()\n       would be a no-op (issue #10806). */\n    if (p2cread == 0) {\n        if (_Py_set_inheritable_async_safe(p2cread, 1, NULL) < 0)\n            goto error;\n    }\n    else if (p2cread != -1)\n        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n\n    if (c2pwrite == 1) {\n        if (_Py_set_inheritable_async_safe(c2pwrite, 1, NULL) < 0)\n            goto error;\n    }\n    else if (c2pwrite != -1)\n        POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */\n\n    if (errwrite == 2) {\n        if (_Py_set_inheritable_async_safe(errwrite, 1, NULL) < 0)\n            goto error;\n    }\n    else if (errwrite != -1)\n        POSIX_CALL(dup2(errwrite, 2));  /* stderr */\n\n    /* We no longer manually close p2cread, c2pwrite, and errwrite here as\n     * _close_open_fds takes care when it is not already non-inheritable. */\n\n    if (cwd) {\n        if (chdir(cwd) == -1) {\n            err_msg = \"noexec:chdir\";\n            goto error;\n        }\n    }\n\n    if (child_umask >= 0)\n        umask(child_umask);  /* umask() always succeeds. */\n\n    if (restore_signals) {\n        _Py_RestoreSignals();\n    }\n\n#ifdef VFORK_USABLE\n    if (child_sigmask) {\n        reset_signal_handlers(child_sigmask);\n        if ((errno = pthread_sigmask(SIG_SETMASK, child_sigmask, NULL))) {\n            goto error;\n        }\n    }\n#endif\n\n#ifdef HAVE_SETSID\n    if (call_setsid)\n        POSIX_CALL(setsid());\n#endif\n\n#ifdef HAVE_SETPGID\n    static_assert(_Py_IS_TYPE_SIGNED(pid_t), \"pid_t is unsigned\");\n    if (pgid_to_set >= 0) {\n        POSIX_CALL(setpgid(0, pgid_to_set));\n    }\n#endif\n\n#ifdef HAVE_SETGROUPS\n    if (extra_group_size >= 0) {\n        assert((extra_group_size == 0) == (extra_groups == NULL));\n        POSIX_CALL(setgroups(extra_group_size, extra_groups));\n    }\n#endif /* HAVE_SETGROUPS */\n\n#ifdef HAVE_SETREGID\n    if (gid != (gid_t)-1)\n        POSIX_CALL(setregid(gid, gid));\n#endif /* HAVE_SETREGID */\n\n#ifdef HAVE_SETREUID\n    if (uid != (uid_t)-1)\n        POSIX_CALL(setreuid(uid, uid));\n#endif /* HAVE_SETREUID */\n\n\n    err_msg = \"\";\n    if (preexec_fn != Py_None && preexec_fn_args_tuple) {\n        /* This is where the user has asked us to deadlock their program. */\n        result = PyObject_Call(preexec_fn, preexec_fn_args_tuple, NULL);\n        if (result == NULL) {\n            /* Stringifying the exception or traceback would involve\n             * memory allocation and thus potential for deadlock.\n             * We've already faced potential deadlock by calling back\n             * into Python in the first place, so it probably doesn't\n             * matter but we avoid it to minimize the possibility. */\n            err_msg = \"Exception occurred in preexec_fn.\";\n            errno = 0;  /* We don't want to report an OSError. */\n            goto error;\n        }\n        /* Py_DECREF(result); - We're about to exec so why bother? */\n    }\n\n    /* close FDs after executing preexec_fn, which might open FDs */\n    if (close_fds) {\n        /* TODO HP-UX could use pstat_getproc() if anyone cares about it. */\n        _close_open_fds(3, fds_to_keep, fds_to_keep_len);\n    }\n\n    /* This loop matches the Lib/os.py _execvpe()'s PATH search when */\n    /* given the executable_list generated by Lib/subprocess.py.     */\n    saved_errno = 0;\n    for (i = 0; exec_array[i] != NULL; ++i) {\n        const char *executable = exec_array[i];\n        if (envp) {\n            execve(executable, argv, envp);\n        } else {\n            execv(executable, argv);\n        }\n        if (errno != ENOENT && errno != ENOTDIR && saved_errno == 0) {\n            saved_errno = errno;\n        }\n    }\n    /* Report the first exec error, not the last. */\n    if (saved_errno)\n        errno = saved_errno;\n\nerror:\n    saved_errno = errno;\n    /* Report the posix error to our parent process. */\n    /* We ignore all write() return values as the total size of our writes is\n       less than PIPEBUF and we cannot do anything about an error anyways.\n       Use _Py_write_noraise() to retry write() if it is interrupted by a\n       signal (fails with EINTR). */\n    if (saved_errno) {\n        char *cur;\n        _Py_write_noraise(errpipe_write, \"OSError:\", 8);\n        cur = hex_errno + sizeof(hex_errno);\n        while (saved_errno != 0 && cur != hex_errno) {\n            *--cur = Py_hexdigits[saved_errno % 16];\n            saved_errno /= 16;\n        }\n        _Py_write_noraise(errpipe_write, cur, hex_errno + sizeof(hex_errno) - cur);\n        _Py_write_noraise(errpipe_write, \":\", 1);\n        /* We can't call strerror(saved_errno).  It is not async signal safe.\n         * The parent process will look the error message up. */\n    } else {\n        _Py_write_noraise(errpipe_write, \"SubprocessError:0:\", 18);\n    }\n    _Py_write_noraise(errpipe_write, err_msg, strlen(err_msg));\n}\n\n\n/* The main purpose of this wrapper function is to isolate vfork() from both\n * subprocess_fork_exec() and child_exec(). A child process created via\n * vfork() executes on the same stack as the parent process while the latter is\n * suspended, so this function should not be inlined to avoid compiler bugs\n * that might clobber data needed by the parent later. Additionally,\n * child_exec() should not be inlined to avoid spurious -Wclobber warnings from\n * GCC (see bpo-35823).\n */\nPy_NO_INLINE static pid_t\ndo_fork_exec(char *const exec_array[],\n             char *const argv[],\n             char *const envp[],\n             const char *cwd,\n             int p2cread, int p2cwrite,\n             int c2pread, int c2pwrite,\n             int errread, int errwrite,\n             int errpipe_read, int errpipe_write,\n             int close_fds, int restore_signals,\n             int call_setsid, pid_t pgid_to_set,\n             gid_t gid,\n             Py_ssize_t extra_group_size, const gid_t *extra_groups,\n             uid_t uid, int child_umask,\n             const void *child_sigmask,\n             int *fds_to_keep, Py_ssize_t fds_to_keep_len,\n             PyObject *preexec_fn,\n             PyObject *preexec_fn_args_tuple)\n{\n\n    pid_t pid;\n\n#ifdef VFORK_USABLE\n    PyThreadState *vfork_tstate_save;\n    if (child_sigmask) {\n        /* These are checked by our caller; verify them in debug builds. */\n        assert(uid == (uid_t)-1);\n        assert(gid == (gid_t)-1);\n        assert(extra_group_size < 0);\n        assert(preexec_fn == Py_None);\n\n        /* Drop the GIL so that other threads can continue execution while this\n         * thread in the parent remains blocked per vfork-semantics on the\n         * child's exec syscall outcome. Exec does filesystem access which\n         * can take an arbitrarily long time. This addresses GH-104372.\n         *\n         * The vfork'ed child still runs in our address space. Per POSIX it\n         * must be limited to nothing but exec, but the Linux implementation\n         * is a little more usable. See the child_exec() comment - The child\n         * MUST NOT re-acquire the GIL.\n         */\n        vfork_tstate_save = PyEval_SaveThread();\n        pid = vfork();\n        if (pid != 0) {\n            // Not in the child process, reacquire the GIL.\n            PyEval_RestoreThread(vfork_tstate_save);\n        }\n        if (pid == (pid_t)-1) {\n            /* If vfork() fails, fall back to using fork(). When it isn't\n             * allowed in a process by the kernel, vfork can return -1\n             * with errno EINVAL. https://bugs.python.org/issue47151. */\n            pid = fork();\n        }\n    } else\n#endif\n    {\n        pid = fork();\n    }\n\n    if (pid != 0) {\n        // Parent process.\n        return pid;\n    }\n\n    /* Child process.\n     * See the comment above child_exec() for restrictions imposed on\n     * the code below.\n     */\n\n    if (preexec_fn != Py_None) {\n        /* We'll be calling back into Python later so we need to do this.\n         * This call may not be async-signal-safe but neither is calling\n         * back into Python.  The user asked us to use hope as a strategy\n         * to avoid deadlock... */\n        PyOS_AfterFork_Child();\n    }\n\n    child_exec(exec_array, argv, envp, cwd,\n               p2cread, p2cwrite, c2pread, c2pwrite,\n               errread, errwrite, errpipe_read, errpipe_write,\n               close_fds, restore_signals, call_setsid, pgid_to_set,\n               gid, extra_group_size, extra_groups,\n               uid, child_umask, child_sigmask,\n               fds_to_keep, fds_to_keep_len,\n               preexec_fn, preexec_fn_args_tuple);\n    _exit(255);\n    return 0;  /* Dead code to avoid a potential compiler warning. */\n}\n\n/*[clinic input]\n_posixsubprocess.fork_exec as subprocess_fork_exec\n    args as process_args: object\n    executable_list: object\n    close_fds: bool\n    pass_fds as py_fds_to_keep: object(subclass_of='&PyTuple_Type')\n    cwd as cwd_obj: object\n    env as env_list: object\n    p2cread: int\n    p2cwrite: int\n    c2pread: int\n    c2pwrite: int\n    errread: int\n    errwrite: int\n    errpipe_read: int\n    errpipe_write: int\n    restore_signals: bool\n    call_setsid: bool\n    pgid_to_set: pid_t\n    gid as gid_object: object\n    extra_groups as extra_groups_packed: object\n    uid as uid_object: object\n    child_umask: int\n    preexec_fn: object\n    allow_vfork: bool\n    /\n\nSpawn a fresh new child process.\n\nFork a child process, close parent file descriptors as appropriate in the\nchild and duplicate the few that are needed before calling exec() in the\nchild process.\n\nIf close_fds is True, close file descriptors 3 and higher, except those listed\nin the sorted tuple pass_fds.\n\nThe preexec_fn, if supplied, will be called immediately before closing file\ndescriptors and exec.\n\nWARNING: preexec_fn is NOT SAFE if your application uses threads.\n         It may trigger infrequent, difficult to debug deadlocks.\n\nIf an error occurs in the child process before the exec, it is\nserialized and written to the errpipe_write fd per subprocess.py.\n\nReturns: the child process's PID.\n\nRaises: Only on an error in the parent process.\n[clinic start generated code]*/\n\nstatic PyObject *\nsubprocess_fork_exec_impl(PyObject *module, PyObject *process_args,\n                          PyObject *executable_list, int close_fds,\n                          PyObject *py_fds_to_keep, PyObject *cwd_obj,\n                          PyObject *env_list, int p2cread, int p2cwrite,\n                          int c2pread, int c2pwrite, int errread,\n                          int errwrite, int errpipe_read, int errpipe_write,\n                          int restore_signals, int call_setsid,\n                          pid_t pgid_to_set, PyObject *gid_object,\n                          PyObject *extra_groups_packed,\n                          PyObject *uid_object, int child_umask,\n                          PyObject *preexec_fn, int allow_vfork)\n/*[clinic end generated code: output=7ee4f6ee5cf22b5b input=51757287ef266ffa]*/\n{\n    PyObject *converted_args = NULL, *fast_args = NULL;\n    PyObject *preexec_fn_args_tuple = NULL;\n    gid_t *extra_groups = NULL;\n    PyObject *cwd_obj2 = NULL;\n    const char *cwd = NULL;\n    pid_t pid = -1;\n    int need_to_reenable_gc = 0;\n    char *const *argv = NULL, *const *envp = NULL;\n    int need_after_fork = 0;\n    int saved_errno = 0;\n    int *c_fds_to_keep = NULL;\n    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    if ((preexec_fn != Py_None) &&\n        _PyInterpreterState_GetFinalizing(interp) != NULL)\n    {\n        PyErr_SetString(PyExc_PythonFinalizationError,\n                        \"preexec_fn not supported at interpreter shutdown\");\n        return NULL;\n    }\n    if ((preexec_fn != Py_None) && (interp != PyInterpreterState_Main())) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"preexec_fn not supported within subinterpreters\");\n        return NULL;\n    }\n\n    if (close_fds && errpipe_write < 3) {  /* precondition */\n        PyErr_SetString(PyExc_ValueError, \"errpipe_write must be >= 3\");\n        return NULL;\n    }\n    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n        PyErr_SetString(PyExc_ValueError, \"bad value(s) in fds_to_keep\");\n        return NULL;\n    }\n\n    /* We need to call gc.disable() when we'll be calling preexec_fn */\n    if (preexec_fn != Py_None) {\n        need_to_reenable_gc = PyGC_Disable();\n    }\n\n    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n    if (!exec_array)\n        goto cleanup;\n\n    /* Convert args and env into appropriate arguments for exec() */\n    /* These conversions are done in the parent process to avoid allocating\n       or freeing memory in the child process. */\n    if (process_args != Py_None) {\n        Py_ssize_t num_args;\n        /* Equivalent to:  */\n        /*  tuple(PyUnicode_FSConverter(arg) for arg in process_args)  */\n        fast_args = PySequence_Fast(process_args, \"argv must be a tuple\");\n        if (fast_args == NULL)\n            goto cleanup;\n        num_args = PySequence_Fast_GET_SIZE(fast_args);\n        converted_args = PyTuple_New(num_args);\n        if (converted_args == NULL)\n            goto cleanup;\n        for (Py_ssize_t arg_num = 0; arg_num < num_args; ++arg_num) {\n            PyObject *borrowed_arg, *converted_arg;\n            if (PySequence_Fast_GET_SIZE(fast_args) != num_args) {\n                PyErr_SetString(PyExc_RuntimeError, \"args changed during iteration\");\n                goto cleanup;\n            }\n            borrowed_arg = PySequence_Fast_GET_ITEM(fast_args, arg_num);\n            if (PyUnicode_FSConverter(borrowed_arg, &converted_arg) == 0)\n                goto cleanup;\n            PyTuple_SET_ITEM(converted_args, arg_num, converted_arg);\n        }\n\n        argv = _PySequence_BytesToCharpArray(converted_args);\n        Py_CLEAR(converted_args);\n        Py_CLEAR(fast_args);\n        if (!argv)\n            goto cleanup;\n    }\n\n    if (env_list != Py_None) {\n        envp = _PySequence_BytesToCharpArray(env_list);\n        if (!envp)\n            goto cleanup;\n    }\n\n    if (cwd_obj != Py_None) {\n        if (PyUnicode_FSConverter(cwd_obj, &cwd_obj2) == 0)\n            goto cleanup;\n        cwd = PyBytes_AsString(cwd_obj2);\n    }\n\n    // Special initial value meaning that subprocess API was called with\n    // extra_groups=None leading to _posixsubprocess.fork_exec(gids=None).\n    // We use this to differentiate between code desiring a setgroups(0, NULL)\n    // call vs no call at all.  The fast vfork() code path could be used when\n    // there is no setgroups call.\n    Py_ssize_t extra_group_size = -2;\n\n    if (extra_groups_packed != Py_None) {\n#ifdef HAVE_SETGROUPS\n        if (!PyList_Check(extra_groups_packed)) {\n            PyErr_SetString(PyExc_TypeError,\n                    \"setgroups argument must be a list\");\n            goto cleanup;\n        }\n        extra_group_size = PySequence_Size(extra_groups_packed);\n\n        if (extra_group_size < 0)\n            goto cleanup;\n\n        if (extra_group_size > MAX_GROUPS) {\n            PyErr_SetString(PyExc_ValueError, \"too many extra_groups\");\n            goto cleanup;\n        }\n\n        /* Deliberately keep extra_groups == NULL for extra_group_size == 0 */\n        if (extra_group_size > 0) {\n            extra_groups = PyMem_RawMalloc(extra_group_size * sizeof(gid_t));\n            if (extra_groups == NULL) {\n                PyErr_SetString(PyExc_MemoryError,\n                        \"failed to allocate memory for group list\");\n                goto cleanup;\n            }\n        }\n\n        for (Py_ssize_t i = 0; i < extra_group_size; i++) {\n            PyObject *elem;\n            elem = PySequence_GetItem(extra_groups_packed, i);\n            if (!elem)\n                goto cleanup;\n            if (!PyLong_Check(elem)) {\n                PyErr_SetString(PyExc_TypeError,\n                                \"extra_groups must be integers\");\n                Py_DECREF(elem);\n                goto cleanup;\n            } else {\n                gid_t gid;\n                if (!_Py_Gid_Converter(elem, &gid)) {\n                    Py_DECREF(elem);\n                    PyErr_SetString(PyExc_ValueError, \"invalid group id\");\n                    goto cleanup;\n                }\n                extra_groups[i] = gid;\n            }\n            Py_DECREF(elem);\n        }\n\n#else /* HAVE_SETGROUPS */\n        PyErr_BadInternalCall();\n        goto cleanup;\n#endif /* HAVE_SETGROUPS */\n    }\n\n    gid_t gid = (gid_t)-1;\n    if (gid_object != Py_None) {\n#ifdef HAVE_SETREGID\n        if (!_Py_Gid_Converter(gid_object, &gid))\n            goto cleanup;\n\n#else /* HAVE_SETREGID */\n        PyErr_BadInternalCall();\n        goto cleanup;\n#endif /* HAVE_SETREUID */\n    }\n\n    uid_t uid = (uid_t)-1;\n    if (uid_object != Py_None) {\n#ifdef HAVE_SETREUID\n        if (!_Py_Uid_Converter(uid_object, &uid))\n            goto cleanup;\n\n#else /* HAVE_SETREUID */\n        PyErr_BadInternalCall();\n        goto cleanup;\n#endif /* HAVE_SETREUID */\n    }\n\n    c_fds_to_keep = PyMem_Malloc(fds_to_keep_len * sizeof(int));\n    if (c_fds_to_keep == NULL) {\n        PyErr_SetString(PyExc_MemoryError, \"failed to malloc c_fds_to_keep\");\n        goto cleanup;\n    }\n    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n        goto cleanup;\n    }\n\n    /* This must be the last thing done before fork() because we do not\n     * want to call PyOS_BeforeFork() if there is any chance of another\n     * error leading to the cleanup: code without calling fork(). */\n    if (preexec_fn != Py_None) {\n        preexec_fn_args_tuple = PyTuple_New(0);\n        if (!preexec_fn_args_tuple)\n            goto cleanup;\n        PyOS_BeforeFork();\n        need_after_fork = 1;\n    }\n\n    /* NOTE: When old_sigmask is non-NULL, do_fork_exec() may use vfork(). */\n    const void *old_sigmask = NULL;\n#ifdef VFORK_USABLE\n    /* Use vfork() only if it's safe. See the comment above child_exec(). */\n    sigset_t old_sigs;\n    if (preexec_fn == Py_None && allow_vfork &&\n        uid == (uid_t)-1 && gid == (gid_t)-1 && extra_group_size < 0) {\n        /* Block all signals to ensure that no signal handlers are run in the\n         * child process while it shares memory with us. Note that signals\n         * used internally by C libraries won't be blocked by\n         * pthread_sigmask(), but signal handlers installed by C libraries\n         * normally service only signals originating from *within the process*,\n         * so it should be sufficient to consider any library function that\n         * might send such a signal to be vfork-unsafe and do not call it in\n         * the child.\n         */\n        sigset_t all_sigs;\n        sigfillset(&all_sigs);\n        if ((saved_errno = pthread_sigmask(SIG_BLOCK, &all_sigs, &old_sigs))) {\n            goto cleanup;\n        }\n        old_sigmask = &old_sigs;\n    }\n#endif\n\n    pid = do_fork_exec(exec_array, argv, envp, cwd,\n                       p2cread, p2cwrite, c2pread, c2pwrite,\n                       errread, errwrite, errpipe_read, errpipe_write,\n                       close_fds, restore_signals, call_setsid, pgid_to_set,\n                       gid, extra_group_size, extra_groups,\n                       uid, child_umask, old_sigmask,\n                       c_fds_to_keep, fds_to_keep_len,\n                       preexec_fn, preexec_fn_args_tuple);\n\n    /* Parent (original) process */\n    if (pid == (pid_t)-1) {\n        /* Capture errno for the exception. */\n        saved_errno = errno;\n    }\n\n#ifdef VFORK_USABLE\n    if (old_sigmask) {\n        /* vfork() semantics guarantees that the parent is blocked\n         * until the child performs _exit() or execve(), so it is safe\n         * to unblock signals once we're here.\n         * Note that in environments where vfork() is implemented as fork(),\n         * such as QEMU user-mode emulation, the parent won't be blocked,\n         * but it won't share the address space with the child,\n         * so it's still safe to unblock the signals.\n         *\n         * We don't handle errors here because this call can't fail\n         * if valid arguments are given, and because there is no good\n         * way for the caller to deal with a failure to restore\n         * the thread signal mask. */\n        (void) pthread_sigmask(SIG_SETMASK, old_sigmask, NULL);\n    }\n#endif\n\n    if (need_after_fork)\n        PyOS_AfterFork_Parent();\n\ncleanup:\n    if (c_fds_to_keep != NULL) {\n        PyMem_Free(c_fds_to_keep);\n    }\n\n    if (saved_errno != 0) {\n        errno = saved_errno;\n        /* We can't call this above as PyOS_AfterFork_Parent() calls back\n         * into Python code which would see the unreturned error. */\n        PyErr_SetFromErrno(PyExc_OSError);\n    }\n\n    Py_XDECREF(preexec_fn_args_tuple);\n    PyMem_RawFree(extra_groups);\n    Py_XDECREF(cwd_obj2);\n    if (envp)\n        _Py_FreeCharPArray(envp);\n    Py_XDECREF(converted_args);\n    Py_XDECREF(fast_args);\n    if (argv)\n        _Py_FreeCharPArray(argv);\n    if (exec_array)\n        _Py_FreeCharPArray(exec_array);\n\n    if (need_to_reenable_gc) {\n        PyGC_Enable();\n    }\n\n    return pid == -1 ? NULL : PyLong_FromPid(pid);\n}\n\n/* module level code ********************************************************/\n\nPyDoc_STRVAR(module_doc,\n\"A POSIX helper for the subprocess module.\");\n\nstatic PyMethodDef module_methods[] = {\n    SUBPROCESS_FORK_EXEC_METHODDEF\n    {NULL, NULL}  /* sentinel */\n};\n\nstatic PyModuleDef_Slot _posixsubprocess_slots[] = {\n    {Py_mod_multiple_interpreters, Py_MOD_PER_INTERPRETER_GIL_SUPPORTED},\n    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n    {0, NULL}\n};\n\nstatic struct PyModuleDef _posixsubprocessmodule = {\n        PyModuleDef_HEAD_INIT,\n        .m_name = \"_posixsubprocess\",\n        .m_doc = module_doc,\n        .m_size = 0,\n        .m_methods = module_methods,\n        .m_slots = _posixsubprocess_slots,\n};\n\nPyMODINIT_FUNC\nPyInit__posixsubprocess(void)\n{\n    return PyModuleDef_Init(&_posixsubprocessmodule);\n}\n"}, "sourceLanguage": "c"}, {"location": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "contents": {"text": "#ifndef Py_INTERNAL_PYSTATE_H\n#define Py_INTERNAL_PYSTATE_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef Py_BUILD_CORE\n#  error \"this header requires Py_BUILD_CORE define\"\n#endif\n\n#include \"pycore_freelist.h\"      // _PyFreeListState\n#include \"pycore_runtime.h\"       // _PyRuntime\n#include \"pycore_tstate.h\"        // _PyThreadStateImpl\n\n\n// Values for PyThreadState.state. A thread must be in the \"attached\" state\n// before calling most Python APIs. If the GIL is enabled, then \"attached\"\n// implies that the thread holds the GIL and \"detached\" implies that the\n// thread does not hold the GIL (or is in the process of releasing it). In\n// `--disable-gil` builds, multiple threads may be \"attached\" to the same\n// interpreter at the same time. Only the \"bound\" thread may perform the\n// transitions between \"attached\" and \"detached\" on its own PyThreadState.\n//\n// The \"suspended\" state is used to implement stop-the-world pauses, such as\n// for cyclic garbage collection. It is only used in `--disable-gil` builds.\n// The \"suspended\" state is similar to the \"detached\" state in that in both\n// states the thread is not allowed to call most Python APIs. However, unlike\n// the \"detached\" state, a thread may not transition itself out from the\n// \"suspended\" state. Only the thread performing a stop-the-world pause may\n// transition a thread from the \"suspended\" state back to the \"detached\" state.\n//\n// State transition diagram:\n//\n//            (bound thread)        (stop-the-world thread)\n// [attached]       <->       [detached]       <->       [suspended]\n//   |                                                        ^\n//   +---------------------------->---------------------------+\n//                          (bound thread)\n//\n// The (bound thread) and (stop-the-world thread) labels indicate which thread\n// is allowed to perform the transition.\n#define _Py_THREAD_DETACHED     0\n#define _Py_THREAD_ATTACHED     1\n#define _Py_THREAD_SUSPENDED    2\n\n\n/* Check if the current thread is the main thread.\n   Use _Py_IsMainInterpreter() to check if it's the main interpreter. */\nstatic inline int\n_Py_IsMainThread(void)\n{\n    unsigned long thread = PyThread_get_thread_ident();\n    return (thread == _PyRuntime.main_thread);\n}\n\n\nstatic inline PyInterpreterState *\n_PyInterpreterState_Main(void)\n{\n    return _PyRuntime.interpreters.main;\n}\n\nstatic inline int\n_Py_IsMainInterpreter(PyInterpreterState *interp)\n{\n    return (interp == _PyInterpreterState_Main());\n}\n\nstatic inline int\n_Py_IsMainInterpreterFinalizing(PyInterpreterState *interp)\n{\n    /* bpo-39877: Access _PyRuntime directly rather than using\n       tstate->interp->runtime to support calls from Python daemon threads.\n       After Py_Finalize() has been called, tstate can be a dangling pointer:\n       point to PyThreadState freed memory. */\n    return (_PyRuntimeState_GetFinalizing(&_PyRuntime) != NULL &&\n            interp == &_PyRuntime._main_interpreter);\n}\n\n// Export for _interpreters module.\nPyAPI_FUNC(PyObject *) _PyInterpreterState_GetIDObject(PyInterpreterState *);\n\n// Export for _interpreters module.\nPyAPI_FUNC(int) _PyInterpreterState_SetRunningMain(PyInterpreterState *);\nPyAPI_FUNC(void) _PyInterpreterState_SetNotRunningMain(PyInterpreterState *);\nPyAPI_FUNC(int) _PyInterpreterState_IsRunningMain(PyInterpreterState *);\nPyAPI_FUNC(int) _PyInterpreterState_FailIfRunningMain(PyInterpreterState *);\n\nextern int _PyThreadState_IsRunningMain(PyThreadState *);\nextern void _PyInterpreterState_ReinitRunningMain(PyThreadState *);\n\n\nstatic inline const PyConfig *\n_Py_GetMainConfig(void)\n{\n    PyInterpreterState *interp = _PyInterpreterState_Main();\n    if (interp == NULL) {\n        return NULL;\n    }\n    return _PyInterpreterState_GetConfig(interp);\n}\n\n\n/* Only handle signals on the main thread of the main interpreter. */\nstatic inline int\n_Py_ThreadCanHandleSignals(PyInterpreterState *interp)\n{\n    return (_Py_IsMainThread() && _Py_IsMainInterpreter(interp));\n}\n\n\n/* Variable and static inline functions for in-line access to current thread\n   and interpreter state */\n\n#if defined(HAVE_THREAD_LOCAL) && !defined(Py_BUILD_CORE_MODULE)\nextern _Py_thread_local PyThreadState *_Py_tss_tstate;\n#endif\n\n#ifndef NDEBUG\nextern int _PyThreadState_CheckConsistency(PyThreadState *tstate);\n#endif\n\nint _PyThreadState_MustExit(PyThreadState *tstate);\n\n// Export for most shared extensions, used via _PyThreadState_GET() static\n// inline function.\nPyAPI_FUNC(PyThreadState *) _PyThreadState_GetCurrent(void);\n\n/* Get the current Python thread state.\n\n   This function is unsafe: it does not check for error and it can return NULL.\n\n   The caller must hold the GIL.\n\n   See also PyThreadState_Get() and PyThreadState_GetUnchecked(). */\nstatic inline PyThreadState*\n_PyThreadState_GET(void)\n{\n#if defined(HAVE_THREAD_LOCAL) && !defined(Py_BUILD_CORE_MODULE)\n    return _Py_tss_tstate;\n#else\n    return _PyThreadState_GetCurrent();\n#endif\n}\n\n// Attaches the current thread to the interpreter.\n//\n// This may block while acquiring the GIL (if the GIL is enabled) or while\n// waiting for a stop-the-world pause (if the GIL is disabled).\n//\n// High-level code should generally call PyEval_RestoreThread() instead, which\n// calls this function.\nextern void _PyThreadState_Attach(PyThreadState *tstate);\n\n// Detaches the current thread from the interpreter.\n//\n// High-level code should generally call PyEval_SaveThread() instead, which\n// calls this function.\nextern void _PyThreadState_Detach(PyThreadState *tstate);\n\n// Detaches the current thread to the \"suspended\" state if a stop-the-world\n// pause is in progress.\n//\n// If there is no stop-the-world pause in progress, then the thread switches\n// to the \"detached\" state.\nextern void _PyThreadState_Suspend(PyThreadState *tstate);\n\n// Perform a stop-the-world pause for all threads in the all interpreters.\n//\n// Threads in the \"attached\" state are paused and transitioned to the \"GC\"\n// state. Threads in the \"detached\" state switch to the \"GC\" state, preventing\n// them from reattaching until the stop-the-world pause is complete.\n//\n// NOTE: This is a no-op outside of Py_GIL_DISABLED builds.\nextern void _PyEval_StopTheWorldAll(_PyRuntimeState *runtime);\nextern void _PyEval_StartTheWorldAll(_PyRuntimeState *runtime);\n\n// Perform a stop-the-world pause for threads in the specified interpreter.\n//\n// NOTE: This is a no-op outside of Py_GIL_DISABLED builds.\nextern void _PyEval_StopTheWorld(PyInterpreterState *interp);\nextern void _PyEval_StartTheWorld(PyInterpreterState *interp);\n\n\nstatic inline void\n_Py_EnsureFuncTstateNotNULL(const char *func, PyThreadState *tstate)\n{\n    if (tstate == NULL) {\n        _Py_FatalErrorFunc(func,\n            \"the function must be called with the GIL held, \"\n            \"after Python initialization and before Python finalization, \"\n            \"but the GIL is released (the current Python thread state is NULL)\");\n    }\n}\n\n// Call Py_FatalError() if tstate is NULL\n#define _Py_EnsureTstateNotNULL(tstate) \\\n    _Py_EnsureFuncTstateNotNULL(__func__, (tstate))\n\n\n/* Get the current interpreter state.\n\n   The function is unsafe: it does not check for error and it can return NULL.\n\n   The caller must hold the GIL.\n\n   See also PyInterpreterState_Get()\n   and _PyGILState_GetInterpreterStateUnsafe(). */\nstatic inline PyInterpreterState* _PyInterpreterState_GET(void) {\n    PyThreadState *tstate = _PyThreadState_GET();\n#ifdef Py_DEBUG\n    _Py_EnsureTstateNotNULL(tstate);\n#endif\n    return tstate->interp;\n}\n\n\n// PyThreadState functions\n\n// Export for _testinternalcapi\nPyAPI_FUNC(PyThreadState *) _PyThreadState_New(\n    PyInterpreterState *interp,\n    int whence);\nextern void _PyThreadState_Bind(PyThreadState *tstate);\nPyAPI_FUNC(PyThreadState *) _PyThreadState_NewBound(\n    PyInterpreterState *interp,\n    int whence);\nextern PyThreadState * _PyThreadState_RemoveExcept(PyThreadState *tstate);\nextern void _PyThreadState_DeleteList(PyThreadState *list);\nextern void _PyThreadState_ClearMimallocHeaps(PyThreadState *tstate);\n\n// Export for '_testinternalcapi' shared extension\nPyAPI_FUNC(PyObject*) _PyThreadState_GetDict(PyThreadState *tstate);\n\n/* The implementation of sys._current_exceptions()  Returns a dict mapping\n   thread id to that thread's current exception.\n*/\nextern PyObject* _PyThread_CurrentExceptions(void);\n\n\n/* Other */\n\nextern PyThreadState * _PyThreadState_Swap(\n    _PyRuntimeState *runtime,\n    PyThreadState *newts);\n\nextern PyStatus _PyInterpreterState_Enable(_PyRuntimeState *runtime);\n\n#ifdef HAVE_FORK\nextern PyStatus _PyInterpreterState_DeleteExceptMain(_PyRuntimeState *runtime);\nextern void _PySignal_AfterFork(void);\n#endif\n\n// Export for the stable ABI\nPyAPI_FUNC(int) _PyState_AddModule(\n    PyThreadState *tstate,\n    PyObject* module,\n    PyModuleDef* def);\n\n\nextern int _PyOS_InterruptOccurred(PyThreadState *tstate);\n\n#define HEAD_LOCK(runtime) \\\n    PyMutex_LockFlags(&(runtime)->interpreters.mutex, _Py_LOCK_DONT_DETACH)\n#define HEAD_UNLOCK(runtime) \\\n    PyMutex_Unlock(&(runtime)->interpreters.mutex)\n\n// Get the configuration of the current interpreter.\n// The caller must hold the GIL.\n// Export for test_peg_generator.\nPyAPI_FUNC(const PyConfig*) _Py_GetConfig(void);\n\n// Get the single PyInterpreterState used by this process' GILState\n// implementation.\n//\n// This function doesn't check for error. Return NULL before _PyGILState_Init()\n// is called and after _PyGILState_Fini() is called.\n//\n// See also PyInterpreterState_Get() and _PyInterpreterState_GET().\nextern PyInterpreterState* _PyGILState_GetInterpreterStateUnsafe(void);\n\nstatic inline struct _Py_object_freelists* _Py_object_freelists_GET(void)\n{\n    PyThreadState *tstate = _PyThreadState_GET();\n#ifdef Py_DEBUG\n    _Py_EnsureTstateNotNULL(tstate);\n#endif\n\n#ifdef Py_GIL_DISABLED\n    return &((_PyThreadStateImpl*)tstate)->freelists;\n#else\n    return &tstate->interp->object_state.freelists;\n#endif\n}\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_INTERNAL_PYSTATE_H */\n"}, "sourceLanguage": "c"}, {"location": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "contents": {"text": "#ifndef Py_OBJECT_H\n#define Py_OBJECT_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n/* Object and type object interface */\n\n/*\nObjects are structures allocated on the heap.  Special rules apply to\nthe use of objects to ensure they are properly garbage-collected.\nObjects are never allocated statically or on the stack; they must be\naccessed through special macros and functions only.  (Type objects are\nexceptions to the first rule; the standard types are represented by\nstatically initialized type objects, although work on type/class unification\nfor Python 2.2 made it possible to have heap-allocated type objects too).\n\nAn object has a 'reference count' that is increased or decreased when a\npointer to the object is copied or deleted; when the reference count\nreaches zero there are no references to the object left and it can be\nremoved from the heap.\n\nAn object has a 'type' that determines what it represents and what kind\nof data it contains.  An object's type is fixed when it is created.\nTypes themselves are represented as objects; an object contains a\npointer to the corresponding type object.  The type itself has a type\npointer pointing to the object representing the type 'type', which\ncontains a pointer to itself!.\n\nObjects do not float around in memory; once allocated an object keeps\nthe same size and address.  Objects that must hold variable-size data\ncan contain pointers to variable-size parts of the object.  Not all\nobjects of the same type have the same size; but the size cannot change\nafter allocation.  (These restrictions are made so a reference to an\nobject can be simply a pointer -- moving an object would require\nupdating all the pointers, and changing an object's size would require\nmoving it if there was another object right next to it.)\n\nObjects are always accessed through pointers of the type 'PyObject *'.\nThe type 'PyObject' is a structure that only contains the reference count\nand the type pointer.  The actual memory allocated for an object\ncontains other data that can only be accessed after casting the pointer\nto a pointer to a longer structure type.  This longer type must start\nwith the reference count and type fields; the macro PyObject_HEAD should be\nused for this (to accommodate for future changes).  The implementation\nof a particular object type can cast the object pointer to the proper\ntype and back.\n\nA standard interface exists for objects that contain an array of items\nwhose size is determined when the object is allocated.\n*/\n\n/* Py_DEBUG implies Py_REF_DEBUG. */\n#if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)\n#  define Py_REF_DEBUG\n#endif\n\n/* PyObject_HEAD defines the initial segment of every PyObject. */\n#define PyObject_HEAD                   PyObject ob_base;\n\n/*\nImmortalization:\n\nThe following indicates the immortalization strategy depending on the amount\nof available bits in the reference count field. All strategies are backwards\ncompatible but the specific reference count value or immortalization check\nmight change depending on the specializations for the underlying system.\n\nProper deallocation of immortal instances requires distinguishing between\nstatically allocated immortal instances vs those promoted by the runtime to be\nimmortal. The latter should be the only instances that require\ncleanup during runtime finalization.\n*/\n\n#if SIZEOF_VOID_P > 4\n/*\nIn 64+ bit systems, an object will be marked as immortal by setting all of the\nlower 32 bits of the reference count field, which is equal to: 0xFFFFFFFF\n\nUsing the lower 32 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases will use saturated arithmetic, taking advantage of\nhaving all the lower 32 bits set, which will avoid the reference count to go\nbeyond the refcount limit. Immortality checks for reference count decreases will\nbe done by checking the bit sign flag in the lower 32 bits.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX)\n\n#else\n/*\nIn 32 bit systems, an object will be marked as immortal by setting all of the\nlower 30 bits of the reference count field, which is equal to: 0x3FFFFFFF\n\nUsing the lower 30 bits makes the value backwards compatible by allowing\nC-Extensions without the updated checks in Py_INCREF and Py_DECREF to safely\nincrease and decrease the objects reference count. The object would lose its\nimmortality, but the execution would still be correct.\n\nReference count increases and decreases will first go through an immortality\ncheck by comparing the reference count field to the immortality reference count.\n*/\n#define _Py_IMMORTAL_REFCNT _Py_CAST(Py_ssize_t, UINT_MAX >> 2)\n#endif\n\n// Py_GIL_DISABLED builds indicate immortal objects using `ob_ref_local`, which is\n// always 32-bits.\n#ifdef Py_GIL_DISABLED\n#define _Py_IMMORTAL_REFCNT_LOCAL UINT32_MAX\n#endif\n\n// Kept for backward compatibility. It was needed by Py_TRACE_REFS build.\n#define _PyObject_EXTRA_INIT\n\n/* Make all uses of PyObject_HEAD_INIT immortal.\n *\n * Statically allocated objects might be shared between\n * interpreters, so must be marked as immortal.\n */\n#if defined(Py_GIL_DISABLED)\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        0,                          \\\n        0,                          \\\n        { 0 },                      \\\n        0,                          \\\n        _Py_IMMORTAL_REFCNT_LOCAL,  \\\n        0,                          \\\n        (type),                     \\\n    },\n#else\n#define PyObject_HEAD_INIT(type)    \\\n    {                               \\\n        { _Py_IMMORTAL_REFCNT },    \\\n        (type)                      \\\n    },\n#endif\n\n#define PyVarObject_HEAD_INIT(type, size) \\\n    {                                     \\\n        PyObject_HEAD_INIT(type)          \\\n        (size)                            \\\n    },\n\n/* PyObject_VAR_HEAD defines the initial segment of all variable-size\n * container objects.  These end with a declaration of an array with 1\n * element, but enough space is malloc'ed so that the array actually\n * has room for ob_size elements.  Note that ob_size is an element count,\n * not necessarily a byte count.\n */\n#define PyObject_VAR_HEAD      PyVarObject ob_base;\n#define Py_INVALID_SIZE (Py_ssize_t)-1\n\n/* Nothing is actually declared to be a PyObject, but every pointer to\n * a Python object can be cast to a PyObject*.  This is inheritance built\n * by hand.  Similarly every pointer to a variable-size Python object can,\n * in addition, be cast to PyVarObject*.\n */\n#ifndef Py_GIL_DISABLED\nstruct _object {\n#if (defined(__GNUC__) || defined(__clang__)) \\\n        && !(defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L)\n    // On C99 and older, anonymous union is a GCC and clang extension\n    __extension__\n#endif\n#ifdef _MSC_VER\n    // Ignore MSC warning C4201: \"nonstandard extension used:\n    // nameless struct/union\"\n    __pragma(warning(push))\n    __pragma(warning(disable: 4201))\n#endif\n    union {\n       Py_ssize_t ob_refcnt;\n#if SIZEOF_VOID_P > 4\n       PY_UINT32_T ob_refcnt_split[2];\n#endif\n    };\n#ifdef _MSC_VER\n    __pragma(warning(pop))\n#endif\n\n    PyTypeObject *ob_type;\n};\n#else\n// Objects that are not owned by any thread use a thread id (tid) of zero.\n// This includes both immortal objects and objects whose reference count\n// fields have been merged.\n#define _Py_UNOWNED_TID             0\n\n// The shared reference count uses the two least-significant bits to store\n// flags. The remaining bits are used to store the reference count.\n#define _Py_REF_SHARED_SHIFT        2\n#define _Py_REF_SHARED_FLAG_MASK    0x3\n\n// The shared flags are initialized to zero.\n#define _Py_REF_SHARED_INIT         0x0\n#define _Py_REF_MAYBE_WEAKREF       0x1\n#define _Py_REF_QUEUED              0x2\n#define _Py_REF_MERGED              0x3\n\n// Create a shared field from a refcnt and desired flags\n#define _Py_REF_SHARED(refcnt, flags) (((refcnt) << _Py_REF_SHARED_SHIFT) + (flags))\n\nstruct _object {\n    // ob_tid stores the thread id (or zero). It is also used by the GC and the\n    // trashcan mechanism as a linked list pointer and by the GC to store the\n    // computed \"gc_refs\" refcount.\n    uintptr_t ob_tid;\n    uint16_t _padding;\n    PyMutex ob_mutex;           // per-object lock\n    uint8_t ob_gc_bits;         // gc-related state\n    uint32_t ob_ref_local;      // local reference count\n    Py_ssize_t ob_ref_shared;   // shared (atomic) reference count\n    PyTypeObject *ob_type;\n};\n#endif\n\n/* Cast argument to PyObject* type. */\n#define _PyObject_CAST(op) _Py_CAST(PyObject*, (op))\n\ntypedef struct {\n    PyObject ob_base;\n    Py_ssize_t ob_size; /* Number of items in variable part */\n} PyVarObject;\n\n/* Cast argument to PyVarObject* type. */\n#define _PyVarObject_CAST(op) _Py_CAST(PyVarObject*, (op))\n\n\n// Test if the 'x' object is the 'y' object, the same as \"x is y\" in Python.\nPyAPI_FUNC(int) Py_Is(PyObject *x, PyObject *y);\n#define Py_Is(x, y) ((x) == (y))\n\n#if defined(Py_GIL_DISABLED) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(uintptr_t) _Py_GetThreadLocal_Addr(void);\n\nstatic inline uintptr_t\n_Py_ThreadId(void)\n{\n    uintptr_t tid;\n#if defined(_MSC_VER) && defined(_M_X64)\n    tid = __readgsqword(48);\n#elif defined(_MSC_VER) && defined(_M_IX86)\n    tid = __readfsdword(24);\n#elif defined(_MSC_VER) && defined(_M_ARM64)\n    tid = __getReg(18);\n#elif defined(__i386__)\n    __asm__(\"movl %%gs:0, %0\" : \"=r\" (tid));  // 32-bit always uses GS\n#elif defined(__MACH__) && defined(__x86_64__)\n    __asm__(\"movq %%gs:0, %0\" : \"=r\" (tid));  // x86_64 macOSX uses GS\n#elif defined(__x86_64__)\n   __asm__(\"movq %%fs:0, %0\" : \"=r\" (tid));  // x86_64 Linux, BSD uses FS\n#elif defined(__arm__)\n    __asm__ (\"mrc p15, 0, %0, c13, c0, 3\\nbic %0, %0, #3\" : \"=r\" (tid));\n#elif defined(__aarch64__) && defined(__APPLE__)\n    __asm__ (\"mrs %0, tpidrro_el0\" : \"=r\" (tid));\n#elif defined(__aarch64__)\n    __asm__ (\"mrs %0, tpidr_el0\" : \"=r\" (tid));\n#elif defined(__powerpc64__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r13 is reserved for use as system thread ID by the Power 64-bit ABI.\n    register uintptr_t tp __asm__ (\"r13\");\n    __asm__(\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__powerpc__)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // r2 is reserved for use as system thread ID by the Power 32-bit ABI.\n    register uintptr_t tp __asm__ (\"r2\");\n    __asm__ (\"\" : \"=r\" (tp));\n    tid = tp;\n    #endif\n#elif defined(__s390__) && defined(__GNUC__)\n    // Both GCC and Clang have supported __builtin_thread_pointer\n    // for s390 from long time ago.\n    tid = (uintptr_t)__builtin_thread_pointer();\n#elif defined(__riscv)\n    #if defined(__clang__) && _Py__has_builtin(__builtin_thread_pointer)\n    tid = (uintptr_t)__builtin_thread_pointer();\n    #else\n    // tp is Thread Pointer provided by the RISC-V ABI.\n    __asm__ (\"mv %0, tp\" : \"=r\" (tid));\n    #endif\n#else\n    // Fallback to a portable implementation if we do not have a faster\n    // platform-specific implementation.\n    tid = _Py_GetThreadLocal_Addr();\n#endif\n  return tid;\n}\n\nstatic inline Py_ALWAYS_INLINE int\n_Py_IsOwnedByCurrentThread(PyObject *ob)\n{\n#ifdef _Py_THREAD_SANITIZER\n    return _Py_atomic_load_uintptr_relaxed(&ob->ob_tid) == _Py_ThreadId();\n#else\n    return ob->ob_tid == _Py_ThreadId();\n#endif\n}\n#endif\n\nstatic inline Py_ssize_t Py_REFCNT(PyObject *ob) {\n#if !defined(Py_GIL_DISABLED)\n    return ob->ob_refcnt;\n#else\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&ob->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return _Py_IMMORTAL_REFCNT;\n    }\n    Py_ssize_t shared = _Py_atomic_load_ssize_relaxed(&ob->ob_ref_shared);\n    return _Py_STATIC_CAST(Py_ssize_t, local) +\n           Py_ARITHMETIC_RIGHT_SHIFT(Py_ssize_t, shared, _Py_REF_SHARED_SHIFT);\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_REFCNT(ob) Py_REFCNT(_PyObject_CAST(ob))\n#endif\n\n\n// bpo-39573: The Py_SET_TYPE() function must be used to set an object type.\nstatic inline PyTypeObject* Py_TYPE(PyObject *ob) {\n    return ob->ob_type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_TYPE(ob) Py_TYPE(_PyObject_CAST(ob))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyLong_Type;\nPyAPI_DATA(PyTypeObject) PyBool_Type;\n\n// bpo-39573: The Py_SET_SIZE() function must be used to set an object size.\nstatic inline Py_ssize_t Py_SIZE(PyObject *ob) {\n    assert(ob->ob_type != &PyLong_Type);\n    assert(ob->ob_type != &PyBool_Type);\n    return  _PyVarObject_CAST(ob)->ob_size;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SIZE(ob) Py_SIZE(_PyObject_CAST(ob))\n#endif\n\nstatic inline Py_ALWAYS_INLINE int _Py_IsImmortal(PyObject *op)\n{\n#if defined(Py_GIL_DISABLED)\n    return (_Py_atomic_load_uint32_relaxed(&op->ob_ref_local) ==\n            _Py_IMMORTAL_REFCNT_LOCAL);\n#elif SIZEOF_VOID_P > 4\n    return (_Py_CAST(PY_INT32_T, op->ob_refcnt) < 0);\n#else\n    return (op->ob_refcnt == _Py_IMMORTAL_REFCNT);\n#endif\n}\n#define _Py_IsImmortal(op) _Py_IsImmortal(_PyObject_CAST(op))\n\nstatic inline int Py_IS_TYPE(PyObject *ob, PyTypeObject *type) {\n    return Py_TYPE(ob) == type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_IS_TYPE(ob, type) Py_IS_TYPE(_PyObject_CAST(ob), (type))\n#endif\n\n\n// Py_SET_REFCNT() implementation for stable ABI\nPyAPI_FUNC(void) _Py_SetRefcnt(PyObject *ob, Py_ssize_t refcnt);\n\nstatic inline void Py_SET_REFCNT(PyObject *ob, Py_ssize_t refcnt) {\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030d0000\n    // Stable ABI implements Py_SET_REFCNT() as a function call\n    // on limited C API version 3.13 and newer.\n    _Py_SetRefcnt(ob, refcnt);\n#else\n    // This immortal check is for code that is unaware of immortal objects.\n    // The runtime tracks these objects and we should avoid as much\n    // as possible having extensions inadvertently change the refcnt\n    // of an immortalized object.\n    if (_Py_IsImmortal(ob)) {\n        return;\n    }\n\n#ifndef Py_GIL_DISABLED\n    ob->ob_refcnt = refcnt;\n#else\n    if (_Py_IsOwnedByCurrentThread(ob)) {\n        if ((size_t)refcnt > (size_t)UINT32_MAX) {\n            // On overflow, make the object immortal\n            ob->ob_tid = _Py_UNOWNED_TID;\n            ob->ob_ref_local = _Py_IMMORTAL_REFCNT_LOCAL;\n            ob->ob_ref_shared = 0;\n        }\n        else {\n            // Set local refcount to desired refcount and shared refcount\n            // to zero, but preserve the shared refcount flags.\n            ob->ob_ref_local = _Py_STATIC_CAST(uint32_t, refcnt);\n            ob->ob_ref_shared &= _Py_REF_SHARED_FLAG_MASK;\n        }\n    }\n    else {\n        // Set local refcount to zero and shared refcount to desired refcount.\n        // Mark the object as merged.\n        ob->ob_tid = _Py_UNOWNED_TID;\n        ob->ob_ref_local = 0;\n        ob->ob_ref_shared = _Py_REF_SHARED(refcnt, _Py_REF_MERGED);\n    }\n#endif  // Py_GIL_DISABLED\n#endif  // Py_LIMITED_API+0 < 0x030d0000\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_REFCNT(ob, refcnt) Py_SET_REFCNT(_PyObject_CAST(ob), (refcnt))\n#endif\n\n\nstatic inline void Py_SET_TYPE(PyObject *ob, PyTypeObject *type) {\n    ob->ob_type = type;\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_TYPE(ob, type) Py_SET_TYPE(_PyObject_CAST(ob), type)\n#endif\n\nstatic inline void Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) {\n    assert(ob->ob_base.ob_type != &PyLong_Type);\n    assert(ob->ob_base.ob_type != &PyBool_Type);\n#ifdef Py_GIL_DISABLED\n    _Py_atomic_store_ssize_relaxed(&ob->ob_size, size);\n#else\n    ob->ob_size = size;\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_SET_SIZE(ob, size) Py_SET_SIZE(_PyVarObject_CAST(ob), (size))\n#endif\n\n\n/*\nType objects contain a string containing the type name (to help somewhat\nin debugging), the allocation parameters (see PyObject_New() and\nPyObject_NewVar()),\nand methods for accessing objects of the type.  Methods are optional, a\nnil pointer meaning that particular kind of access is not available for\nthis type.  The Py_DECREF() macro uses the tp_dealloc method without\nchecking for a nil pointer; it should always be implemented except if\nthe implementation can guarantee that the reference count will never\nreach zero (e.g., for statically allocated type objects).\n\nNB: the methods for certain type groups are now contained in separate\nmethod blocks.\n*/\n\ntypedef PyObject * (*unaryfunc)(PyObject *);\ntypedef PyObject * (*binaryfunc)(PyObject *, PyObject *);\ntypedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);\ntypedef int (*inquiry)(PyObject *);\ntypedef Py_ssize_t (*lenfunc)(PyObject *);\ntypedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);\ntypedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);\ntypedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);\ntypedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);\ntypedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);\n\ntypedef int (*objobjproc)(PyObject *, PyObject *);\ntypedef int (*visitproc)(PyObject *, void *);\ntypedef int (*traverseproc)(PyObject *, visitproc, void *);\n\n\ntypedef void (*freefunc)(void *);\ntypedef void (*destructor)(PyObject *);\ntypedef PyObject *(*getattrfunc)(PyObject *, char *);\ntypedef PyObject *(*getattrofunc)(PyObject *, PyObject *);\ntypedef int (*setattrfunc)(PyObject *, char *, PyObject *);\ntypedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*reprfunc)(PyObject *);\ntypedef Py_hash_t (*hashfunc)(PyObject *);\ntypedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);\ntypedef PyObject *(*getiterfunc) (PyObject *);\ntypedef PyObject *(*iternextfunc) (PyObject *);\ntypedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);\ntypedef int (*initproc)(PyObject *, PyObject *, PyObject *);\ntypedef PyObject *(*newfunc)(PyTypeObject *, PyObject *, PyObject *);\ntypedef PyObject *(*allocfunc)(PyTypeObject *, Py_ssize_t);\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030c0000 // 3.12\ntypedef PyObject *(*vectorcallfunc)(PyObject *callable, PyObject *const *args,\n                                    size_t nargsf, PyObject *kwnames);\n#endif\n\ntypedef struct{\n    int slot;    /* slot id, see below */\n    void *pfunc; /* function pointer */\n} PyType_Slot;\n\ntypedef struct{\n    const char* name;\n    int basicsize;\n    int itemsize;\n    unsigned int flags;\n    PyType_Slot *slots; /* terminated by slot==0. */\n} PyType_Spec;\n\nPyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000\nPyAPI_FUNC(void*) PyType_GetSlot(PyTypeObject*, int);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03090000\nPyAPI_FUNC(PyObject*) PyType_FromModuleAndSpec(PyObject *, PyType_Spec *, PyObject *);\nPyAPI_FUNC(PyObject *) PyType_GetModule(PyTypeObject *);\nPyAPI_FUNC(void *) PyType_GetModuleState(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030B0000\nPyAPI_FUNC(PyObject *) PyType_GetName(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GetQualName(PyTypeObject *);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030D0000\nPyAPI_FUNC(PyObject *) PyType_GetFullyQualifiedName(PyTypeObject *type);\nPyAPI_FUNC(PyObject *) PyType_GetModuleName(PyTypeObject *type);\n#endif\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\nPyAPI_FUNC(PyObject *) PyType_FromMetaclass(PyTypeObject*, PyObject*, PyType_Spec*, PyObject*);\nPyAPI_FUNC(void *) PyObject_GetTypeData(PyObject *obj, PyTypeObject *cls);\nPyAPI_FUNC(Py_ssize_t) PyType_GetTypeDataSize(PyTypeObject *cls);\n#endif\n\n/* Generic type check */\nPyAPI_FUNC(int) PyType_IsSubtype(PyTypeObject *, PyTypeObject *);\n\nstatic inline int PyObject_TypeCheck(PyObject *ob, PyTypeObject *type) {\n    return Py_IS_TYPE(ob, type) || PyType_IsSubtype(Py_TYPE(ob), type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyObject_TypeCheck(ob, type) PyObject_TypeCheck(_PyObject_CAST(ob), (type))\n#endif\n\nPyAPI_DATA(PyTypeObject) PyType_Type; /* built-in 'type' */\nPyAPI_DATA(PyTypeObject) PyBaseObject_Type; /* built-in 'object' */\nPyAPI_DATA(PyTypeObject) PySuper_Type; /* built-in 'super' */\n\nPyAPI_FUNC(unsigned long) PyType_GetFlags(PyTypeObject*);\n\nPyAPI_FUNC(int) PyType_Ready(PyTypeObject *);\nPyAPI_FUNC(PyObject *) PyType_GenericAlloc(PyTypeObject *, Py_ssize_t);\nPyAPI_FUNC(PyObject *) PyType_GenericNew(PyTypeObject *,\n                                               PyObject *, PyObject *);\nPyAPI_FUNC(unsigned int) PyType_ClearCache(void);\nPyAPI_FUNC(void) PyType_Modified(PyTypeObject *);\n\n/* Generic operations on objects */\nPyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);\nPyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);\nPyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);\nPyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttrString(PyObject *v, const char *name);\nPyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);\nPyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_GetOptionalAttr(PyObject *, PyObject *, PyObject **);\nPyAPI_FUNC(int) PyObject_GetOptionalAttrString(PyObject *, const char *, PyObject **);\n#endif\nPyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_DelAttr(PyObject *v, PyObject *name);\nPyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(int) PyObject_HasAttrWithError(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_HasAttrStringWithError(PyObject *, const char *);\n#endif\nPyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);\nPyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);\nPyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *, PyObject *, PyObject *);\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000\nPyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);\n#endif\nPyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);\nPyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);\nPyAPI_FUNC(int) PyObject_IsTrue(PyObject *);\nPyAPI_FUNC(int) PyObject_Not(PyObject *);\nPyAPI_FUNC(int) PyCallable_Check(PyObject *);\nPyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);\n\n/* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a\n   list of strings.  PyObject_Dir(NULL) is like builtins.dir(),\n   returning the names of the current locals.  In this case, if there are\n   no current locals, NULL is returned, and PyErr_Occurred() is false.\n*/\nPyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);\n\n/* Helpers for printing recursive container types */\nPyAPI_FUNC(int) Py_ReprEnter(PyObject *);\nPyAPI_FUNC(void) Py_ReprLeave(PyObject *);\n\n/* Flag bits for printing: */\n#define Py_PRINT_RAW    1       /* No string quotes etc. */\n\n/*\nType flags (tp_flags)\n\nThese flags are used to change expected features and behavior for a\nparticular type.\n\nArbitration of the flag bit positions will need to be coordinated among\nall extension writers who publicly release their extensions (this will\nbe fewer than you might expect!).\n\nMost flags were removed as of Python 3.0 to make room for new flags.  (Some\nflags are not for backwards compatibility but to indicate the presence of an\noptional feature; these flags remain of course.)\n\nType definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.\n\nCode can use PyType_HasFeature(type_ob, flag_value) to test whether the\ngiven type object has a specified feature.\n*/\n\n#ifndef Py_LIMITED_API\n\n/* Track types initialized using _PyStaticType_InitBuiltin(). */\n#define _Py_TPFLAGS_STATIC_BUILTIN (1 << 1)\n\n/* The values array is placed inline directly after the rest of\n * the object. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_INLINE_VALUES (1 << 2)\n\n/* Placement of weakref pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_weaklistoffset.\n */\n#define Py_TPFLAGS_MANAGED_WEAKREF (1 << 3)\n\n/* Placement of dict (and values) pointers are managed by the VM, not by the type.\n * The VM will automatically set tp_dictoffset. Implies Py_TPFLAGS_HAVE_GC.\n */\n#define Py_TPFLAGS_MANAGED_DICT (1 << 4)\n\n#define Py_TPFLAGS_PREHEADER (Py_TPFLAGS_MANAGED_WEAKREF | Py_TPFLAGS_MANAGED_DICT)\n\n/* Set if instances of the type object are treated as sequences for pattern matching */\n#define Py_TPFLAGS_SEQUENCE (1 << 5)\n/* Set if instances of the type object are treated as mappings for pattern matching */\n#define Py_TPFLAGS_MAPPING (1 << 6)\n#endif\n\n/* Disallow creating instances of the type: set tp_new to NULL and don't create\n * the \"__new__\" key in the type dictionary. */\n#define Py_TPFLAGS_DISALLOW_INSTANTIATION (1UL << 7)\n\n/* Set if the type object is immutable: type attributes cannot be set nor deleted */\n#define Py_TPFLAGS_IMMUTABLETYPE (1UL << 8)\n\n/* Set if the type object is dynamically allocated */\n#define Py_TPFLAGS_HEAPTYPE (1UL << 9)\n\n/* Set if the type allows subclassing */\n#define Py_TPFLAGS_BASETYPE (1UL << 10)\n\n/* Set if the type implements the vectorcall protocol (PEP 590) */\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030C0000\n#define Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)\n#ifndef Py_LIMITED_API\n// Backwards compatibility alias for API that was provisional in Python 3.8\n#define _Py_TPFLAGS_HAVE_VECTORCALL Py_TPFLAGS_HAVE_VECTORCALL\n#endif\n#endif\n\n/* Set if the type is 'ready' -- fully initialized */\n#define Py_TPFLAGS_READY (1UL << 12)\n\n/* Set while the type is being 'readied', to prevent recursive ready calls */\n#define Py_TPFLAGS_READYING (1UL << 13)\n\n/* Objects support garbage collection (see objimpl.h) */\n#define Py_TPFLAGS_HAVE_GC (1UL << 14)\n\n/* These two bits are preserved for Stackless Python, next after this is 17 */\n#ifdef STACKLESS\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)\n#else\n#define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0\n#endif\n\n/* Objects behave like an unbound method */\n#define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)\n\n/* Unused. Legacy flag */\n#define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)\n\n/* Type is abstract and cannot be instantiated */\n#define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)\n\n// This undocumented flag gives certain built-ins their unique pattern-matching\n// behavior, which allows a single positional subpattern to match against the\n// subject itself (rather than a mapped attribute on it):\n#define _Py_TPFLAGS_MATCH_SELF (1UL << 22)\n\n/* Items (ob_size*tp_itemsize) are found at the end of an instance's memory */\n#define Py_TPFLAGS_ITEMS_AT_END (1UL << 23)\n\n/* These flags are used to determine if a type is a subclass. */\n#define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)\n#define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)\n#define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)\n#define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)\n#define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)\n#define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)\n#define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)\n#define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)\n\n#define Py_TPFLAGS_DEFAULT  ( \\\n                 Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \\\n                0)\n\n/* NOTE: Some of the following flags reuse lower bits (removed as part of the\n * Python 3.0 transition). */\n\n/* The following flags are kept for compatibility; in previous\n * versions they indicated presence of newer tp_* fields on the\n * type struct.\n * Starting with 3.8, binary compatibility of C extensions across\n * feature releases of Python is not supported anymore (except when\n * using the stable ABI, in which all classes are created dynamically,\n * using the interpreter's memory layout.)\n * Note that older extensions using the stable ABI set these flags,\n * so the bits must not be repurposed.\n */\n#define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)\n#define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)\n\n\n/*\nThe macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement\nreference counts.  Py_DECREF calls the object's deallocator function when\nthe refcount falls to 0; for\nobjects that don't contain references to other objects or heap memory\nthis can be the standard function free().  Both macros can be used\nwherever a void expression is allowed.  The argument must not be a\nNULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.\nThe macro _Py_NewReference(op) initialize reference counts to 1, and\nin special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional\nbookkeeping appropriate to the special build.\n\nWe assume that the reference count field can never overflow; this can\nbe proven when the size of the field is the same as the pointer size, so\nwe ignore the possibility.  Provided a C int is at least 32 bits (which\nis implicitly assumed in many parts of this code), that's enough for\nabout 2**31 references to an object.\n\nXXX The following became out of date in Python 2.2, but I'm not sure\nXXX what the full truth is now.  Certainly, heap-allocated type objects\nXXX can and should be deallocated.\nType objects should never be deallocated; the type pointer in an object\nis not considered to be a reference to the type object, to save\ncomplications in the deallocation function.  (This is actually a\ndecision that's up to the implementer of each new type so if you want,\nyou can count such references to the type object.)\n*/\n\n#if defined(Py_REF_DEBUG) && !defined(Py_LIMITED_API)\nPyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,\n                                      PyObject *op);\nPyAPI_FUNC(void) _Py_INCREF_IncRefTotal(void);\nPyAPI_FUNC(void) _Py_DECREF_DecRefTotal(void);\n#endif  // Py_REF_DEBUG && !Py_LIMITED_API\n\nPyAPI_FUNC(void) _Py_Dealloc(PyObject *);\n\n/*\nThese are provided as conveniences to Python runtime embedders, so that\nthey can have object code that is not dependent on Python compilation flags.\n*/\nPyAPI_FUNC(void) Py_IncRef(PyObject *);\nPyAPI_FUNC(void) Py_DecRef(PyObject *);\n\n// Similar to Py_IncRef() and Py_DecRef() but the argument must be non-NULL.\n// Private functions used by Py_INCREF() and Py_DECREF().\nPyAPI_FUNC(void) _Py_IncRef(PyObject *);\nPyAPI_FUNC(void) _Py_DecRef(PyObject *);\n\nstatic inline Py_ALWAYS_INLINE void Py_INCREF(PyObject *op)\n{\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n    // Stable ABI implements Py_INCREF() as a function call on limited C API\n    // version 3.12 and newer, and on Python built in debug mode. _Py_IncRef()\n    // was added to Python 3.10.0a7, use Py_IncRef() on older Python versions.\n    // Py_IncRef() accepts NULL whereas _Py_IncRef() doesn't.\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_IncRef(op);\n#  else\n    Py_IncRef(op);\n#  endif\n#else\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n#if defined(Py_GIL_DISABLED)\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    uint32_t new_local = local + 1;\n    if (new_local == 0) {\n        // local is equal to _Py_IMMORTAL_REFCNT: do nothing\n        return;\n    }\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, new_local);\n    }\n    else {\n        _Py_atomic_add_ssize(&op->ob_ref_shared, (1 << _Py_REF_SHARED_SHIFT));\n    }\n#elif SIZEOF_VOID_P > 4\n    // Portable saturated add, branching on the carry flag and set low bits\n    PY_UINT32_T cur_refcnt = op->ob_refcnt_split[PY_BIG_ENDIAN];\n    PY_UINT32_T new_refcnt = cur_refcnt + 1;\n    if (new_refcnt == 0) {\n        // cur_refcnt is equal to _Py_IMMORTAL_REFCNT: the object is immortal,\n        // do nothing\n        return;\n    }\n    op->ob_refcnt_split[PY_BIG_ENDIAN] = new_refcnt;\n#else\n    // Explicitly check immortality against the immortal value\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    op->ob_refcnt++;\n#endif\n    _Py_INCREF_STAT_INC();\n#ifdef Py_REF_DEBUG\n    _Py_INCREF_IncRefTotal();\n#endif\n#endif\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_INCREF(op) Py_INCREF(_PyObject_CAST(op))\n#endif\n\n\n#if !defined(Py_LIMITED_API) && defined(Py_GIL_DISABLED)\n// Implements Py_DECREF on objects not owned by the current thread.\nPyAPI_FUNC(void) _Py_DecRefShared(PyObject *);\nPyAPI_FUNC(void) _Py_DecRefSharedDebug(PyObject *, const char *, int);\n\n// Called from Py_DECREF by the owning thread when the local refcount reaches\n// zero. The call will deallocate the object if the shared refcount is also\n// zero. Otherwise, the thread gives up ownership and merges the reference\n// count fields.\nPyAPI_FUNC(void) _Py_MergeZeroLocalRefcount(PyObject *);\n#endif\n\n#if defined(Py_LIMITED_API) && (Py_LIMITED_API+0 >= 0x030c0000 || defined(Py_REF_DEBUG))\n// Stable ABI implements Py_DECREF() as a function call on limited C API\n// version 3.12 and newer, and on Python built in debug mode. _Py_DecRef() was\n// added to Python 3.10.0a7, use Py_DecRef() on older Python versions.\n// Py_DecRef() accepts NULL whereas _Py_IncRef() doesn't.\nstatic inline void Py_DECREF(PyObject *op) {\n#  if Py_LIMITED_API+0 >= 0x030a00A7\n    _Py_DecRef(op);\n#  else\n    Py_DecRef(op);\n#  endif\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED) && defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        if (local == 0) {\n            _Py_NegativeRefcount(filename, lineno, op);\n        }\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefSharedDebug(op, filename, lineno);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#elif defined(Py_GIL_DISABLED)\nstatic inline void Py_DECREF(PyObject *op)\n{\n    uint32_t local = _Py_atomic_load_uint32_relaxed(&op->ob_ref_local);\n    if (local == _Py_IMMORTAL_REFCNT_LOCAL) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (_Py_IsOwnedByCurrentThread(op)) {\n        local--;\n        _Py_atomic_store_uint32_relaxed(&op->ob_ref_local, local);\n        if (local == 0) {\n            _Py_MergeZeroLocalRefcount(op);\n        }\n    }\n    else {\n        _Py_DecRefShared(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n\n#elif defined(Py_REF_DEBUG)\nstatic inline void Py_DECREF(const char *filename, int lineno, PyObject *op)\n{\n    if (op->ob_refcnt <= 0) {\n        _Py_NegativeRefcount(filename, lineno, op);\n    }\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    _Py_DECREF_DecRefTotal();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(__FILE__, __LINE__, _PyObject_CAST(op))\n\n#else\nstatic inline Py_ALWAYS_INLINE void Py_DECREF(PyObject *op)\n{\n    // Non-limited C API and limited C API for Python 3.9 and older access\n    // directly PyObject.ob_refcnt.\n    if (_Py_IsImmortal(op)) {\n        return;\n    }\n    _Py_DECREF_STAT_INC();\n    if (--op->ob_refcnt == 0) {\n        _Py_Dealloc(op);\n    }\n}\n#define Py_DECREF(op) Py_DECREF(_PyObject_CAST(op))\n#endif\n\n\n/* Safely decref `op` and set `op` to NULL, especially useful in tp_clear\n * and tp_dealloc implementations.\n *\n * Note that \"the obvious\" code can be deadly:\n *\n *     Py_XDECREF(op);\n *     op = NULL;\n *\n * Typically, `op` is something like self->containee, and `self` is done\n * using its `containee` member.  In the code sequence above, suppose\n * `containee` is non-NULL with a refcount of 1.  Its refcount falls to\n * 0 on the first line, which can trigger an arbitrary amount of code,\n * possibly including finalizers (like __del__ methods or weakref callbacks)\n * coded in Python, which in turn can release the GIL and allow other threads\n * to run, etc.  Such code may even invoke methods of `self` again, or cause\n * cyclic gc to trigger, but-- oops! --self->containee still points to the\n * object being torn down, and it may be in an insane state while being torn\n * down.  This has in fact been a rich historic source of miserable (rare &\n * hard-to-diagnose) segfaulting (and other) bugs.\n *\n * The safe way is:\n *\n *      Py_CLEAR(op);\n *\n * That arranges to set `op` to NULL _before_ decref'ing, so that any code\n * triggered as a side-effect of `op` getting torn down no longer believes\n * `op` points to a valid object.\n *\n * There are cases where it's safe to use the naive code, but they're brittle.\n * For example, if `op` points to a Python integer, you know that destroying\n * one of those can't cause problems -- but in part that relies on that\n * Python integers aren't currently weakly referencable.  Best practice is\n * to use Py_CLEAR() even if you can't think of a reason for why you need to.\n *\n * gh-98724: Use a temporary variable to only evaluate the macro argument once,\n * to avoid the duplication of side effects if the argument has side effects.\n *\n * gh-99701: If the PyObject* type is used with casting arguments to PyObject*,\n * the code can be miscompiled with strict aliasing because of type punning.\n * With strict aliasing, a compiler considers that two pointers of different\n * types cannot read or write the same memory which enables optimization\n * opportunities.\n *\n * If available, use _Py_TYPEOF() to use the 'op' type for temporary variables,\n * and so avoid type punning. Otherwise, use memcpy() which causes type erasure\n * and so prevents the compiler to reuse an old cached 'op' value after\n * Py_CLEAR().\n */\n#ifdef _Py_TYPEOF\n#define Py_CLEAR(op) \\\n    do { \\\n        _Py_TYPEOF(op)* _tmp_op_ptr = &(op); \\\n        _Py_TYPEOF(op) _tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            *_tmp_op_ptr = _Py_NULL; \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#else\n#define Py_CLEAR(op) \\\n    do { \\\n        PyObject **_tmp_op_ptr = _Py_CAST(PyObject**, &(op)); \\\n        PyObject *_tmp_old_op = (*_tmp_op_ptr); \\\n        if (_tmp_old_op != NULL) { \\\n            PyObject *_null_ptr = _Py_NULL; \\\n            memcpy(_tmp_op_ptr, &_null_ptr, sizeof(PyObject*)); \\\n            Py_DECREF(_tmp_old_op); \\\n        } \\\n    } while (0)\n#endif\n\n\n/* Function to use in case the object pointer can be NULL: */\nstatic inline void Py_XINCREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_INCREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XINCREF(op) Py_XINCREF(_PyObject_CAST(op))\n#endif\n\nstatic inline void Py_XDECREF(PyObject *op)\n{\n    if (op != _Py_NULL) {\n        Py_DECREF(op);\n    }\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_XDECREF(op) Py_XDECREF(_PyObject_CAST(op))\n#endif\n\n// Create a new strong reference to an object:\n// increment the reference count of the object and return the object.\nPyAPI_FUNC(PyObject*) Py_NewRef(PyObject *obj);\n\n// Similar to Py_NewRef(), but the object can be NULL.\nPyAPI_FUNC(PyObject*) Py_XNewRef(PyObject *obj);\n\nstatic inline PyObject* _Py_NewRef(PyObject *obj)\n{\n    Py_INCREF(obj);\n    return obj;\n}\n\nstatic inline PyObject* _Py_XNewRef(PyObject *obj)\n{\n    Py_XINCREF(obj);\n    return obj;\n}\n\n// Py_NewRef() and Py_XNewRef() are exported as functions for the stable ABI.\n// Names overridden with macros by static inline functions for best\n// performances.\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define Py_NewRef(obj) _Py_NewRef(_PyObject_CAST(obj))\n#  define Py_XNewRef(obj) _Py_XNewRef(_PyObject_CAST(obj))\n#else\n#  define Py_NewRef(obj) _Py_NewRef(obj)\n#  define Py_XNewRef(obj) _Py_XNewRef(obj)\n#endif\n\n\n#define Py_CONSTANT_NONE 0\n#define Py_CONSTANT_FALSE 1\n#define Py_CONSTANT_TRUE 2\n#define Py_CONSTANT_ELLIPSIS 3\n#define Py_CONSTANT_NOT_IMPLEMENTED 4\n#define Py_CONSTANT_ZERO 5\n#define Py_CONSTANT_ONE 6\n#define Py_CONSTANT_EMPTY_STR 7\n#define Py_CONSTANT_EMPTY_BYTES 8\n#define Py_CONSTANT_EMPTY_TUPLE 9\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject*) Py_GetConstant(unsigned int constant_id);\nPyAPI_FUNC(PyObject*) Py_GetConstantBorrowed(unsigned int constant_id);\n#endif\n\n\n/*\n_Py_NoneStruct is an object of undefined type which can be used in contexts\nwhere NULL (nil) is not suitable (since NULL often means 'error').\n*/\nPyAPI_DATA(PyObject) _Py_NoneStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_None Py_GetConstantBorrowed(Py_CONSTANT_NONE)\n#else\n#  define Py_None (&_Py_NoneStruct)\n#endif\n\n// Test if an object is the None singleton, the same as \"x is None\" in Python.\nPyAPI_FUNC(int) Py_IsNone(PyObject *x);\n#define Py_IsNone(x) Py_Is((x), Py_None)\n\n/* Macro for returning Py_None from a function */\n#define Py_RETURN_NONE return Py_None\n\n/*\nPy_NotImplemented is a singleton used to signal that an operation is\nnot implemented for a given type combination.\n*/\nPyAPI_DATA(PyObject) _Py_NotImplementedStruct; /* Don't use this directly */\n\n#if defined(Py_LIMITED_API) && Py_LIMITED_API+0 >= 0x030D0000\n#  define Py_NotImplemented Py_GetConstantBorrowed(Py_CONSTANT_NOT_IMPLEMENTED)\n#else\n#  define Py_NotImplemented (&_Py_NotImplementedStruct)\n#endif\n\n/* Macro for returning Py_NotImplemented from a function */\n#define Py_RETURN_NOTIMPLEMENTED return Py_NotImplemented\n\n/* Rich comparison opcodes */\n#define Py_LT 0\n#define Py_LE 1\n#define Py_EQ 2\n#define Py_NE 3\n#define Py_GT 4\n#define Py_GE 5\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000\n/* Result of calling PyIter_Send */\ntypedef enum {\n    PYGEN_RETURN = 0,\n    PYGEN_ERROR = -1,\n    PYGEN_NEXT = 1,\n} PySendResult;\n#endif\n\n/*\n * Macro for implementing rich comparisons\n *\n * Needs to be a macro because any C-comparable type can be used.\n */\n#define Py_RETURN_RICHCOMPARE(val1, val2, op)                               \\\n    do {                                                                    \\\n        switch (op) {                                                       \\\n        case Py_EQ: if ((val1) == (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_NE: if ((val1) != (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_LT: if ((val1) < (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_GT: if ((val1) > (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;   \\\n        case Py_LE: if ((val1) <= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        case Py_GE: if ((val1) >= (val2)) Py_RETURN_TRUE; Py_RETURN_FALSE;  \\\n        default:                                                            \\\n            Py_UNREACHABLE();                                               \\\n        }                                                                   \\\n    } while (0)\n\n\n/*\nMore conventions\n================\n\nArgument Checking\n-----------------\n\nFunctions that take objects as arguments normally don't check for nil\narguments, but they do check the type of the argument, and return an\nerror if the function doesn't apply to the type.\n\nFailure Modes\n-------------\n\nFunctions may fail for a variety of reasons, including running out of\nmemory.  This is communicated to the caller in two ways: an error string\nis set (see errors.h), and the function result differs: functions that\nnormally return a pointer return NULL for failure, functions returning\nan integer return -1 (which could be a legal return value too!), and\nother functions return 0 for success and -1 for failure.\nCallers should always check for errors before using the result.  If\nan error was set, the caller must either explicitly clear it, or pass\nthe error on to its caller.\n\nReference Counts\n----------------\n\nIt takes a while to get used to the proper usage of reference counts.\n\nFunctions that create an object set the reference count to 1; such new\nobjects must be stored somewhere or destroyed again with Py_DECREF().\nSome functions that 'store' objects, such as PyTuple_SetItem() and\nPyList_SetItem(),\ndon't increment the reference count of the object, since the most\nfrequent use is to store a fresh object.  Functions that 'retrieve'\nobjects, such as PyTuple_GetItem() and PyDict_GetItemString(), also\ndon't increment\nthe reference count, since most frequently the object is only looked at\nquickly.  Thus, to retrieve an object and store it again, the caller\nmust call Py_INCREF() explicitly.\n\nNOTE: functions that 'consume' a reference count, like\nPyList_SetItem(), consume the reference even if the object wasn't\nsuccessfully stored, to simplify error handling.\n\nIt seems attractive to make other functions that take an object as\nargument consume a reference count; however, this may quickly get\nconfusing (even the current practice is already confusing).  Consider\nit carefully, it may save lots of calls to Py_INCREF() and Py_DECREF() at\ntimes.\n*/\n\n#ifndef Py_LIMITED_API\n#  define Py_CPYTHON_OBJECT_H\n#  include \"cpython/object.h\"\n#  undef Py_CPYTHON_OBJECT_H\n#endif\n\n\nstatic inline int\nPyType_HasFeature(PyTypeObject *type, unsigned long feature)\n{\n    unsigned long flags;\n#ifdef Py_LIMITED_API\n    // PyTypeObject is opaque in the limited C API\n    flags = PyType_GetFlags(type);\n#else\n#   ifdef Py_GIL_DISABLED\n        flags = _Py_atomic_load_ulong_relaxed(&type->tp_flags);\n#   else\n        flags = type->tp_flags;\n#   endif\n#endif\n    return ((flags & feature) != 0);\n}\n\n#define PyType_FastSubclass(type, flag) PyType_HasFeature((type), (flag))\n\nstatic inline int PyType_Check(PyObject *op) {\n    return PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_Check(op) PyType_Check(_PyObject_CAST(op))\n#endif\n\n#define _PyType_CAST(op) \\\n    (assert(PyType_Check(op)), _Py_CAST(PyTypeObject*, (op)))\n\nstatic inline int PyType_CheckExact(PyObject *op) {\n    return Py_IS_TYPE(op, &PyType_Type);\n}\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 < 0x030b0000\n#  define PyType_CheckExact(op) PyType_CheckExact(_PyObject_CAST(op))\n#endif\n\n#if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030d0000\nPyAPI_FUNC(PyObject *) PyType_GetModuleByDef(PyTypeObject *, PyModuleDef *);\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n#endif   // !Py_OBJECT_H\n"}, "sourceLanguage": "c"}, {"location": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "contents": {"text": "#ifndef Py_CPYTHON_TUPLEOBJECT_H\n#  error \"this header file must not be included directly\"\n#endif\n\ntypedef struct {\n    PyObject_VAR_HEAD\n    /* ob_item contains space for 'ob_size' elements.\n       Items must normally not be NULL, except during construction when\n       the tuple is not yet visible outside the function that builds it. */\n    PyObject *ob_item[1];\n} PyTupleObject;\n\nPyAPI_FUNC(int) _PyTuple_Resize(PyObject **, Py_ssize_t);\n\n/* Cast argument to PyTupleObject* type. */\n#define _PyTuple_CAST(op) \\\n    (assert(PyTuple_Check(op)), _Py_CAST(PyTupleObject*, (op)))\n\n// Macros and static inline functions, trading safety for speed\n\nstatic inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n    PyTupleObject *tuple = _PyTuple_CAST(op);\n    return Py_SIZE(tuple);\n}\n#define PyTuple_GET_SIZE(op) PyTuple_GET_SIZE(_PyObject_CAST(op))\n\n#define PyTuple_GET_ITEM(op, index) (_PyTuple_CAST(op)->ob_item[(index)])\n\n/* Function *only* to be used to fill in brand new tuples */\nstatic inline void\nPyTuple_SET_ITEM(PyObject *op, Py_ssize_t index, PyObject *value) {\n    PyTupleObject *tuple = _PyTuple_CAST(op);\n    assert(0 <= index);\n    assert(index < Py_SIZE(tuple));\n    tuple->ob_item[index] = value;\n}\n#define PyTuple_SET_ITEM(op, index, value) \\\n    PyTuple_SET_ITEM(_PyObject_CAST(op), (index), _PyObject_CAST(value))\n"}, "sourceLanguage": "c"}], "results": [{"ruleId": "-Wanalyzer-fd-leak", "taxa": [{"id": "775", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "leak of file descriptor 'dup2(p2cread, 0)'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 720, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 720, "snippet": {"text": "        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1007, "startColumn": 1, "endColumn": 26}, "contextRegion": {"startLine": 1007, "snippet": {"text": "subprocess_fork_exec_impl(PyObject *module, PyObject *process_args,\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "entry to 'subprocess_fork_exec_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1031, "startColumn": 34, "endColumn": 35}, "contextRegion": {"startLine": 1031, "snippet": {"text": "    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1031, "startColumn": 34, "endColumn": 35}, "contextRegion": {"startLine": 1031, "snippet": {"text": "    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1033, "startColumn": 34, "endColumn": 59}, "contextRegion": {"startLine": 1033, "snippet": {"text": "    PyInterpreterState *interp = _PyInterpreterState_GET();\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_PyInterpreterState_GET' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 209, "startColumn": 35, "endColumn": 58}, "contextRegion": {"startLine": 209, "snippet": {"text": "static inline PyInterpreterState* _PyInterpreterState_GET(void) {\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "entry to '_PyInterpreterState_GET'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 212, "snippet": {"text": "    _Py_EnsureTstateNotNULL(tstate);\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "inlined call to '_Py_EnsureFuncTstateNotNULL' from '_PyInterpreterState_GET'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 188, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 188, "snippet": {"text": "    if (tstate == NULL) {\n"}}}, "logicalLocations": [{"name": "_Py_EnsureFuncTstateNotNULL", "fullyQualifiedName": "_Py_EnsureFuncTstateNotNULL", "decoratedName": "_Py_EnsureFuncTstateNotNULL", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 212, "snippet": {"text": "    _Py_EnsureTstateNotNULL(tstate);\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1033, "startColumn": 34, "endColumn": 59}, "contextRegion": {"startLine": 1033, "snippet": {"text": "    PyInterpreterState *interp = _PyInterpreterState_GET();\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_PyInterpreterState_GET'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1047, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1047, "snippet": {"text": "    if (close_fds && errpipe_write < 3) {  /* precondition */\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 9, "endColumn": 57}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_sanity_check_python_fd_sequence' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 143, "startColumn": 1, "endColumn": 33}, "contextRegion": {"startLine": 143, "snippet": {"text": "_sanity_check_python_fd_sequence(PyObject *fd_sequence)\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "entry to '_sanity_check_python_fd_sequence'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 147, "startColumn": 33, "endColumn": 34}, "contextRegion": {"startLine": 147, "snippet": {"text": "    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from '_sanity_check_python_fd_sequence'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 147, "startColumn": 33, "endColumn": 34}, "contextRegion": {"startLine": 147, "snippet": {"text": "    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "returning to '_sanity_check_python_fd_sequence' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 9, "endColumn": 57}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_sanity_check_python_fd_sequence'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1057, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1057, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1061, "startColumn": 31, "endColumn": 77}, "contextRegion": {"startLine": 1061, "snippet": {"text": "    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_PySequence_BytesToCharpArray' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 200, "startColumn": 1, "endColumn": 30}, "contextRegion": {"startLine": 200, "snippet": {"text": "_PySequence_BytesToCharpArray(PyObject* self)\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "entry to '_PySequence_BytesToCharpArray'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 208, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 208, "snippet": {"text": "    if (argc == -1)\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'argc != -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 211, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 211, "snippet": {"text": "    assert(argc >= 0);\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 211, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 211, "snippet": {"text": "    assert(argc >= 0);\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'argc >= 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 213, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 213, "snippet": {"text": "    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 213, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 213, "snippet": {"text": "    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 218, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 218, "snippet": {"text": "    array = PyMem_Malloc((argc + 1) * sizeof(char *));\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 219, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 219, "snippet": {"text": "    if (array == NULL) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'array' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1061, "startColumn": 31, "endColumn": 77}, "contextRegion": {"startLine": 1061, "snippet": {"text": "    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_PySequence_BytesToCharpArray'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1062, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1062, "snippet": {"text": "    if (!exec_array)\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch (when 'exec_array' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1068, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1068, "snippet": {"text": "    if (process_args != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1068, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1068, "snippet": {"text": "    if (process_args != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1098, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1098, "snippet": {"text": "    if (env_list != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1098, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1098, "snippet": {"text": "    if (env_list != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1104, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1104, "snippet": {"text": "    if (cwd_obj != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1104, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1104, "snippet": {"text": "    if (cwd_obj != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1115, "startColumn": 5, "endColumn": 15}, "contextRegion": {"startLine": 1115, "snippet": {"text": "    Py_ssize_t extra_group_size = -2;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1117, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1117, "snippet": {"text": "    if (extra_groups_packed != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1172, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 1172, "snippet": {"text": "    gid_t gid = (gid_t)-1;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1197, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1197, "snippet": {"text": "    if (c_fds_to_keep == NULL) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c_fds_to_keep' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 9, "endColumn": 64}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'convert_fds_to_keep_to_c' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 280, "startColumn": 1, "endColumn": 25}, "contextRegion": {"startLine": 280, "snippet": {"text": "convert_fds_to_keep_to_c(PyObject *py_fds_to_keep, int *c_fds_to_keep)\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "entry to 'convert_fds_to_keep_to_c'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 284, "startColumn": 11, "endColumn": 12}, "contextRegion": {"startLine": 284, "snippet": {"text": "    len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from 'convert_fds_to_keep_to_c'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 284, "startColumn": 11, "endColumn": 12}, "contextRegion": {"startLine": 284, "snippet": {"text": "    len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "returning to 'convert_fds_to_keep_to_c' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 9, "endColumn": 64}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from 'convert_fds_to_keep_to_c'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1208, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1208, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1208, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1208, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1217, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 1217, "snippet": {"text": "    const void *old_sigmask = NULL;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1241, "startColumn": 11, "endLine": 1248, "endColumn": 58}, "contextRegion": {"startLine": 1241, "endLine": 1248, "snippet": {"text": "    pid = do_fork_exec(exec_array, argv, envp, cwd,\n                       p2cread, p2cwrite, c2pread, c2pwrite,\n                       errread, errwrite, errpipe_read, errpipe_write,\n                       close_fds, restore_signals, call_setsid, pgid_to_set,\n                       gid, extra_group_size, extra_groups,\n                       uid, child_umask, old_sigmask,\n                       c_fds_to_keep, fds_to_keep_len,\n                       preexec_fn, preexec_fn_args_tuple);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'do_fork_exec' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 868, "startColumn": 1, "endColumn": 13}, "contextRegion": {"startLine": 868, "snippet": {"text": "do_fork_exec(char *const exec_array[],\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "entry to 'do_fork_exec'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 891, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 891, "snippet": {"text": "    if (child_sigmask) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'child_sigmask' is NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 923, "startColumn": 9, "endColumn": 12}, "contextRegion": {"startLine": 923, "snippet": {"text": "        pid = fork();\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 926, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 926, "snippet": {"text": "    if (pid != 0) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'pid == 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 936, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 936, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 944, "startColumn": 5, "endLine": 951, "endColumn": 50}, "contextRegion": {"startLine": 944, "endLine": 951, "snippet": {"text": "    child_exec(exec_array, argv, envp, cwd,\n               p2cread, p2cwrite, c2pread, c2pwrite,\n               errread, errwrite, errpipe_read, errpipe_write,\n               close_fds, restore_signals, call_setsid, pgid_to_set,\n               gid, extra_group_size, extra_groups,\n               uid, child_umask, child_sigmask,\n               fds_to_keep, fds_to_keep_len,\n               preexec_fn, preexec_fn_args_tuple);\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "calling 'child_exec' from 'do_fork_exec'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 658, "startColumn": 1, "endColumn": 11}, "contextRegion": {"startLine": 658, "snippet": {"text": "child_exec(char *const exec_array[],\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "entry to 'child_exec'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 683, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 683, "snippet": {"text": "    if (make_inheritable(fds_to_keep, fds_to_keep_len, errpipe_write) < 0)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 687, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 687, "snippet": {"text": "    if (p2cwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 687, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 687, "snippet": {"text": "    if (p2cwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'p2cwrite == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 688, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 688, "snippet": {"text": "        POSIX_CALL(close(p2cwrite));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 689, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 689, "snippet": {"text": "    if (c2pread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c2pread == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 690, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 690, "snippet": {"text": "        POSIX_CALL(close(c2pread));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 691, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 691, "snippet": {"text": "    if (errread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'errread == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 692, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 692, "snippet": {"text": "        POSIX_CALL(close(errread));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 693, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 693, "snippet": {"text": "    POSIX_CALL(close(errpipe_read));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 693, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 693, "snippet": {"text": "    POSIX_CALL(close(errpipe_read));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 704, "startColumn": 12, "endColumn": 42}, "contextRegion": {"startLine": 704, "snippet": {"text": "    while (errwrite == 0 || errwrite == 1) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 715, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 715, "snippet": {"text": "    if (p2cread == 0) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 715, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 715, "snippet": {"text": "    if (p2cread == 0) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'p2cread != 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 719, "startColumn": 10, "endColumn": 12}, "contextRegion": {"startLine": 719, "snippet": {"text": "    else if (p2cread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 719, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 719, "snippet": {"text": "    else if (p2cread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'true' branch (when 'p2cread != -1')..."}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 720, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 720, "snippet": {"text": "        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 720, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 720, "snippet": {"text": "        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "opened here"}}, "kinds": ["acquire", "resource"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 720, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 720, "snippet": {"text": "        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "'dup2(p2cread, 0)' leaks here; was opened at (105)"}}, "kinds": ["danger"], "nestingLevel": 3}]}]}]}, {"ruleId": "-Wanalyzer-fd-leak", "taxa": [{"id": "775", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "leak of file descriptor 'dup2(c2pwrite, 1)'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 727, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 727, "snippet": {"text": "        POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1007, "startColumn": 1, "endColumn": 26}, "contextRegion": {"startLine": 1007, "snippet": {"text": "subprocess_fork_exec_impl(PyObject *module, PyObject *process_args,\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "entry to 'subprocess_fork_exec_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1031, "startColumn": 34, "endColumn": 35}, "contextRegion": {"startLine": 1031, "snippet": {"text": "    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1031, "startColumn": 34, "endColumn": 35}, "contextRegion": {"startLine": 1031, "snippet": {"text": "    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1033, "startColumn": 34, "endColumn": 59}, "contextRegion": {"startLine": 1033, "snippet": {"text": "    PyInterpreterState *interp = _PyInterpreterState_GET();\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_PyInterpreterState_GET' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 209, "startColumn": 35, "endColumn": 58}, "contextRegion": {"startLine": 209, "snippet": {"text": "static inline PyInterpreterState* _PyInterpreterState_GET(void) {\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "entry to '_PyInterpreterState_GET'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 212, "snippet": {"text": "    _Py_EnsureTstateNotNULL(tstate);\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "inlined call to '_Py_EnsureFuncTstateNotNULL' from '_PyInterpreterState_GET'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 188, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 188, "snippet": {"text": "    if (tstate == NULL) {\n"}}}, "logicalLocations": [{"name": "_Py_EnsureFuncTstateNotNULL", "fullyQualifiedName": "_Py_EnsureFuncTstateNotNULL", "decoratedName": "_Py_EnsureFuncTstateNotNULL", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 212, "snippet": {"text": "    _Py_EnsureTstateNotNULL(tstate);\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1033, "startColumn": 34, "endColumn": 59}, "contextRegion": {"startLine": 1033, "snippet": {"text": "    PyInterpreterState *interp = _PyInterpreterState_GET();\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_PyInterpreterState_GET'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1047, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1047, "snippet": {"text": "    if (close_fds && errpipe_write < 3) {  /* precondition */\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 9, "endColumn": 57}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_sanity_check_python_fd_sequence' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 143, "startColumn": 1, "endColumn": 33}, "contextRegion": {"startLine": 143, "snippet": {"text": "_sanity_check_python_fd_sequence(PyObject *fd_sequence)\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "entry to '_sanity_check_python_fd_sequence'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 147, "startColumn": 33, "endColumn": 34}, "contextRegion": {"startLine": 147, "snippet": {"text": "    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from '_sanity_check_python_fd_sequence'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 147, "startColumn": 33, "endColumn": 34}, "contextRegion": {"startLine": 147, "snippet": {"text": "    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "returning to '_sanity_check_python_fd_sequence' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 9, "endColumn": 57}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_sanity_check_python_fd_sequence'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1057, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1057, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1061, "startColumn": 31, "endColumn": 77}, "contextRegion": {"startLine": 1061, "snippet": {"text": "    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_PySequence_BytesToCharpArray' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 200, "startColumn": 1, "endColumn": 30}, "contextRegion": {"startLine": 200, "snippet": {"text": "_PySequence_BytesToCharpArray(PyObject* self)\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "entry to '_PySequence_BytesToCharpArray'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 208, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 208, "snippet": {"text": "    if (argc == -1)\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'argc != -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 211, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 211, "snippet": {"text": "    assert(argc >= 0);\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 211, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 211, "snippet": {"text": "    assert(argc >= 0);\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'argc >= 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 213, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 213, "snippet": {"text": "    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 213, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 213, "snippet": {"text": "    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 218, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 218, "snippet": {"text": "    array = PyMem_Malloc((argc + 1) * sizeof(char *));\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 219, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 219, "snippet": {"text": "    if (array == NULL) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'array' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1061, "startColumn": 31, "endColumn": 77}, "contextRegion": {"startLine": 1061, "snippet": {"text": "    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_PySequence_BytesToCharpArray'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1062, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1062, "snippet": {"text": "    if (!exec_array)\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch (when 'exec_array' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1068, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1068, "snippet": {"text": "    if (process_args != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1068, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1068, "snippet": {"text": "    if (process_args != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1098, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1098, "snippet": {"text": "    if (env_list != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1098, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1098, "snippet": {"text": "    if (env_list != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1104, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1104, "snippet": {"text": "    if (cwd_obj != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1104, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1104, "snippet": {"text": "    if (cwd_obj != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1115, "startColumn": 5, "endColumn": 15}, "contextRegion": {"startLine": 1115, "snippet": {"text": "    Py_ssize_t extra_group_size = -2;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1117, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1117, "snippet": {"text": "    if (extra_groups_packed != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1172, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 1172, "snippet": {"text": "    gid_t gid = (gid_t)-1;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1197, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1197, "snippet": {"text": "    if (c_fds_to_keep == NULL) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c_fds_to_keep' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 9, "endColumn": 64}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'convert_fds_to_keep_to_c' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 280, "startColumn": 1, "endColumn": 25}, "contextRegion": {"startLine": 280, "snippet": {"text": "convert_fds_to_keep_to_c(PyObject *py_fds_to_keep, int *c_fds_to_keep)\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "entry to 'convert_fds_to_keep_to_c'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 284, "startColumn": 11, "endColumn": 12}, "contextRegion": {"startLine": 284, "snippet": {"text": "    len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from 'convert_fds_to_keep_to_c'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 284, "startColumn": 11, "endColumn": 12}, "contextRegion": {"startLine": 284, "snippet": {"text": "    len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "returning to 'convert_fds_to_keep_to_c' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 9, "endColumn": 64}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from 'convert_fds_to_keep_to_c'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1208, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1208, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1208, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1208, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1217, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 1217, "snippet": {"text": "    const void *old_sigmask = NULL;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1241, "startColumn": 11, "endLine": 1248, "endColumn": 58}, "contextRegion": {"startLine": 1241, "endLine": 1248, "snippet": {"text": "    pid = do_fork_exec(exec_array, argv, envp, cwd,\n                       p2cread, p2cwrite, c2pread, c2pwrite,\n                       errread, errwrite, errpipe_read, errpipe_write,\n                       close_fds, restore_signals, call_setsid, pgid_to_set,\n                       gid, extra_group_size, extra_groups,\n                       uid, child_umask, old_sigmask,\n                       c_fds_to_keep, fds_to_keep_len,\n                       preexec_fn, preexec_fn_args_tuple);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'do_fork_exec' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 868, "startColumn": 1, "endColumn": 13}, "contextRegion": {"startLine": 868, "snippet": {"text": "do_fork_exec(char *const exec_array[],\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "entry to 'do_fork_exec'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 891, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 891, "snippet": {"text": "    if (child_sigmask) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'child_sigmask' is NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 923, "startColumn": 9, "endColumn": 12}, "contextRegion": {"startLine": 923, "snippet": {"text": "        pid = fork();\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 926, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 926, "snippet": {"text": "    if (pid != 0) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'pid == 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 936, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 936, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 944, "startColumn": 5, "endLine": 951, "endColumn": 50}, "contextRegion": {"startLine": 944, "endLine": 951, "snippet": {"text": "    child_exec(exec_array, argv, envp, cwd,\n               p2cread, p2cwrite, c2pread, c2pwrite,\n               errread, errwrite, errpipe_read, errpipe_write,\n               close_fds, restore_signals, call_setsid, pgid_to_set,\n               gid, extra_group_size, extra_groups,\n               uid, child_umask, child_sigmask,\n               fds_to_keep, fds_to_keep_len,\n               preexec_fn, preexec_fn_args_tuple);\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "calling 'child_exec' from 'do_fork_exec'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 658, "startColumn": 1, "endColumn": 11}, "contextRegion": {"startLine": 658, "snippet": {"text": "child_exec(char *const exec_array[],\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "entry to 'child_exec'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 683, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 683, "snippet": {"text": "    if (make_inheritable(fds_to_keep, fds_to_keep_len, errpipe_write) < 0)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 687, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 687, "snippet": {"text": "    if (p2cwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 687, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 687, "snippet": {"text": "    if (p2cwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'p2cwrite == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 688, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 688, "snippet": {"text": "        POSIX_CALL(close(p2cwrite));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 689, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 689, "snippet": {"text": "    if (c2pread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c2pread == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 690, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 690, "snippet": {"text": "        POSIX_CALL(close(c2pread));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 691, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 691, "snippet": {"text": "    if (errread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'errread == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 692, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 692, "snippet": {"text": "        POSIX_CALL(close(errread));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 693, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 693, "snippet": {"text": "    POSIX_CALL(close(errpipe_read));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 693, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 693, "snippet": {"text": "    POSIX_CALL(close(errpipe_read));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 704, "startColumn": 12, "endColumn": 42}, "contextRegion": {"startLine": 704, "snippet": {"text": "    while (errwrite == 0 || errwrite == 1) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 715, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 715, "snippet": {"text": "    if (p2cread == 0) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 716, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 716, "snippet": {"text": "        if (_Py_set_inheritable_async_safe(p2cread, 1, NULL) < 0)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 720, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 720, "snippet": {"text": "        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 722, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 722, "snippet": {"text": "    if (c2pwrite == 1) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c2pwrite != 1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 726, "startColumn": 10, "endColumn": 12}, "contextRegion": {"startLine": 726, "snippet": {"text": "    else if (c2pwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 726, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 726, "snippet": {"text": "    else if (c2pwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'true' branch (when 'c2pwrite != -1')..."}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 727, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 727, "snippet": {"text": "        POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 727, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 727, "snippet": {"text": "        POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "opened here"}}, "kinds": ["acquire", "resource"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 727, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 727, "snippet": {"text": "        POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "'dup2(c2pwrite, 1)' leaks here; was opened at (107)"}}, "kinds": ["danger"], "nestingLevel": 3}]}]}]}, {"ruleId": "-Wanalyzer-fd-leak", "taxa": [{"id": "775", "toolComponent": {"name": "cwe"}}], "level": "warning", "message": {"text": "leak of file descriptor 'dup2(errwrite, 2)'"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 734, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 734, "snippet": {"text": "        POSIX_CALL(dup2(errwrite, 2));  /* stderr */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}]}], "codeFlows": [{"threadFlows": [{"locations": [{"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1007, "startColumn": 1, "endColumn": 26}, "contextRegion": {"startLine": 1007, "snippet": {"text": "subprocess_fork_exec_impl(PyObject *module, PyObject *process_args,\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "entry to 'subprocess_fork_exec_impl'"}}, "kinds": ["enter", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1031, "startColumn": 34, "endColumn": 35}, "contextRegion": {"startLine": 1031, "snippet": {"text": "    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1031, "startColumn": 34, "endColumn": 35}, "contextRegion": {"startLine": 1031, "snippet": {"text": "    Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1033, "startColumn": 34, "endColumn": 59}, "contextRegion": {"startLine": 1033, "snippet": {"text": "    PyInterpreterState *interp = _PyInterpreterState_GET();\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_PyInterpreterState_GET' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 209, "startColumn": 35, "endColumn": 58}, "contextRegion": {"startLine": 209, "snippet": {"text": "static inline PyInterpreterState* _PyInterpreterState_GET(void) {\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "entry to '_PyInterpreterState_GET'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 212, "snippet": {"text": "    _Py_EnsureTstateNotNULL(tstate);\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "inlined call to '_Py_EnsureFuncTstateNotNULL' from '_PyInterpreterState_GET'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 188, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 188, "snippet": {"text": "    if (tstate == NULL) {\n"}}}, "logicalLocations": [{"name": "_Py_EnsureFuncTstateNotNULL", "fullyQualifiedName": "_Py_EnsureFuncTstateNotNULL", "decoratedName": "_Py_EnsureFuncTstateNotNULL", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_pystate.h", "uriBaseId": "PWD"}, "region": {"startLine": 212, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 212, "snippet": {"text": "    _Py_EnsureTstateNotNULL(tstate);\n"}}}, "logicalLocations": [{"name": "_PyInterpreterState_GET", "fullyQualifiedName": "_PyInterpreterState_GET", "decoratedName": "_PyInterpreterState_GET", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1033, "startColumn": 34, "endColumn": 59}, "contextRegion": {"startLine": 1033, "snippet": {"text": "    PyInterpreterState *interp = _PyInterpreterState_GET();\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_PyInterpreterState_GET'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1047, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1047, "snippet": {"text": "    if (close_fds && errpipe_write < 3) {  /* precondition */\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 9, "endColumn": 57}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_sanity_check_python_fd_sequence' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 143, "startColumn": 1, "endColumn": 33}, "contextRegion": {"startLine": 143, "snippet": {"text": "_sanity_check_python_fd_sequence(PyObject *fd_sequence)\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "entry to '_sanity_check_python_fd_sequence'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 147, "startColumn": 33, "endColumn": 34}, "contextRegion": {"startLine": 147, "snippet": {"text": "    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from '_sanity_check_python_fd_sequence'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 147, "startColumn": 33, "endColumn": 34}, "contextRegion": {"startLine": 147, "snippet": {"text": "    for (seq_idx = 0; seq_idx < PyTuple_GET_SIZE(fd_sequence); ++seq_idx) {\n"}}}, "logicalLocations": [{"name": "_sanity_check_python_fd_sequence", "fullyQualifiedName": "_sanity_check_python_fd_sequence", "decoratedName": "_sanity_check_python_fd_sequence", "kind": "function"}], "message": {"text": "returning to '_sanity_check_python_fd_sequence' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 9, "endColumn": 57}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_sanity_check_python_fd_sequence'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1051, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1051, "snippet": {"text": "    if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1057, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1057, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1061, "startColumn": 31, "endColumn": 77}, "contextRegion": {"startLine": 1061, "snippet": {"text": "    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling '_PySequence_BytesToCharpArray' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 200, "startColumn": 1, "endColumn": 30}, "contextRegion": {"startLine": 200, "snippet": {"text": "_PySequence_BytesToCharpArray(PyObject* self)\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "entry to '_PySequence_BytesToCharpArray'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 208, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 208, "snippet": {"text": "    if (argc == -1)\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'argc != -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 211, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 211, "snippet": {"text": "    assert(argc >= 0);\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 211, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 211, "snippet": {"text": "    assert(argc >= 0);\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'argc >= 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 213, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 213, "snippet": {"text": "    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 213, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 213, "snippet": {"text": "    if ((size_t)argc > (PY_SSIZE_T_MAX-sizeof(char *)) / sizeof(char *)) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 218, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 218, "snippet": {"text": "    array = PyMem_Malloc((argc + 1) * sizeof(char *));\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 219, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 219, "snippet": {"text": "    if (array == NULL) {\n"}}}, "logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "following 'false' branch (when 'array' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"logicalLocations": [{"name": "_PySequence_BytesToCharpArray", "fullyQualifiedName": "_PySequence_BytesToCharpArray", "decoratedName": "_PySequence_BytesToCharpArray", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1061, "startColumn": 31, "endColumn": 77}, "contextRegion": {"startLine": 1061, "snippet": {"text": "    char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from '_PySequence_BytesToCharpArray'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1062, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1062, "snippet": {"text": "    if (!exec_array)\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch (when 'exec_array' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1068, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1068, "snippet": {"text": "    if (process_args != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1068, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1068, "snippet": {"text": "    if (process_args != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1098, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1098, "snippet": {"text": "    if (env_list != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1098, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1098, "snippet": {"text": "    if (env_list != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1104, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1104, "snippet": {"text": "    if (cwd_obj != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1104, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1104, "snippet": {"text": "    if (cwd_obj != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1115, "startColumn": 5, "endColumn": 15}, "contextRegion": {"startLine": 1115, "snippet": {"text": "    Py_ssize_t extra_group_size = -2;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1117, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1117, "snippet": {"text": "    if (extra_groups_packed != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1172, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 1172, "snippet": {"text": "    gid_t gid = (gid_t)-1;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1197, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1197, "snippet": {"text": "    if (c_fds_to_keep == NULL) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c_fds_to_keep' is non-NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 9, "endColumn": 64}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'convert_fds_to_keep_to_c' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 280, "startColumn": 1, "endColumn": 25}, "contextRegion": {"startLine": 280, "snippet": {"text": "convert_fds_to_keep_to_c(PyObject *py_fds_to_keep, int *c_fds_to_keep)\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "entry to 'convert_fds_to_keep_to_c'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 284, "startColumn": 11, "endColumn": 12}, "contextRegion": {"startLine": 284, "snippet": {"text": "    len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "calling 'PyTuple_GET_SIZE' from 'convert_fds_to_keep_to_c'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 21, "startColumn": 26, "endColumn": 42}, "contextRegion": {"startLine": 21, "snippet": {"text": "static inline Py_ssize_t PyTuple_GET_SIZE(PyObject *op) {\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "entry to 'PyTuple_GET_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 28, "endColumn": 29}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 22, "startColumn": 20, "endColumn": 25}, "contextRegion": {"startLine": 22, "snippet": {"text": "    PyTupleObject *tuple = _PyTuple_CAST(op);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "calling 'Py_SIZE' from 'PyTuple_GET_SIZE'"}}, "kinds": ["call", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 340, "startColumn": 26, "endColumn": 33}, "contextRegion": {"startLine": 340, "snippet": {"text": "static inline Py_ssize_t Py_SIZE(PyObject *ob) {\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "entry to 'Py_SIZE'"}}, "kinds": ["enter", "function"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 341, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 341, "snippet": {"text": "    assert(ob->ob_type != &PyLong_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 342, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 342, "snippet": {"text": "    assert(ob->ob_type != &PyBool_Type);\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/object.h", "uriBaseId": "PWD"}, "region": {"startLine": 343, "startColumn": 5, "endColumn": 11}, "contextRegion": {"startLine": 343, "snippet": {"text": "    return  _PyVarObject_CAST(ob)->ob_size;\n"}}}, "logicalLocations": [{"name": "Py_SIZE", "fullyQualifiedName": "Py_SIZE", "decoratedName": "Py_SIZE", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 4}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/cpython/tupleobject.h", "uriBaseId": "PWD"}, "region": {"startLine": 23, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 23, "snippet": {"text": "    return Py_SIZE(tuple);\n"}}}, "logicalLocations": [{"name": "PyTuple_GET_SIZE", "fullyQualifiedName": "PyTuple_GET_SIZE", "decoratedName": "PyTuple_GET_SIZE", "kind": "function"}], "message": {"text": "returning to 'PyTuple_GET_SIZE' from 'Py_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 284, "startColumn": 11, "endColumn": 12}, "contextRegion": {"startLine": 284, "snippet": {"text": "    len = PyTuple_GET_SIZE(py_fds_to_keep);\n"}}}, "logicalLocations": [{"name": "convert_fds_to_keep_to_c", "fullyQualifiedName": "convert_fds_to_keep_to_c", "decoratedName": "convert_fds_to_keep_to_c", "kind": "function"}], "message": {"text": "returning to 'convert_fds_to_keep_to_c' from 'PyTuple_GET_SIZE'"}}, "kinds": ["return", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 9, "endColumn": 64}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "returning to 'subprocess_fork_exec_impl' from 'convert_fds_to_keep_to_c'"}}, "kinds": ["return", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1201, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1201, "snippet": {"text": "    if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1208, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 1208, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1208, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 1208, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1217, "startColumn": 5, "endColumn": 10}, "contextRegion": {"startLine": 1217, "snippet": {"text": "    const void *old_sigmask = NULL;\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 1241, "startColumn": 11, "endLine": 1248, "endColumn": 58}, "contextRegion": {"startLine": 1241, "endLine": 1248, "snippet": {"text": "    pid = do_fork_exec(exec_array, argv, envp, cwd,\n                       p2cread, p2cwrite, c2pread, c2pwrite,\n                       errread, errwrite, errpipe_read, errpipe_write,\n                       close_fds, restore_signals, call_setsid, pgid_to_set,\n                       gid, extra_group_size, extra_groups,\n                       uid, child_umask, old_sigmask,\n                       c_fds_to_keep, fds_to_keep_len,\n                       preexec_fn, preexec_fn_args_tuple);\n"}}}, "logicalLocations": [{"name": "subprocess_fork_exec_impl", "fullyQualifiedName": "subprocess_fork_exec_impl", "decoratedName": "subprocess_fork_exec_impl", "kind": "function"}], "message": {"text": "calling 'do_fork_exec' from 'subprocess_fork_exec_impl'"}}, "kinds": ["call", "function"], "nestingLevel": 1}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 868, "startColumn": 1, "endColumn": 13}, "contextRegion": {"startLine": 868, "snippet": {"text": "do_fork_exec(char *const exec_array[],\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "entry to 'do_fork_exec'"}}, "kinds": ["enter", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 891, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 891, "snippet": {"text": "    if (child_sigmask) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'child_sigmask' is NULL)..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 923, "startColumn": 9, "endColumn": 12}, "contextRegion": {"startLine": 923, "snippet": {"text": "        pid = fork();\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 926, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 926, "snippet": {"text": "    if (pid != 0) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'pid == 0')..."}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 936, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 936, "snippet": {"text": "    if (preexec_fn != Py_None) {\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 944, "startColumn": 5, "endLine": 951, "endColumn": 50}, "contextRegion": {"startLine": 944, "endLine": 951, "snippet": {"text": "    child_exec(exec_array, argv, envp, cwd,\n               p2cread, p2cwrite, c2pread, c2pwrite,\n               errread, errwrite, errpipe_read, errpipe_write,\n               close_fds, restore_signals, call_setsid, pgid_to_set,\n               gid, extra_group_size, extra_groups,\n               uid, child_umask, child_sigmask,\n               fds_to_keep, fds_to_keep_len,\n               preexec_fn, preexec_fn_args_tuple);\n"}}}, "logicalLocations": [{"name": "do_fork_exec", "fullyQualifiedName": "do_fork_exec", "decoratedName": "do_fork_exec", "kind": "function"}], "message": {"text": "calling 'child_exec' from 'do_fork_exec'"}}, "kinds": ["call", "function"], "nestingLevel": 2}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 658, "startColumn": 1, "endColumn": 11}, "contextRegion": {"startLine": 658, "snippet": {"text": "child_exec(char *const exec_array[],\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "entry to 'child_exec'"}}, "kinds": ["enter", "function"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 683, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 683, "snippet": {"text": "    if (make_inheritable(fds_to_keep, fds_to_keep_len, errpipe_write) < 0)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 687, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 687, "snippet": {"text": "    if (p2cwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 687, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 687, "snippet": {"text": "    if (p2cwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'p2cwrite == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 688, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 688, "snippet": {"text": "        POSIX_CALL(close(p2cwrite));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 689, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 689, "snippet": {"text": "    if (c2pread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'c2pread == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 690, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 690, "snippet": {"text": "        POSIX_CALL(close(c2pread));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 691, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 691, "snippet": {"text": "    if (errread != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'errread == -1')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 692, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 692, "snippet": {"text": "        POSIX_CALL(close(errread));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 693, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 693, "snippet": {"text": "    POSIX_CALL(close(errpipe_read));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 693, "startColumn": 5, "endColumn": 6}, "contextRegion": {"startLine": 693, "snippet": {"text": "    POSIX_CALL(close(errpipe_read));\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 704, "startColumn": 12, "endColumn": 42}, "contextRegion": {"startLine": 704, "snippet": {"text": "    while (errwrite == 0 || errwrite == 1) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 715, "startColumn": 5, "endColumn": 7}, "contextRegion": {"startLine": 715, "snippet": {"text": "    if (p2cread == 0) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 716, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 716, "snippet": {"text": "        if (_Py_set_inheritable_async_safe(p2cread, 1, NULL) < 0)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 720, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 720, "snippet": {"text": "        POSIX_CALL(dup2(p2cread, 0));  /* stdin */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 723, "startColumn": 12, "endColumn": 13}, "contextRegion": {"startLine": 723, "snippet": {"text": "        if (_Py_set_inheritable_async_safe(c2pwrite, 1, NULL) < 0)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 727, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 727, "snippet": {"text": "        POSIX_CALL(dup2(c2pwrite, 1));  /* stdout */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 729, "startColumn": 8, "endColumn": 9}, "contextRegion": {"startLine": 729, "snippet": {"text": "    if (errwrite == 2) {\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'false' branch (when 'errwrite != 2')..."}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 733, "startColumn": 10, "endColumn": 12}, "contextRegion": {"startLine": 733, "snippet": {"text": "    else if (errwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "false"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 733, "startColumn": 13, "endColumn": 14}, "contextRegion": {"startLine": 733, "snippet": {"text": "    else if (errwrite != -1)\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "following 'true' branch (when 'errwrite != -1')..."}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 734, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 734, "snippet": {"text": "        POSIX_CALL(dup2(errwrite, 2));  /* stderr */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "...to here"}}, "kinds": ["branch", "true"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 734, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 734, "snippet": {"text": "        POSIX_CALL(dup2(errwrite, 2));  /* stderr */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "opened here"}}, "kinds": ["acquire", "resource"], "nestingLevel": 3}, {"location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_posixsubprocess.c", "uriBaseId": "PWD"}, "region": {"startLine": 734, "startColumn": 9, "endColumn": 10}, "contextRegion": {"startLine": 734, "snippet": {"text": "        POSIX_CALL(dup2(errwrite, 2));  /* stderr */\n"}}}, "logicalLocations": [{"name": "child_exec", "fullyQualifiedName": "child_exec", "decoratedName": "child_exec", "kind": "function"}], "message": {"text": "'dup2(errwrite, 2)' leaks here; was opened at (109)"}}, "kinds": ["danger"], "nestingLevel": 3}]}]}]}]}]}
