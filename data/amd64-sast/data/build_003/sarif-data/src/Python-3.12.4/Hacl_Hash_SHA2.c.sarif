{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-possible-null-dereference",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-possible-null-dereference"},
                                         {"id": "-Wanalyzer-possible-null-argument",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-possible-null-argument"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "690",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/690.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.12.4/"}},
           "artifacts": [{"location": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/* MIT License\n *\n * Copyright (c) 2016-2022 INRIA, CMU and Microsoft Corporation\n * Copyright (c) 2022-2023 HACL* Contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n\n#include \"internal/Hacl_Hash_SHA2.h\"\n\n\n\nvoid Hacl_Hash_SHA2_sha256_init(uint32_t *hash)\n{\n  KRML_MAYBE_FOR8(i,\n    0U,\n    8U,\n    1U,\n    uint32_t *os = hash;\n    uint32_t x = Hacl_Hash_SHA2_h256[i];\n    os[i] = x;);\n}\n\nstatic inline void sha256_update(uint8_t *b, uint32_t *hash)\n{\n  uint32_t hash_old[8U] = { 0U };\n  uint32_t ws[16U] = { 0U };\n  memcpy(hash_old, hash, 8U * sizeof (uint32_t));\n  uint8_t *b10 = b;\n  uint32_t u = load32_be(b10);\n  ws[0U] = u;\n  uint32_t u0 = load32_be(b10 + 4U);\n  ws[1U] = u0;\n  uint32_t u1 = load32_be(b10 + 8U);\n  ws[2U] = u1;\n  uint32_t u2 = load32_be(b10 + 12U);\n  ws[3U] = u2;\n  uint32_t u3 = load32_be(b10 + 16U);\n  ws[4U] = u3;\n  uint32_t u4 = load32_be(b10 + 20U);\n  ws[5U] = u4;\n  uint32_t u5 = load32_be(b10 + 24U);\n  ws[6U] = u5;\n  uint32_t u6 = load32_be(b10 + 28U);\n  ws[7U] = u6;\n  uint32_t u7 = load32_be(b10 + 32U);\n  ws[8U] = u7;\n  uint32_t u8 = load32_be(b10 + 36U);\n  ws[9U] = u8;\n  uint32_t u9 = load32_be(b10 + 40U);\n  ws[10U] = u9;\n  uint32_t u10 = load32_be(b10 + 44U);\n  ws[11U] = u10;\n  uint32_t u11 = load32_be(b10 + 48U);\n  ws[12U] = u11;\n  uint32_t u12 = load32_be(b10 + 52U);\n  ws[13U] = u12;\n  uint32_t u13 = load32_be(b10 + 56U);\n  ws[14U] = u13;\n  uint32_t u14 = load32_be(b10 + 60U);\n  ws[15U] = u14;\n  KRML_MAYBE_FOR4(i0,\n    0U,\n    4U,\n    1U,\n    KRML_MAYBE_FOR16(i,\n      0U,\n      16U,\n      1U,\n      uint32_t k_t = Hacl_Hash_SHA2_k224_256[16U * i0 + i];\n      uint32_t ws_t = ws[i];\n      uint32_t a0 = hash[0U];\n      uint32_t b0 = hash[1U];\n      uint32_t c0 = hash[2U];\n      uint32_t d0 = hash[3U];\n      uint32_t e0 = hash[4U];\n      uint32_t f0 = hash[5U];\n      uint32_t g0 = hash[6U];\n      uint32_t h02 = hash[7U];\n      uint32_t k_e_t = k_t;\n      uint32_t\n      t1 =\n        h02\n        + ((e0 << 26U | e0 >> 6U) ^ ((e0 << 21U | e0 >> 11U) ^ (e0 << 7U | e0 >> 25U)))\n        + ((e0 & f0) ^ (~e0 & g0))\n        + k_e_t\n        + ws_t;\n      uint32_t\n      t2 =\n        ((a0 << 30U | a0 >> 2U) ^ ((a0 << 19U | a0 >> 13U) ^ (a0 << 10U | a0 >> 22U)))\n        + ((a0 & b0) ^ ((a0 & c0) ^ (b0 & c0)));\n      uint32_t a1 = t1 + t2;\n      uint32_t b1 = a0;\n      uint32_t c1 = b0;\n      uint32_t d1 = c0;\n      uint32_t e1 = d0 + t1;\n      uint32_t f1 = e0;\n      uint32_t g1 = f0;\n      uint32_t h12 = g0;\n      hash[0U] = a1;\n      hash[1U] = b1;\n      hash[2U] = c1;\n      hash[3U] = d1;\n      hash[4U] = e1;\n      hash[5U] = f1;\n      hash[6U] = g1;\n      hash[7U] = h12;);\n    if (i0 < 3U)\n    {\n      KRML_MAYBE_FOR16(i,\n        0U,\n        16U,\n        1U,\n        uint32_t t16 = ws[i];\n        uint32_t t15 = ws[(i + 1U) % 16U];\n        uint32_t t7 = ws[(i + 9U) % 16U];\n        uint32_t t2 = ws[(i + 14U) % 16U];\n        uint32_t s1 = (t2 << 15U | t2 >> 17U) ^ ((t2 << 13U | t2 >> 19U) ^ t2 >> 10U);\n        uint32_t s0 = (t15 << 25U | t15 >> 7U) ^ ((t15 << 14U | t15 >> 18U) ^ t15 >> 3U);\n        ws[i] = s1 + t7 + s0 + t16;);\n    });\n  KRML_MAYBE_FOR8(i,\n    0U,\n    8U,\n    1U,\n    uint32_t *os = hash;\n    uint32_t x = hash[i] + hash_old[i];\n    os[i] = x;);\n}\n\nvoid Hacl_Hash_SHA2_sha256_update_nblocks(uint32_t len, uint8_t *b, uint32_t *st)\n{\n  uint32_t blocks = len / 64U;\n  for (uint32_t i = 0U; i < blocks; i++)\n  {\n    uint8_t *b0 = b;\n    uint8_t *mb = b0 + i * 64U;\n    sha256_update(mb, st);\n  }\n}\n\nvoid\nHacl_Hash_SHA2_sha256_update_last(uint64_t totlen, uint32_t len, uint8_t *b, uint32_t *hash)\n{\n  uint32_t blocks;\n  if (len + 8U + 1U <= 64U)\n  {\n    blocks = 1U;\n  }\n  else\n  {\n    blocks = 2U;\n  }\n  uint32_t fin = blocks * 64U;\n  uint8_t last[128U] = { 0U };\n  uint8_t totlen_buf[8U] = { 0U };\n  uint64_t total_len_bits = totlen << 3U;\n  store64_be(totlen_buf, total_len_bits);\n  uint8_t *b0 = b;\n  memcpy(last, b0, len * sizeof (uint8_t));\n  last[len] = 0x80U;\n  memcpy(last + fin - 8U, totlen_buf, 8U * sizeof (uint8_t));\n  uint8_t *last00 = last;\n  uint8_t *last10 = last + 64U;\n  uint8_t *l0 = last00;\n  uint8_t *l1 = last10;\n  uint8_t *lb0 = l0;\n  uint8_t *lb1 = l1;\n  uint8_t *last0 = lb0;\n  uint8_t *last1 = lb1;\n  sha256_update(last0, hash);\n  if (blocks > 1U)\n  {\n    sha256_update(last1, hash);\n    return;\n  }\n}\n\nvoid Hacl_Hash_SHA2_sha256_finish(uint32_t *st, uint8_t *h)\n{\n  uint8_t hbuf[32U] = { 0U };\n  KRML_MAYBE_FOR8(i, 0U, 8U, 1U, store32_be(hbuf + i * 4U, st[i]););\n  memcpy(h, hbuf, 32U * sizeof (uint8_t));\n}\n\nvoid Hacl_Hash_SHA2_sha224_init(uint32_t *hash)\n{\n  KRML_MAYBE_FOR8(i,\n    0U,\n    8U,\n    1U,\n    uint32_t *os = hash;\n    uint32_t x = Hacl_Hash_SHA2_h224[i];\n    os[i] = x;);\n}\n\nstatic inline void sha224_update_nblocks(uint32_t len, uint8_t *b, uint32_t *st)\n{\n  Hacl_Hash_SHA2_sha256_update_nblocks(len, b, st);\n}\n\nvoid Hacl_Hash_SHA2_sha224_update_last(uint64_t totlen, uint32_t len, uint8_t *b, uint32_t *st)\n{\n  Hacl_Hash_SHA2_sha256_update_last(totlen, len, b, st);\n}\n\nvoid Hacl_Hash_SHA2_sha224_finish(uint32_t *st, uint8_t *h)\n{\n  uint8_t hbuf[32U] = { 0U };\n  KRML_MAYBE_FOR8(i, 0U, 8U, 1U, store32_be(hbuf + i * 4U, st[i]););\n  memcpy(h, hbuf, 28U * sizeof (uint8_t));\n}\n\nvoid Hacl_Hash_SHA2_sha512_init(uint64_t *hash)\n{\n  KRML_MAYBE_FOR8(i,\n    0U,\n    8U,\n    1U,\n    uint64_t *os = hash;\n    uint64_t x = Hacl_Hash_SHA2_h512[i];\n    os[i] = x;);\n}\n\nstatic inline void sha512_update(uint8_t *b, uint64_t *hash)\n{\n  uint64_t hash_old[8U] = { 0U };\n  uint64_t ws[16U] = { 0U };\n  memcpy(hash_old, hash, 8U * sizeof (uint64_t));\n  uint8_t *b10 = b;\n  uint64_t u = load64_be(b10);\n  ws[0U] = u;\n  uint64_t u0 = load64_be(b10 + 8U);\n  ws[1U] = u0;\n  uint64_t u1 = load64_be(b10 + 16U);\n  ws[2U] = u1;\n  uint64_t u2 = load64_be(b10 + 24U);\n  ws[3U] = u2;\n  uint64_t u3 = load64_be(b10 + 32U);\n  ws[4U] = u3;\n  uint64_t u4 = load64_be(b10 + 40U);\n  ws[5U] = u4;\n  uint64_t u5 = load64_be(b10 + 48U);\n  ws[6U] = u5;\n  uint64_t u6 = load64_be(b10 + 56U);\n  ws[7U] = u6;\n  uint64_t u7 = load64_be(b10 + 64U);\n  ws[8U] = u7;\n  uint64_t u8 = load64_be(b10 + 72U);\n  ws[9U] = u8;\n  uint64_t u9 = load64_be(b10 + 80U);\n  ws[10U] = u9;\n  uint64_t u10 = load64_be(b10 + 88U);\n  ws[11U] = u10;\n  uint64_t u11 = load64_be(b10 + 96U);\n  ws[12U] = u11;\n  uint64_t u12 = load64_be(b10 + 104U);\n  ws[13U] = u12;\n  uint64_t u13 = load64_be(b10 + 112U);\n  ws[14U] = u13;\n  uint64_t u14 = load64_be(b10 + 120U);\n  ws[15U] = u14;\n  KRML_MAYBE_FOR5(i0,\n    0U,\n    5U,\n    1U,\n    KRML_MAYBE_FOR16(i,\n      0U,\n      16U,\n      1U,\n      uint64_t k_t = Hacl_Hash_SHA2_k384_512[16U * i0 + i];\n      uint64_t ws_t = ws[i];\n      uint64_t a0 = hash[0U];\n      uint64_t b0 = hash[1U];\n      uint64_t c0 = hash[2U];\n      uint64_t d0 = hash[3U];\n      uint64_t e0 = hash[4U];\n      uint64_t f0 = hash[5U];\n      uint64_t g0 = hash[6U];\n      uint64_t h02 = hash[7U];\n      uint64_t k_e_t = k_t;\n      uint64_t\n      t1 =\n        h02\n        + ((e0 << 50U | e0 >> 14U) ^ ((e0 << 46U | e0 >> 18U) ^ (e0 << 23U | e0 >> 41U)))\n        + ((e0 & f0) ^ (~e0 & g0))\n        + k_e_t\n        + ws_t;\n      uint64_t\n      t2 =\n        ((a0 << 36U | a0 >> 28U) ^ ((a0 << 30U | a0 >> 34U) ^ (a0 << 25U | a0 >> 39U)))\n        + ((a0 & b0) ^ ((a0 & c0) ^ (b0 & c0)));\n      uint64_t a1 = t1 + t2;\n      uint64_t b1 = a0;\n      uint64_t c1 = b0;\n      uint64_t d1 = c0;\n      uint64_t e1 = d0 + t1;\n      uint64_t f1 = e0;\n      uint64_t g1 = f0;\n      uint64_t h12 = g0;\n      hash[0U] = a1;\n      hash[1U] = b1;\n      hash[2U] = c1;\n      hash[3U] = d1;\n      hash[4U] = e1;\n      hash[5U] = f1;\n      hash[6U] = g1;\n      hash[7U] = h12;);\n    if (i0 < 4U)\n    {\n      KRML_MAYBE_FOR16(i,\n        0U,\n        16U,\n        1U,\n        uint64_t t16 = ws[i];\n        uint64_t t15 = ws[(i + 1U) % 16U];\n        uint64_t t7 = ws[(i + 9U) % 16U];\n        uint64_t t2 = ws[(i + 14U) % 16U];\n        uint64_t s1 = (t2 << 45U | t2 >> 19U) ^ ((t2 << 3U | t2 >> 61U) ^ t2 >> 6U);\n        uint64_t s0 = (t15 << 63U | t15 >> 1U) ^ ((t15 << 56U | t15 >> 8U) ^ t15 >> 7U);\n        ws[i] = s1 + t7 + s0 + t16;);\n    });\n  KRML_MAYBE_FOR8(i,\n    0U,\n    8U,\n    1U,\n    uint64_t *os = hash;\n    uint64_t x = hash[i] + hash_old[i];\n    os[i] = x;);\n}\n\nvoid Hacl_Hash_SHA2_sha512_update_nblocks(uint32_t len, uint8_t *b, uint64_t *st)\n{\n  uint32_t blocks = len / 128U;\n  for (uint32_t i = 0U; i < blocks; i++)\n  {\n    uint8_t *b0 = b;\n    uint8_t *mb = b0 + i * 128U;\n    sha512_update(mb, st);\n  }\n}\n\nvoid\nHacl_Hash_SHA2_sha512_update_last(\n  FStar_UInt128_uint128 totlen,\n  uint32_t len,\n  uint8_t *b,\n  uint64_t *hash\n)\n{\n  uint32_t blocks;\n  if (len + 16U + 1U <= 128U)\n  {\n    blocks = 1U;\n  }\n  else\n  {\n    blocks = 2U;\n  }\n  uint32_t fin = blocks * 128U;\n  uint8_t last[256U] = { 0U };\n  uint8_t totlen_buf[16U] = { 0U };\n  FStar_UInt128_uint128 total_len_bits = FStar_UInt128_shift_left(totlen, 3U);\n  store128_be(totlen_buf, total_len_bits);\n  uint8_t *b0 = b;\n  memcpy(last, b0, len * sizeof (uint8_t));\n  last[len] = 0x80U;\n  memcpy(last + fin - 16U, totlen_buf, 16U * sizeof (uint8_t));\n  uint8_t *last00 = last;\n  uint8_t *last10 = last + 128U;\n  uint8_t *l0 = last00;\n  uint8_t *l1 = last10;\n  uint8_t *lb0 = l0;\n  uint8_t *lb1 = l1;\n  uint8_t *last0 = lb0;\n  uint8_t *last1 = lb1;\n  sha512_update(last0, hash);\n  if (blocks > 1U)\n  {\n    sha512_update(last1, hash);\n    return;\n  }\n}\n\nvoid Hacl_Hash_SHA2_sha512_finish(uint64_t *st, uint8_t *h)\n{\n  uint8_t hbuf[64U] = { 0U };\n  KRML_MAYBE_FOR8(i, 0U, 8U, 1U, store64_be(hbuf + i * 8U, st[i]););\n  memcpy(h, hbuf, 64U * sizeof (uint8_t));\n}\n\nvoid Hacl_Hash_SHA2_sha384_init(uint64_t *hash)\n{\n  KRML_MAYBE_FOR8(i,\n    0U,\n    8U,\n    1U,\n    uint64_t *os = hash;\n    uint64_t x = Hacl_Hash_SHA2_h384[i];\n    os[i] = x;);\n}\n\nvoid Hacl_Hash_SHA2_sha384_update_nblocks(uint32_t len, uint8_t *b, uint64_t *st)\n{\n  Hacl_Hash_SHA2_sha512_update_nblocks(len, b, st);\n}\n\nvoid\nHacl_Hash_SHA2_sha384_update_last(\n  FStar_UInt128_uint128 totlen,\n  uint32_t len,\n  uint8_t *b,\n  uint64_t *st\n)\n{\n  Hacl_Hash_SHA2_sha512_update_last(totlen, len, b, st);\n}\n\nvoid Hacl_Hash_SHA2_sha384_finish(uint64_t *st, uint8_t *h)\n{\n  uint8_t hbuf[64U] = { 0U };\n  KRML_MAYBE_FOR8(i, 0U, 8U, 1U, store64_be(hbuf + i * 8U, st[i]););\n  memcpy(h, hbuf, 48U * sizeof (uint8_t));\n}\n\n/**\nAllocate initial state for the SHA2_256 hash. The state is to be freed by\ncalling `free_256`.\n*/\nHacl_Streaming_MD_state_32 *Hacl_Hash_SHA2_malloc_256(void)\n{\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(64U, sizeof (uint8_t));\n  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(8U, sizeof (uint32_t));\n  Hacl_Streaming_MD_state_32\n  s = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  Hacl_Streaming_MD_state_32\n  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n  p[0U] = s;\n  Hacl_Hash_SHA2_sha256_init(block_state);\n  return p;\n}\n\n/**\nCopies the state passed as argument into a newly allocated state (deep copy).\nThe state is to be freed by calling `free_256`. Cloning the state this way is\nuseful, for instance, if your control-flow diverges and you need to feed\nmore (different) data into the hash in each branch.\n*/\nHacl_Streaming_MD_state_32 *Hacl_Hash_SHA2_copy_256(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint32_t *block_state0 = scrut.block_state;\n  uint8_t *buf0 = scrut.buf;\n  uint64_t total_len0 = scrut.total_len;\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(64U, sizeof (uint8_t));\n  memcpy(buf, buf0, 64U * sizeof (uint8_t));\n  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(8U, sizeof (uint32_t));\n  memcpy(block_state, block_state0, 8U * sizeof (uint32_t));\n  Hacl_Streaming_MD_state_32\n  s = { .block_state = block_state, .buf = buf, .total_len = total_len0 };\n  Hacl_Streaming_MD_state_32\n  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n  p[0U] = s;\n  return p;\n}\n\n/**\nReset an existing state to the initial hash state with empty data.\n*/\nvoid Hacl_Hash_SHA2_reset_256(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint32_t *block_state = scrut.block_state;\n  Hacl_Hash_SHA2_sha256_init(block_state);\n  Hacl_Streaming_MD_state_32\n  tmp = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  state[0U] = tmp;\n}\n\nstatic inline Hacl_Streaming_Types_error_code\nupdate_224_256(Hacl_Streaming_MD_state_32 *state, uint8_t *chunk, uint32_t chunk_len)\n{\n  Hacl_Streaming_MD_state_32 s = *state;\n  uint64_t total_len = s.total_len;\n  if ((uint64_t)chunk_len > 2305843009213693951ULL - total_len)\n  {\n    return Hacl_Streaming_Types_MaximumLengthExceeded;\n  }\n  uint32_t sz;\n  if (total_len % (uint64_t)64U == 0ULL && total_len > 0ULL)\n  {\n    sz = 64U;\n  }\n  else\n  {\n    sz = (uint32_t)(total_len % (uint64_t)64U);\n  }\n  if (chunk_len <= 64U - sz)\n  {\n    Hacl_Streaming_MD_state_32 s1 = *state;\n    uint32_t *block_state1 = s1.block_state;\n    uint8_t *buf = s1.buf;\n    uint64_t total_len1 = s1.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)64U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 64U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)64U);\n    }\n    uint8_t *buf2 = buf + sz1;\n    memcpy(buf2, chunk, chunk_len * sizeof (uint8_t));\n    uint64_t total_len2 = total_len1 + (uint64_t)chunk_len;\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len2\n        }\n      );\n  }\n  else if (sz == 0U)\n  {\n    Hacl_Streaming_MD_state_32 s1 = *state;\n    uint32_t *block_state1 = s1.block_state;\n    uint8_t *buf = s1.buf;\n    uint64_t total_len1 = s1.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)64U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 64U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)64U);\n    }\n    if (!(sz1 == 0U))\n    {\n      Hacl_Hash_SHA2_sha256_update_nblocks(64U, buf, block_state1);\n    }\n    uint32_t ite;\n    if ((uint64_t)chunk_len % (uint64_t)64U == 0ULL && (uint64_t)chunk_len > 0ULL)\n    {\n      ite = 64U;\n    }\n    else\n    {\n      ite = (uint32_t)((uint64_t)chunk_len % (uint64_t)64U);\n    }\n    uint32_t n_blocks = (chunk_len - ite) / 64U;\n    uint32_t data1_len = n_blocks * 64U;\n    uint32_t data2_len = chunk_len - data1_len;\n    uint8_t *data1 = chunk;\n    uint8_t *data2 = chunk + data1_len;\n    Hacl_Hash_SHA2_sha256_update_nblocks(data1_len / 64U * 64U, data1, block_state1);\n    uint8_t *dst = buf;\n    memcpy(dst, data2, data2_len * sizeof (uint8_t));\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len1 + (uint64_t)chunk_len\n        }\n      );\n  }\n  else\n  {\n    uint32_t diff = 64U - sz;\n    uint8_t *chunk1 = chunk;\n    uint8_t *chunk2 = chunk + diff;\n    Hacl_Streaming_MD_state_32 s1 = *state;\n    uint32_t *block_state10 = s1.block_state;\n    uint8_t *buf0 = s1.buf;\n    uint64_t total_len10 = s1.total_len;\n    uint32_t sz10;\n    if (total_len10 % (uint64_t)64U == 0ULL && total_len10 > 0ULL)\n    {\n      sz10 = 64U;\n    }\n    else\n    {\n      sz10 = (uint32_t)(total_len10 % (uint64_t)64U);\n    }\n    uint8_t *buf2 = buf0 + sz10;\n    memcpy(buf2, chunk1, diff * sizeof (uint8_t));\n    uint64_t total_len2 = total_len10 + (uint64_t)diff;\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state10,\n          .buf = buf0,\n          .total_len = total_len2\n        }\n      );\n    Hacl_Streaming_MD_state_32 s10 = *state;\n    uint32_t *block_state1 = s10.block_state;\n    uint8_t *buf = s10.buf;\n    uint64_t total_len1 = s10.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)64U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 64U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)64U);\n    }\n    if (!(sz1 == 0U))\n    {\n      Hacl_Hash_SHA2_sha256_update_nblocks(64U, buf, block_state1);\n    }\n    uint32_t ite;\n    if\n    ((uint64_t)(chunk_len - diff) % (uint64_t)64U == 0ULL && (uint64_t)(chunk_len - diff) > 0ULL)\n    {\n      ite = 64U;\n    }\n    else\n    {\n      ite = (uint32_t)((uint64_t)(chunk_len - diff) % (uint64_t)64U);\n    }\n    uint32_t n_blocks = (chunk_len - diff - ite) / 64U;\n    uint32_t data1_len = n_blocks * 64U;\n    uint32_t data2_len = chunk_len - diff - data1_len;\n    uint8_t *data1 = chunk2;\n    uint8_t *data2 = chunk2 + data1_len;\n    Hacl_Hash_SHA2_sha256_update_nblocks(data1_len / 64U * 64U, data1, block_state1);\n    uint8_t *dst = buf;\n    memcpy(dst, data2, data2_len * sizeof (uint8_t));\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_32){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len1 + (uint64_t)(chunk_len - diff)\n        }\n      );\n  }\n  return Hacl_Streaming_Types_Success;\n}\n\n/**\nFeed an arbitrary amount of data into the hash. This function returns 0 for\nsuccess, or 1 if the combined length of all of the data passed to `update_256`\n(since the last call to `reset_256`) exceeds 2^61-1 bytes.\n\nThis function is identical to the update function for SHA2_224.\n*/\nHacl_Streaming_Types_error_code\nHacl_Hash_SHA2_update_256(\n  Hacl_Streaming_MD_state_32 *state,\n  uint8_t *input,\n  uint32_t input_len\n)\n{\n  return update_224_256(state, input, input_len);\n}\n\n/**\nWrite the resulting hash into `output`, an array of 32 bytes. The state remains\nvalid after a call to `digest_256`, meaning the user may feed more data into\nthe hash via `update_256`. (The digest_256 function operates on an internal copy of\nthe state and therefore does not invalidate the client-held state `p`.)\n*/\nvoid Hacl_Hash_SHA2_digest_256(Hacl_Streaming_MD_state_32 *state, uint8_t *output)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint32_t *block_state = scrut.block_state;\n  uint8_t *buf_ = scrut.buf;\n  uint64_t total_len = scrut.total_len;\n  uint32_t r;\n  if (total_len % (uint64_t)64U == 0ULL && total_len > 0ULL)\n  {\n    r = 64U;\n  }\n  else\n  {\n    r = (uint32_t)(total_len % (uint64_t)64U);\n  }\n  uint8_t *buf_1 = buf_;\n  uint32_t tmp_block_state[8U] = { 0U };\n  memcpy(tmp_block_state, block_state, 8U * sizeof (uint32_t));\n  uint32_t ite;\n  if (r % 64U == 0U && r > 0U)\n  {\n    ite = 64U;\n  }\n  else\n  {\n    ite = r % 64U;\n  }\n  uint8_t *buf_last = buf_1 + r - ite;\n  uint8_t *buf_multi = buf_1;\n  Hacl_Hash_SHA2_sha256_update_nblocks(0U, buf_multi, tmp_block_state);\n  uint64_t prev_len_last = total_len - (uint64_t)r;\n  Hacl_Hash_SHA2_sha256_update_last(prev_len_last + (uint64_t)r, r, buf_last, tmp_block_state);\n  Hacl_Hash_SHA2_sha256_finish(tmp_block_state, output);\n}\n\n/**\nFree a state allocated with `malloc_256`.\n\nThis function is identical to the free function for SHA2_224.\n*/\nvoid Hacl_Hash_SHA2_free_256(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint32_t *block_state = scrut.block_state;\n  KRML_HOST_FREE(block_state);\n  KRML_HOST_FREE(buf);\n  KRML_HOST_FREE(state);\n}\n\n/**\nHash `input`, of len `input_len`, into `output`, an array of 32 bytes.\n*/\nvoid Hacl_Hash_SHA2_hash_256(uint8_t *output, uint8_t *input, uint32_t input_len)\n{\n  uint8_t *ib = input;\n  uint8_t *rb = output;\n  uint32_t st[8U] = { 0U };\n  Hacl_Hash_SHA2_sha256_init(st);\n  uint32_t rem = input_len % 64U;\n  uint64_t len_ = (uint64_t)input_len;\n  Hacl_Hash_SHA2_sha256_update_nblocks(input_len, ib, st);\n  uint32_t rem1 = input_len % 64U;\n  uint8_t *b0 = ib;\n  uint8_t *lb = b0 + input_len - rem1;\n  Hacl_Hash_SHA2_sha256_update_last(len_, rem, lb, st);\n  Hacl_Hash_SHA2_sha256_finish(st, rb);\n}\n\nHacl_Streaming_MD_state_32 *Hacl_Hash_SHA2_malloc_224(void)\n{\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(64U, sizeof (uint8_t));\n  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(8U, sizeof (uint32_t));\n  Hacl_Streaming_MD_state_32\n  s = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  Hacl_Streaming_MD_state_32\n  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n  p[0U] = s;\n  Hacl_Hash_SHA2_sha224_init(block_state);\n  return p;\n}\n\nvoid Hacl_Hash_SHA2_reset_224(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint32_t *block_state = scrut.block_state;\n  Hacl_Hash_SHA2_sha224_init(block_state);\n  Hacl_Streaming_MD_state_32\n  tmp = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  state[0U] = tmp;\n}\n\nHacl_Streaming_Types_error_code\nHacl_Hash_SHA2_update_224(\n  Hacl_Streaming_MD_state_32 *state,\n  uint8_t *input,\n  uint32_t input_len\n)\n{\n  return update_224_256(state, input, input_len);\n}\n\n/**\nWrite the resulting hash into `output`, an array of 28 bytes. The state remains\nvalid after a call to `digest_224`, meaning the user may feed more data into\nthe hash via `update_224`.\n*/\nvoid Hacl_Hash_SHA2_digest_224(Hacl_Streaming_MD_state_32 *state, uint8_t *output)\n{\n  Hacl_Streaming_MD_state_32 scrut = *state;\n  uint32_t *block_state = scrut.block_state;\n  uint8_t *buf_ = scrut.buf;\n  uint64_t total_len = scrut.total_len;\n  uint32_t r;\n  if (total_len % (uint64_t)64U == 0ULL && total_len > 0ULL)\n  {\n    r = 64U;\n  }\n  else\n  {\n    r = (uint32_t)(total_len % (uint64_t)64U);\n  }\n  uint8_t *buf_1 = buf_;\n  uint32_t tmp_block_state[8U] = { 0U };\n  memcpy(tmp_block_state, block_state, 8U * sizeof (uint32_t));\n  uint32_t ite;\n  if (r % 64U == 0U && r > 0U)\n  {\n    ite = 64U;\n  }\n  else\n  {\n    ite = r % 64U;\n  }\n  uint8_t *buf_last = buf_1 + r - ite;\n  uint8_t *buf_multi = buf_1;\n  sha224_update_nblocks(0U, buf_multi, tmp_block_state);\n  uint64_t prev_len_last = total_len - (uint64_t)r;\n  Hacl_Hash_SHA2_sha224_update_last(prev_len_last + (uint64_t)r, r, buf_last, tmp_block_state);\n  Hacl_Hash_SHA2_sha224_finish(tmp_block_state, output);\n}\n\nvoid Hacl_Hash_SHA2_free_224(Hacl_Streaming_MD_state_32 *state)\n{\n  Hacl_Hash_SHA2_free_256(state);\n}\n\n/**\nHash `input`, of len `input_len`, into `output`, an array of 28 bytes.\n*/\nvoid Hacl_Hash_SHA2_hash_224(uint8_t *output, uint8_t *input, uint32_t input_len)\n{\n  uint8_t *ib = input;\n  uint8_t *rb = output;\n  uint32_t st[8U] = { 0U };\n  Hacl_Hash_SHA2_sha224_init(st);\n  uint32_t rem = input_len % 64U;\n  uint64_t len_ = (uint64_t)input_len;\n  sha224_update_nblocks(input_len, ib, st);\n  uint32_t rem1 = input_len % 64U;\n  uint8_t *b0 = ib;\n  uint8_t *lb = b0 + input_len - rem1;\n  Hacl_Hash_SHA2_sha224_update_last(len_, rem, lb, st);\n  Hacl_Hash_SHA2_sha224_finish(st, rb);\n}\n\nHacl_Streaming_MD_state_64 *Hacl_Hash_SHA2_malloc_512(void)\n{\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(128U, sizeof (uint8_t));\n  uint64_t *block_state = (uint64_t *)KRML_HOST_CALLOC(8U, sizeof (uint64_t));\n  Hacl_Streaming_MD_state_64\n  s = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  Hacl_Streaming_MD_state_64\n  *p = (Hacl_Streaming_MD_state_64 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_64));\n  p[0U] = s;\n  Hacl_Hash_SHA2_sha512_init(block_state);\n  return p;\n}\n\n/**\nCopies the state passed as argument into a newly allocated state (deep copy).\nThe state is to be freed by calling `free_512`. Cloning the state this way is\nuseful, for instance, if your control-flow diverges and you need to feed\nmore (different) data into the hash in each branch.\n*/\nHacl_Streaming_MD_state_64 *Hacl_Hash_SHA2_copy_512(Hacl_Streaming_MD_state_64 *state)\n{\n  Hacl_Streaming_MD_state_64 scrut = *state;\n  uint64_t *block_state0 = scrut.block_state;\n  uint8_t *buf0 = scrut.buf;\n  uint64_t total_len0 = scrut.total_len;\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(128U, sizeof (uint8_t));\n  memcpy(buf, buf0, 128U * sizeof (uint8_t));\n  uint64_t *block_state = (uint64_t *)KRML_HOST_CALLOC(8U, sizeof (uint64_t));\n  memcpy(block_state, block_state0, 8U * sizeof (uint64_t));\n  Hacl_Streaming_MD_state_64\n  s = { .block_state = block_state, .buf = buf, .total_len = total_len0 };\n  Hacl_Streaming_MD_state_64\n  *p = (Hacl_Streaming_MD_state_64 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_64));\n  p[0U] = s;\n  return p;\n}\n\nvoid Hacl_Hash_SHA2_reset_512(Hacl_Streaming_MD_state_64 *state)\n{\n  Hacl_Streaming_MD_state_64 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint64_t *block_state = scrut.block_state;\n  Hacl_Hash_SHA2_sha512_init(block_state);\n  Hacl_Streaming_MD_state_64\n  tmp = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  state[0U] = tmp;\n}\n\nstatic inline Hacl_Streaming_Types_error_code\nupdate_384_512(Hacl_Streaming_MD_state_64 *state, uint8_t *chunk, uint32_t chunk_len)\n{\n  Hacl_Streaming_MD_state_64 s = *state;\n  uint64_t total_len = s.total_len;\n  if ((uint64_t)chunk_len > 18446744073709551615ULL - total_len)\n  {\n    return Hacl_Streaming_Types_MaximumLengthExceeded;\n  }\n  uint32_t sz;\n  if (total_len % (uint64_t)128U == 0ULL && total_len > 0ULL)\n  {\n    sz = 128U;\n  }\n  else\n  {\n    sz = (uint32_t)(total_len % (uint64_t)128U);\n  }\n  if (chunk_len <= 128U - sz)\n  {\n    Hacl_Streaming_MD_state_64 s1 = *state;\n    uint64_t *block_state1 = s1.block_state;\n    uint8_t *buf = s1.buf;\n    uint64_t total_len1 = s1.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)128U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 128U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)128U);\n    }\n    uint8_t *buf2 = buf + sz1;\n    memcpy(buf2, chunk, chunk_len * sizeof (uint8_t));\n    uint64_t total_len2 = total_len1 + (uint64_t)chunk_len;\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_64){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len2\n        }\n      );\n  }\n  else if (sz == 0U)\n  {\n    Hacl_Streaming_MD_state_64 s1 = *state;\n    uint64_t *block_state1 = s1.block_state;\n    uint8_t *buf = s1.buf;\n    uint64_t total_len1 = s1.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)128U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 128U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)128U);\n    }\n    if (!(sz1 == 0U))\n    {\n      Hacl_Hash_SHA2_sha512_update_nblocks(128U, buf, block_state1);\n    }\n    uint32_t ite;\n    if ((uint64_t)chunk_len % (uint64_t)128U == 0ULL && (uint64_t)chunk_len > 0ULL)\n    {\n      ite = 128U;\n    }\n    else\n    {\n      ite = (uint32_t)((uint64_t)chunk_len % (uint64_t)128U);\n    }\n    uint32_t n_blocks = (chunk_len - ite) / 128U;\n    uint32_t data1_len = n_blocks * 128U;\n    uint32_t data2_len = chunk_len - data1_len;\n    uint8_t *data1 = chunk;\n    uint8_t *data2 = chunk + data1_len;\n    Hacl_Hash_SHA2_sha512_update_nblocks(data1_len / 128U * 128U, data1, block_state1);\n    uint8_t *dst = buf;\n    memcpy(dst, data2, data2_len * sizeof (uint8_t));\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_64){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len1 + (uint64_t)chunk_len\n        }\n      );\n  }\n  else\n  {\n    uint32_t diff = 128U - sz;\n    uint8_t *chunk1 = chunk;\n    uint8_t *chunk2 = chunk + diff;\n    Hacl_Streaming_MD_state_64 s1 = *state;\n    uint64_t *block_state10 = s1.block_state;\n    uint8_t *buf0 = s1.buf;\n    uint64_t total_len10 = s1.total_len;\n    uint32_t sz10;\n    if (total_len10 % (uint64_t)128U == 0ULL && total_len10 > 0ULL)\n    {\n      sz10 = 128U;\n    }\n    else\n    {\n      sz10 = (uint32_t)(total_len10 % (uint64_t)128U);\n    }\n    uint8_t *buf2 = buf0 + sz10;\n    memcpy(buf2, chunk1, diff * sizeof (uint8_t));\n    uint64_t total_len2 = total_len10 + (uint64_t)diff;\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_64){\n          .block_state = block_state10,\n          .buf = buf0,\n          .total_len = total_len2\n        }\n      );\n    Hacl_Streaming_MD_state_64 s10 = *state;\n    uint64_t *block_state1 = s10.block_state;\n    uint8_t *buf = s10.buf;\n    uint64_t total_len1 = s10.total_len;\n    uint32_t sz1;\n    if (total_len1 % (uint64_t)128U == 0ULL && total_len1 > 0ULL)\n    {\n      sz1 = 128U;\n    }\n    else\n    {\n      sz1 = (uint32_t)(total_len1 % (uint64_t)128U);\n    }\n    if (!(sz1 == 0U))\n    {\n      Hacl_Hash_SHA2_sha512_update_nblocks(128U, buf, block_state1);\n    }\n    uint32_t ite;\n    if\n    ((uint64_t)(chunk_len - diff) % (uint64_t)128U == 0ULL && (uint64_t)(chunk_len - diff) > 0ULL)\n    {\n      ite = 128U;\n    }\n    else\n    {\n      ite = (uint32_t)((uint64_t)(chunk_len - diff) % (uint64_t)128U);\n    }\n    uint32_t n_blocks = (chunk_len - diff - ite) / 128U;\n    uint32_t data1_len = n_blocks * 128U;\n    uint32_t data2_len = chunk_len - diff - data1_len;\n    uint8_t *data1 = chunk2;\n    uint8_t *data2 = chunk2 + data1_len;\n    Hacl_Hash_SHA2_sha512_update_nblocks(data1_len / 128U * 128U, data1, block_state1);\n    uint8_t *dst = buf;\n    memcpy(dst, data2, data2_len * sizeof (uint8_t));\n    *state\n    =\n      (\n        (Hacl_Streaming_MD_state_64){\n          .block_state = block_state1,\n          .buf = buf,\n          .total_len = total_len1 + (uint64_t)(chunk_len - diff)\n        }\n      );\n  }\n  return Hacl_Streaming_Types_Success;\n}\n\n/**\nFeed an arbitrary amount of data into the hash. This function returns 0 for\nsuccess, or 1 if the combined length of all of the data passed to `update_512`\n(since the last call to `reset_512`) exceeds 2^125-1 bytes.\n\nThis function is identical to the update function for SHA2_384.\n*/\nHacl_Streaming_Types_error_code\nHacl_Hash_SHA2_update_512(\n  Hacl_Streaming_MD_state_64 *state,\n  uint8_t *input,\n  uint32_t input_len\n)\n{\n  return update_384_512(state, input, input_len);\n}\n\n/**\nWrite the resulting hash into `output`, an array of 64 bytes. The state remains\nvalid after a call to `digest_512`, meaning the user may feed more data into\nthe hash via `update_512`. (The digest_512 function operates on an internal copy of\nthe state and therefore does not invalidate the client-held state `p`.)\n*/\nvoid Hacl_Hash_SHA2_digest_512(Hacl_Streaming_MD_state_64 *state, uint8_t *output)\n{\n  Hacl_Streaming_MD_state_64 scrut = *state;\n  uint64_t *block_state = scrut.block_state;\n  uint8_t *buf_ = scrut.buf;\n  uint64_t total_len = scrut.total_len;\n  uint32_t r;\n  if (total_len % (uint64_t)128U == 0ULL && total_len > 0ULL)\n  {\n    r = 128U;\n  }\n  else\n  {\n    r = (uint32_t)(total_len % (uint64_t)128U);\n  }\n  uint8_t *buf_1 = buf_;\n  uint64_t tmp_block_state[8U] = { 0U };\n  memcpy(tmp_block_state, block_state, 8U * sizeof (uint64_t));\n  uint32_t ite;\n  if (r % 128U == 0U && r > 0U)\n  {\n    ite = 128U;\n  }\n  else\n  {\n    ite = r % 128U;\n  }\n  uint8_t *buf_last = buf_1 + r - ite;\n  uint8_t *buf_multi = buf_1;\n  Hacl_Hash_SHA2_sha512_update_nblocks(0U, buf_multi, tmp_block_state);\n  uint64_t prev_len_last = total_len - (uint64_t)r;\n  Hacl_Hash_SHA2_sha512_update_last(FStar_UInt128_add(FStar_UInt128_uint64_to_uint128(prev_len_last),\n      FStar_UInt128_uint64_to_uint128((uint64_t)r)),\n    r,\n    buf_last,\n    tmp_block_state);\n  Hacl_Hash_SHA2_sha512_finish(tmp_block_state, output);\n}\n\n/**\nFree a state allocated with `malloc_512`.\n\nThis function is identical to the free function for SHA2_384.\n*/\nvoid Hacl_Hash_SHA2_free_512(Hacl_Streaming_MD_state_64 *state)\n{\n  Hacl_Streaming_MD_state_64 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint64_t *block_state = scrut.block_state;\n  KRML_HOST_FREE(block_state);\n  KRML_HOST_FREE(buf);\n  KRML_HOST_FREE(state);\n}\n\n/**\nHash `input`, of len `input_len`, into `output`, an array of 64 bytes.\n*/\nvoid Hacl_Hash_SHA2_hash_512(uint8_t *output, uint8_t *input, uint32_t input_len)\n{\n  uint8_t *ib = input;\n  uint8_t *rb = output;\n  uint64_t st[8U] = { 0U };\n  Hacl_Hash_SHA2_sha512_init(st);\n  uint32_t rem = input_len % 128U;\n  FStar_UInt128_uint128 len_ = FStar_UInt128_uint64_to_uint128((uint64_t)input_len);\n  Hacl_Hash_SHA2_sha512_update_nblocks(input_len, ib, st);\n  uint32_t rem1 = input_len % 128U;\n  uint8_t *b0 = ib;\n  uint8_t *lb = b0 + input_len - rem1;\n  Hacl_Hash_SHA2_sha512_update_last(len_, rem, lb, st);\n  Hacl_Hash_SHA2_sha512_finish(st, rb);\n}\n\nHacl_Streaming_MD_state_64 *Hacl_Hash_SHA2_malloc_384(void)\n{\n  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(128U, sizeof (uint8_t));\n  uint64_t *block_state = (uint64_t *)KRML_HOST_CALLOC(8U, sizeof (uint64_t));\n  Hacl_Streaming_MD_state_64\n  s = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  Hacl_Streaming_MD_state_64\n  *p = (Hacl_Streaming_MD_state_64 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_64));\n  p[0U] = s;\n  Hacl_Hash_SHA2_sha384_init(block_state);\n  return p;\n}\n\nvoid Hacl_Hash_SHA2_reset_384(Hacl_Streaming_MD_state_64 *state)\n{\n  Hacl_Streaming_MD_state_64 scrut = *state;\n  uint8_t *buf = scrut.buf;\n  uint64_t *block_state = scrut.block_state;\n  Hacl_Hash_SHA2_sha384_init(block_state);\n  Hacl_Streaming_MD_state_64\n  tmp = { .block_state = block_state, .buf = buf, .total_len = (uint64_t)0U };\n  state[0U] = tmp;\n}\n\nHacl_Streaming_Types_error_code\nHacl_Hash_SHA2_update_384(\n  Hacl_Streaming_MD_state_64 *state,\n  uint8_t *input,\n  uint32_t input_len\n)\n{\n  return update_384_512(state, input, input_len);\n}\n\n/**\nWrite the resulting hash into `output`, an array of 48 bytes. The state remains\nvalid after a call to `digest_384`, meaning the user may feed more data into\nthe hash via `update_384`.\n*/\nvoid Hacl_Hash_SHA2_digest_384(Hacl_Streaming_MD_state_64 *state, uint8_t *output)\n{\n  Hacl_Streaming_MD_state_64 scrut = *state;\n  uint64_t *block_state = scrut.block_state;\n  uint8_t *buf_ = scrut.buf;\n  uint64_t total_len = scrut.total_len;\n  uint32_t r;\n  if (total_len % (uint64_t)128U == 0ULL && total_len > 0ULL)\n  {\n    r = 128U;\n  }\n  else\n  {\n    r = (uint32_t)(total_len % (uint64_t)128U);\n  }\n  uint8_t *buf_1 = buf_;\n  uint64_t tmp_block_state[8U] = { 0U };\n  memcpy(tmp_block_state, block_state, 8U * sizeof (uint64_t));\n  uint32_t ite;\n  if (r % 128U == 0U && r > 0U)\n  {\n    ite = 128U;\n  }\n  else\n  {\n    ite = r % 128U;\n  }\n  uint8_t *buf_last = buf_1 + r - ite;\n  uint8_t *buf_multi = buf_1;\n  Hacl_Hash_SHA2_sha384_update_nblocks(0U, buf_multi, tmp_block_state);\n  uint64_t prev_len_last = total_len - (uint64_t)r;\n  Hacl_Hash_SHA2_sha384_update_last(FStar_UInt128_add(FStar_UInt128_uint64_to_uint128(prev_len_last),\n      FStar_UInt128_uint64_to_uint128((uint64_t)r)),\n    r,\n    buf_last,\n    tmp_block_state);\n  Hacl_Hash_SHA2_sha384_finish(tmp_block_state, output);\n}\n\nvoid Hacl_Hash_SHA2_free_384(Hacl_Streaming_MD_state_64 *state)\n{\n  Hacl_Hash_SHA2_free_512(state);\n}\n\n/**\nHash `input`, of len `input_len`, into `output`, an array of 48 bytes.\n*/\nvoid Hacl_Hash_SHA2_hash_384(uint8_t *output, uint8_t *input, uint32_t input_len)\n{\n  uint8_t *ib = input;\n  uint8_t *rb = output;\n  uint64_t st[8U] = { 0U };\n  Hacl_Hash_SHA2_sha384_init(st);\n  uint32_t rem = input_len % 128U;\n  FStar_UInt128_uint128 len_ = FStar_UInt128_uint64_to_uint128((uint64_t)input_len);\n  Hacl_Hash_SHA2_sha384_update_nblocks(input_len, ib, st);\n  uint32_t rem1 = input_len % 128U;\n  uint8_t *b0 = ib;\n  uint8_t *lb = b0 + input_len - rem1;\n  Hacl_Hash_SHA2_sha384_update_last(len_, rem, lb, st);\n  Hacl_Hash_SHA2_sha384_finish(st, rb);\n}\n\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 2480,
                                       "gcc/analyzer/saved_diagnostic/snode": 229,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13940)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 16},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'block_state'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 32,
                                                                       "startColumn": 3,
                                                                       "endColumn": 4},
                                                            "contextRegion": {"startLine": 32,
                                                                              "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 450,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 78},
                                                                                                         "contextRegion": {"startLine": 450,
                                                                                                                           "snippet": {"text": "  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(8U, sizeof (uint32_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 456,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 456,
                                                                                                                           "snippet": {"text": "  Hacl_Hash_SHA2_sha256_init(block_state);\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Hacl_Hash_SHA2_sha256_init' from 'python_hashlib_Hacl_Hash_SHA2_malloc_256'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                                                     "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                                                     "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 32,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 32,
                                                                                                                           "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                                                                    "logicalLocations": [{"name": "Hacl_Hash_SHA2_sha256_init",
                                                                                                          "fullyQualifiedName": "Hacl_Hash_SHA2_sha256_init",
                                                                                                          "decoratedName": "Hacl_Hash_SHA2_sha256_init",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'block_state' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1761,
                                       "gcc/analyzer/saved_diagnostic/snode": 146,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13940)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 10},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'block_state'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 205,
                                                                       "startColumn": 3,
                                                                       "endColumn": 4},
                                                            "contextRegion": {"startLine": 205,
                                                                              "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 763,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 78},
                                                                                                         "contextRegion": {"startLine": 763,
                                                                                                                           "snippet": {"text": "  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(8U, sizeof (uint32_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 769,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 769,
                                                                                                                           "snippet": {"text": "  Hacl_Hash_SHA2_sha224_init(block_state);\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Hacl_Hash_SHA2_sha224_init' from 'python_hashlib_Hacl_Hash_SHA2_malloc_224'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                                                     "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                                                     "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 205,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 205,
                                                                                                                           "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                                                                    "logicalLocations": [{"name": "Hacl_Hash_SHA2_sha224_init",
                                                                                                          "fullyQualifiedName": "Hacl_Hash_SHA2_sha224_init",
                                                                                                          "decoratedName": "Hacl_Hash_SHA2_sha224_init",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'block_state' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1269,
                                       "gcc/analyzer/saved_diagnostic/snode": 112,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13940)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 7},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'block_state'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 233,
                                                                       "startColumn": 3,
                                                                       "endColumn": 4},
                                                            "contextRegion": {"startLine": 233,
                                                                              "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 861,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 78},
                                                                                                         "contextRegion": {"startLine": 861,
                                                                                                                           "snippet": {"text": "  uint64_t *block_state = (uint64_t *)KRML_HOST_CALLOC(8U, sizeof (uint64_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 867,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 867,
                                                                                                                           "snippet": {"text": "  Hacl_Hash_SHA2_sha512_init(block_state);\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Hacl_Hash_SHA2_sha512_init' from 'python_hashlib_Hacl_Hash_SHA2_malloc_512'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                                                     "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                                                     "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 233,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 233,
                                                                                                                           "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                                                                    "logicalLocations": [{"name": "Hacl_Hash_SHA2_sha512_init",
                                                                                                          "fullyQualifiedName": "Hacl_Hash_SHA2_sha512_init",
                                                                                                          "decoratedName": "Hacl_Hash_SHA2_sha512_init",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'block_state' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 546,
                                       "gcc/analyzer/saved_diagnostic/snode": 32,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13940)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 1},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'block_state'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 411,
                                                                       "startColumn": 3,
                                                                       "endColumn": 4},
                                                            "contextRegion": {"startLine": 411,
                                                                              "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1175,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 78},
                                                                                                         "contextRegion": {"startLine": 1175,
                                                                                                                           "snippet": {"text": "  uint64_t *block_state = (uint64_t *)KRML_HOST_CALLOC(8U, sizeof (uint64_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1181,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 1181,
                                                                                                                           "snippet": {"text": "  Hacl_Hash_SHA2_sha384_init(block_state);\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'Hacl_Hash_SHA2_sha384_init' from 'python_hashlib_Hacl_Hash_SHA2_malloc_384'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                                                     "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                                                     "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 411,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 4},
                                                                                                         "contextRegion": {"startLine": 411,
                                                                                                                           "snippet": {"text": "  KRML_MAYBE_FOR8(i,\n"}}},
                                                                                    "logicalLocations": [{"name": "Hacl_Hash_SHA2_sha384_init",
                                                                                                          "fullyQualifiedName": "Hacl_Hash_SHA2_sha384_init",
                                                                                                          "decoratedName": "Hacl_Hash_SHA2_sha384_init",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'block_state' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 3}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 2479,
                                       "gcc/analyzer/saved_diagnostic/snode": 229,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13949)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 15},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'p'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 455,
                                                                       "startColumn": 3,
                                                                       "endColumn": 12},
                                                            "contextRegion": {"startLine": 455,
                                                                              "snippet": {"text": "  p[0U] = s;\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 454,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 91},
                                                                                                         "contextRegion": {"startLine": 454,
                                                                                                                           "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 455,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 455,
                                                                                                                           "snippet": {"text": "  p[0U] = s;\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'p' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-argument",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 2465,
                                       "gcc/analyzer/saved_diagnostic/snode": 226,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13931)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 12},
                        "level": "warning",
                        "message": {"text": "use of possibly-NULL 'buf' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 473,
                                                                       "startColumn": 3,
                                                                       "endColumn": 44},
                                                            "contextRegion": {"startLine": 473,
                                                                              "snippet": {"text": "  memcpy(buf, buf0, 64U * sizeof (uint8_t));\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 472,
                                                                                                                    "startColumn": 29,
                                                                                                                    "endColumn": 68},
                                                                                                         "contextRegion": {"startLine": 472,
                                                                                                                           "snippet": {"text": "  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(64U, sizeof (uint8_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 473,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 44},
                                                                                                         "contextRegion": {"startLine": 473,
                                                                                                                           "snippet": {"text": "  memcpy(buf, buf0, 64U * sizeof (uint8_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('buf') from (1) could be NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_memcpy' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-possible-null-argument",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 2467,
                                       "gcc/analyzer/saved_diagnostic/snode": 226,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13940)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 13},
                        "level": "warning",
                        "message": {"text": "use of possibly-NULL 'block_state' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 475,
                                                                       "startColumn": 3,
                                                                       "endColumn": 60},
                                                            "contextRegion": {"startLine": 475,
                                                                              "snippet": {"text": "  memcpy(block_state, block_state0, 8U * sizeof (uint32_t));\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 474,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 78},
                                                                                                         "contextRegion": {"startLine": 474,
                                                                                                                           "snippet": {"text": "  uint32_t *block_state = (uint32_t *)KRML_HOST_CALLOC(8U, sizeof (uint32_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 475,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 60},
                                                                                                         "contextRegion": {"startLine": 475,
                                                                                                                           "snippet": {"text": "  memcpy(block_state, block_state0, 8U * sizeof (uint32_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('block_state') from (1) could be NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_memcpy' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 2469,
                                       "gcc/analyzer/saved_diagnostic/snode": 226,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13949)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 14},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'p'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 480,
                                                                       "startColumn": 3,
                                                                       "endColumn": 12},
                                                            "contextRegion": {"startLine": 480,
                                                                              "snippet": {"text": "  p[0U] = s;\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 91},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "  p[0U] = s;\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_256",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'p' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1760,
                                       "gcc/analyzer/saved_diagnostic/snode": 146,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13949)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 9},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'p'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 768,
                                                                       "startColumn": 3,
                                                                       "endColumn": 12},
                                                            "contextRegion": {"startLine": 768,
                                                                              "snippet": {"text": "  p[0U] = s;\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 767,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 91},
                                                                                                         "contextRegion": {"startLine": 767,
                                                                                                                           "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_32 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_32));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 768,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 768,
                                                                                                                           "snippet": {"text": "  p[0U] = s;\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_224",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'p' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1268,
                                       "gcc/analyzer/saved_diagnostic/snode": 112,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13949)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 6},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'p'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 866,
                                                                       "startColumn": 3,
                                                                       "endColumn": 12},
                                                            "contextRegion": {"startLine": 866,
                                                                              "snippet": {"text": "  p[0U] = s;\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 865,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 91},
                                                                                                         "contextRegion": {"startLine": 865,
                                                                                                                           "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_64 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_64));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 866,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 866,
                                                                                                                           "snippet": {"text": "  p[0U] = s;\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'p' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-argument",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1254,
                                       "gcc/analyzer/saved_diagnostic/snode": 109,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13931)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 3},
                        "level": "warning",
                        "message": {"text": "use of possibly-NULL 'buf' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 884,
                                                                       "startColumn": 3,
                                                                       "endColumn": 45},
                                                            "contextRegion": {"startLine": 884,
                                                                              "snippet": {"text": "  memcpy(buf, buf0, 128U * sizeof (uint8_t));\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 883,
                                                                                                                    "startColumn": 29,
                                                                                                                    "endColumn": 69},
                                                                                                         "contextRegion": {"startLine": 883,
                                                                                                                           "snippet": {"text": "  uint8_t *buf = (uint8_t *)KRML_HOST_CALLOC(128U, sizeof (uint8_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 884,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 884,
                                                                                                                           "snippet": {"text": "  memcpy(buf, buf0, 128U * sizeof (uint8_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('buf') from (1) could be NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_memcpy' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-possible-null-argument",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1256,
                                       "gcc/analyzer/saved_diagnostic/snode": 109,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13940)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 4},
                        "level": "warning",
                        "message": {"text": "use of possibly-NULL 'block_state' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 886,
                                                                       "startColumn": 3,
                                                                       "endColumn": 60},
                                                            "contextRegion": {"startLine": 886,
                                                                              "snippet": {"text": "  memcpy(block_state, block_state0, 8U * sizeof (uint64_t));\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 885,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 78},
                                                                                                         "contextRegion": {"startLine": 885,
                                                                                                                           "snippet": {"text": "  uint64_t *block_state = (uint64_t *)KRML_HOST_CALLOC(8U, sizeof (uint64_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 886,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 60},
                                                                                                         "contextRegion": {"startLine": 886,
                                                                                                                           "snippet": {"text": "  memcpy(block_state, block_state0, 8U * sizeof (uint64_t));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('block_state') from (1) could be NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_memcpy' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1258,
                                       "gcc/analyzer/saved_diagnostic/snode": 109,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13949)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 5},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'p'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 891,
                                                                       "startColumn": 3,
                                                                       "endColumn": 12},
                                                            "contextRegion": {"startLine": 891,
                                                                              "snippet": {"text": "  p[0U] = s;\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 890,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 91},
                                                                                                         "contextRegion": {"startLine": 890,
                                                                                                                           "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_64 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_64));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 891,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 891,
                                                                                                                           "snippet": {"text": "  p[0U] = s;\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_copy_512",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'p' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}]},
                       {"ruleId": "-Wanalyzer-possible-null-dereference",
                        "taxa": [{"id": "690",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 545,
                                       "gcc/analyzer/saved_diagnostic/snode": 32,
                                       "gcc/analyzer/saved_diagnostic/sval": "&HEAP_ALLOCATED_REGION(13949)",
                                       "gcc/analyzer/saved_diagnostic/state": "unchecked ({free})",
                                       "gcc/analyzer/saved_diagnostic/idx": 0},
                        "level": "warning",
                        "message": {"text": "dereference of possibly-NULL 'p'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 1180,
                                                                       "startColumn": 3,
                                                                       "endColumn": 12},
                                                            "contextRegion": {"startLine": 1180,
                                                                              "snippet": {"text": "  p[0U] = s;\n"}}},
                                       "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                             "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                             "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1179,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 91},
                                                                                                         "contextRegion": {"startLine": 1179,
                                                                                                                           "snippet": {"text": "  *p = (Hacl_Streaming_MD_state_64 *)KRML_HOST_MALLOC(sizeof (Hacl_Streaming_MD_state_64));\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "this call could return NULL"}},
                                                                       "kinds": ["acquire",
                                                                                 "memory"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_hacl/Hacl_Hash_SHA2.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1180,
                                                                                                                    "startColumn": 3,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 1180,
                                                                                                                           "snippet": {"text": "  p[0U] = s;\n"}}},
                                                                                    "logicalLocations": [{"name": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "fullyQualifiedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "decoratedName": "python_hashlib_Hacl_Hash_SHA2_malloc_384",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "'p' could be NULL: unchecked value from (1)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2}]}]}]}]}]}
