{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-null-dereference",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-dereference"},
                                         {"id": "-Wanalyzer-null-argument",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-argument"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "476",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/476.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.12.4/"}},
           "artifacts": [{"location": {"uri": "./Include/internal/pycore_opcode_utils.h",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#ifndef Py_INTERNAL_OPCODE_UTILS_H\n#define Py_INTERNAL_OPCODE_UTILS_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifndef Py_BUILD_CORE\n#  error \"this header requires Py_BUILD_CORE define\"\n#endif\n\n#include \"pycore_opcode.h\"        // _PyOpcode_Jump\n\n\n#define MAX_REAL_OPCODE 254\n\n#define IS_WITHIN_OPCODE_RANGE(opcode) \\\n        (((opcode) >= 0 && (opcode) <= MAX_REAL_OPCODE) || \\\n         IS_PSEUDO_OPCODE(opcode))\n\n#define IS_JUMP_OPCODE(opcode) \\\n         is_bit_set_in_table(_PyOpcode_Jump, opcode)\n\n#define IS_BLOCK_PUSH_OPCODE(opcode) \\\n        ((opcode) == SETUP_FINALLY || \\\n         (opcode) == SETUP_WITH || \\\n         (opcode) == SETUP_CLEANUP)\n\n#define HAS_TARGET(opcode) \\\n        (IS_JUMP_OPCODE(opcode) || IS_BLOCK_PUSH_OPCODE(opcode))\n\n/* opcodes that must be last in the basicblock */\n#define IS_TERMINATOR_OPCODE(opcode) \\\n        (IS_JUMP_OPCODE(opcode) || IS_SCOPE_EXIT_OPCODE(opcode))\n\n/* opcodes which are not emitted in codegen stage, only by the assembler */\n#define IS_ASSEMBLER_OPCODE(opcode) \\\n        ((opcode) == JUMP_FORWARD || \\\n         (opcode) == JUMP_BACKWARD || \\\n         (opcode) == JUMP_BACKWARD_NO_INTERRUPT)\n\n#define IS_BACKWARDS_JUMP_OPCODE(opcode) \\\n        ((opcode) == JUMP_BACKWARD || \\\n         (opcode) == JUMP_BACKWARD_NO_INTERRUPT)\n\n#define IS_UNCONDITIONAL_JUMP_OPCODE(opcode) \\\n        ((opcode) == JUMP || \\\n         (opcode) == JUMP_NO_INTERRUPT || \\\n         (opcode) == JUMP_FORWARD || \\\n         (opcode) == JUMP_BACKWARD || \\\n         (opcode) == JUMP_BACKWARD_NO_INTERRUPT)\n\n#define IS_SCOPE_EXIT_OPCODE(opcode) \\\n        ((opcode) == RETURN_VALUE || \\\n         (opcode) == RETURN_CONST || \\\n         (opcode) == RAISE_VARARGS || \\\n         (opcode) == RERAISE)\n\n#define IS_SUPERINSTRUCTION_OPCODE(opcode) \\\n        ((opcode) == LOAD_FAST__LOAD_FAST || \\\n         (opcode) == LOAD_FAST__LOAD_CONST || \\\n         (opcode) == LOAD_CONST__LOAD_FAST || \\\n         (opcode) == STORE_FAST__LOAD_FAST || \\\n         (opcode) == STORE_FAST__STORE_FAST)\n\n\n#define LOG_BITS_PER_INT 5\n#define MASK_LOW_LOG_BITS 31\n\nstatic inline int\nis_bit_set_in_table(const uint32_t *table, int bitindex) {\n    /* Is the relevant bit set in the relevant word? */\n    /* 512 bits fit into 9 32-bits words.\n     * Word is indexed by (bitindex>>ln(size of int in bits)).\n     * Bit within word is the low bits of bitindex.\n     */\n    if (bitindex >= 0 && bitindex < 512) {\n        uint32_t word = table[bitindex >> LOG_BITS_PER_INT];\n        return (word >> (bitindex & MASK_LOW_LOG_BITS)) & 1;\n    }\n    else {\n        return 0;\n    }\n}\n\n#undef LOG_BITS_PER_INT\n#undef MASK_LOW_LOG_BITS\n\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* !Py_INTERNAL_OPCODE_UTILS_H */\n"},
                          "sourceLanguage": "c"},
                         {"location": {"uri": "Python/flowgraph.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "\n#include <stdbool.h>\n\n#include \"Python.h\"\n#include \"pycore_flowgraph.h\"\n#include \"pycore_compile.h\"\n#include \"pycore_pymem.h\"         // _PyMem_IsPtrFreed()\n\n#include \"pycore_opcode_utils.h\"\n#define NEED_OPCODE_METADATA\n#include \"opcode_metadata.h\"      // _PyOpcode_opcode_metadata, _PyOpcode_num_popped/pushed\n#undef NEED_OPCODE_METADATA\n\n\n#undef SUCCESS\n#undef ERROR\n#define SUCCESS 0\n#define ERROR -1\n\n#define RETURN_IF_ERROR(X)  \\\n    if ((X) == -1) {        \\\n        return ERROR;       \\\n    }\n\n#define DEFAULT_BLOCK_SIZE 16\n\ntypedef _PyCompilerSrcLocation location;\ntypedef _PyCfgJumpTargetLabel jump_target_label;\ntypedef _PyCfgBasicblock basicblock;\ntypedef _PyCfgBuilder cfg_builder;\ntypedef _PyCfgInstruction cfg_instr;\n\nstatic const jump_target_label NO_LABEL = {-1};\n\n#define SAME_LABEL(L1, L2) ((L1).id == (L2).id)\n#define IS_LABEL(L) (!SAME_LABEL((L), (NO_LABEL)))\n\n\nstatic inline int\nis_block_push(cfg_instr *i)\n{\n    return IS_BLOCK_PUSH_OPCODE(i->i_opcode);\n}\n\nstatic inline int\nis_jump(cfg_instr *i)\n{\n    return IS_JUMP_OPCODE(i->i_opcode);\n}\n\n/* One arg*/\n#define INSTR_SET_OP1(I, OP, ARG) \\\n    do { \\\n        assert(HAS_ARG(OP)); \\\n        _PyCfgInstruction *_instr__ptr_ = (I); \\\n        _instr__ptr_->i_opcode = (OP); \\\n        _instr__ptr_->i_oparg = (ARG); \\\n    } while (0);\n\n/* No args*/\n#define INSTR_SET_OP0(I, OP) \\\n    do { \\\n        assert(!HAS_ARG(OP)); \\\n        _PyCfgInstruction *_instr__ptr_ = (I); \\\n        _instr__ptr_->i_opcode = (OP); \\\n        _instr__ptr_->i_oparg = 0; \\\n    } while (0);\n\n/***** Blocks *****/\n\n/* Returns the offset of the next instruction in the current block's\n   b_instr array.  Resizes the b_instr as necessary.\n   Returns -1 on failure.\n*/\nstatic int\nbasicblock_next_instr(basicblock *b)\n{\n    assert(b != NULL);\n    RETURN_IF_ERROR(\n        _PyCompile_EnsureArrayLargeEnough(\n            b->b_iused + 1,\n            (void**)&b->b_instr,\n            &b->b_ialloc,\n            DEFAULT_BLOCK_SIZE,\n            sizeof(cfg_instr)));\n    return b->b_iused++;\n}\n\n/* Allocate a new block and return a pointer to it.\n   Returns NULL on error.\n*/\n\nstatic basicblock *\ncfg_builder_new_block(cfg_builder *g)\n{\n    basicblock *b = (basicblock *)PyObject_Calloc(1, sizeof(basicblock));\n    if (b == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    /* Extend the singly linked list of blocks with new block. */\n    b->b_list = g->g_block_list;\n    g->g_block_list = b;\n    b->b_label = NO_LABEL;\n    return b;\n}\n\nstatic int\nbasicblock_addop(basicblock *b, int opcode, int oparg, location loc)\n{\n    assert(IS_WITHIN_OPCODE_RANGE(opcode));\n    assert(!IS_ASSEMBLER_OPCODE(opcode));\n    assert(HAS_ARG(opcode) || HAS_TARGET(opcode) || oparg == 0);\n    assert(0 <= oparg && oparg < (1 << 30));\n\n    int off = basicblock_next_instr(b);\n    if (off < 0) {\n        return ERROR;\n    }\n    cfg_instr *i = &b->b_instr[off];\n    i->i_opcode = opcode;\n    i->i_oparg = oparg;\n    i->i_target = NULL;\n    i->i_loc = loc;\n\n    return SUCCESS;\n}\n\nstatic inline int\nbasicblock_append_instructions(basicblock *target, basicblock *source)\n{\n    for (int i = 0; i < source->b_iused; i++) {\n        int n = basicblock_next_instr(target);\n        if (n < 0) {\n            return ERROR;\n        }\n        target->b_instr[n] = source->b_instr[i];\n    }\n    return SUCCESS;\n}\n\nstatic basicblock *\ncopy_basicblock(cfg_builder *g, basicblock *block)\n{\n    /* Cannot copy a block if it has a fallthrough, since\n     * a block can only have one fallthrough predecessor.\n     */\n    assert(BB_NO_FALLTHROUGH(block));\n    basicblock *result = cfg_builder_new_block(g);\n    if (result == NULL) {\n        return NULL;\n    }\n    if (basicblock_append_instructions(result, block) < 0) {\n        return NULL;\n    }\n    return result;\n}\n\nint\n_PyBasicblock_InsertInstruction(basicblock *block, int pos, cfg_instr *instr) {\n    RETURN_IF_ERROR(basicblock_next_instr(block));\n    for (int i = block->b_iused - 1; i > pos; i--) {\n        block->b_instr[i] = block->b_instr[i-1];\n    }\n    block->b_instr[pos] = *instr;\n    return SUCCESS;\n}\n\nstatic int\ninstr_size(cfg_instr *instruction)\n{\n    return _PyCompile_InstrSize(instruction->i_opcode, instruction->i_oparg);\n}\n\nstatic int\nblocksize(basicblock *b)\n{\n    int size = 0;\n    for (int i = 0; i < b->b_iused; i++) {\n        size += instr_size(&b->b_instr[i]);\n    }\n    return size;\n}\n\n/* For debugging purposes only */\n#if 0\nstatic void\ndump_instr(cfg_instr *i)\n{\n    const char *jump = is_jump(i) ? \"jump \" : \"\";\n\n    char arg[128];\n\n    *arg = '\\0';\n    if (HAS_ARG(i->i_opcode)) {\n        sprintf(arg, \"arg: %d \", i->i_oparg);\n    }\n    if (HAS_TARGET(i->i_opcode)) {\n        sprintf(arg, \"target: %p [%d] \", i->i_target, i->i_oparg);\n    }\n    fprintf(stderr, \"line: %d, opcode: %d %s%s\\n\",\n                    i->i_loc.lineno, i->i_opcode, arg, jump);\n}\n\nstatic inline int\nbasicblock_returns(const basicblock *b) {\n    cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n    return last && (last->i_opcode == RETURN_VALUE || last->i_opcode == RETURN_CONST);\n}\n\nstatic void\ndump_basicblock(const basicblock *b)\n{\n    const char *b_return = basicblock_returns(b) ? \"return \" : \"\";\n    fprintf(stderr, \"%d: [EH=%d CLD=%d WRM=%d NO_FT=%d %p] used: %d, depth: %d, offset: %d %s\\n\",\n        b->b_label.id, b->b_except_handler, b->b_cold, b->b_warm, BB_NO_FALLTHROUGH(b), b, b->b_iused,\n        b->b_startdepth, b->b_offset, b_return);\n    if (b->b_instr) {\n        int i;\n        for (i = 0; i < b->b_iused; i++) {\n            fprintf(stderr, \"  [%02d] \", i);\n            dump_instr(b->b_instr + i);\n        }\n    }\n}\n\nvoid\n_PyCfgBuilder_DumpGraph(const basicblock *entryblock)\n{\n    for (const basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        dump_basicblock(b);\n    }\n}\n\n#endif\n\n\n/***** CFG construction and modification *****/\n\nstatic basicblock *\ncfg_builder_use_next_block(cfg_builder *g, basicblock *block)\n{\n    assert(block != NULL);\n    g->g_curblock->b_next = block;\n    g->g_curblock = block;\n    return block;\n}\n\ncfg_instr *\n_PyCfg_BasicblockLastInstr(const basicblock *b) {\n    assert(b->b_iused >= 0);\n    if (b->b_iused > 0) {\n        assert(b->b_instr != NULL);\n        return &b->b_instr[b->b_iused - 1];\n    }\n    return NULL;\n}\n\nstatic inline int\nbasicblock_exits_scope(const basicblock *b) {\n    cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n    return last && IS_SCOPE_EXIT_OPCODE(last->i_opcode);\n}\n\nstatic bool\ncfg_builder_current_block_is_terminated(cfg_builder *g)\n{\n    cfg_instr *last = _PyCfg_BasicblockLastInstr(g->g_curblock);\n    if (last && IS_TERMINATOR_OPCODE(last->i_opcode)) {\n        return true;\n    }\n    if (IS_LABEL(g->g_current_label)) {\n        if (last || IS_LABEL(g->g_curblock->b_label)) {\n            return true;\n        }\n        else {\n            /* current block is empty, label it */\n            g->g_curblock->b_label = g->g_current_label;\n            g->g_current_label = NO_LABEL;\n        }\n    }\n    return false;\n}\n\nstatic int\ncfg_builder_maybe_start_new_block(cfg_builder *g)\n{\n    if (cfg_builder_current_block_is_terminated(g)) {\n        basicblock *b = cfg_builder_new_block(g);\n        if (b == NULL) {\n            return ERROR;\n        }\n        b->b_label = g->g_current_label;\n        g->g_current_label = NO_LABEL;\n        cfg_builder_use_next_block(g, b);\n    }\n    return SUCCESS;\n}\n\n#ifndef NDEBUG\nstatic bool\ncfg_builder_check(cfg_builder *g)\n{\n    assert(g->g_entryblock->b_iused > 0);\n    for (basicblock *block = g->g_block_list; block != NULL; block = block->b_list) {\n        assert(!_PyMem_IsPtrFreed(block));\n        if (block->b_instr != NULL) {\n            assert(block->b_ialloc > 0);\n            assert(block->b_iused >= 0);\n            assert(block->b_ialloc >= block->b_iused);\n        }\n        else {\n            assert (block->b_iused == 0);\n            assert (block->b_ialloc == 0);\n        }\n    }\n    return true;\n}\n#endif\n\nint\n_PyCfgBuilder_Init(cfg_builder *g)\n{\n    g->g_block_list = NULL;\n    basicblock *block = cfg_builder_new_block(g);\n    if (block == NULL) {\n        return ERROR;\n    }\n    g->g_curblock = g->g_entryblock = block;\n    g->g_current_label = NO_LABEL;\n    return SUCCESS;\n}\n\nvoid\n_PyCfgBuilder_Fini(cfg_builder* g)\n{\n    assert(cfg_builder_check(g));\n    basicblock *b = g->g_block_list;\n    while (b != NULL) {\n        if (b->b_instr) {\n            PyObject_Free((void *)b->b_instr);\n        }\n        basicblock *next = b->b_list;\n        PyObject_Free((void *)b);\n        b = next;\n    }\n}\n\nint\n_PyCfgBuilder_UseLabel(cfg_builder *g, jump_target_label lbl)\n{\n    g->g_current_label = lbl;\n    return cfg_builder_maybe_start_new_block(g);\n}\n\nint\n_PyCfgBuilder_Addop(cfg_builder *g, int opcode, int oparg, location loc)\n{\n    RETURN_IF_ERROR(cfg_builder_maybe_start_new_block(g));\n    return basicblock_addop(g->g_curblock, opcode, oparg, loc);\n}\n\n\n/***** debugging helpers *****/\n\n#ifndef NDEBUG\nstatic int remove_redundant_nops(basicblock *bb);\n\n/*\nstatic bool\nno_redundant_nops(cfg_builder *g) {\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        if (remove_redundant_nops(b) != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n*/\n\nstatic bool\nno_empty_basic_blocks(cfg_builder *g) {\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        if (b->b_iused == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstatic bool\nno_redundant_jumps(cfg_builder *g) {\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n        if (last != NULL) {\n            if (IS_UNCONDITIONAL_JUMP_OPCODE(last->i_opcode)) {\n                assert(last->i_target != b->b_next);\n                if (last->i_target == b->b_next) {\n                    return false;\n                }\n            }\n        }\n    }\n    return true;\n}\n\n#endif\n\n/***** CFG preprocessing (jump targets and exceptions) *****/\n\nstatic int\nnormalize_jumps_in_block(cfg_builder *g, basicblock *b) {\n    cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n    if (last == NULL || !is_jump(last)) {\n        return SUCCESS;\n    }\n    assert(!IS_ASSEMBLER_OPCODE(last->i_opcode));\n    bool is_forward = last->i_target->b_visited == 0;\n    switch(last->i_opcode) {\n        case JUMP:\n            last->i_opcode = is_forward ? JUMP_FORWARD : JUMP_BACKWARD;\n            return SUCCESS;\n        case JUMP_NO_INTERRUPT:\n            last->i_opcode = is_forward ?\n                JUMP_FORWARD : JUMP_BACKWARD_NO_INTERRUPT;\n            return SUCCESS;\n    }\n    int reversed_opcode = 0;\n    switch(last->i_opcode) {\n        case POP_JUMP_IF_NOT_NONE:\n            reversed_opcode = POP_JUMP_IF_NONE;\n            break;\n        case POP_JUMP_IF_NONE:\n            reversed_opcode = POP_JUMP_IF_NOT_NONE;\n            break;\n        case POP_JUMP_IF_FALSE:\n            reversed_opcode = POP_JUMP_IF_TRUE;\n            break;\n        case POP_JUMP_IF_TRUE:\n            reversed_opcode = POP_JUMP_IF_FALSE;\n            break;\n    }\n    if (is_forward) {\n        return SUCCESS;\n    }\n    /* transform 'conditional jump T' to\n     * 'reversed_jump b_next' followed by 'jump_backwards T'\n     */\n\n    basicblock *target = last->i_target;\n    basicblock *backwards_jump = cfg_builder_new_block(g);\n    if (backwards_jump == NULL) {\n        return ERROR;\n    }\n    basicblock_addop(backwards_jump, JUMP, target->b_label.id, last->i_loc);\n    backwards_jump->b_instr[0].i_target = target;\n    last->i_opcode = reversed_opcode;\n    last->i_target = b->b_next;\n\n    backwards_jump->b_cold = b->b_cold;\n    backwards_jump->b_next = b->b_next;\n    b->b_next = backwards_jump;\n    return SUCCESS;\n}\n\n\nstatic int\nnormalize_jumps(_PyCfgBuilder *g)\n{\n    basicblock *entryblock = g->g_entryblock;\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        b->b_visited = 0;\n    }\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        b->b_visited = 1;\n        RETURN_IF_ERROR(normalize_jumps_in_block(g, b));\n    }\n    return SUCCESS;\n}\n\nstatic void\nresolve_jump_offsets(basicblock *entryblock)\n{\n    int bsize, totsize, extended_arg_recompile;\n\n    /* Compute the size of each block and fixup jump args.\n       Replace block pointer with position in bytecode. */\n    do {\n        totsize = 0;\n        for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n            bsize = blocksize(b);\n            b->b_offset = totsize;\n            totsize += bsize;\n        }\n        extended_arg_recompile = 0;\n        for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n            bsize = b->b_offset;\n            for (int i = 0; i < b->b_iused; i++) {\n                cfg_instr *instr = &b->b_instr[i];\n                int isize = instr_size(instr);\n                /* jump offsets are computed relative to\n                 * the instruction pointer after fetching\n                 * the jump instruction.\n                 */\n                bsize += isize;\n                if (is_jump(instr)) {\n                    instr->i_oparg = instr->i_target->b_offset;\n                    if (instr->i_oparg < bsize) {\n                        assert(IS_BACKWARDS_JUMP_OPCODE(instr->i_opcode));\n                        instr->i_oparg = bsize - instr->i_oparg;\n                    }\n                    else {\n                        assert(!IS_BACKWARDS_JUMP_OPCODE(instr->i_opcode));\n                        instr->i_oparg -= bsize;\n                    }\n                    if (instr_size(instr) != isize) {\n                        extended_arg_recompile = 1;\n                    }\n                }\n            }\n        }\n\n    /* XXX: This is an awful hack that could hurt performance, but\n        on the bright side it should work until we come up\n        with a better solution.\n\n        The issue is that in the first loop blocksize() is called\n        which calls instr_size() which requires i_oparg be set\n        appropriately. There is a bootstrap problem because\n        i_oparg is calculated in the second loop above.\n\n        So we loop until we stop seeing new EXTENDED_ARGs.\n        The only EXTENDED_ARGs that could be popping up are\n        ones in jump instructions.  So this should converge\n        fairly quickly.\n    */\n    } while (extended_arg_recompile);\n}\n\nint\n_PyCfg_ResolveJumps(_PyCfgBuilder *g)\n{\n    RETURN_IF_ERROR(normalize_jumps(g));\n    assert(no_redundant_jumps(g));\n    resolve_jump_offsets(g->g_entryblock);\n    return SUCCESS;\n}\n\nstatic int\ncheck_cfg(cfg_builder *g) {\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        /* Raise SystemError if jump or exit is not last instruction in the block. */\n        for (int i = 0; i < b->b_iused; i++) {\n            int opcode = b->b_instr[i].i_opcode;\n            assert(!IS_ASSEMBLER_OPCODE(opcode));\n            if (IS_TERMINATOR_OPCODE(opcode)) {\n                if (i != b->b_iused - 1) {\n                    PyErr_SetString(PyExc_SystemError, \"malformed control flow graph.\");\n                    return ERROR;\n                }\n            }\n        }\n    }\n    return SUCCESS;\n}\n\nstatic int\nget_max_label(basicblock *entryblock)\n{\n    int lbl = -1;\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        if (b->b_label.id > lbl) {\n            lbl = b->b_label.id;\n        }\n    }\n    return lbl;\n}\n\n/* Calculate the actual jump target from the target_label */\nstatic int\ntranslate_jump_labels_to_targets(basicblock *entryblock)\n{\n    int max_label = get_max_label(entryblock);\n    size_t mapsize = sizeof(basicblock *) * (max_label + 1);\n    basicblock **label2block = (basicblock **)PyMem_Malloc(mapsize);\n    if (!label2block) {\n        PyErr_NoMemory();\n        return ERROR;\n    }\n    memset(label2block, 0, mapsize);\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        if (b->b_label.id >= 0) {\n            label2block[b->b_label.id] = b;\n        }\n    }\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            assert(instr->i_target == NULL);\n            if (HAS_TARGET(instr->i_opcode)) {\n                int lbl = instr->i_oparg;\n                assert(lbl >= 0 && lbl <= max_label);\n                instr->i_target = label2block[lbl];\n                assert(instr->i_target != NULL);\n                assert(instr->i_target->b_label.id == lbl);\n            }\n        }\n    }\n    PyMem_Free(label2block);\n    return SUCCESS;\n}\n\nint\n_PyCfg_JumpLabelsToTargets(basicblock *entryblock)\n{\n    return translate_jump_labels_to_targets(entryblock);\n}\n\nstatic int\nmark_except_handlers(basicblock *entryblock) {\n#ifndef NDEBUG\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        assert(!b->b_except_handler);\n    }\n#endif\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        for (int i=0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            if (is_block_push(instr)) {\n                instr->i_target->b_except_handler = 1;\n            }\n        }\n    }\n    return SUCCESS;\n}\n\n\ntypedef _PyCfgExceptStack ExceptStack;\n\nstatic basicblock *\npush_except_block(ExceptStack *stack, cfg_instr *setup) {\n    assert(is_block_push(setup));\n    int opcode = setup->i_opcode;\n    basicblock * target = setup->i_target;\n    if (opcode == SETUP_WITH || opcode == SETUP_CLEANUP) {\n        target->b_preserve_lasti = 1;\n    }\n    assert(stack->depth <= CO_MAXBLOCKS);\n    stack->handlers[++stack->depth] = target;\n    return target;\n}\n\nstatic basicblock *\npop_except_block(ExceptStack *stack) {\n    assert(stack->depth > 0);\n    return stack->handlers[--stack->depth];\n}\n\nstatic basicblock *\nexcept_stack_top(ExceptStack *stack) {\n    return stack->handlers[stack->depth];\n}\n\nstatic ExceptStack *\nmake_except_stack(void) {\n    ExceptStack *new = PyMem_Malloc(sizeof(ExceptStack));\n    if (new == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    new->depth = 0;\n    new->handlers[0] = NULL;\n    return new;\n}\n\nstatic ExceptStack *\ncopy_except_stack(ExceptStack *stack) {\n    ExceptStack *copy = PyMem_Malloc(sizeof(ExceptStack));\n    if (copy == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    memcpy(copy, stack, sizeof(ExceptStack));\n    return copy;\n}\n\nstatic basicblock**\nmake_cfg_traversal_stack(basicblock *entryblock) {\n    int nblocks = 0;\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        b->b_visited = 0;\n        nblocks++;\n    }\n    basicblock **stack = (basicblock **)PyMem_Malloc(sizeof(basicblock *) * nblocks);\n    if (!stack) {\n        PyErr_NoMemory();\n    }\n    return stack;\n}\n\nPy_LOCAL_INLINE(void)\nstackdepth_push(basicblock ***sp, basicblock *b, int depth)\n{\n    assert(b->b_startdepth < 0 || b->b_startdepth == depth);\n    if (b->b_startdepth < depth && b->b_startdepth < 100) {\n        assert(b->b_startdepth < 0);\n        b->b_startdepth = depth;\n        *(*sp)++ = b;\n    }\n}\n\n/* Find the flow path that needs the largest stack.  We assume that\n * cycles in the flow graph have no net effect on the stack depth.\n */\nint\n_PyCfg_Stackdepth(basicblock *entryblock, int code_flags)\n{\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        b->b_startdepth = INT_MIN;\n    }\n    basicblock **stack = make_cfg_traversal_stack(entryblock);\n    if (!stack) {\n        return ERROR;\n    }\n\n    int maxdepth = 0;\n    basicblock **sp = stack;\n    if (code_flags & (CO_GENERATOR | CO_COROUTINE | CO_ASYNC_GENERATOR)) {\n        stackdepth_push(&sp, entryblock, 1);\n    } else {\n        stackdepth_push(&sp, entryblock, 0);\n    }\n\n    while (sp != stack) {\n        basicblock *b = *--sp;\n        int depth = b->b_startdepth;\n        assert(depth >= 0);\n        basicblock *next = b->b_next;\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            int effect = PyCompile_OpcodeStackEffectWithJump(instr->i_opcode, instr->i_oparg, 0);\n            if (effect == PY_INVALID_STACK_EFFECT) {\n                PyErr_Format(PyExc_SystemError,\n                             \"compiler PyCompile_OpcodeStackEffectWithJump(opcode=%d, arg=%i) failed\",\n                             instr->i_opcode, instr->i_oparg);\n                return ERROR;\n            }\n            int new_depth = depth + effect;\n            assert(new_depth >= 0); /* invalid code or bug in stackdepth() */\n            if (new_depth > maxdepth) {\n                maxdepth = new_depth;\n            }\n            if (HAS_TARGET(instr->i_opcode)) {\n                effect = PyCompile_OpcodeStackEffectWithJump(instr->i_opcode, instr->i_oparg, 1);\n                assert(effect != PY_INVALID_STACK_EFFECT);\n                int target_depth = depth + effect;\n                assert(target_depth >= 0); /* invalid code or bug in stackdepth() */\n                if (target_depth > maxdepth) {\n                    maxdepth = target_depth;\n                }\n                stackdepth_push(&sp, instr->i_target, target_depth);\n            }\n            depth = new_depth;\n            assert(!IS_ASSEMBLER_OPCODE(instr->i_opcode));\n            if (IS_UNCONDITIONAL_JUMP_OPCODE(instr->i_opcode) ||\n                IS_SCOPE_EXIT_OPCODE(instr->i_opcode))\n            {\n                /* remaining code is dead */\n                next = NULL;\n                break;\n            }\n        }\n        if (next != NULL) {\n            assert(BB_HAS_FALLTHROUGH(b));\n            stackdepth_push(&sp, next, depth);\n        }\n    }\n    PyMem_Free(stack);\n    return maxdepth;\n}\n\nstatic int\nlabel_exception_targets(basicblock *entryblock) {\n    basicblock **todo_stack = make_cfg_traversal_stack(entryblock);\n    if (todo_stack == NULL) {\n        return ERROR;\n    }\n    ExceptStack *except_stack = make_except_stack();\n    if (except_stack == NULL) {\n        PyMem_Free(todo_stack);\n        PyErr_NoMemory();\n        return ERROR;\n    }\n    except_stack->depth = 0;\n    todo_stack[0] = entryblock;\n    entryblock->b_visited = 1;\n    entryblock->b_exceptstack = except_stack;\n    basicblock **todo = &todo_stack[1];\n    basicblock *handler = NULL;\n    while (todo > todo_stack) {\n        todo--;\n        basicblock *b = todo[0];\n        assert(b->b_visited == 1);\n        except_stack = b->b_exceptstack;\n        assert(except_stack != NULL);\n        b->b_exceptstack = NULL;\n        handler = except_stack_top(except_stack);\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            if (is_block_push(instr)) {\n                if (!instr->i_target->b_visited) {\n                    ExceptStack *copy = copy_except_stack(except_stack);\n                    if (copy == NULL) {\n                        goto error;\n                    }\n                    instr->i_target->b_exceptstack = copy;\n                    todo[0] = instr->i_target;\n                    instr->i_target->b_visited = 1;\n                    todo++;\n                }\n                handler = push_except_block(except_stack, instr);\n            }\n            else if (instr->i_opcode == POP_BLOCK) {\n                handler = pop_except_block(except_stack);\n            }\n            else if (is_jump(instr)) {\n                instr->i_except = handler;\n                assert(i == b->b_iused -1);\n                if (!instr->i_target->b_visited) {\n                    if (BB_HAS_FALLTHROUGH(b)) {\n                        ExceptStack *copy = copy_except_stack(except_stack);\n                        if (copy == NULL) {\n                            goto error;\n                        }\n                        instr->i_target->b_exceptstack = copy;\n                    }\n                    else {\n                        instr->i_target->b_exceptstack = except_stack;\n                        except_stack = NULL;\n                    }\n                    todo[0] = instr->i_target;\n                    instr->i_target->b_visited = 1;\n                    todo++;\n                }\n            }\n            else {\n                if (instr->i_opcode == YIELD_VALUE) {\n                    instr->i_oparg = except_stack->depth;\n                }\n                instr->i_except = handler;\n            }\n        }\n        if (BB_HAS_FALLTHROUGH(b) && !b->b_next->b_visited) {\n            assert(except_stack != NULL);\n            b->b_next->b_exceptstack = except_stack;\n            todo[0] = b->b_next;\n            b->b_next->b_visited = 1;\n            todo++;\n        }\n        else if (except_stack != NULL) {\n           PyMem_Free(except_stack);\n        }\n    }\n#ifdef Py_DEBUG\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        assert(b->b_exceptstack == NULL);\n    }\n#endif\n    PyMem_Free(todo_stack);\n    return SUCCESS;\nerror:\n    PyMem_Free(todo_stack);\n    PyMem_Free(except_stack);\n    return ERROR;\n}\n\n/***** CFG optimizations *****/\n\nstatic int\nmark_reachable(basicblock *entryblock) {\n    basicblock **stack = make_cfg_traversal_stack(entryblock);\n    if (stack == NULL) {\n        return ERROR;\n    }\n    basicblock **sp = stack;\n    entryblock->b_predecessors = 1;\n    *sp++ = entryblock;\n    while (sp > stack) {\n        basicblock *b = *(--sp);\n        b->b_visited = 1;\n        if (b->b_next && BB_HAS_FALLTHROUGH(b)) {\n            if (!b->b_next->b_visited) {\n                assert(b->b_next->b_predecessors == 0);\n                *sp++ = b->b_next;\n            }\n            b->b_next->b_predecessors++;\n        }\n        for (int i = 0; i < b->b_iused; i++) {\n            basicblock *target;\n            cfg_instr *instr = &b->b_instr[i];\n            if (is_jump(instr) || is_block_push(instr)) {\n                target = instr->i_target;\n                if (!target->b_visited) {\n                    assert(target->b_predecessors == 0 || target == b->b_next);\n                    *sp++ = target;\n                }\n                target->b_predecessors++;\n            }\n        }\n    }\n    PyMem_Free(stack);\n    return SUCCESS;\n}\n\nstatic void\neliminate_empty_basic_blocks(cfg_builder *g) {\n    /* Eliminate empty blocks */\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        basicblock *next = b->b_next;\n        while (next && next->b_iused == 0) {\n            next = next->b_next;\n        }\n        b->b_next = next;\n    }\n    while(g->g_entryblock && g->g_entryblock->b_iused == 0) {\n        g->g_entryblock = g->g_entryblock->b_next;\n    }\n    int next_lbl = get_max_label(g->g_entryblock) + 1;\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        assert(b->b_iused > 0);\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            if (HAS_TARGET(instr->i_opcode)) {\n                basicblock *target = instr->i_target;\n                while (target->b_iused == 0) {\n                    target = target->b_next;\n                }\n                if (instr->i_target != target) {\n                    if (!IS_LABEL(target->b_label)) {\n                        target->b_label.id = next_lbl++;\n                    }\n                    instr->i_target = target;\n                    instr->i_oparg = target->b_label.id;\n                }\n                assert(instr->i_target && instr->i_target->b_iused > 0);\n            }\n        }\n    }\n}\n\nstatic int\nremove_redundant_nops(basicblock *bb) {\n    /* Remove NOPs when legal to do so. */\n    int dest = 0;\n    int prev_lineno = -1;\n    for (int src = 0; src < bb->b_iused; src++) {\n        int lineno = bb->b_instr[src].i_loc.lineno;\n        if (bb->b_instr[src].i_opcode == NOP) {\n            /* Eliminate no-op if it doesn't have a line number */\n            if (lineno < 0) {\n                continue;\n            }\n            /* or, if the previous instruction had the same line number. */\n            if (prev_lineno == lineno) {\n                continue;\n            }\n            /* or, if the next instruction has same line number or no line number */\n            if (src < bb->b_iused - 1) {\n                int next_lineno = bb->b_instr[src+1].i_loc.lineno;\n                if (next_lineno == lineno) {\n                    continue;\n                }\n                if (next_lineno < 0) {\n                    bb->b_instr[src+1].i_loc = bb->b_instr[src].i_loc;\n                    continue;\n                }\n            }\n            else {\n                basicblock* next = bb->b_next;\n                while (next && next->b_iused == 0) {\n                    next = next->b_next;\n                }\n                /* or if last instruction in BB and next BB has same line number */\n                if (next) {\n                    location next_loc = NO_LOCATION;\n                    for (int next_i=0; next_i < next->b_iused; next_i++) {\n                        cfg_instr *instr = &next->b_instr[next_i];\n                        if (instr->i_opcode == NOP && instr->i_loc.lineno == NO_LOCATION.lineno) {\n                            /* Skip over NOPs without location, they will be removed */\n                            continue;\n                        }\n                        next_loc = instr->i_loc;\n                        break;\n                    }\n                    if (lineno == next_loc.lineno) {\n                        continue;\n                    }\n                }\n            }\n\n        }\n        if (dest != src) {\n            bb->b_instr[dest] = bb->b_instr[src];\n        }\n        dest++;\n        prev_lineno = lineno;\n    }\n    assert(dest <= bb->b_iused);\n    int num_removed = bb->b_iused - dest;\n    bb->b_iused = dest;\n    return num_removed;\n}\n\nstatic int\nremove_redundant_nops_and_pairs(basicblock *entryblock)\n{\n    bool done = false;\n\n    while (! done) {\n        done = true;\n        cfg_instr *prev_instr = NULL;\n        cfg_instr *instr = NULL;\n        for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n            remove_redundant_nops(b);\n            if (IS_LABEL(b->b_label)) {\n                /* this block is a jump target, forget instr */\n                instr = NULL;\n            }\n            for (int i = 0; i < b->b_iused; i++) {\n                prev_instr = instr;\n                instr = &b->b_instr[i];\n                int prev_opcode = prev_instr ? prev_instr->i_opcode : 0;\n                int prev_oparg = prev_instr ? prev_instr->i_oparg : 0;\n                int opcode = instr->i_opcode;\n                bool is_redundant_pair = false;\n                if (opcode == POP_TOP) {\n                   if (prev_opcode == LOAD_CONST) {\n                       is_redundant_pair = true;\n                   }\n                   else if (prev_opcode == COPY && prev_oparg == 1) {\n                       is_redundant_pair = true;\n                   }\n                }\n                if (is_redundant_pair) {\n                    INSTR_SET_OP0(prev_instr, NOP);\n                    INSTR_SET_OP0(instr, NOP);\n                    done = false;\n                }\n            }\n            if ((instr && is_jump(instr)) || !BB_HAS_FALLTHROUGH(b)) {\n                instr = NULL;\n            }\n        }\n    }\n    return SUCCESS;\n}\n\nstatic int\nremove_redundant_jumps(cfg_builder *g) {\n    /* If a non-empty block ends with a jump instruction, check if the next\n     * non-empty block reached through normal flow control is the target\n     * of that jump. If it is, then the jump instruction is redundant and\n     * can be deleted.\n     */\n    assert(no_empty_basic_blocks(g));\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n        assert(last != NULL);\n        assert(!IS_ASSEMBLER_OPCODE(last->i_opcode));\n        if (IS_UNCONDITIONAL_JUMP_OPCODE(last->i_opcode)) {\n            if (last->i_target == NULL) {\n                PyErr_SetString(PyExc_SystemError, \"jump with NULL target\");\n                return ERROR;\n            }\n            if (last->i_target == b->b_next) {\n                assert(b->b_next->b_iused);\n                INSTR_SET_OP0(last, NOP);\n            }\n        }\n    }\n    return SUCCESS;\n}\n\n/* Maximum size of basic block that should be copied in optimizer */\n#define MAX_COPY_SIZE 4\n\n/* If this block ends with an unconditional jump to a small exit block, then\n * remove the jump and extend this block with the target.\n * Returns 1 if extended, 0 if no change, and -1 on error.\n */\nstatic int\ninline_small_exit_blocks(basicblock *bb) {\n    cfg_instr *last = _PyCfg_BasicblockLastInstr(bb);\n    if (last == NULL) {\n        return 0;\n    }\n    if (!IS_UNCONDITIONAL_JUMP_OPCODE(last->i_opcode)) {\n        return 0;\n    }\n    basicblock *target = last->i_target;\n    if (basicblock_exits_scope(target) && target->b_iused <= MAX_COPY_SIZE) {\n        INSTR_SET_OP0(last, NOP);\n        RETURN_IF_ERROR(basicblock_append_instructions(bb, target));\n        return 1;\n    }\n    return 0;\n}\n\n// Attempt to eliminate jumps to jumps by updating inst to jump to\n// target->i_target using the provided opcode. Return whether or not the\n// optimization was successful.\nstatic bool\njump_thread(cfg_instr *inst, cfg_instr *target, int opcode)\n{\n    assert(is_jump(inst));\n    assert(is_jump(target));\n    // bpo-45773: If inst->i_target == target->i_target, then nothing actually\n    // changes (and we fall into an infinite loop):\n    if ((inst->i_loc.lineno == target->i_loc.lineno || target->i_loc.lineno == -1) &&\n        inst->i_target != target->i_target)\n    {\n        inst->i_target = target->i_target;\n        inst->i_opcode = opcode;\n        return true;\n    }\n    return false;\n}\n\nstatic PyObject*\nget_const_value(int opcode, int oparg, PyObject *co_consts)\n{\n    PyObject *constant = NULL;\n    assert(HAS_CONST(opcode));\n    if (opcode == LOAD_CONST) {\n        constant = PyList_GET_ITEM(co_consts, oparg);\n    }\n\n    if (constant == NULL) {\n        PyErr_SetString(PyExc_SystemError,\n                        \"Internal error: failed to get value of a constant\");\n        return NULL;\n    }\n    return Py_NewRef(constant);\n}\n\n/* Replace LOAD_CONST c1, LOAD_CONST c2 ... LOAD_CONST cn, BUILD_TUPLE n\n   with    LOAD_CONST (c1, c2, ... cn).\n   The consts table must still be in list form so that the\n   new constant (c1, c2, ... cn) can be appended.\n   Called with codestr pointing to the first LOAD_CONST.\n*/\nstatic int\nfold_tuple_on_constants(PyObject *const_cache,\n                        cfg_instr *inst,\n                        int n, PyObject *consts)\n{\n    /* Pre-conditions */\n    assert(PyDict_CheckExact(const_cache));\n    assert(PyList_CheckExact(consts));\n    assert(inst[n].i_opcode == BUILD_TUPLE);\n    assert(inst[n].i_oparg == n);\n\n    for (int i = 0; i < n; i++) {\n        if (!HAS_CONST(inst[i].i_opcode)) {\n            return SUCCESS;\n        }\n    }\n\n    /* Buildup new tuple of constants */\n    PyObject *newconst = PyTuple_New(n);\n    if (newconst == NULL) {\n        return ERROR;\n    }\n    for (int i = 0; i < n; i++) {\n        int op = inst[i].i_opcode;\n        int arg = inst[i].i_oparg;\n        PyObject *constant = get_const_value(op, arg, consts);\n        if (constant == NULL) {\n            return ERROR;\n        }\n        PyTuple_SET_ITEM(newconst, i, constant);\n    }\n    if (_PyCompile_ConstCacheMergeOne(const_cache, &newconst) < 0) {\n        Py_DECREF(newconst);\n        return ERROR;\n    }\n\n    Py_ssize_t index;\n    for (index = 0; index < PyList_GET_SIZE(consts); index++) {\n        if (PyList_GET_ITEM(consts, index) == newconst) {\n            break;\n        }\n    }\n    if (index == PyList_GET_SIZE(consts)) {\n        if ((size_t)index >= (size_t)INT_MAX - 1) {\n            Py_DECREF(newconst);\n            PyErr_SetString(PyExc_OverflowError, \"too many constants\");\n            return ERROR;\n        }\n        if (PyList_Append(consts, newconst)) {\n            Py_DECREF(newconst);\n            return ERROR;\n        }\n    }\n    Py_DECREF(newconst);\n    for (int i = 0; i < n; i++) {\n        INSTR_SET_OP0(&inst[i], NOP);\n    }\n    INSTR_SET_OP1(&inst[n], LOAD_CONST, (int)index);\n    return SUCCESS;\n}\n\n#define VISITED (-1)\n\n// Replace an arbitrary run of SWAPs and NOPs with an optimal one that has the\n// same effect.\nstatic int\nswaptimize(basicblock *block, int *ix)\n{\n    // NOTE: \"./python -m test test_patma\" serves as a good, quick stress test\n    // for this function. Make sure to blow away cached *.pyc files first!\n    assert(*ix < block->b_iused);\n    cfg_instr *instructions = &block->b_instr[*ix];\n    // Find the length of the current sequence of SWAPs and NOPs, and record the\n    // maximum depth of the stack manipulations:\n    assert(instructions[0].i_opcode == SWAP);\n    int depth = instructions[0].i_oparg;\n    int len = 0;\n    int more = false;\n    int limit = block->b_iused - *ix;\n    while (++len < limit) {\n        int opcode = instructions[len].i_opcode;\n        if (opcode == SWAP) {\n            depth = Py_MAX(depth, instructions[len].i_oparg);\n            more = true;\n        }\n        else if (opcode != NOP) {\n            break;\n        }\n    }\n    // It's already optimal if there's only one SWAP:\n    if (!more) {\n        return SUCCESS;\n    }\n    // Create an array with elements {0, 1, 2, ..., depth - 1}:\n    int *stack = PyMem_Malloc(depth * sizeof(int));\n    if (stack == NULL) {\n        PyErr_NoMemory();\n        return ERROR;\n    }\n    for (int i = 0; i < depth; i++) {\n        stack[i] = i;\n    }\n    // Simulate the combined effect of these instructions by \"running\" them on\n    // our \"stack\":\n    for (int i = 0; i < len; i++) {\n        if (instructions[i].i_opcode == SWAP) {\n            int oparg = instructions[i].i_oparg;\n            int top = stack[0];\n            // SWAPs are 1-indexed:\n            stack[0] = stack[oparg - 1];\n            stack[oparg - 1] = top;\n        }\n    }\n    // Now we can begin! Our approach here is based on a solution to a closely\n    // related problem (https://cs.stackexchange.com/a/13938). It's easiest to\n    // think of this algorithm as determining the steps needed to efficiently\n    // \"un-shuffle\" our stack. By performing the moves in *reverse* order,\n    // though, we can efficiently *shuffle* it! For this reason, we will be\n    // replacing instructions starting from the *end* of the run. Since the\n    // solution is optimal, we don't need to worry about running out of space:\n    int current = len - 1;\n    for (int i = 0; i < depth; i++) {\n        // Skip items that have already been visited, or just happen to be in\n        // the correct location:\n        if (stack[i] == VISITED || stack[i] == i) {\n            continue;\n        }\n        // Okay, we've found an item that hasn't been visited. It forms a cycle\n        // with other items; traversing the cycle and swapping each item with\n        // the next will put them all in the correct place. The weird\n        // loop-and-a-half is necessary to insert 0 into every cycle, since we\n        // can only swap from that position:\n        int j = i;\n        while (true) {\n            // Skip the actual swap if our item is zero, since swapping the top\n            // item with itself is pointless:\n            if (j) {\n                assert(0 <= current);\n                // SWAPs are 1-indexed:\n                instructions[current].i_opcode = SWAP;\n                instructions[current--].i_oparg = j + 1;\n            }\n            if (stack[j] == VISITED) {\n                // Completed the cycle:\n                assert(j == i);\n                break;\n            }\n            int next_j = stack[j];\n            stack[j] = VISITED;\n            j = next_j;\n        }\n    }\n    // NOP out any unused instructions:\n    while (0 <= current) {\n        INSTR_SET_OP0(&instructions[current--], NOP);\n    }\n    PyMem_Free(stack);\n    *ix += len - 1;\n    return SUCCESS;\n}\n\n\n// This list is pretty small, since it's only okay to reorder opcodes that:\n// - can't affect control flow (like jumping or raising exceptions)\n// - can't invoke arbitrary code (besides finalizers)\n// - only touch the TOS (and pop it when finished)\n#define SWAPPABLE(opcode) \\\n    ((opcode) == STORE_FAST || \\\n     (opcode) == STORE_FAST_MAYBE_NULL || \\\n     (opcode) == POP_TOP)\n\n#define STORES_TO(instr) \\\n    (((instr).i_opcode == STORE_FAST || \\\n      (instr).i_opcode == STORE_FAST_MAYBE_NULL) \\\n     ? (instr).i_oparg : -1)\n\nstatic int\nnext_swappable_instruction(basicblock *block, int i, int lineno)\n{\n    while (++i < block->b_iused) {\n        cfg_instr *instruction = &block->b_instr[i];\n        if (0 <= lineno && instruction->i_loc.lineno != lineno) {\n            // Optimizing across this instruction could cause user-visible\n            // changes in the names bound between line tracing events!\n            return -1;\n        }\n        if (instruction->i_opcode == NOP) {\n            continue;\n        }\n        if (SWAPPABLE(instruction->i_opcode)) {\n            return i;\n        }\n        return -1;\n    }\n    return -1;\n}\n\n// Attempt to apply SWAPs statically by swapping *instructions* rather than\n// stack items. For example, we can replace SWAP(2), POP_TOP, STORE_FAST(42)\n// with the more efficient NOP, STORE_FAST(42), POP_TOP.\nstatic void\napply_static_swaps(basicblock *block, int i)\n{\n    // SWAPs are to our left, and potential swaperands are to our right:\n    for (; 0 <= i; i--) {\n        assert(i < block->b_iused);\n        cfg_instr *swap = &block->b_instr[i];\n        if (swap->i_opcode != SWAP) {\n            if (swap->i_opcode == NOP || SWAPPABLE(swap->i_opcode)) {\n                // Nope, but we know how to handle these. Keep looking:\n                continue;\n            }\n            // We can't reason about what this instruction does. Bail:\n            return;\n        }\n        int j = next_swappable_instruction(block, i, -1);\n        if (j < 0) {\n            return;\n        }\n        int k = j;\n        int lineno = block->b_instr[j].i_loc.lineno;\n        for (int count = swap->i_oparg - 1; 0 < count; count--) {\n            k = next_swappable_instruction(block, k, lineno);\n            if (k < 0) {\n                return;\n            }\n        }\n        // The reordering is not safe if the two instructions to be swapped\n        // store to the same location, or if any intervening instruction stores\n        // to the same location as either of them.\n        int store_j = STORES_TO(block->b_instr[j]);\n        int store_k = STORES_TO(block->b_instr[k]);\n        if (store_j >= 0 || store_k >= 0) {\n            if (store_j == store_k) {\n                return;\n            }\n            for (int idx = j + 1; idx < k; idx++) {\n                int store_idx = STORES_TO(block->b_instr[idx]);\n                if (store_idx >= 0 && (store_idx == store_j || store_idx == store_k)) {\n                    return;\n                }\n            }\n        }\n\n        // Success!\n        INSTR_SET_OP0(swap, NOP);\n        cfg_instr temp = block->b_instr[j];\n        block->b_instr[j] = block->b_instr[k];\n        block->b_instr[k] = temp;\n    }\n}\n\nstatic int\noptimize_basic_block(PyObject *const_cache, basicblock *bb, PyObject *consts)\n{\n    assert(PyDict_CheckExact(const_cache));\n    assert(PyList_CheckExact(consts));\n    cfg_instr nop;\n    INSTR_SET_OP0(&nop, NOP);\n    cfg_instr *target = &nop;\n    int opcode = 0;\n    int oparg = 0;\n    int nextop = 0;\n    for (int i = 0; i < bb->b_iused; i++) {\n        cfg_instr *inst = &bb->b_instr[i];\n        bool is_copy_of_load_const = (opcode == LOAD_CONST &&\n                                      inst->i_opcode == COPY &&\n                                      inst->i_oparg == 1);\n        if (! is_copy_of_load_const) {\n            opcode = inst->i_opcode;\n            oparg = inst->i_oparg;\n            if (HAS_TARGET(opcode)) {\n                assert(inst->i_target->b_iused > 0);\n                target = &inst->i_target->b_instr[0];\n                assert(!IS_ASSEMBLER_OPCODE(target->i_opcode));\n            }\n            else {\n                target = &nop;\n            }\n        }\n        nextop = i+1 < bb->b_iused ? bb->b_instr[i+1].i_opcode : 0;\n        assert(!IS_ASSEMBLER_OPCODE(opcode));\n        switch (opcode) {\n            /* Remove LOAD_CONST const; conditional jump */\n            case LOAD_CONST:\n            {\n                PyObject* cnt;\n                int is_true;\n                int jump_if_true;\n                switch(nextop) {\n                    case POP_JUMP_IF_FALSE:\n                    case POP_JUMP_IF_TRUE:\n                        cnt = get_const_value(opcode, oparg, consts);\n                        if (cnt == NULL) {\n                            goto error;\n                        }\n                        is_true = PyObject_IsTrue(cnt);\n                        Py_DECREF(cnt);\n                        if (is_true == -1) {\n                            goto error;\n                        }\n                        INSTR_SET_OP0(inst, NOP);\n                        jump_if_true = nextop == POP_JUMP_IF_TRUE;\n                        if (is_true == jump_if_true) {\n                            bb->b_instr[i+1].i_opcode = JUMP;\n                        }\n                        else {\n                            INSTR_SET_OP0(&bb->b_instr[i + 1], NOP);\n                        }\n                        break;\n                    case IS_OP:\n                        cnt = get_const_value(opcode, oparg, consts);\n                        if (cnt == NULL) {\n                            goto error;\n                        }\n                        int jump_op = i+2 < bb->b_iused ? bb->b_instr[i+2].i_opcode : 0;\n                        if (Py_IsNone(cnt) && (jump_op == POP_JUMP_IF_FALSE || jump_op == POP_JUMP_IF_TRUE)) {\n                            unsigned char nextarg = bb->b_instr[i+1].i_oparg;\n                            INSTR_SET_OP0(inst, NOP);\n                            INSTR_SET_OP0(&bb->b_instr[i + 1], NOP);\n                            bb->b_instr[i+2].i_opcode = nextarg ^ (jump_op == POP_JUMP_IF_FALSE) ?\n                                    POP_JUMP_IF_NOT_NONE : POP_JUMP_IF_NONE;\n                        }\n                        Py_DECREF(cnt);\n                        break;\n                    case RETURN_VALUE:\n                        INSTR_SET_OP0(inst, NOP);\n                        INSTR_SET_OP1(&bb->b_instr[++i], RETURN_CONST, oparg);\n                        break;\n                }\n                break;\n            }\n                /* Try to fold tuples of constants.\n                   Skip over BUILD_TUPLE(1) UNPACK_SEQUENCE(1).\n                   Replace BUILD_TUPLE(2) UNPACK_SEQUENCE(2) with SWAP(2).\n                   Replace BUILD_TUPLE(3) UNPACK_SEQUENCE(3) with SWAP(3). */\n            case BUILD_TUPLE:\n                if (nextop == UNPACK_SEQUENCE && oparg == bb->b_instr[i+1].i_oparg) {\n                    switch(oparg) {\n                        case 1:\n                            INSTR_SET_OP0(inst, NOP);\n                            INSTR_SET_OP0(&bb->b_instr[i + 1], NOP);\n                            continue;\n                        case 2:\n                        case 3:\n                            INSTR_SET_OP0(inst, NOP);\n                            bb->b_instr[i+1].i_opcode = SWAP;\n                            continue;\n                    }\n                }\n                if (i >= oparg) {\n                    if (fold_tuple_on_constants(const_cache, inst-oparg, oparg, consts)) {\n                        goto error;\n                    }\n                }\n                break;\n            case POP_JUMP_IF_NOT_NONE:\n            case POP_JUMP_IF_NONE:\n                switch (target->i_opcode) {\n                    case JUMP:\n                        i -= jump_thread(inst, target, inst->i_opcode);\n                }\n                break;\n            case POP_JUMP_IF_FALSE:\n                switch (target->i_opcode) {\n                    case JUMP:\n                        i -= jump_thread(inst, target, POP_JUMP_IF_FALSE);\n                }\n                break;\n            case POP_JUMP_IF_TRUE:\n                switch (target->i_opcode) {\n                    case JUMP:\n                        i -= jump_thread(inst, target, POP_JUMP_IF_TRUE);\n                }\n                break;\n            case JUMP:\n                switch (target->i_opcode) {\n                    case JUMP:\n                        i -= jump_thread(inst, target, JUMP);\n                }\n                break;\n            case FOR_ITER:\n                if (target->i_opcode == JUMP) {\n                    /* This will not work now because the jump (at target) could\n                     * be forward or backward and FOR_ITER only jumps forward. We\n                     * can re-enable this if ever we implement a backward version\n                     * of FOR_ITER.\n                     */\n                    /*\n                    i -= jump_thread(inst, target, FOR_ITER);\n                    */\n                }\n                break;\n            case SWAP:\n                if (oparg == 1) {\n                    INSTR_SET_OP0(inst, NOP);\n                    break;\n                }\n                if (swaptimize(bb, &i) < 0) {\n                    goto error;\n                }\n                apply_static_swaps(bb, i);\n                break;\n            case KW_NAMES:\n                break;\n            case PUSH_NULL:\n                if (nextop == LOAD_GLOBAL && (bb->b_instr[i+1].i_oparg & 1) == 0) {\n                    INSTR_SET_OP0(inst, NOP);\n                    bb->b_instr[i+1].i_oparg |= 1;\n                }\n                break;\n            default:\n                /* All HAS_CONST opcodes should be handled with LOAD_CONST */\n                assert (!HAS_CONST(inst->i_opcode));\n        }\n    }\n    return SUCCESS;\nerror:\n    return ERROR;\n}\n\n\n/* Perform optimizations on a control flow graph.\n   The consts object should still be in list form to allow new constants\n   to be appended.\n\n   Code trasnformations that reduce code size initially fill the gaps with\n   NOPs.  Later those NOPs are removed.\n*/\nstatic int\noptimize_cfg(cfg_builder *g, PyObject *consts, PyObject *const_cache)\n{\n    assert(PyDict_CheckExact(const_cache));\n    RETURN_IF_ERROR(check_cfg(g));\n    eliminate_empty_basic_blocks(g);\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        RETURN_IF_ERROR(inline_small_exit_blocks(b));\n    }\n    assert(no_empty_basic_blocks(g));\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        RETURN_IF_ERROR(optimize_basic_block(const_cache, b, consts));\n        assert(b->b_predecessors == 0);\n    }\n    RETURN_IF_ERROR(remove_redundant_nops_and_pairs(g->g_entryblock));\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        RETURN_IF_ERROR(inline_small_exit_blocks(b));\n    }\n    RETURN_IF_ERROR(mark_reachable(g->g_entryblock));\n\n    /* Delete unreachable instructions */\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n       if (b->b_predecessors == 0) {\n            b->b_iused = 0;\n       }\n    }\n    for (basicblock *b = g->g_entryblock; b != NULL; b = b->b_next) {\n        remove_redundant_nops(b);\n    }\n    eliminate_empty_basic_blocks(g);\n    /* This assertion fails in an edge case (See gh-109889).\n     * Remove it for the release (it's just one more NOP in the\n     * bytecode for unlikely code).\n     */\n    // assert(no_redundant_nops(g));\n    RETURN_IF_ERROR(remove_redundant_jumps(g));\n    return SUCCESS;\n}\n\n// helper functions for add_checks_for_loads_of_unknown_variables\nstatic inline void\nmaybe_push(basicblock *b, uint64_t unsafe_mask, basicblock ***sp)\n{\n    // Push b if the unsafe mask is giving us any new information.\n    // To avoid overflowing the stack, only allow each block once.\n    // Use b->b_visited=1 to mean that b is currently on the stack.\n    uint64_t both = b->b_unsafe_locals_mask | unsafe_mask;\n    if (b->b_unsafe_locals_mask != both) {\n        b->b_unsafe_locals_mask = both;\n        // More work left to do.\n        if (!b->b_visited) {\n            // not on the stack, so push it.\n            *(*sp)++ = b;\n            b->b_visited = 1;\n        }\n    }\n}\n\nstatic void\nscan_block_for_locals(basicblock *b, basicblock ***sp)\n{\n    // bit i is set if local i is potentially uninitialized\n    uint64_t unsafe_mask = b->b_unsafe_locals_mask;\n    for (int i = 0; i < b->b_iused; i++) {\n        cfg_instr *instr = &b->b_instr[i];\n        assert(instr->i_opcode != EXTENDED_ARG);\n        assert(!IS_SUPERINSTRUCTION_OPCODE(instr->i_opcode));\n        if (instr->i_except != NULL) {\n            maybe_push(instr->i_except, unsafe_mask, sp);\n        }\n        if (instr->i_oparg >= 64) {\n            continue;\n        }\n        assert(instr->i_oparg >= 0);\n        uint64_t bit = (uint64_t)1 << instr->i_oparg;\n        switch (instr->i_opcode) {\n            case DELETE_FAST:\n            case LOAD_FAST_AND_CLEAR:\n            case STORE_FAST_MAYBE_NULL:\n                unsafe_mask |= bit;\n                break;\n            case STORE_FAST:\n                unsafe_mask &= ~bit;\n                break;\n            case LOAD_FAST_CHECK:\n                // If this doesn't raise, then the local is defined.\n                unsafe_mask &= ~bit;\n                break;\n            case LOAD_FAST:\n                if (unsafe_mask & bit) {\n                    instr->i_opcode = LOAD_FAST_CHECK;\n                }\n                unsafe_mask &= ~bit;\n                break;\n        }\n    }\n    if (b->b_next && BB_HAS_FALLTHROUGH(b)) {\n        maybe_push(b->b_next, unsafe_mask, sp);\n    }\n    cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n    if (last && is_jump(last)) {\n        assert(last->i_target != NULL);\n        maybe_push(last->i_target, unsafe_mask, sp);\n    }\n}\n\nstatic int\nfast_scan_many_locals(basicblock *entryblock, int nlocals)\n{\n    assert(nlocals > 64);\n    Py_ssize_t *states = PyMem_Calloc(nlocals - 64, sizeof(Py_ssize_t));\n    if (states == NULL) {\n        PyErr_NoMemory();\n        return ERROR;\n    }\n    Py_ssize_t blocknum = 0;\n    // state[i - 64] == blocknum if local i is guaranteed to\n    // be initialized, i.e., if it has had a previous LOAD_FAST or\n    // STORE_FAST within that basicblock (not followed by\n    // DELETE_FAST/LOAD_FAST_AND_CLEAR/STORE_FAST_MAYBE_NULL).\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        blocknum++;\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            assert(instr->i_opcode != EXTENDED_ARG);\n            assert(!IS_SUPERINSTRUCTION_OPCODE(instr->i_opcode));\n            int arg = instr->i_oparg;\n            if (arg < 64) {\n                continue;\n            }\n            assert(arg >= 0);\n            switch (instr->i_opcode) {\n                case DELETE_FAST:\n                case LOAD_FAST_AND_CLEAR:\n                case STORE_FAST_MAYBE_NULL:\n                    states[arg - 64] = blocknum - 1;\n                    break;\n                case STORE_FAST:\n                    states[arg - 64] = blocknum;\n                    break;\n                case LOAD_FAST:\n                    if (states[arg - 64] != blocknum) {\n                        instr->i_opcode = LOAD_FAST_CHECK;\n                    }\n                    states[arg - 64] = blocknum;\n                    break;\n                    Py_UNREACHABLE();\n            }\n        }\n    }\n    PyMem_Free(states);\n    return SUCCESS;\n}\n\nstatic int\nremove_unused_consts(basicblock *entryblock, PyObject *consts)\n{\n    assert(PyList_CheckExact(consts));\n    Py_ssize_t nconsts = PyList_GET_SIZE(consts);\n    if (nconsts == 0) {\n        return SUCCESS;  /* nothing to do */\n    }\n\n    Py_ssize_t *index_map = NULL;\n    Py_ssize_t *reverse_index_map = NULL;\n    int err = ERROR;\n\n    index_map = PyMem_Malloc(nconsts * sizeof(Py_ssize_t));\n    if (index_map == NULL) {\n        goto end;\n    }\n    for (Py_ssize_t i = 1; i < nconsts; i++) {\n        index_map[i] = -1;\n    }\n    // The first constant may be docstring; keep it always.\n    index_map[0] = 0;\n\n    /* mark used consts */\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        for (int i = 0; i < b->b_iused; i++) {\n            if (HAS_CONST(b->b_instr[i].i_opcode)) {\n                int index = b->b_instr[i].i_oparg;\n                index_map[index] = index;\n            }\n        }\n    }\n    /* now index_map[i] == i if consts[i] is used, -1 otherwise */\n    /* condense consts */\n    Py_ssize_t n_used_consts = 0;\n    for (int i = 0; i < nconsts; i++) {\n        if (index_map[i] != -1) {\n            assert(index_map[i] == i);\n            index_map[n_used_consts++] = index_map[i];\n        }\n    }\n    if (n_used_consts == nconsts) {\n        /* nothing to do */\n        err = SUCCESS;\n        goto end;\n    }\n\n    /* move all used consts to the beginning of the consts list */\n    assert(n_used_consts < nconsts);\n    for (Py_ssize_t i = 0; i < n_used_consts; i++) {\n        Py_ssize_t old_index = index_map[i];\n        assert(i <= old_index && old_index < nconsts);\n        if (i != old_index) {\n            PyObject *value = PyList_GET_ITEM(consts, index_map[i]);\n            assert(value != NULL);\n            PyList_SetItem(consts, i, Py_NewRef(value));\n        }\n    }\n\n    /* truncate the consts list at its new size */\n    if (PyList_SetSlice(consts, n_used_consts, nconsts, NULL) < 0) {\n        goto end;\n    }\n    /* adjust const indices in the bytecode */\n    reverse_index_map = PyMem_Malloc(nconsts * sizeof(Py_ssize_t));\n    if (reverse_index_map == NULL) {\n        goto end;\n    }\n    for (Py_ssize_t i = 0; i < nconsts; i++) {\n        reverse_index_map[i] = -1;\n    }\n    for (Py_ssize_t i = 0; i < n_used_consts; i++) {\n        assert(index_map[i] != -1);\n        assert(reverse_index_map[index_map[i]] == -1);\n        reverse_index_map[index_map[i]] = i;\n    }\n\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        for (int i = 0; i < b->b_iused; i++) {\n            if (HAS_CONST(b->b_instr[i].i_opcode)) {\n                int index = b->b_instr[i].i_oparg;\n                assert(reverse_index_map[index] >= 0);\n                assert(reverse_index_map[index] < n_used_consts);\n                b->b_instr[i].i_oparg = (int)reverse_index_map[index];\n            }\n        }\n    }\n\n    err = SUCCESS;\nend:\n    PyMem_Free(index_map);\n    PyMem_Free(reverse_index_map);\n    return err;\n}\n\n\n\nstatic int\nadd_checks_for_loads_of_uninitialized_variables(basicblock *entryblock,\n                                                int nlocals,\n                                                int nparams)\n{\n    if (nlocals == 0) {\n        return SUCCESS;\n    }\n    if (nlocals > 64) {\n        // To avoid O(nlocals**2) compilation, locals beyond the first\n        // 64 are only analyzed one basicblock at a time: initialization\n        // info is not passed between basicblocks.\n        if (fast_scan_many_locals(entryblock, nlocals) < 0) {\n            return ERROR;\n        }\n        nlocals = 64;\n    }\n    basicblock **stack = make_cfg_traversal_stack(entryblock);\n    if (stack == NULL) {\n        return ERROR;\n    }\n    basicblock **sp = stack;\n\n    // First origin of being uninitialized:\n    // The non-parameter locals in the entry block.\n    uint64_t start_mask = 0;\n    for (int i = nparams; i < nlocals; i++) {\n        start_mask |= (uint64_t)1 << i;\n    }\n    maybe_push(entryblock, start_mask, &sp);\n\n    // Second origin of being uninitialized:\n    // There could be DELETE_FAST somewhere, so\n    // be sure to scan each basicblock at least once.\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        scan_block_for_locals(b, &sp);\n    }\n    // Now propagate the uncertainty from the origins we found: Use\n    // LOAD_FAST_CHECK for any LOAD_FAST where the local could be undefined.\n    while (sp > stack) {\n        basicblock *b = *--sp;\n        // mark as no longer on stack\n        b->b_visited = 0;\n        scan_block_for_locals(b, &sp);\n    }\n    PyMem_Free(stack);\n    return SUCCESS;\n}\n\n\nstatic int\nmark_warm(basicblock *entryblock) {\n    basicblock **stack = make_cfg_traversal_stack(entryblock);\n    if (stack == NULL) {\n        return ERROR;\n    }\n    basicblock **sp = stack;\n\n    *sp++ = entryblock;\n    entryblock->b_visited = 1;\n    while (sp > stack) {\n        basicblock *b = *(--sp);\n        assert(!b->b_except_handler);\n        b->b_warm = 1;\n        basicblock *next = b->b_next;\n        if (next && BB_HAS_FALLTHROUGH(b) && !next->b_visited) {\n            *sp++ = next;\n            next->b_visited = 1;\n        }\n        for (int i=0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            if (is_jump(instr) && !instr->i_target->b_visited) {\n                *sp++ = instr->i_target;\n                instr->i_target->b_visited = 1;\n            }\n        }\n    }\n    PyMem_Free(stack);\n    return SUCCESS;\n}\n\nstatic int\nmark_cold(basicblock *entryblock) {\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        assert(!b->b_cold && !b->b_warm);\n    }\n    if (mark_warm(entryblock) < 0) {\n        return ERROR;\n    }\n\n    basicblock **stack = make_cfg_traversal_stack(entryblock);\n    if (stack == NULL) {\n        return ERROR;\n    }\n\n    basicblock **sp = stack;\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        if (b->b_except_handler) {\n            assert(!b->b_warm);\n            *sp++ = b;\n            b->b_visited = 1;\n        }\n    }\n\n    while (sp > stack) {\n        basicblock *b = *(--sp);\n        b->b_cold = 1;\n        basicblock *next = b->b_next;\n        if (next && BB_HAS_FALLTHROUGH(b)) {\n            if (!next->b_warm && !next->b_visited) {\n                *sp++ = next;\n                next->b_visited = 1;\n            }\n        }\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            if (is_jump(instr)) {\n                assert(i == b->b_iused - 1);\n                basicblock *target = b->b_instr[i].i_target;\n                if (!target->b_warm && !target->b_visited) {\n                    *sp++ = target;\n                    target->b_visited = 1;\n                }\n            }\n        }\n    }\n    PyMem_Free(stack);\n    return SUCCESS;\n}\n\n\nstatic int\npush_cold_blocks_to_end(cfg_builder *g, int code_flags) {\n    basicblock *entryblock = g->g_entryblock;\n    if (entryblock->b_next == NULL) {\n        /* single basicblock, no need to reorder */\n        return SUCCESS;\n    }\n    RETURN_IF_ERROR(mark_cold(entryblock));\n\n    int next_lbl = get_max_label(g->g_entryblock) + 1;\n\n    /* If we have a cold block with fallthrough to a warm block, add */\n    /* an explicit jump instead of fallthrough */\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        if (b->b_cold && BB_HAS_FALLTHROUGH(b) && b->b_next && b->b_next->b_warm) {\n            basicblock *explicit_jump = cfg_builder_new_block(g);\n            if (explicit_jump == NULL) {\n                return ERROR;\n            }\n            if (!IS_LABEL(b->b_next->b_label)) {\n                b->b_next->b_label.id = next_lbl++;\n            }\n            basicblock_addop(explicit_jump, JUMP, b->b_next->b_label.id, NO_LOCATION);\n            explicit_jump->b_cold = 1;\n            explicit_jump->b_next = b->b_next;\n            b->b_next = explicit_jump;\n\n            /* set target */\n            cfg_instr *last = _PyCfg_BasicblockLastInstr(explicit_jump);\n            last->i_target = explicit_jump->b_next;\n        }\n    }\n\n    assert(!entryblock->b_cold);  /* First block can't be cold */\n    basicblock *cold_blocks = NULL;\n    basicblock *cold_blocks_tail = NULL;\n\n    basicblock *b = entryblock;\n    while(b->b_next) {\n        assert(!b->b_cold);\n        while (b->b_next && !b->b_next->b_cold) {\n            b = b->b_next;\n        }\n        if (b->b_next == NULL) {\n            /* no more cold blocks */\n            break;\n        }\n\n        /* b->b_next is the beginning of a cold streak */\n        assert(!b->b_cold && b->b_next->b_cold);\n\n        basicblock *b_end = b->b_next;\n        while (b_end->b_next && b_end->b_next->b_cold) {\n            b_end = b_end->b_next;\n        }\n\n        /* b_end is the end of the cold streak */\n        assert(b_end && b_end->b_cold);\n        assert(b_end->b_next == NULL || !b_end->b_next->b_cold);\n\n        if (cold_blocks == NULL) {\n            cold_blocks = b->b_next;\n        }\n        else {\n            cold_blocks_tail->b_next = b->b_next;\n        }\n        cold_blocks_tail = b_end;\n        b->b_next = b_end->b_next;\n        b_end->b_next = NULL;\n    }\n    assert(b != NULL && b->b_next == NULL);\n    b->b_next = cold_blocks;\n\n    if (cold_blocks != NULL) {\n        RETURN_IF_ERROR(remove_redundant_jumps(g));\n    }\n    return SUCCESS;\n}\n\nvoid\n_PyCfg_ConvertPseudoOps(basicblock *entryblock)\n{\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        for (int i = 0; i < b->b_iused; i++) {\n            cfg_instr *instr = &b->b_instr[i];\n            if (is_block_push(instr) || instr->i_opcode == POP_BLOCK) {\n                INSTR_SET_OP0(instr, NOP);\n            }\n            else if (instr->i_opcode == STORE_FAST_MAYBE_NULL) {\n                instr->i_opcode = STORE_FAST;\n            }\n        }\n    }\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        remove_redundant_nops(b);\n    }\n}\n\nstatic inline bool\nis_exit_without_lineno(basicblock *b) {\n    if (!basicblock_exits_scope(b)) {\n        return false;\n    }\n    for (int i = 0; i < b->b_iused; i++) {\n        if (b->b_instr[i].i_loc.lineno >= 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n/* PEP 626 mandates that the f_lineno of a frame is correct\n * after a frame terminates. It would be prohibitively expensive\n * to continuously update the f_lineno field at runtime,\n * so we make sure that all exiting instruction (raises and returns)\n * have a valid line number, allowing us to compute f_lineno lazily.\n * We can do this by duplicating the exit blocks without line number\n * so that none have more than one predecessor. We can then safely\n * copy the line number from the sole predecessor block.\n */\nstatic int\nduplicate_exits_without_lineno(cfg_builder *g)\n{\n    assert(no_empty_basic_blocks(g));\n\n    int next_lbl = get_max_label(g->g_entryblock) + 1;\n\n    /* Copy all exit blocks without line number that are targets of a jump.\n     */\n    basicblock *entryblock = g->g_entryblock;\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n        assert(last != NULL);\n        if (is_jump(last)) {\n            basicblock *target = last->i_target;\n            if (is_exit_without_lineno(target) && target->b_predecessors > 1) {\n                basicblock *new_target = copy_basicblock(g, target);\n                if (new_target == NULL) {\n                    return ERROR;\n                }\n                new_target->b_instr[0].i_loc = last->i_loc;\n                last->i_target = new_target;\n                target->b_predecessors--;\n                new_target->b_predecessors = 1;\n                new_target->b_next = target->b_next;\n                new_target->b_label.id = next_lbl++;\n                target->b_next = new_target;\n            }\n        }\n    }\n\n    /* Any remaining reachable exit blocks without line number can only be reached by\n     * fall through, and thus can only have a single predecessor */\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        if (BB_HAS_FALLTHROUGH(b) && b->b_next && b->b_iused > 0) {\n            if (is_exit_without_lineno(b->b_next)) {\n                cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n                assert(last != NULL);\n                b->b_next->b_instr[0].i_loc = last->i_loc;\n            }\n        }\n    }\n    return SUCCESS;\n}\n\n\n/* If an instruction has no line number, but it's predecessor in the BB does,\n * then copy the line number. If a successor block has no line number, and only\n * one predecessor, then inherit the line number.\n * This ensures that all exit blocks (with one predecessor) receive a line number.\n * Also reduces the size of the line number table,\n * but has no impact on the generated line number events.\n */\nstatic void\npropagate_line_numbers(basicblock *entryblock) {\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n        if (last == NULL) {\n            continue;\n        }\n\n        location prev_location = NO_LOCATION;\n        for (int i = 0; i < b->b_iused; i++) {\n            if (b->b_instr[i].i_loc.lineno < 0) {\n                b->b_instr[i].i_loc = prev_location;\n            }\n            else {\n                prev_location = b->b_instr[i].i_loc;\n            }\n        }\n        if (BB_HAS_FALLTHROUGH(b) && b->b_next->b_predecessors == 1) {\n            assert(b->b_next->b_iused);\n            if (b->b_next->b_instr[0].i_loc.lineno < 0) {\n                b->b_next->b_instr[0].i_loc = prev_location;\n            }\n        }\n        if (is_jump(last)) {\n            basicblock *target = last->i_target;\n            if (target->b_predecessors == 1) {\n                if (target->b_instr[0].i_loc.lineno < 0) {\n                    target->b_instr[0].i_loc = prev_location;\n                }\n            }\n        }\n    }\n}\n\n/* Make sure that all returns have a line number, even if early passes\n * have failed to propagate a correct line number.\n * The resulting line number may not be correct according to PEP 626,\n * but should be \"good enough\", and no worse than in older versions. */\nstatic void\nguarantee_lineno_for_exits(basicblock *entryblock, int firstlineno) {\n    int lineno = firstlineno;\n    assert(lineno > 0);\n    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n        cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n        if (last == NULL) {\n            continue;\n        }\n        if (last->i_loc.lineno < 0) {\n            if (last->i_opcode == RETURN_VALUE) {\n                for (int i = 0; i < b->b_iused; i++) {\n                    assert(b->b_instr[i].i_loc.lineno < 0);\n\n                    b->b_instr[i].i_loc.lineno = lineno;\n                }\n            }\n        }\n        else {\n            lineno = last->i_loc.lineno;\n        }\n    }\n}\n\nstatic int\nresolve_line_numbers(cfg_builder *g, int firstlineno)\n{\n    RETURN_IF_ERROR(duplicate_exits_without_lineno(g));\n    propagate_line_numbers(g->g_entryblock);\n    guarantee_lineno_for_exits(g->g_entryblock, firstlineno);\n    return SUCCESS;\n}\n\nint\n_PyCfg_OptimizeCodeUnit(cfg_builder *g, PyObject *consts, PyObject *const_cache,\n                       int code_flags, int nlocals, int nparams, int firstlineno)\n{\n    assert(cfg_builder_check(g));\n    /** Preprocessing **/\n    /* Map labels to targets and mark exception handlers */\n    RETURN_IF_ERROR(translate_jump_labels_to_targets(g->g_entryblock));\n    RETURN_IF_ERROR(mark_except_handlers(g->g_entryblock));\n    RETURN_IF_ERROR(label_exception_targets(g->g_entryblock));\n\n    /** Optimization **/\n    RETURN_IF_ERROR(optimize_cfg(g, consts, const_cache));\n    RETURN_IF_ERROR(remove_unused_consts(g->g_entryblock, consts));\n    RETURN_IF_ERROR(\n        add_checks_for_loads_of_uninitialized_variables(\n            g->g_entryblock, nlocals, nparams));\n\n    RETURN_IF_ERROR(push_cold_blocks_to_end(g, code_flags));\n    RETURN_IF_ERROR(resolve_line_numbers(g, firstlineno));\n    return SUCCESS;\n}\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 15468,
                                       "gcc/analyzer/saved_diagnostic/snode": 91,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct _PyCfgInstruction *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 28},
                        "level": "warning",
                        "message": {"text": "dereference of NULL '0'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 48,
                                                                       "startColumn": 12,
                                                                       "endColumn": 13},
                                                            "contextRegion": {"startLine": 48,
                                                                              "snippet": {"text": "    return IS_JUMP_OPCODE(i->i_opcode);\n"}}},
                                       "logicalLocations": [{"name": "duplicate_exits_without_lineno",
                                                             "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                             "decoratedName": "duplicate_exits_without_lineno",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2085,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 31},
                                                                                                         "contextRegion": {"startLine": 2085,
                                                                                                                           "snippet": {"text": "duplicate_exits_without_lineno(cfg_builder *g)\n"}}},
                                                                                    "logicalLocations": [{"name": "duplicate_exits_without_lineno",
                                                                                                          "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                          "decoratedName": "duplicate_exits_without_lineno",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'duplicate_exits_without_lineno'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 100,
                                                                                                                                 "dst_idx": 89,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2094,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 44},
                                                                                                         "contextRegion": {"startLine": 2094,
                                                                                                                           "snippet": {"text": "    for (basicblock *b = entryblock; b != NULL; b = b->b_next) {\n"}}},
                                                                                    "logicalLocations": [{"name": "duplicate_exits_without_lineno",
                                                                                                          "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                          "decoratedName": "duplicate_exits_without_lineno",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'b' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2095,
                                                                                                                    "startColumn": 27,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 2095,
                                                                                                                           "snippet": {"text": "        cfg_instr *last = _PyCfg_BasicblockLastInstr(b);\n"}}},
                                                                                    "logicalLocations": [{"name": "duplicate_exits_without_lineno",
                                                                                                          "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                          "decoratedName": "duplicate_exits_without_lineno",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to '_PyCfg_BasicblockLastInstr' from 'duplicate_exits_without_lineno'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "duplicate_exits_without_lineno",
                                                                                                                                     "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                                                     "decoratedName": "duplicate_exits_without_lineno",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 100,
                                                                                                                                 "dst_idx": 89,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 252,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 252,
                                                                                                                           "snippet": {"text": "    if (b->b_iused > 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_BasicblockLastInstr",
                                                                                                          "fullyQualifiedName": "_PyCfg_BasicblockLastInstr",
                                                                                                          "decoratedName": "_PyCfg_BasicblockLastInstr",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "duplicate_exits_without_lineno",
                                                                                                                                     "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                                                     "decoratedName": "duplicate_exits_without_lineno",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 89,
                                                                                                                                 "dst_idx": 91,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 252,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 252,
                                                                                                                           "snippet": {"text": "    if (b->b_iused > 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_BasicblockLastInstr",
                                                                                                          "fullyQualifiedName": "_PyCfg_BasicblockLastInstr",
                                                                                                          "decoratedName": "_PyCfg_BasicblockLastInstr",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2097,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 2097,
                                                                                                                           "snippet": {"text": "        if (is_jump(last)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "duplicate_exits_without_lineno",
                                                                                                          "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                          "decoratedName": "duplicate_exits_without_lineno",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'is_jump' from 'duplicate_exits_without_lineno'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "duplicate_exits_without_lineno",
                                                                                                                                     "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                                                     "decoratedName": "duplicate_exits_without_lineno",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 89,
                                                                                                                                 "dst_idx": 91,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 48,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 48,
                                                                                                                           "snippet": {"text": "    return IS_JUMP_OPCODE(i->i_opcode);\n"}}},
                                                                                    "logicalLocations": [{"name": "is_jump",
                                                                                                          "fullyQualifiedName": "is_jump",
                                                                                                          "decoratedName": "is_jump",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "duplicate_exits_without_lineno",
                                                                                                                                     "fullyQualifiedName": "duplicate_exits_without_lineno",
                                                                                                                                     "decoratedName": "duplicate_exits_without_lineno",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 1},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 48,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 48,
                                                                                                                           "snippet": {"text": "    return IS_JUMP_OPCODE(i->i_opcode);\n"}}},
                                                                                    "logicalLocations": [{"name": "is_jump",
                                                                                                          "fullyQualifiedName": "is_jump",
                                                                                                          "decoratedName": "is_jump",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL '<unknown>'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1508,
                                       "gcc/analyzer/saved_diagnostic/snode": 794,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct ExceptStack *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 11},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'except_stack'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 649,
                                                                       "startColumn": 23,
                                                                       "endColumn": 35},
                                                            "contextRegion": {"startLine": 649,
                                                                              "snippet": {"text": "    stack->handlers[++stack->depth] = target;\n"}}},
                                       "logicalLocations": [{"name": "label_exception_targets",
                                                             "fullyQualifiedName": "label_exception_targets",
                                                             "decoratedName": "label_exception_targets",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2209,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 2209,
                                                                                                                           "snippet": {"text": "_PyCfg_OptimizeCodeUnit(cfg_builder *g, PyObject *consts, PyObject *const_cache,\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2215,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2215,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(translate_jump_labels_to_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2216,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2216,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(mark_except_handlers(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 22,
                                                                                                                                 "dst_idx": 775,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2217,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2217,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(label_exception_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'label_exception_targets' from '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 783,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 783,
                                                                                                                           "snippet": {"text": "label_exception_targets(basicblock *entryblock) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'label_exception_targets'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 785,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 785,
                                                                                                                           "snippet": {"text": "    if (todo_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'todo_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 788,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 52},
                                                                                                         "contextRegion": {"startLine": 788,
                                                                                                                           "snippet": {"text": "    ExceptStack *except_stack = make_except_stack();\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 789,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 789,
                                                                                                                           "snippet": {"text": "    if (except_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'except_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 794,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 794,
                                                                                                                           "snippet": {"text": "    except_stack->depth = 0;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 787,
                                                                                                                                 "dst_idx": 792,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 811,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 811,
                                                                                                                           "snippet": {"text": "                if (!instr->i_target->b_visited) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 821,
                                                                                                                    "startColumn": 27,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 821,
                                                                                                                           "snippet": {"text": "                handler = push_except_block(except_stack, instr);\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'push_except_block' from 'label_exception_targets'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "label_exception_targets",
                                                                                                                                     "fullyQualifiedName": "label_exception_targets",
                                                                                                                                     "decoratedName": "label_exception_targets",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 787,
                                                                                                                                 "dst_idx": 792,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 643,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 643,
                                                                                                                           "snippet": {"text": "    int opcode = setup->i_opcode;\n"}}},
                                                                                    "logicalLocations": [{"name": "push_except_block",
                                                                                                          "fullyQualifiedName": "push_except_block",
                                                                                                          "decoratedName": "push_except_block",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "label_exception_targets",
                                                                                                                                     "fullyQualifiedName": "label_exception_targets",
                                                                                                                                     "decoratedName": "label_exception_targets",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 649,
                                                                                                                    "startColumn": 23,
                                                                                                                    "endColumn": 35},
                                                                                                         "contextRegion": {"startLine": 649,
                                                                                                                           "snippet": {"text": "    stack->handlers[++stack->depth] = target;\n"}}},
                                                                                    "logicalLocations": [{"name": "push_except_block",
                                                                                                          "fullyQualifiedName": "push_except_block",
                                                                                                          "decoratedName": "push_except_block",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'except_stack'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 17}]}]}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1509,
                                       "gcc/analyzer/saved_diagnostic/snode": 795,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct ExceptStack *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 12},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'except_stack'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 656,
                                                                       "startColumn": 30,
                                                                       "endColumn": 42},
                                                            "contextRegion": {"startLine": 656,
                                                                              "snippet": {"text": "    return stack->handlers[--stack->depth];\n"}}},
                                       "logicalLocations": [{"name": "label_exception_targets",
                                                             "fullyQualifiedName": "label_exception_targets",
                                                             "decoratedName": "label_exception_targets",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2209,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 2209,
                                                                                                                           "snippet": {"text": "_PyCfg_OptimizeCodeUnit(cfg_builder *g, PyObject *consts, PyObject *const_cache,\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2215,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2215,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(translate_jump_labels_to_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2216,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2216,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(mark_except_handlers(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 22,
                                                                                                                                 "dst_idx": 775,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2217,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2217,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(label_exception_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'label_exception_targets' from '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 783,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 783,
                                                                                                                           "snippet": {"text": "label_exception_targets(basicblock *entryblock) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'label_exception_targets'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 785,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 785,
                                                                                                                           "snippet": {"text": "    if (todo_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'todo_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 788,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 52},
                                                                                                         "contextRegion": {"startLine": 788,
                                                                                                                           "snippet": {"text": "    ExceptStack *except_stack = make_except_stack();\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 789,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 789,
                                                                                                                           "snippet": {"text": "    if (except_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'except_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 794,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 794,
                                                                                                                           "snippet": {"text": "    except_stack->depth = 0;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 810,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 810,
                                                                                                                           "snippet": {"text": "            if (is_block_push(instr)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'is_block_push' from 'label_exception_targets'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES",
                                                                                      "gcc/analyzer/checker_event/original_depth": 3},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 42,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 42,
                                                                                                                           "snippet": {"text": "    return IS_BLOCK_PUSH_OPCODE(i->i_opcode);\n"}}},
                                                                                    "logicalLocations": [{"name": "is_block_push",
                                                                                                          "fullyQualifiedName": "is_block_push",
                                                                                                          "decoratedName": "is_block_push",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 823,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 823,
                                                                                                                           "snippet": {"text": "            else if (instr->i_opcode == POP_BLOCK) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 824,
                                                                                                                    "startColumn": 27,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 824,
                                                                                                                           "snippet": {"text": "                handler = pop_except_block(except_stack);\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'pop_except_block' from 'label_exception_targets'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "label_exception_targets",
                                                                                                                                     "fullyQualifiedName": "label_exception_targets",
                                                                                                                                     "decoratedName": "label_exception_targets",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 656,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 42},
                                                                                                         "contextRegion": {"startLine": 656,
                                                                                                                           "snippet": {"text": "    return stack->handlers[--stack->depth];\n"}}},
                                                                                    "logicalLocations": [{"name": "pop_except_block",
                                                                                                          "fullyQualifiedName": "pop_except_block",
                                                                                                          "decoratedName": "pop_except_block",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'except_stack'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 18}]}]}]},
                       {"ruleId": "-Wanalyzer-null-argument",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1489,
                                       "gcc/analyzer/saved_diagnostic/snode": 872,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct ExceptStack *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 10},
                        "level": "warning",
                        "message": {"text": "use of NULL 'stack' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 683,
                                                                       "startColumn": 5,
                                                                       "endColumn": 45},
                                                            "contextRegion": {"startLine": 683,
                                                                              "snippet": {"text": "    memcpy(copy, stack, sizeof(ExceptStack));\n"}}},
                                       "logicalLocations": [{"name": "copy_except_stack",
                                                             "fullyQualifiedName": "copy_except_stack",
                                                             "decoratedName": "copy_except_stack",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2209,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 2209,
                                                                                                                           "snippet": {"text": "_PyCfg_OptimizeCodeUnit(cfg_builder *g, PyObject *consts, PyObject *const_cache,\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2215,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2215,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(translate_jump_labels_to_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2216,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2216,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(mark_except_handlers(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 22,
                                                                                                                                 "dst_idx": 775,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2217,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2217,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(label_exception_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'label_exception_targets' from '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 783,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 783,
                                                                                                                           "snippet": {"text": "label_exception_targets(basicblock *entryblock) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'label_exception_targets'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 785,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 785,
                                                                                                                           "snippet": {"text": "    if (todo_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'todo_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 788,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 52},
                                                                                                         "contextRegion": {"startLine": 788,
                                                                                                                           "snippet": {"text": "    ExceptStack *except_stack = make_except_stack();\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 789,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 789,
                                                                                                                           "snippet": {"text": "    if (except_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'except_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 794,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 794,
                                                                                                                           "snippet": {"text": "    except_stack->depth = 0;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 787,
                                                                                                                                 "dst_idx": 788,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 811,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 811,
                                                                                                                           "snippet": {"text": "                if (!instr->i_target->b_visited) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 787,
                                                                                                                                 "dst_idx": 788,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 812,
                                                                                                                    "startColumn": 41,
                                                                                                                    "endColumn": 72},
                                                                                                         "contextRegion": {"startLine": 812,
                                                                                                                           "snippet": {"text": "                    ExceptStack *copy = copy_except_stack(except_stack);\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 788,
                                                                                                                                 "dst_idx": 869,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 812,
                                                                                                                    "startColumn": 41,
                                                                                                                    "endColumn": 72},
                                                                                                         "contextRegion": {"startLine": 812,
                                                                                                                           "snippet": {"text": "                    ExceptStack *copy = copy_except_stack(except_stack);\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'copy_except_stack' from 'label_exception_targets'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 677,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 677,
                                                                                                                           "snippet": {"text": "copy_except_stack(ExceptStack *stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_except_stack",
                                                                                                          "fullyQualifiedName": "copy_except_stack",
                                                                                                          "decoratedName": "copy_except_stack",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'copy_except_stack'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 870,
                                                                                                                                 "dst_idx": 872,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 679,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 679,
                                                                                                                           "snippet": {"text": "    if (copy == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_except_stack",
                                                                                                          "fullyQualifiedName": "copy_except_stack",
                                                                                                          "decoratedName": "copy_except_stack",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'copy' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 870,
                                                                                                                                 "dst_idx": 872,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 683,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 683,
                                                                                                                           "snippet": {"text": "    memcpy(copy, stack, sizeof(ExceptStack));\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_except_stack",
                                                                                                          "fullyQualifiedName": "copy_except_stack",
                                                                                                          "decoratedName": "copy_except_stack",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 683,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 45},
                                                                                                         "contextRegion": {"startLine": 683,
                                                                                                                           "snippet": {"text": "    memcpy(copy, stack, sizeof(ExceptStack));\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_except_stack",
                                                                                                          "fullyQualifiedName": "copy_except_stack",
                                                                                                          "decoratedName": "copy_except_stack",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 2 ('stack') NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 20}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 2 of '__builtin_memcpy' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-null-dereference",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1583,
                                       "gcc/analyzer/saved_diagnostic/snode": 808,
                                       "gcc/analyzer/saved_diagnostic/sval": "(struct ExceptStack *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 14},
                        "level": "warning",
                        "message": {"text": "dereference of NULL 'except_stack'"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 848,
                                                                       "startColumn": 38,
                                                                       "endColumn": 57},
                                                            "contextRegion": {"startLine": 848,
                                                                              "snippet": {"text": "                    instr->i_oparg = except_stack->depth;\n"}}},
                                       "logicalLocations": [{"name": "label_exception_targets",
                                                             "fullyQualifiedName": "label_exception_targets",
                                                             "decoratedName": "label_exception_targets",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2209,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 2209,
                                                                                                                           "snippet": {"text": "_PyCfg_OptimizeCodeUnit(cfg_builder *g, PyObject *consts, PyObject *const_cache,\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2215,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2215,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(translate_jump_labels_to_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 19,
                                                                                                                                 "dst_idx": 21,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2216,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2216,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(mark_except_handlers(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 22,
                                                                                                                                 "dst_idx": 775,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2217,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 2217,
                                                                                                                           "snippet": {"text": "    RETURN_IF_ERROR(label_exception_targets(g->g_entryblock));\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "fullyQualifiedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "decoratedName": "_PyCfg_OptimizeCodeUnit",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'label_exception_targets' from '_PyCfg_OptimizeCodeUnit'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 783,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 783,
                                                                                                                           "snippet": {"text": "label_exception_targets(basicblock *entryblock) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'label_exception_targets'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 785,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 785,
                                                                                                                           "snippet": {"text": "    if (todo_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'todo_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 777,
                                                                                                                                 "dst_idx": 779,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 788,
                                                                                                                    "startColumn": 33,
                                                                                                                    "endColumn": 52},
                                                                                                         "contextRegion": {"startLine": 788,
                                                                                                                           "snippet": {"text": "    ExceptStack *except_stack = make_except_stack();\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 789,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 789,
                                                                                                                           "snippet": {"text": "    if (except_stack == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'except_stack' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 780,
                                                                                                                                 "dst_idx": 782,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 794,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 28},
                                                                                                         "contextRegion": {"startLine": 794,
                                                                                                                           "snippet": {"text": "    except_stack->depth = 0;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 800,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 800,
                                                                                                                           "snippet": {"text": "    while (todo > todo_stack) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'todo > todo_stack')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 821,
                                                                                                                                 "dst_idx": 783,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 801,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 15},
                                                                                                         "contextRegion": {"startLine": 801,
                                                                                                                           "snippet": {"text": "        todo--;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 810,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 810,
                                                                                                                           "snippet": {"text": "            if (is_block_push(instr)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'is_block_push' from 'label_exception_targets'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES",
                                                                                      "gcc/analyzer/checker_event/original_depth": 3},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 42,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 42,
                                                                                                                           "snippet": {"text": "    return IS_BLOCK_PUSH_OPCODE(i->i_opcode);\n"}}},
                                                                                    "logicalLocations": [{"name": "is_block_push",
                                                                                                          "fullyQualifiedName": "is_block_push",
                                                                                                          "decoratedName": "is_block_push",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 823,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 823,
                                                                                                                           "snippet": {"text": "            else if (instr->i_opcode == POP_BLOCK) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 786,
                                                                                                                                 "dst_idx": 796,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 823,
                                                                                                                    "startColumn": 21,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 823,
                                                                                                                           "snippet": {"text": "            else if (instr->i_opcode == POP_BLOCK) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 826,
                                                                                                                    "startColumn": 22,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 826,
                                                                                                                           "snippet": {"text": "            else if (is_jump(instr)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'is_jump' from 'label_exception_targets'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_INLINED_CALL"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 48,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 48,
                                                                                                                           "snippet": {"text": "    return IS_JUMP_OPCODE(i->i_opcode);\n"}}},
                                                                                    "logicalLocations": [{"name": "is_jump",
                                                                                                          "fullyQualifiedName": "is_jump",
                                                                                                          "decoratedName": "is_jump",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "inlined call to 'is_bit_set_in_table' from 'is_jump'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/checker_event/original_fndecl": {"name": "label_exception_targets",
                                                                                                                                     "fullyQualifiedName": "label_exception_targets",
                                                                                                                                     "decoratedName": "label_exception_targets",
                                                                                                                                     "kind": "function"},
                                                                                      "gcc/analyzer/checker_event/original_depth": 2,
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 786,
                                                                                                                                 "dst_idx": 796,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Include/internal/pycore_opcode_utils.h",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 76,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 76,
                                                                                                                           "snippet": {"text": "    if (bitindex >= 0 && bitindex < 512) {\n"}}},
                                                                                    "logicalLocations": [{"name": "is_bit_set_in_table",
                                                                                                          "fullyQualifiedName": "is_bit_set_in_table",
                                                                                                          "decoratedName": "is_bit_set_in_table",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/flowgraph.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 848,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 57},
                                                                                                         "contextRegion": {"startLine": 848,
                                                                                                                           "snippet": {"text": "                    instr->i_oparg = except_stack->depth;\n"}}},
                                                                                    "logicalLocations": [{"name": "label_exception_targets",
                                                                                                          "fullyQualifiedName": "label_exception_targets",
                                                                                                          "decoratedName": "label_exception_targets",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "dereference of NULL 'except_stack'"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 21}]}]}]}]}]}
