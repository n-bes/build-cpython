{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-deref-before-check",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-deref-before-check"}]}},
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "Parser/pegen.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "#include <Python.h>\n#include \"pycore_ast.h\"           // _PyAST_Validate(),\n#include \"pycore_pystate.h\"       // _PyThreadState_GET()\n#include \"pycore_pyerrors.h\"      // PyExc_IncompleteInputError\n#include <errcode.h>\n\n#include \"lexer/lexer.h\"\n#include \"tokenizer/tokenizer.h\"\n#include \"pegen.h\"\n\n// Internal parser functions\n\nasdl_stmt_seq*\n_PyPegen_interactive_exit(Parser *p)\n{\n    if (p->errcode) {\n        *(p->errcode) = E_EOF;\n    }\n    return NULL;\n}\n\nPy_ssize_t\n_PyPegen_byte_offset_to_character_offset_line(PyObject *line, Py_ssize_t col_offset, Py_ssize_t end_col_offset)\n{\n    const char *data = PyUnicode_AsUTF8(line);\n\n    Py_ssize_t len = 0;\n    while (col_offset < end_col_offset) {\n        Py_UCS4 ch = data[col_offset];\n        if (ch < 0x80) {\n            col_offset += 1;\n        } else if ((ch & 0xe0) == 0xc0) {\n            col_offset += 2;\n        } else if ((ch & 0xf0) == 0xe0) {\n            col_offset += 3;\n        } else if ((ch & 0xf8) == 0xf0) {\n            col_offset += 4;\n        } else {\n            PyErr_SetString(PyExc_ValueError, \"Invalid UTF-8 sequence\");\n            return -1;\n        }\n        len++;\n    }\n    return len;\n}\n\nPy_ssize_t\n_PyPegen_byte_offset_to_character_offset_raw(const char* str, Py_ssize_t col_offset)\n{\n    Py_ssize_t len = strlen(str);\n    if (col_offset > len + 1) {\n        col_offset = len + 1;\n    }\n    assert(col_offset >= 0);\n    PyObject *text = PyUnicode_DecodeUTF8(str, col_offset, \"replace\");\n    if (!text) {\n        return -1;\n    }\n    Py_ssize_t size = PyUnicode_GET_LENGTH(text);\n    Py_DECREF(text);\n    return size;\n}\n\nPy_ssize_t\n_PyPegen_byte_offset_to_character_offset(PyObject *line, Py_ssize_t col_offset)\n{\n    const char *str = PyUnicode_AsUTF8(line);\n    if (!str) {\n        return -1;\n    }\n    return _PyPegen_byte_offset_to_character_offset_raw(str, col_offset);\n}\n\n// Here, mark is the start of the node, while p->mark is the end.\n// If node==NULL, they should be the same.\nint\n_PyPegen_insert_memo(Parser *p, int mark, int type, void *node)\n{\n    // Insert in front\n    Memo *m = _PyArena_Malloc(p->arena, sizeof(Memo));\n    if (m == NULL) {\n        return -1;\n    }\n    m->type = type;\n    m->node = node;\n    m->mark = p->mark;\n    m->next = p->tokens[mark]->memo;\n    p->tokens[mark]->memo = m;\n    return 0;\n}\n\n// Like _PyPegen_insert_memo(), but updates an existing node if found.\nint\n_PyPegen_update_memo(Parser *p, int mark, int type, void *node)\n{\n    for (Memo *m = p->tokens[mark]->memo; m != NULL; m = m->next) {\n        if (m->type == type) {\n            // Update existing node.\n            m->node = node;\n            m->mark = p->mark;\n            return 0;\n        }\n    }\n    // Insert new node.\n    return _PyPegen_insert_memo(p, mark, type, node);\n}\n\nstatic int\ninit_normalization(Parser *p)\n{\n    if (p->normalize) {\n        return 1;\n    }\n    p->normalize = _PyImport_GetModuleAttrString(\"unicodedata\", \"normalize\");\n    if (!p->normalize)\n    {\n        return 0;\n    }\n    return 1;\n}\n\nstatic int\ngrowable_comment_array_init(growable_comment_array *arr, size_t initial_size) {\n    assert(initial_size > 0);\n    arr->items = PyMem_Malloc(initial_size * sizeof(*arr->items));\n    arr->size = initial_size;\n    arr->num_items = 0;\n\n    return arr->items != NULL;\n}\n\nstatic int\ngrowable_comment_array_add(growable_comment_array *arr, int lineno, char *comment) {\n    if (arr->num_items >= arr->size) {\n        size_t new_size = arr->size * 2;\n        void *new_items_array = PyMem_Realloc(arr->items, new_size * sizeof(*arr->items));\n        if (!new_items_array) {\n            return 0;\n        }\n        arr->items = new_items_array;\n        arr->size = new_size;\n    }\n\n    arr->items[arr->num_items].lineno = lineno;\n    arr->items[arr->num_items].comment = comment;  // Take ownership\n    arr->num_items++;\n    return 1;\n}\n\nstatic void\ngrowable_comment_array_deallocate(growable_comment_array *arr) {\n    for (unsigned i = 0; i < arr->num_items; i++) {\n        PyMem_Free(arr->items[i].comment);\n    }\n    PyMem_Free(arr->items);\n}\n\nstatic int\n_get_keyword_or_name_type(Parser *p, struct token *new_token)\n{\n    int name_len = new_token->end_col_offset - new_token->col_offset;\n    assert(name_len > 0);\n\n    if (name_len >= p->n_keyword_lists ||\n        p->keywords[name_len] == NULL ||\n        p->keywords[name_len]->type == -1) {\n        return NAME;\n    }\n    for (KeywordToken *k = p->keywords[name_len]; k != NULL && k->type != -1; k++) {\n        if (strncmp(k->str, new_token->start, name_len) == 0) {\n            return k->type;\n        }\n    }\n    return NAME;\n}\n\nstatic int\ninitialize_token(Parser *p, Token *parser_token, struct token *new_token, int token_type) {\n    assert(parser_token != NULL);\n\n    parser_token->type = (token_type == NAME) ? _get_keyword_or_name_type(p, new_token) : token_type;\n    parser_token->bytes = PyBytes_FromStringAndSize(new_token->start, new_token->end - new_token->start);\n    if (parser_token->bytes == NULL) {\n        return -1;\n    }\n    if (_PyArena_AddPyObject(p->arena, parser_token->bytes) < 0) {\n        Py_DECREF(parser_token->bytes);\n        return -1;\n    }\n\n    parser_token->metadata = NULL;\n    if (new_token->metadata != NULL) {\n        if (_PyArena_AddPyObject(p->arena, new_token->metadata) < 0) {\n            Py_DECREF(parser_token->metadata);\n            return -1;\n        }\n        parser_token->metadata = new_token->metadata;\n        new_token->metadata = NULL;\n    }\n\n    parser_token->level = new_token->level;\n    parser_token->lineno = new_token->lineno;\n    parser_token->col_offset = p->tok->lineno == p->starting_lineno ? p->starting_col_offset + new_token->col_offset\n                                                                    : new_token->col_offset;\n    parser_token->end_lineno = new_token->end_lineno;\n    parser_token->end_col_offset = p->tok->lineno == p->starting_lineno ? p->starting_col_offset + new_token->end_col_offset\n                                                                 : new_token->end_col_offset;\n\n    p->fill += 1;\n\n    if (token_type == ERRORTOKEN && p->tok->done == E_DECODE) {\n        return _Pypegen_raise_decode_error(p);\n    }\n\n    return (token_type == ERRORTOKEN ? _Pypegen_tokenizer_error(p) : 0);\n}\n\nstatic int\n_resize_tokens_array(Parser *p) {\n    int newsize = p->size * 2;\n    Token **new_tokens = PyMem_Realloc(p->tokens, newsize * sizeof(Token *));\n    if (new_tokens == NULL) {\n        PyErr_NoMemory();\n        return -1;\n    }\n    p->tokens = new_tokens;\n\n    for (int i = p->size; i < newsize; i++) {\n        p->tokens[i] = PyMem_Calloc(1, sizeof(Token));\n        if (p->tokens[i] == NULL) {\n            p->size = i; // Needed, in order to cleanup correctly after parser fails\n            PyErr_NoMemory();\n            return -1;\n        }\n    }\n    p->size = newsize;\n    return 0;\n}\n\nint\n_PyPegen_fill_token(Parser *p)\n{\n    struct token new_token;\n    _PyToken_Init(&new_token);\n    int type = _PyTokenizer_Get(p->tok, &new_token);\n\n    // Record and skip '# type: ignore' comments\n    while (type == TYPE_IGNORE) {\n        Py_ssize_t len = new_token.end_col_offset - new_token.col_offset;\n        char *tag = PyMem_Malloc(len + 1);\n        if (tag == NULL) {\n            PyErr_NoMemory();\n            goto error;\n        }\n        strncpy(tag, new_token.start, len);\n        tag[len] = '\\0';\n        // Ownership of tag passes to the growable array\n        if (!growable_comment_array_add(&p->type_ignore_comments, p->tok->lineno, tag)) {\n            PyErr_NoMemory();\n            goto error;\n        }\n        type = _PyTokenizer_Get(p->tok, &new_token);\n    }\n\n    // If we have reached the end and we are in single input mode we need to insert a newline and reset the parsing\n    if (p->start_rule == Py_single_input && type == ENDMARKER && p->parsing_started) {\n        type = NEWLINE; /* Add an extra newline */\n        p->parsing_started = 0;\n\n        if (p->tok->indent && !(p->flags & PyPARSE_DONT_IMPLY_DEDENT)) {\n            p->tok->pendin = -p->tok->indent;\n            p->tok->indent = 0;\n        }\n    }\n    else {\n        p->parsing_started = 1;\n    }\n\n    // Check if we are at the limit of the token array capacity and resize if needed\n    if ((p->fill == p->size) && (_resize_tokens_array(p) != 0)) {\n        goto error;\n    }\n\n    Token *t = p->tokens[p->fill];\n    return initialize_token(p, t, &new_token, type);\nerror:\n    _PyToken_Free(&new_token);\n    return -1;\n}\n\n#if defined(Py_DEBUG)\n// Instrumentation to count the effectiveness of memoization.\n// The array counts the number of tokens skipped by memoization,\n// indexed by type.\n\n#define NSTATISTICS _PYPEGEN_NSTATISTICS\n#define memo_statistics _PyRuntime.parser.memo_statistics\n\nvoid\n_PyPegen_clear_memo_statistics(void)\n{\n    for (int i = 0; i < NSTATISTICS; i++) {\n        memo_statistics[i] = 0;\n    }\n}\n\nPyObject *\n_PyPegen_get_memo_statistics(void)\n{\n    PyObject *ret = PyList_New(NSTATISTICS);\n    if (ret == NULL) {\n        return NULL;\n    }\n    for (int i = 0; i < NSTATISTICS; i++) {\n        PyObject *value = PyLong_FromLong(memo_statistics[i]);\n        if (value == NULL) {\n            Py_DECREF(ret);\n            return NULL;\n        }\n        // PyList_SetItem borrows a reference to value.\n        if (PyList_SetItem(ret, i, value) < 0) {\n            Py_DECREF(ret);\n            return NULL;\n        }\n    }\n    return ret;\n}\n#endif\n\nint  // bool\n_PyPegen_is_memoized(Parser *p, int type, void *pres)\n{\n    if (p->mark == p->fill) {\n        if (_PyPegen_fill_token(p) < 0) {\n            p->error_indicator = 1;\n            return -1;\n        }\n    }\n\n    Token *t = p->tokens[p->mark];\n\n    for (Memo *m = t->memo; m != NULL; m = m->next) {\n        if (m->type == type) {\n#if defined(PY_DEBUG)\n            if (0 <= type && type < NSTATISTICS) {\n                long count = m->mark - p->mark;\n                // A memoized negative result counts for one.\n                if (count <= 0) {\n                    count = 1;\n                }\n                memo_statistics[type] += count;\n            }\n#endif\n            p->mark = m->mark;\n            *(void **)(pres) = m->node;\n            return 1;\n        }\n    }\n    return 0;\n}\n\nint\n_PyPegen_lookahead_with_name(int positive, expr_ty (func)(Parser *), Parser *p)\n{\n    int mark = p->mark;\n    void *res = func(p);\n    p->mark = mark;\n    return (res != NULL) == positive;\n}\n\nint\n_PyPegen_lookahead_with_string(int positive, expr_ty (func)(Parser *, const char*), Parser *p, const char* arg)\n{\n    int mark = p->mark;\n    void *res = func(p, arg);\n    p->mark = mark;\n    return (res != NULL) == positive;\n}\n\nint\n_PyPegen_lookahead_with_int(int positive, Token *(func)(Parser *, int), Parser *p, int arg)\n{\n    int mark = p->mark;\n    void *res = func(p, arg);\n    p->mark = mark;\n    return (res != NULL) == positive;\n}\n\nint\n_PyPegen_lookahead(int positive, void *(func)(Parser *), Parser *p)\n{\n    int mark = p->mark;\n    void *res = (void*)func(p);\n    p->mark = mark;\n    return (res != NULL) == positive;\n}\n\nToken *\n_PyPegen_expect_token(Parser *p, int type)\n{\n    if (p->mark == p->fill) {\n        if (_PyPegen_fill_token(p) < 0) {\n            p->error_indicator = 1;\n            return NULL;\n        }\n    }\n    Token *t = p->tokens[p->mark];\n    if (t->type != type) {\n       return NULL;\n    }\n    p->mark += 1;\n    return t;\n}\n\nvoid*\n_PyPegen_expect_forced_result(Parser *p, void* result, const char* expected) {\n\n    if (p->error_indicator == 1) {\n        return NULL;\n    }\n    if (result == NULL) {\n        RAISE_SYNTAX_ERROR(\"expected (%s)\", expected);\n        return NULL;\n    }\n    return result;\n}\n\nToken *\n_PyPegen_expect_forced_token(Parser *p, int type, const char* expected) {\n\n    if (p->error_indicator == 1) {\n        return NULL;\n    }\n\n    if (p->mark == p->fill) {\n        if (_PyPegen_fill_token(p) < 0) {\n            p->error_indicator = 1;\n            return NULL;\n        }\n    }\n    Token *t = p->tokens[p->mark];\n    if (t->type != type) {\n        RAISE_SYNTAX_ERROR_KNOWN_LOCATION(t, \"expected '%s'\", expected);\n        return NULL;\n    }\n    p->mark += 1;\n    return t;\n}\n\nexpr_ty\n_PyPegen_expect_soft_keyword(Parser *p, const char *keyword)\n{\n    if (p->mark == p->fill) {\n        if (_PyPegen_fill_token(p) < 0) {\n            p->error_indicator = 1;\n            return NULL;\n        }\n    }\n    Token *t = p->tokens[p->mark];\n    if (t->type != NAME) {\n        return NULL;\n    }\n    const char *s = PyBytes_AsString(t->bytes);\n    if (!s) {\n        p->error_indicator = 1;\n        return NULL;\n    }\n    if (strcmp(s, keyword) != 0) {\n        return NULL;\n    }\n    return _PyPegen_name_token(p);\n}\n\nToken *\n_PyPegen_get_last_nonnwhitespace_token(Parser *p)\n{\n    assert(p->mark >= 0);\n    Token *token = NULL;\n    for (int m = p->mark - 1; m >= 0; m--) {\n        token = p->tokens[m];\n        if (token->type != ENDMARKER && (token->type < NEWLINE || token->type > DEDENT)) {\n            break;\n        }\n    }\n    return token;\n}\n\nPyObject *\n_PyPegen_new_identifier(Parser *p, const char *n)\n{\n    PyObject *id = PyUnicode_DecodeUTF8(n, strlen(n), NULL);\n    if (!id) {\n        goto error;\n    }\n    /* PyUnicode_DecodeUTF8 should always return a ready string. */\n    assert(PyUnicode_IS_READY(id));\n    /* Check whether there are non-ASCII characters in the\n       identifier; if so, normalize to NFKC. */\n    if (!PyUnicode_IS_ASCII(id))\n    {\n        if (!init_normalization(p))\n        {\n            Py_DECREF(id);\n            goto error;\n        }\n        PyObject *form = PyUnicode_InternFromString(\"NFKC\");\n        if (form == NULL)\n        {\n            Py_DECREF(id);\n            goto error;\n        }\n        PyObject *args[2] = {form, id};\n        PyObject *id2 = PyObject_Vectorcall(p->normalize, args, 2, NULL);\n        Py_DECREF(id);\n        Py_DECREF(form);\n        if (!id2) {\n            goto error;\n        }\n\n        if (!PyUnicode_Check(id2))\n        {\n            PyErr_Format(PyExc_TypeError,\n                         \"unicodedata.normalize() must return a string, not \"\n                         \"%.200s\",\n                         _PyType_Name(Py_TYPE(id2)));\n            Py_DECREF(id2);\n            goto error;\n        }\n        id = id2;\n    }\n    PyInterpreterState *interp = _PyInterpreterState_GET();\n    _PyUnicode_InternImmortal(interp, &id);\n    if (_PyArena_AddPyObject(p->arena, id) < 0)\n    {\n        Py_DECREF(id);\n        goto error;\n    }\n    return id;\n\nerror:\n    p->error_indicator = 1;\n    return NULL;\n}\n\nstatic expr_ty\n_PyPegen_name_from_token(Parser *p, Token* t)\n{\n    if (t == NULL) {\n        return NULL;\n    }\n    const char *s = PyBytes_AsString(t->bytes);\n    if (!s) {\n        p->error_indicator = 1;\n        return NULL;\n    }\n    PyObject *id = _PyPegen_new_identifier(p, s);\n    if (id == NULL) {\n        p->error_indicator = 1;\n        return NULL;\n    }\n    return _PyAST_Name(id, Load, t->lineno, t->col_offset, t->end_lineno,\n                       t->end_col_offset, p->arena);\n}\n\nexpr_ty\n_PyPegen_name_token(Parser *p)\n{\n    Token *t = _PyPegen_expect_token(p, NAME);\n    return _PyPegen_name_from_token(p, t);\n}\n\nvoid *\n_PyPegen_string_token(Parser *p)\n{\n    return _PyPegen_expect_token(p, STRING);\n}\n\nexpr_ty _PyPegen_soft_keyword_token(Parser *p) {\n    Token *t = _PyPegen_expect_token(p, NAME);\n    if (t == NULL) {\n        return NULL;\n    }\n    char *the_token;\n    Py_ssize_t size;\n    PyBytes_AsStringAndSize(t->bytes, &the_token, &size);\n    for (char **keyword = p->soft_keywords; *keyword != NULL; keyword++) {\n        if (strncmp(*keyword, the_token, size) == 0) {\n            return _PyPegen_name_from_token(p, t);\n        }\n    }\n    return NULL;\n}\n\nstatic PyObject *\nparsenumber_raw(const char *s)\n{\n    const char *end;\n    long x;\n    double dx;\n    Py_complex compl;\n    int imflag;\n\n    assert(s != NULL);\n    errno = 0;\n    end = s + strlen(s) - 1;\n    imflag = *end == 'j' || *end == 'J';\n    if (s[0] == '0') {\n        x = (long)PyOS_strtoul(s, (char **)&end, 0);\n        if (x < 0 && errno == 0) {\n            return PyLong_FromString(s, (char **)0, 0);\n        }\n    }\n    else {\n        x = PyOS_strtol(s, (char **)&end, 0);\n    }\n    if (*end == '\\0') {\n        if (errno != 0) {\n            return PyLong_FromString(s, (char **)0, 0);\n        }\n        return PyLong_FromLong(x);\n    }\n    /* XXX Huge floats may silently fail */\n    if (imflag) {\n        compl.real = 0.;\n        compl.imag = PyOS_string_to_double(s, (char **)&end, NULL);\n        if (compl.imag == -1.0 && PyErr_Occurred()) {\n            return NULL;\n        }\n        return PyComplex_FromCComplex(compl);\n    }\n    dx = PyOS_string_to_double(s, NULL, NULL);\n    if (dx == -1.0 && PyErr_Occurred()) {\n        return NULL;\n    }\n    return PyFloat_FromDouble(dx);\n}\n\nstatic PyObject *\nparsenumber(const char *s)\n{\n    char *dup;\n    char *end;\n    PyObject *res = NULL;\n\n    assert(s != NULL);\n\n    if (strchr(s, '_') == NULL) {\n        return parsenumber_raw(s);\n    }\n    /* Create a duplicate without underscores. */\n    dup = PyMem_Malloc(strlen(s) + 1);\n    if (dup == NULL) {\n        return PyErr_NoMemory();\n    }\n    end = dup;\n    for (; *s; s++) {\n        if (*s != '_') {\n            *end++ = *s;\n        }\n    }\n    *end = '\\0';\n    res = parsenumber_raw(dup);\n    PyMem_Free(dup);\n    return res;\n}\n\nexpr_ty\n_PyPegen_number_token(Parser *p)\n{\n    Token *t = _PyPegen_expect_token(p, NUMBER);\n    if (t == NULL) {\n        return NULL;\n    }\n\n    const char *num_raw = PyBytes_AsString(t->bytes);\n    if (num_raw == NULL) {\n        p->error_indicator = 1;\n        return NULL;\n    }\n\n    if (p->feature_version < 6 && strchr(num_raw, '_') != NULL) {\n        p->error_indicator = 1;\n        return RAISE_SYNTAX_ERROR(\"Underscores in numeric literals are only supported \"\n                                  \"in Python 3.6 and greater\");\n    }\n\n    PyObject *c = parsenumber(num_raw);\n\n    if (c == NULL) {\n        p->error_indicator = 1;\n        PyThreadState *tstate = _PyThreadState_GET();\n        // The only way a ValueError should happen in _this_ code is via\n        // PyLong_FromString hitting a length limit.\n        if (tstate->current_exception != NULL &&\n            Py_TYPE(tstate->current_exception) == (PyTypeObject *)PyExc_ValueError\n        ) {\n            PyObject *exc = PyErr_GetRaisedException();\n            /* Intentionally omitting columns to avoid a wall of 1000s of '^'s\n             * on the error message. Nobody is going to overlook their huge\n             * numeric literal once given the line. */\n            RAISE_ERROR_KNOWN_LOCATION(\n                p, PyExc_SyntaxError,\n                t->lineno, -1 /* col_offset */,\n                t->end_lineno, -1 /* end_col_offset */,\n                \"%S - Consider hexadecimal for huge integer literals \"\n                \"to avoid decimal conversion limits.\",\n                exc);\n            Py_DECREF(exc);\n        }\n        return NULL;\n    }\n\n    if (_PyArena_AddPyObject(p->arena, c) < 0) {\n        Py_DECREF(c);\n        p->error_indicator = 1;\n        return NULL;\n    }\n\n    return _PyAST_Constant(c, NULL, t->lineno, t->col_offset, t->end_lineno,\n                           t->end_col_offset, p->arena);\n}\n\n/* Check that the source for a single input statement really is a single\n   statement by looking at what is left in the buffer after parsing.\n   Trailing whitespace and comments are OK. */\nstatic int // bool\nbad_single_statement(Parser *p)\n{\n    char *cur = p->tok->cur;\n    char c = *cur;\n\n    for (;;) {\n        while (c == ' ' || c == '\\t' || c == '\\n' || c == '\\014') {\n            c = *++cur;\n        }\n\n        if (!c) {\n            return 0;\n        }\n\n        if (c != '#') {\n            return 1;\n        }\n\n        /* Suck up comment. */\n        while (c && c != '\\n') {\n            c = *++cur;\n        }\n    }\n}\n\nstatic int\ncompute_parser_flags(PyCompilerFlags *flags)\n{\n    int parser_flags = 0;\n    if (!flags) {\n        return 0;\n    }\n    if (flags->cf_flags & PyCF_DONT_IMPLY_DEDENT) {\n        parser_flags |= PyPARSE_DONT_IMPLY_DEDENT;\n    }\n    if (flags->cf_flags & PyCF_IGNORE_COOKIE) {\n        parser_flags |= PyPARSE_IGNORE_COOKIE;\n    }\n    if (flags->cf_flags & CO_FUTURE_BARRY_AS_BDFL) {\n        parser_flags |= PyPARSE_BARRY_AS_BDFL;\n    }\n    if (flags->cf_flags & PyCF_TYPE_COMMENTS) {\n        parser_flags |= PyPARSE_TYPE_COMMENTS;\n    }\n    if (flags->cf_flags & PyCF_ALLOW_INCOMPLETE_INPUT) {\n        parser_flags |= PyPARSE_ALLOW_INCOMPLETE_INPUT;\n    }\n    return parser_flags;\n}\n\n// Parser API\n\nParser *\n_PyPegen_Parser_New(struct tok_state *tok, int start_rule, int flags,\n                    int feature_version, int *errcode, PyArena *arena)\n{\n    Parser *p = PyMem_Malloc(sizeof(Parser));\n    if (p == NULL) {\n        return (Parser *) PyErr_NoMemory();\n    }\n    assert(tok != NULL);\n    tok->type_comments = (flags & PyPARSE_TYPE_COMMENTS) > 0;\n    p->tok = tok;\n    p->keywords = NULL;\n    p->n_keyword_lists = -1;\n    p->soft_keywords = NULL;\n    p->tokens = PyMem_Malloc(sizeof(Token *));\n    if (!p->tokens) {\n        PyMem_Free(p);\n        return (Parser *) PyErr_NoMemory();\n    }\n    p->tokens[0] = PyMem_Calloc(1, sizeof(Token));\n    if (!p->tokens[0]) {\n        PyMem_Free(p->tokens);\n        PyMem_Free(p);\n        return (Parser *) PyErr_NoMemory();\n    }\n    if (!growable_comment_array_init(&p->type_ignore_comments, 10)) {\n        PyMem_Free(p->tokens[0]);\n        PyMem_Free(p->tokens);\n        PyMem_Free(p);\n        return (Parser *) PyErr_NoMemory();\n    }\n\n    p->mark = 0;\n    p->fill = 0;\n    p->size = 1;\n\n    p->errcode = errcode;\n    p->arena = arena;\n    p->start_rule = start_rule;\n    p->parsing_started = 0;\n    p->normalize = NULL;\n    p->error_indicator = 0;\n\n    p->starting_lineno = 0;\n    p->starting_col_offset = 0;\n    p->flags = flags;\n    p->feature_version = feature_version;\n    p->known_err_token = NULL;\n    p->level = 0;\n    p->call_invalid_rules = 0;\n#ifdef Py_DEBUG\n    p->debug = _Py_GetConfig()->parser_debug;\n#endif\n    return p;\n}\n\nvoid\n_PyPegen_Parser_Free(Parser *p)\n{\n    Py_XDECREF(p->normalize);\n    for (int i = 0; i < p->size; i++) {\n        PyMem_Free(p->tokens[i]);\n    }\n    PyMem_Free(p->tokens);\n    growable_comment_array_deallocate(&p->type_ignore_comments);\n    PyMem_Free(p);\n}\n\nstatic void\nreset_parser_state_for_error_pass(Parser *p)\n{\n    for (int i = 0; i < p->fill; i++) {\n        p->tokens[i]->memo = NULL;\n    }\n    p->mark = 0;\n    p->call_invalid_rules = 1;\n    // Don't try to get extra tokens in interactive mode when trying to\n    // raise specialized errors in the second pass.\n    p->tok->interactive_underflow = IUNDERFLOW_STOP;\n}\n\nstatic inline int\n_is_end_of_source(Parser *p) {\n    int err = p->tok->done;\n    return err == E_EOF || err == E_EOFS || err == E_EOLS;\n}\n\nvoid *\n_PyPegen_run_parser(Parser *p)\n{\n    void *res = _PyPegen_parse(p);\n    assert(p->level == 0);\n    if (res == NULL) {\n        if ((p->flags & PyPARSE_ALLOW_INCOMPLETE_INPUT) &&  _is_end_of_source(p)) {\n            PyErr_Clear();\n            return _PyPegen_raise_error(p, PyExc_IncompleteInputError, 0, \"incomplete input\");\n        }\n        if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_SyntaxError)) {\n            return NULL;\n        }\n       // Make a second parser pass. In this pass we activate heavier and slower checks\n        // to produce better error messages and more complete diagnostics. Extra \"invalid_*\"\n        // rules will be active during parsing.\n        Token *last_token = p->tokens[p->fill - 1];\n        reset_parser_state_for_error_pass(p);\n        _PyPegen_parse(p);\n\n        // Set SyntaxErrors accordingly depending on the parser/tokenizer status at the failure\n        // point.\n        _Pypegen_set_syntax_error(p, last_token);\n       return NULL;\n    }\n\n    if (p->start_rule == Py_single_input && bad_single_statement(p)) {\n        p->tok->done = E_BADSINGLE; // This is not necessary for now, but might be in the future\n        return RAISE_SYNTAX_ERROR(\"multiple statements found while compiling a single statement\");\n    }\n\n    // test_peg_generator defines _Py_TEST_PEGEN to not call PyAST_Validate()\n#if defined(Py_DEBUG) && !defined(_Py_TEST_PEGEN)\n    if (p->start_rule == Py_single_input ||\n        p->start_rule == Py_file_input ||\n        p->start_rule == Py_eval_input)\n    {\n        if (!_PyAST_Validate(res)) {\n            return NULL;\n        }\n    }\n#endif\n    return res;\n}\n\nmod_ty\n_PyPegen_run_parser_from_file_pointer(FILE *fp, int start_rule, PyObject *filename_ob,\n                             const char *enc, const char *ps1, const char *ps2,\n                             PyCompilerFlags *flags, int *errcode,\n                             PyObject **interactive_src, PyArena *arena)\n{\n    struct tok_state *tok = _PyTokenizer_FromFile(fp, enc, ps1, ps2);\n    if (tok == NULL) {\n        if (PyErr_Occurred()) {\n            _PyPegen_raise_tokenizer_init_error(filename_ob);\n            return NULL;\n        }\n        return NULL;\n    }\n    if (!tok->fp || ps1 != NULL || ps2 != NULL ||\n        PyUnicode_CompareWithASCIIString(filename_ob, \"<stdin>\") == 0) {\n        tok->fp_interactive = 1;\n    }\n    // This transfers the ownership to the tokenizer\n    tok->filename = Py_NewRef(filename_ob);\n\n    // From here on we need to clean up even if there's an error\n    mod_ty result = NULL;\n\n    int parser_flags = compute_parser_flags(flags);\n    Parser *p = _PyPegen_Parser_New(tok, start_rule, parser_flags, PY_MINOR_VERSION,\n                                    errcode, arena);\n    if (p == NULL) {\n        goto error;\n    }\n\n    result = _PyPegen_run_parser(p);\n    _PyPegen_Parser_Free(p);\n\n    if (tok->fp_interactive && tok->interactive_src_start && result && interactive_src != NULL) {\n        *interactive_src = PyUnicode_FromString(tok->interactive_src_start);\n        if (!interactive_src || _PyArena_AddPyObject(arena, *interactive_src) < 0) {\n            Py_XDECREF(interactive_src);\n            result = NULL;\n            goto error;\n        }\n    }\n\nerror:\n    _PyTokenizer_Free(tok);\n    return result;\n}\n\nmod_ty\n_PyPegen_run_parser_from_string(const char *str, int start_rule, PyObject *filename_ob,\n                       PyCompilerFlags *flags, PyArena *arena)\n{\n    int exec_input = start_rule == Py_file_input;\n\n    struct tok_state *tok;\n    if (flags != NULL && flags->cf_flags & PyCF_IGNORE_COOKIE) {\n        tok = _PyTokenizer_FromUTF8(str, exec_input, 0);\n    } else {\n        tok = _PyTokenizer_FromString(str, exec_input, 0);\n    }\n    if (tok == NULL) {\n        if (PyErr_Occurred()) {\n            _PyPegen_raise_tokenizer_init_error(filename_ob);\n        }\n        return NULL;\n    }\n    // This transfers the ownership to the tokenizer\n    tok->filename = Py_NewRef(filename_ob);\n\n    // We need to clear up from here on\n    mod_ty result = NULL;\n\n    int parser_flags = compute_parser_flags(flags);\n    int feature_version = flags && (flags->cf_flags & PyCF_ONLY_AST) ?\n        flags->cf_feature_version : PY_MINOR_VERSION;\n    Parser *p = _PyPegen_Parser_New(tok, start_rule, parser_flags, feature_version,\n                                    NULL, arena);\n    if (p == NULL) {\n        goto error;\n    }\n\n    result = _PyPegen_run_parser(p);\n    _PyPegen_Parser_Free(p);\n\nerror:\n    _PyTokenizer_Free(tok);\n    return result;\n}\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-deref-before-check",
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1116,
                                       "gcc/analyzer/saved_diagnostic/snode": 43,
                                       "gcc/analyzer/saved_diagnostic/sval": "INIT_VAL(interactive_src_43(D))",
                                       "gcc/analyzer/saved_diagnostic/state": "assumed-non-null (in frame: '_PyPegen_run_parser_from_file_pointer'@1)",
                                       "gcc/analyzer/saved_diagnostic/idx": 0},
                        "level": "warning",
                        "message": {"text": "check of 'interactive_src' for NULL after already dereferencing it"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 947,
                                                                       "startColumn": 12,
                                                                       "endColumn": 13},
                                                            "contextRegion": {"startLine": 947,
                                                                              "snippet": {"text": "        if (!interactive_src || _PyArena_AddPyObject(arena, *interactive_src) < 0) {\n"}}},
                                       "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                             "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                             "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 912,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 38},
                                                                                                         "contextRegion": {"startLine": 912,
                                                                                                                           "snippet": {"text": "_PyPegen_run_parser_from_file_pointer(FILE *fp, int start_rule, PyObject *filename_ob,\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyPegen_run_parser_from_file_pointer'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 25,
                                                                                                                                 "dst_idx": 28,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 918,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 918,
                                                                                                                           "snippet": {"text": "    if (tok == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'tok' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 25,
                                                                                                                                 "dst_idx": 28,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 925,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 17},
                                                                                                         "contextRegion": {"startLine": 925,
                                                                                                                           "snippet": {"text": "    if (!tok->fp || ps1 != NULL || ps2 != NULL ||\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 36,
                                                                                                                                 "dst_idx": 38,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 938,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 938,
                                                                                                                           "snippet": {"text": "    if (p == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'p' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 36,
                                                                                                                                 "dst_idx": 38,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 942,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 36},
                                                                                                         "contextRegion": {"startLine": 942,
                                                                                                                           "snippet": {"text": "    result = _PyPegen_run_parser(p);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 38,
                                                                                                                                 "dst_idx": 50,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 942,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 36},
                                                                                                         "contextRegion": {"startLine": 942,
                                                                                                                           "snippet": {"text": "    result = _PyPegen_run_parser(p);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling '_PyPegen_run_parser' from '_PyPegen_run_parser_from_file_pointer'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 867,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 867,
                                                                                                                           "snippet": {"text": "_PyPegen_run_parser(Parser *p)\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser",
                                                                                                          "decoratedName": "_PyPegen_run_parser",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_PyPegen_run_parser'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 51,
                                                                                                                                 "dst_idx": 53,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 870,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 6},
                                                                                                         "contextRegion": {"startLine": 870,
                                                                                                                           "snippet": {"text": "    assert(p->level == 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser",
                                                                                                          "decoratedName": "_PyPegen_run_parser",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 51,
                                                                                                                                 "dst_idx": 53,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 871,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 871,
                                                                                                                           "snippet": {"text": "    if (res == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser",
                                                                                                          "decoratedName": "_PyPegen_run_parser",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 70,
                                                                                                                                 "dst_idx": 39,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 942,
                                                                                                                    "startColumn": 14,
                                                                                                                    "endColumn": 36},
                                                                                                         "contextRegion": {"startLine": 942,
                                                                                                                           "snippet": {"text": "    result = _PyPegen_run_parser(p);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to '_PyPegen_run_parser_from_file_pointer' from '_PyPegen_run_parser'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 945,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 945,
                                                                                                                           "snippet": {"text": "    if (tok->fp_interactive && tok->interactive_src_start && result && interactive_src != NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CONSOLIDATED_CFG_EDGES"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 946,
                                                                                                                    "startColumn": 28,
                                                                                                                    "endColumn": 76},
                                                                                                         "contextRegion": {"startLine": 946,
                                                                                                                           "snippet": {"text": "        *interactive_src = PyUnicode_FromString(tok->interactive_src_start);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 946,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 76},
                                                                                                         "contextRegion": {"startLine": 946,
                                                                                                                           "snippet": {"text": "        *interactive_src = PyUnicode_FromString(tok->interactive_src_start);\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "pointer 'interactive_src' is dereferenced here"}},
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Parser/pegen.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 947,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 947,
                                                                                                                           "snippet": {"text": "        if (!interactive_src || _PyArena_AddPyObject(arena, *interactive_src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "fullyQualifiedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "decoratedName": "_PyPegen_run_parser_from_file_pointer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "pointer 'interactive_src' is checked for NULL here but it was already dereferenced at (13)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 14}]}]}]}]}]}
