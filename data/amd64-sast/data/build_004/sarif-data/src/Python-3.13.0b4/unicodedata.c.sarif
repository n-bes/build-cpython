{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-infinite-loop",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-infinite-loop"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "835",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/835.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "./Modules/unicodedata.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/* ------------------------------------------------------------------------\n\n   unicodedata -- Provides access to the Unicode database.\n\n   The current version number is reported in the unidata_version constant.\n\n   Written by Marc-Andre Lemburg (mal@lemburg.com).\n   Modified for Python 2.0 by Fredrik Lundh (fredrik@pythonware.com)\n   Modified by Martin v. LÃ¶wis (martin@v.loewis.de)\n\n   Copyright (c) Corporation for National Research Initiatives.\n\n   ------------------------------------------------------------------------ */\n\n#ifndef Py_BUILD_CORE_BUILTIN\n#  define Py_BUILD_CORE_MODULE 1\n#endif\n\n#include \"Python.h\"\n#include \"pycore_ucnhash.h\"       // _PyUnicode_Name_CAPI\n\n#include <stdbool.h>\n#include <stddef.h>               // offsetof()\n\n/*[clinic input]\nmodule unicodedata\nclass unicodedata.UCD 'PreviousDBVersion *' '<not used>'\n[clinic start generated code]*/\n/*[clinic end generated code: output=da39a3ee5e6b4b0d input=e47113e05924be43]*/\n\n/* character properties */\n\ntypedef struct {\n    const unsigned char category;       /* index into\n                                           _PyUnicode_CategoryNames */\n    const unsigned char combining;      /* combining class value 0 - 255 */\n    const unsigned char bidirectional;  /* index into\n                                           _PyUnicode_BidirectionalNames */\n    const unsigned char mirrored;       /* true if mirrored in bidir mode */\n    const unsigned char east_asian_width;       /* index into\n                                                   _PyUnicode_EastAsianWidth */\n    const unsigned char normalization_quick_check; /* see is_normalized() */\n} _PyUnicode_DatabaseRecord;\n\ntypedef struct change_record {\n    /* sequence of fields should be the same as in merge_old_version */\n    const unsigned char bidir_changed;\n    const unsigned char category_changed;\n    const unsigned char decimal_changed;\n    const unsigned char mirrored_changed;\n    const unsigned char east_asian_width_changed;\n    const double numeric_changed;\n} change_record;\n\n/* data file generated by Tools/unicode/makeunicodedata.py */\n#include \"unicodedata_db.h\"\n\nstatic const _PyUnicode_DatabaseRecord*\n_getrecord_ex(Py_UCS4 code)\n{\n    int index;\n    if (code >= 0x110000)\n        index = 0;\n    else {\n        index = index1[(code>>SHIFT)];\n        index = index2[(index<<SHIFT)+(code&((1<<SHIFT)-1))];\n    }\n\n    return &_PyUnicode_Database_Records[index];\n}\n\n/* ------------- Previous-version API ------------------------------------- */\ntypedef struct previous_version {\n    PyObject_HEAD\n    const char *name;\n    const change_record* (*getrecord)(Py_UCS4);\n    Py_UCS4 (*normalization)(Py_UCS4);\n} PreviousDBVersion;\n\n#include \"clinic/unicodedata.c.h\"\n\n#define get_old_record(self, v)    ((((PreviousDBVersion*)self)->getrecord)(v))\n\nstatic PyMemberDef DB_members[] = {\n        {\"unidata_version\", Py_T_STRING, offsetof(PreviousDBVersion, name), Py_READONLY},\n        {NULL}\n};\n\n// Check if self is an unicodedata.UCD instance.\n// If self is NULL (when the PyCapsule C API is used), return 0.\n// PyModule_Check() is used to avoid having to retrieve the ucd_type.\n// See unicodedata_functions comment to the rationale of this macro.\n#define UCD_Check(self) (self != NULL && !PyModule_Check(self))\n\nstatic PyObject*\nnew_previous_version(PyTypeObject *ucd_type,\n                     const char*name, const change_record* (*getrecord)(Py_UCS4),\n                     Py_UCS4 (*normalization)(Py_UCS4))\n{\n    PreviousDBVersion *self;\n    self = PyObject_GC_New(PreviousDBVersion, ucd_type);\n    if (self == NULL)\n        return NULL;\n    self->name = name;\n    self->getrecord = getrecord;\n    self->normalization = normalization;\n    PyObject_GC_Track(self);\n    return (PyObject*)self;\n}\n\n\n/* --- Module API --------------------------------------------------------- */\n\n/*[clinic input]\nunicodedata.UCD.decimal\n\n    self: self\n    chr: int(accept={str})\n    default: object=NULL\n    /\n\nConverts a Unicode character into its equivalent decimal value.\n\nReturns the decimal value assigned to the character chr as integer.\nIf no such value is defined, default is returned, or, if not given,\nValueError is raised.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_decimal_impl(PyObject *self, int chr,\n                             PyObject *default_value)\n/*[clinic end generated code: output=be23376e1a185231 input=933f8107993f23d0]*/\n{\n    int have_old = 0;\n    long rc;\n    Py_UCS4 c = (Py_UCS4)chr;\n\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0) {\n            /* unassigned */\n            have_old = 1;\n            rc = -1;\n        }\n        else if (old->decimal_changed != 0xFF) {\n            have_old = 1;\n            rc = old->decimal_changed;\n        }\n    }\n\n    if (!have_old)\n        rc = Py_UNICODE_TODECIMAL(c);\n    if (rc < 0) {\n        if (default_value == NULL) {\n            PyErr_SetString(PyExc_ValueError,\n                            \"not a decimal\");\n            return NULL;\n        }\n        else {\n            return Py_NewRef(default_value);\n        }\n    }\n    return PyLong_FromLong(rc);\n}\n\n/*[clinic input]\nunicodedata.UCD.digit\n\n    self: self\n    chr: int(accept={str})\n    default: object=NULL\n    /\n\nConverts a Unicode character into its equivalent digit value.\n\nReturns the digit value assigned to the character chr as integer.\nIf no such value is defined, default is returned, or, if not given,\nValueError is raised.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_digit_impl(PyObject *self, int chr, PyObject *default_value)\n/*[clinic end generated code: output=96e18c950171fd2f input=e27d6e4565cd29f2]*/\n{\n    long rc;\n    Py_UCS4 c = (Py_UCS4)chr;\n    rc = Py_UNICODE_TODIGIT(c);\n    if (rc < 0) {\n        if (default_value == NULL) {\n            PyErr_SetString(PyExc_ValueError, \"not a digit\");\n            return NULL;\n        }\n        else {\n            return Py_NewRef(default_value);\n        }\n    }\n    return PyLong_FromLong(rc);\n}\n\n/*[clinic input]\nunicodedata.UCD.numeric\n\n    self: self\n    chr: int(accept={str})\n    default: object=NULL\n    /\n\nConverts a Unicode character into its equivalent numeric value.\n\nReturns the numeric value assigned to the character chr as float.\nIf no such value is defined, default is returned, or, if not given,\nValueError is raised.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_numeric_impl(PyObject *self, int chr,\n                             PyObject *default_value)\n/*[clinic end generated code: output=53ce281fe85b10c4 input=fdf5871a5542893c]*/\n{\n    int have_old = 0;\n    double rc;\n    Py_UCS4 c = (Py_UCS4)chr;\n\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0) {\n            /* unassigned */\n            have_old = 1;\n            rc = -1.0;\n        }\n        else if (old->decimal_changed != 0xFF) {\n            have_old = 1;\n            rc = old->decimal_changed;\n        }\n    }\n\n    if (!have_old)\n        rc = Py_UNICODE_TONUMERIC(c);\n    if (rc == -1.0) {\n        if (default_value == NULL) {\n            PyErr_SetString(PyExc_ValueError, \"not a numeric character\");\n            return NULL;\n        }\n        else {\n            return Py_NewRef(default_value);\n        }\n    }\n    return PyFloat_FromDouble(rc);\n}\n\n/*[clinic input]\nunicodedata.UCD.category\n\n    self: self\n    chr: int(accept={str})\n    /\n\nReturns the general category assigned to the character chr as string.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_category_impl(PyObject *self, int chr)\n/*[clinic end generated code: output=8571539ee2e6783a input=27d6f3d85050bc06]*/\n{\n    int index;\n    Py_UCS4 c = (Py_UCS4)chr;\n    index = (int) _getrecord_ex(c)->category;\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed != 0xFF)\n            index = old->category_changed;\n    }\n    return PyUnicode_FromString(_PyUnicode_CategoryNames[index]);\n}\n\n/*[clinic input]\nunicodedata.UCD.bidirectional\n\n    self: self\n    chr: int(accept={str})\n    /\n\nReturns the bidirectional class assigned to the character chr as string.\n\nIf no such value is defined, an empty string is returned.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_bidirectional_impl(PyObject *self, int chr)\n/*[clinic end generated code: output=d36310ce2039bb92 input=b3d8f42cebfcf475]*/\n{\n    int index;\n    Py_UCS4 c = (Py_UCS4)chr;\n    index = (int) _getrecord_ex(c)->bidirectional;\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0)\n            index = 0; /* unassigned */\n        else if (old->bidir_changed != 0xFF)\n            index = old->bidir_changed;\n    }\n    return PyUnicode_FromString(_PyUnicode_BidirectionalNames[index]);\n}\n\n/*[clinic input]\nunicodedata.UCD.combining -> int\n\n    self: self\n    chr: int(accept={str})\n    /\n\nReturns the canonical combining class assigned to the character chr as integer.\n\nReturns 0 if no combining class is defined.\n[clinic start generated code]*/\n\nstatic int\nunicodedata_UCD_combining_impl(PyObject *self, int chr)\n/*[clinic end generated code: output=cad056d0cb6a5920 input=9f2d6b2a95d0a22a]*/\n{\n    int index;\n    Py_UCS4 c = (Py_UCS4)chr;\n    index = (int) _getrecord_ex(c)->combining;\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0)\n            index = 0; /* unassigned */\n    }\n    return index;\n}\n\n/*[clinic input]\nunicodedata.UCD.mirrored -> int\n\n    self: self\n    chr: int(accept={str})\n    /\n\nReturns the mirrored property assigned to the character chr as integer.\n\nReturns 1 if the character has been identified as a \"mirrored\"\ncharacter in bidirectional text, 0 otherwise.\n[clinic start generated code]*/\n\nstatic int\nunicodedata_UCD_mirrored_impl(PyObject *self, int chr)\n/*[clinic end generated code: output=2532dbf8121b50e6 input=5dd400d351ae6f3b]*/\n{\n    int index;\n    Py_UCS4 c = (Py_UCS4)chr;\n    index = (int) _getrecord_ex(c)->mirrored;\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0)\n            index = 0; /* unassigned */\n        else if (old->mirrored_changed != 0xFF)\n            index = old->mirrored_changed;\n    }\n    return index;\n}\n\n/*[clinic input]\nunicodedata.UCD.east_asian_width\n\n    self: self\n    chr: int(accept={str})\n    /\n\nReturns the east asian width assigned to the character chr as string.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_east_asian_width_impl(PyObject *self, int chr)\n/*[clinic end generated code: output=484e8537d9ee8197 input=c4854798aab026e0]*/\n{\n    int index;\n    Py_UCS4 c = (Py_UCS4)chr;\n    index = (int) _getrecord_ex(c)->east_asian_width;\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0)\n            index = 0; /* unassigned */\n        else if (old->east_asian_width_changed != 0xFF)\n            index = old->east_asian_width_changed;\n    }\n    return PyUnicode_FromString(_PyUnicode_EastAsianWidthNames[index]);\n}\n\n/*[clinic input]\nunicodedata.UCD.decomposition\n\n    self: self\n    chr: int(accept={str})\n    /\n\nReturns the character decomposition mapping assigned to the character chr as string.\n\nAn empty string is returned in case no such mapping is defined.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_decomposition_impl(PyObject *self, int chr)\n/*[clinic end generated code: output=7d699f3ec7565d27 input=e4c12459ad68507b]*/\n{\n    char decomp[256];\n    int code, index, count;\n    size_t i;\n    unsigned int prefix_index;\n    Py_UCS4 c = (Py_UCS4)chr;\n\n    code = (int)c;\n\n    if (UCD_Check(self)) {\n        const change_record *old = get_old_record(self, c);\n        if (old->category_changed == 0)\n            return PyUnicode_FromString(\"\"); /* unassigned */\n    }\n\n    if (code < 0 || code >= 0x110000)\n        index = 0;\n    else {\n        index = decomp_index1[(code>>DECOMP_SHIFT)];\n        index = decomp_index2[(index<<DECOMP_SHIFT)+\n                             (code&((1<<DECOMP_SHIFT)-1))];\n    }\n\n    /* high byte is number of hex bytes (usually one or two), low byte\n       is prefix code (from*/\n    count = decomp_data[index] >> 8;\n\n    /* XXX: could allocate the PyString up front instead\n       (strlen(prefix) + 5 * count + 1 bytes) */\n\n    /* Based on how index is calculated above and decomp_data is generated\n       from Tools/unicode/makeunicodedata.py, it should not be possible\n       to overflow decomp_prefix. */\n    prefix_index = decomp_data[index] & 255;\n    assert(prefix_index < Py_ARRAY_LENGTH(decomp_prefix));\n\n    /* copy prefix */\n    i = strlen(decomp_prefix[prefix_index]);\n    memcpy(decomp, decomp_prefix[prefix_index], i);\n\n    while (count-- > 0) {\n        if (i)\n            decomp[i++] = ' ';\n        assert(i < sizeof(decomp));\n        PyOS_snprintf(decomp + i, sizeof(decomp) - i, \"%04X\",\n                      decomp_data[++index]);\n        i += strlen(decomp + i);\n    }\n    return PyUnicode_FromStringAndSize(decomp, i);\n}\n\nstatic void\nget_decomp_record(PyObject *self, Py_UCS4 code,\n                  int *index, int *prefix, int *count)\n{\n    if (code >= 0x110000) {\n        *index = 0;\n    }\n    else if (UCD_Check(self)\n             && get_old_record(self, code)->category_changed==0) {\n        /* unassigned in old version */\n        *index = 0;\n    }\n    else {\n        *index = decomp_index1[(code>>DECOMP_SHIFT)];\n        *index = decomp_index2[(*index<<DECOMP_SHIFT)+\n                               (code&((1<<DECOMP_SHIFT)-1))];\n    }\n\n    /* high byte is number of hex bytes (usually one or two), low byte\n       is prefix code (from*/\n    *count = decomp_data[*index] >> 8;\n    *prefix = decomp_data[*index] & 255;\n\n    (*index)++;\n}\n\n#define SBase   0xAC00\n#define LBase   0x1100\n#define VBase   0x1161\n#define TBase   0x11A7\n#define LCount  19\n#define VCount  21\n#define TCount  28\n#define NCount  (VCount*TCount)\n#define SCount  (LCount*NCount)\n\nstatic PyObject*\nnfd_nfkd(PyObject *self, PyObject *input, int k)\n{\n    PyObject *result;\n    Py_UCS4 *output;\n    Py_ssize_t i, o, osize;\n    int kind;\n    const void *data;\n    /* Longest decomposition in Unicode 3.2: U+FDFA */\n    Py_UCS4 stack[20];\n    Py_ssize_t space, isize;\n    int index, prefix, count, stackptr;\n    unsigned char prev, cur;\n\n    stackptr = 0;\n    isize = PyUnicode_GET_LENGTH(input);\n    space = isize;\n    /* Overallocate at most 10 characters. */\n    if (space > 10) {\n        if (space <= PY_SSIZE_T_MAX - 10)\n            space += 10;\n    }\n    else {\n        space *= 2;\n    }\n    osize = space;\n    output = PyMem_NEW(Py_UCS4, space);\n    if (!output) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    i = o = 0;\n    kind = PyUnicode_KIND(input);\n    data = PyUnicode_DATA(input);\n\n    while (i < isize) {\n        stack[stackptr++] = PyUnicode_READ(kind, data, i++);\n        while(stackptr) {\n            Py_UCS4 code = stack[--stackptr];\n            /* Hangul Decomposition adds three characters in\n               a single step, so we need at least that much room. */\n            if (space < 3) {\n                Py_UCS4 *new_output;\n                osize += 10;\n                space += 10;\n                new_output = PyMem_Realloc(output, osize*sizeof(Py_UCS4));\n                if (new_output == NULL) {\n                    PyMem_Free(output);\n                    PyErr_NoMemory();\n                    return NULL;\n                }\n                output = new_output;\n            }\n            /* Hangul Decomposition. */\n            if (SBase <= code && code < (SBase+SCount)) {\n                int SIndex = code - SBase;\n                int L = LBase + SIndex / NCount;\n                int V = VBase + (SIndex % NCount) / TCount;\n                int T = TBase + SIndex % TCount;\n                output[o++] = L;\n                output[o++] = V;\n                space -= 2;\n                if (T != TBase) {\n                    output[o++] = T;\n                    space --;\n                }\n                continue;\n            }\n            /* normalization changes */\n            if (UCD_Check(self)) {\n                Py_UCS4 value = ((PreviousDBVersion*)self)->normalization(code);\n                if (value != 0) {\n                    stack[stackptr++] = value;\n                    continue;\n                }\n            }\n\n            /* Other decompositions. */\n            get_decomp_record(self, code, &index, &prefix, &count);\n\n            /* Copy character if it is not decomposable, or has a\n               compatibility decomposition, but we do NFD. */\n            if (!count || (prefix && !k)) {\n                output[o++] = code;\n                space--;\n                continue;\n            }\n            /* Copy decomposition onto the stack, in reverse\n               order.  */\n            while(count) {\n                code = decomp_data[index + (--count)];\n                stack[stackptr++] = code;\n            }\n        }\n    }\n\n    result = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND,\n                                       output, o);\n    PyMem_Free(output);\n    if (!result)\n        return NULL;\n    /* result is guaranteed to be ready, as it is compact. */\n    kind = PyUnicode_KIND(result);\n    data = PyUnicode_DATA(result);\n\n    /* Sort canonically. */\n    i = 0;\n    prev = _getrecord_ex(PyUnicode_READ(kind, data, i))->combining;\n    for (i++; i < PyUnicode_GET_LENGTH(result); i++) {\n        cur = _getrecord_ex(PyUnicode_READ(kind, data, i))->combining;\n        if (prev == 0 || cur == 0 || prev <= cur) {\n            prev = cur;\n            continue;\n        }\n        /* Non-canonical order. Need to switch *i with previous. */\n        o = i - 1;\n        while (1) {\n            Py_UCS4 tmp = PyUnicode_READ(kind, data, o+1);\n            PyUnicode_WRITE(kind, data, o+1,\n                            PyUnicode_READ(kind, data, o));\n            PyUnicode_WRITE(kind, data, o, tmp);\n            o--;\n            if (o < 0)\n                break;\n            prev = _getrecord_ex(PyUnicode_READ(kind, data, o))->combining;\n            if (prev == 0 || prev <= cur)\n                break;\n        }\n        prev = _getrecord_ex(PyUnicode_READ(kind, data, i))->combining;\n    }\n    return result;\n}\n\nstatic int\nfind_nfc_index(const struct reindex* nfc, Py_UCS4 code)\n{\n    unsigned int index;\n    for (index = 0; nfc[index].start; index++) {\n        unsigned int start = nfc[index].start;\n        if (code < start)\n            return -1;\n        if (code <= start + nfc[index].count) {\n            unsigned int delta = code - start;\n            return nfc[index].index + delta;\n        }\n    }\n    return -1;\n}\n\nstatic PyObject*\nnfc_nfkc(PyObject *self, PyObject *input, int k)\n{\n    PyObject *result;\n    int kind;\n    const void *data;\n    Py_UCS4 *output;\n    Py_ssize_t i, i1, o, len;\n    int f,l,index,index1,comb;\n    Py_UCS4 code;\n    Py_ssize_t skipped[20];\n    int cskipped = 0;\n\n    result = nfd_nfkd(self, input, k);\n    if (!result)\n        return NULL;\n    /* result will be \"ready\". */\n    kind = PyUnicode_KIND(result);\n    data = PyUnicode_DATA(result);\n    len = PyUnicode_GET_LENGTH(result);\n\n    /* We allocate a buffer for the output.\n       If we find that we made no changes, we still return\n       the NFD result. */\n    output = PyMem_NEW(Py_UCS4, len);\n    if (!output) {\n        PyErr_NoMemory();\n        Py_DECREF(result);\n        return 0;\n    }\n    i = o = 0;\n\n  again:\n    while (i < len) {\n      for (index = 0; index < cskipped; index++) {\n          if (skipped[index] == i) {\n              /* *i character is skipped.\n                 Remove from list. */\n              skipped[index] = skipped[cskipped-1];\n              cskipped--;\n              i++;\n              goto again; /* continue while */\n          }\n      }\n      /* Hangul Composition. We don't need to check for <LV,T>\n         pairs, since we always have decomposed data. */\n      code = PyUnicode_READ(kind, data, i);\n      if (LBase <= code && code < (LBase+LCount) &&\n          i + 1 < len &&\n          VBase <= PyUnicode_READ(kind, data, i+1) &&\n          PyUnicode_READ(kind, data, i+1) < (VBase+VCount)) {\n          /* check L character is a modern leading consonant (0x1100 ~ 0x1112)\n             and V character is a modern vowel (0x1161 ~ 0x1175). */\n          int LIndex, VIndex;\n          LIndex = code - LBase;\n          VIndex = PyUnicode_READ(kind, data, i+1) - VBase;\n          code = SBase + (LIndex*VCount+VIndex)*TCount;\n          i+=2;\n          if (i < len &&\n              TBase < PyUnicode_READ(kind, data, i) &&\n              PyUnicode_READ(kind, data, i) < (TBase+TCount)) {\n              /* check T character is a modern trailing consonant\n                 (0x11A8 ~ 0x11C2). */\n              code += PyUnicode_READ(kind, data, i)-TBase;\n              i++;\n          }\n          output[o++] = code;\n          continue;\n      }\n\n      /* code is still input[i] here */\n      f = find_nfc_index(nfc_first, code);\n      if (f == -1) {\n          output[o++] = code;\n          i++;\n          continue;\n      }\n      /* Find next unblocked character. */\n      i1 = i+1;\n      comb = 0;\n      /* output base character for now; might be updated later. */\n      output[o] = PyUnicode_READ(kind, data, i);\n      while (i1 < len) {\n          Py_UCS4 code1 = PyUnicode_READ(kind, data, i1);\n          int comb1 = _getrecord_ex(code1)->combining;\n          if (comb) {\n              if (comb1 == 0)\n                  break;\n              if (comb >= comb1) {\n                  /* Character is blocked. */\n                  i1++;\n                  continue;\n              }\n          }\n          l = find_nfc_index(nfc_last, code1);\n          /* i1 cannot be combined with i. If i1\n             is a starter, we don't need to look further.\n             Otherwise, record the combining class. */\n          if (l == -1) {\n            not_combinable:\n              if (comb1 == 0)\n                  break;\n              comb = comb1;\n              i1++;\n              continue;\n          }\n          index = f*TOTAL_LAST + l;\n          index1 = comp_index[index >> COMP_SHIFT];\n          code = comp_data[(index1<<COMP_SHIFT)+\n                           (index&((1<<COMP_SHIFT)-1))];\n          if (code == 0)\n              goto not_combinable;\n\n          /* Replace the original character. */\n          output[o] = code;\n          /* Mark the second character unused. */\n          assert(cskipped < 20);\n          skipped[cskipped++] = i1;\n          i1++;\n          f = find_nfc_index(nfc_first, output[o]);\n          if (f == -1)\n              break;\n      }\n      /* Output character was already written.\n         Just advance the indices. */\n      o++; i++;\n    }\n    if (o == len) {\n        /* No changes. Return original string. */\n        PyMem_Free(output);\n        return result;\n    }\n    Py_DECREF(result);\n    result = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND,\n                                       output, o);\n    PyMem_Free(output);\n    return result;\n}\n\n// This needs to match the logic in makeunicodedata.py\n// which constructs the quickcheck data.\ntypedef enum {YES = 0, MAYBE = 1, NO = 2} QuickcheckResult;\n\n/* Run the Unicode normalization \"quickcheck\" algorithm.\n *\n * Return YES or NO if quickcheck determines the input is certainly\n * normalized or certainly not, and MAYBE if quickcheck is unable to\n * tell.\n *\n * If `yes_only` is true, then return MAYBE as soon as we determine\n * the answer is not YES.\n *\n * For background and details on the algorithm, see UAX #15:\n *   https://www.unicode.org/reports/tr15/#Detecting_Normalization_Forms\n */\nstatic QuickcheckResult\nis_normalized_quickcheck(PyObject *self, PyObject *input, bool nfc, bool k,\n                         bool yes_only)\n{\n    /* UCD 3.2.0 is requested, quickchecks must be disabled. */\n    if (UCD_Check(self)) {\n        return MAYBE;\n    }\n\n    if (PyUnicode_IS_ASCII(input)) {\n        return YES;\n    }\n\n    Py_ssize_t i, len;\n    int kind;\n    const void *data;\n    unsigned char prev_combining = 0;\n\n    /* The two quickcheck bits at this shift have type QuickcheckResult. */\n    int quickcheck_shift = (nfc ? 4 : 0) + (k ? 2 : 0);\n\n    QuickcheckResult result = YES; /* certainly normalized, unless we find something */\n\n    i = 0;\n    kind = PyUnicode_KIND(input);\n    data = PyUnicode_DATA(input);\n    len = PyUnicode_GET_LENGTH(input);\n    while (i < len) {\n        Py_UCS4 ch = PyUnicode_READ(kind, data, i++);\n        const _PyUnicode_DatabaseRecord *record = _getrecord_ex(ch);\n\n        unsigned char combining = record->combining;\n        if (combining && prev_combining > combining)\n            return NO; /* non-canonical sort order, not normalized */\n        prev_combining = combining;\n\n        unsigned char quickcheck_whole = record->normalization_quick_check;\n        if (yes_only) {\n            if (quickcheck_whole & (3 << quickcheck_shift))\n                return MAYBE;\n        } else {\n            switch ((quickcheck_whole >> quickcheck_shift) & 3) {\n            case NO:\n              return NO;\n            case MAYBE:\n              result = MAYBE; /* this string might need normalization */\n            }\n        }\n    }\n    return result;\n}\n\n/*[clinic input]\nunicodedata.UCD.is_normalized\n\n    self: self\n    form: unicode\n    unistr as input: unicode\n    /\n\nReturn whether the Unicode string unistr is in the normal form 'form'.\n\nValid values for form are 'NFC', 'NFKC', 'NFD', and 'NFKD'.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_is_normalized_impl(PyObject *self, PyObject *form,\n                                   PyObject *input)\n/*[clinic end generated code: output=11e5a3694e723ca5 input=a544f14cea79e508]*/\n{\n    if (PyUnicode_GET_LENGTH(input) == 0) {\n        /* special case empty input strings. */\n        Py_RETURN_TRUE;\n    }\n\n    PyObject *result;\n    bool nfc = false;\n    bool k = false;\n    QuickcheckResult m;\n\n    PyObject *cmp;\n    int match = 0;\n\n    if (PyUnicode_CompareWithASCIIString(form, \"NFC\") == 0) {\n        nfc = true;\n    }\n    else if (PyUnicode_CompareWithASCIIString(form, \"NFKC\") == 0) {\n        nfc = true;\n        k = true;\n    }\n    else if (PyUnicode_CompareWithASCIIString(form, \"NFD\") == 0) {\n        /* matches default values for `nfc` and `k` */\n    }\n    else if (PyUnicode_CompareWithASCIIString(form, \"NFKD\") == 0) {\n        k = true;\n    }\n    else {\n        PyErr_SetString(PyExc_ValueError, \"invalid normalization form\");\n        return NULL;\n    }\n\n    m = is_normalized_quickcheck(self, input, nfc, k, false);\n\n    if (m == MAYBE) {\n        cmp = (nfc ? nfc_nfkc : nfd_nfkd)(self, input, k);\n        if (cmp == NULL) {\n            return NULL;\n        }\n        match = PyUnicode_Compare(input, cmp);\n        Py_DECREF(cmp);\n        result = (match == 0) ? Py_True : Py_False;\n    }\n    else {\n        result = (m == YES) ? Py_True : Py_False;\n    }\n\n    return Py_NewRef(result);\n}\n\n\n/*[clinic input]\nunicodedata.UCD.normalize\n\n    self: self\n    form: unicode\n    unistr as input: unicode\n    /\n\nReturn the normal form 'form' for the Unicode string unistr.\n\nValid values for form are 'NFC', 'NFKC', 'NFD', and 'NFKD'.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_normalize_impl(PyObject *self, PyObject *form,\n                               PyObject *input)\n/*[clinic end generated code: output=05ca4385a2ad6983 input=3a5206c0ad2833fb]*/\n{\n    if (PyUnicode_GET_LENGTH(input) == 0) {\n        /* Special case empty input strings, since resizing\n           them  later would cause internal errors. */\n        return Py_NewRef(input);\n    }\n\n    if (PyUnicode_CompareWithASCIIString(form, \"NFC\") == 0) {\n        if (is_normalized_quickcheck(self, input,\n                                     true,  false, true) == YES) {\n            return Py_NewRef(input);\n        }\n        return nfc_nfkc(self, input, 0);\n    }\n    if (PyUnicode_CompareWithASCIIString(form, \"NFKC\") == 0) {\n        if (is_normalized_quickcheck(self, input,\n                                     true,  true,  true) == YES) {\n            return Py_NewRef(input);\n        }\n        return nfc_nfkc(self, input, 1);\n    }\n    if (PyUnicode_CompareWithASCIIString(form, \"NFD\") == 0) {\n        if (is_normalized_quickcheck(self, input,\n                                     false, false, true) == YES) {\n            return Py_NewRef(input);\n        }\n        return nfd_nfkd(self, input, 0);\n    }\n    if (PyUnicode_CompareWithASCIIString(form, \"NFKD\") == 0) {\n        if (is_normalized_quickcheck(self, input,\n                                     false, true,  true) == YES) {\n            return Py_NewRef(input);\n        }\n        return nfd_nfkd(self, input, 1);\n    }\n    PyErr_SetString(PyExc_ValueError, \"invalid normalization form\");\n    return NULL;\n}\n\n/* -------------------------------------------------------------------- */\n/* unicode character name tables */\n\n/* data file generated by Tools/unicode/makeunicodedata.py */\n#include \"unicodename_db.h\"\n\n/* -------------------------------------------------------------------- */\n/* database code (cut and pasted from the unidb package) */\n\nstatic const char * const hangul_syllables[][3] = {\n    { \"G\",  \"A\",   \"\"   },\n    { \"GG\", \"AE\",  \"G\"  },\n    { \"N\",  \"YA\",  \"GG\" },\n    { \"D\",  \"YAE\", \"GS\" },\n    { \"DD\", \"EO\",  \"N\", },\n    { \"R\",  \"E\",   \"NJ\" },\n    { \"M\",  \"YEO\", \"NH\" },\n    { \"B\",  \"YE\",  \"D\"  },\n    { \"BB\", \"O\",   \"L\"  },\n    { \"S\",  \"WA\",  \"LG\" },\n    { \"SS\", \"WAE\", \"LM\" },\n    { \"\",   \"OE\",  \"LB\" },\n    { \"J\",  \"YO\",  \"LS\" },\n    { \"JJ\", \"U\",   \"LT\" },\n    { \"C\",  \"WEO\", \"LP\" },\n    { \"K\",  \"WE\",  \"LH\" },\n    { \"T\",  \"WI\",  \"M\"  },\n    { \"P\",  \"YU\",  \"B\"  },\n    { \"H\",  \"EU\",  \"BS\" },\n    { 0,    \"YI\",  \"S\"  },\n    { 0,    \"I\",   \"SS\" },\n    { 0,    0,     \"NG\" },\n    { 0,    0,     \"J\"  },\n    { 0,    0,     \"C\"  },\n    { 0,    0,     \"K\"  },\n    { 0,    0,     \"T\"  },\n    { 0,    0,     \"P\"  },\n    { 0,    0,     \"H\"  }\n};\n\n/* These ranges need to match makeunicodedata.py:cjk_ranges. */\nstatic int\nis_unified_ideograph(Py_UCS4 code)\n{\n    return\n        (0x3400 <= code && code <= 0x4DBF)   || /* CJK Ideograph Extension A */\n        (0x4E00 <= code && code <= 0x9FFF)   || /* CJK Ideograph */\n        (0x20000 <= code && code <= 0x2A6DF) || /* CJK Ideograph Extension B */\n        (0x2A700 <= code && code <= 0x2B739) || /* CJK Ideograph Extension C */\n        (0x2B740 <= code && code <= 0x2B81D) || /* CJK Ideograph Extension D */\n        (0x2B820 <= code && code <= 0x2CEA1) || /* CJK Ideograph Extension E */\n        (0x2CEB0 <= code && code <= 0x2EBE0) || /* CJK Ideograph Extension F */\n        (0x2EBF0 <= code && code <= 0x2EE5D) || /* CJK Ideograph Extension I */\n        (0x30000 <= code && code <= 0x3134A) || /* CJK Ideograph Extension G */\n        (0x31350 <= code && code <= 0x323AF);   /* CJK Ideograph Extension H */\n}\n\n/* macros used to determine if the given code point is in the PUA range that\n * we are using to store aliases and named sequences */\n#define IS_ALIAS(cp) ((cp >= aliases_start) && (cp < aliases_end))\n#define IS_NAMED_SEQ(cp) ((cp >= named_sequences_start) && \\\n                          (cp < named_sequences_end))\n\n\n// DAWG decoding functions\n\nstatic unsigned int\n_dawg_decode_varint_unsigned(unsigned int index, unsigned int* result)\n{\n    unsigned int res = 0;\n    unsigned int shift = 0;\n    for (;;) {\n        unsigned char byte = packed_name_dawg[index];\n        res |= (byte & 0x7f) << shift;\n        index++;\n        shift += 7;\n        if (!(byte & 0x80)) {\n            *result = res;\n            return index;\n        }\n    }\n}\n\nstatic int\n_dawg_match_edge(const char* name, unsigned int namelen, unsigned int size,\n                 unsigned int label_offset, unsigned int namepos)\n{\n    // This returns 1 if the edge matched, 0 if it didn't (but further edges\n    // could match) and -1 if the name cannot match at all.\n    if (size > 1 && namepos + size > namelen) {\n        return 0;\n    }\n    for (unsigned int i = 0; i < size; i++) {\n        if (packed_name_dawg[label_offset + i] != Py_TOUPPER(name[namepos + i])) {\n            if (i > 0) {\n                return -1; // cannot match at all\n            }\n            return 0;\n        }\n    }\n    return 1;\n}\n\n// reading DAWG node information:\n// a node is encoded by a varint. The lowest bit of that int is set if the node\n// is a final, accepting state. The higher bits of that int represent the\n// number of names that are encoded by the sub-DAWG started by this node. It's\n// used to compute the position of a name.\n//\n// the starting node of the DAWG is at position 0.\n//\n// the varint representing a node is followed by the node's edges, the encoding\n// is described below\n\n\nstatic unsigned int\n_dawg_decode_node(unsigned int node_offset, bool* final)\n{\n    unsigned int num;\n    node_offset = _dawg_decode_varint_unsigned(node_offset, &num);\n    *final = num & 1;\n    return node_offset;\n}\n\nstatic bool\n_dawg_node_is_final(unsigned int node_offset)\n{\n    unsigned int num;\n    _dawg_decode_varint_unsigned(node_offset, &num);\n    return num & 1;\n}\n\nstatic unsigned int\n_dawg_node_descendant_count(unsigned int node_offset)\n{\n    unsigned int num;\n    _dawg_decode_varint_unsigned(node_offset, &num);\n    return num >> 1;\n}\n\n\n// reading DAWG edge information:\n// a DAWG edge is comprised of the following information:\n// (1) the size of the label of the string attached to the edge\n// (2) the characters of that edge\n// (3) the target node\n// (4) whether the edge is the last edge in the list of edges following a node\n//\n// this information is encoded in a compact form as follows:\n//\n// +---------+-----------------+--------------+--------------------\n// |  varint | size (if != 1)  | label chars  | ... next edge ...\n// +---------+-----------------+--------------+--------------------\n//\n// - first comes a varint\n//     - the lowest bit of that varint is whether the edge is final (4)\n//     - the second lowest bit of that varint is true if the size of\n//       the length of the label is 1 (1)\n//     - the rest of the varint is an offset that can be used to compute\n//       the offset of the target node of that edge (3)\n//  - if the size is not 1, the first varint is followed by a\n//    character encoding the number of characters of the label (1)\n//    (unicode character names aren't larger than 256 bytes, therefore each\n//    edge label can be at most 256 chars, but is usually smaller)\n//  - the next size bytes are the characters of the label (2)\n//\n// the offset of the target node is computed as follows: the number in the\n// upper bits of the varint needs to be added to the offset of the target node\n// of the previous edge. For the first edge, where there is no previous target\n// node, the offset of the first edge is used.\n// The intuition here is that edges going out from a node often lead to nodes\n// that are close by, leading to small offsets from the current node and thus\n// fewer bytes.\n//\n// There is a special case: if a final node has no outgoing edges, it has to be\n// followed by a 0 byte to indicate that there are no edges (because the end of\n// the edge list is normally indicated in a bit in the edge encoding). This is\n// indicated by _dawg_decode_edge returning -1\n\n\nstatic int\n_dawg_decode_edge(bool is_first_edge, unsigned int prev_target_node_offset,\n                  unsigned int edge_offset, unsigned int* size,\n                  unsigned int* label_offset, unsigned int* target_node_offset)\n{\n    unsigned int num;\n    edge_offset = _dawg_decode_varint_unsigned(edge_offset, &num);\n    if (num == 0 && is_first_edge) {\n        return -1; // trying to decode past a final node without outgoing edges\n    }\n    bool last_edge = num & 1;\n    num >>= 1;\n    bool len_is_one = num & 1;\n    num >>= 1;\n    *target_node_offset = prev_target_node_offset + num;\n    if (len_is_one) {\n        *size = 1;\n    } else {\n        *size = packed_name_dawg[edge_offset++];\n    }\n    *label_offset = edge_offset;\n    return last_edge;\n}\n\nstatic int\n_lookup_dawg_packed(const char* name, unsigned int namelen)\n{\n    unsigned int stringpos = 0;\n    unsigned int node_offset = 0;\n    unsigned int result = 0; // this is the number of final nodes that we skipped to match name\n    while (stringpos < namelen) {\n        bool final;\n        unsigned int edge_offset = _dawg_decode_node(node_offset, &final);\n        unsigned int prev_target_node_offset = edge_offset;\n        bool is_first_edge = true;\n        for (;;) {\n            unsigned int size;\n            unsigned int label_offset, target_node_offset;\n            int last_edge = _dawg_decode_edge(\n                    is_first_edge, prev_target_node_offset, edge_offset,\n                    &size, &label_offset, &target_node_offset);\n            if (last_edge == -1) {\n                return -1;\n            }\n            is_first_edge = false;\n            prev_target_node_offset = target_node_offset;\n            int matched = _dawg_match_edge(name, namelen, size, label_offset, stringpos);\n            if (matched == -1) {\n                return -1;\n            }\n            if (matched) {\n                if (final)\n                    result += 1;\n                stringpos += size;\n                node_offset = target_node_offset;\n                break;\n            }\n            if (last_edge) {\n                return -1;\n            }\n            result += _dawg_node_descendant_count(target_node_offset);\n            edge_offset = label_offset + size;\n        }\n    }\n    if (_dawg_node_is_final(node_offset)) {\n        return result;\n    }\n    return -1;\n}\n\nstatic int\n_inverse_dawg_lookup(char* buffer, unsigned int buflen, unsigned int pos)\n{\n    unsigned int node_offset = 0;\n    unsigned int bufpos = 0;\n    for (;;) {\n        bool final;\n        unsigned int edge_offset = _dawg_decode_node(node_offset, &final);\n\n        if (final) {\n            if (pos == 0) {\n                if (bufpos + 1 == buflen) {\n                    return 0;\n                }\n                buffer[bufpos] = '\\0';\n                return 1;\n            }\n            pos--;\n        }\n        unsigned int prev_target_node_offset = edge_offset;\n        bool is_first_edge = true;\n        for (;;) {\n            unsigned int size;\n            unsigned int label_offset, target_node_offset;\n            int last_edge = _dawg_decode_edge(\n                    is_first_edge, prev_target_node_offset, edge_offset,\n                    &size, &label_offset, &target_node_offset);\n            if (last_edge == -1) {\n                return 0;\n            }\n            is_first_edge = false;\n            prev_target_node_offset = target_node_offset;\n\n            unsigned int descendant_count = _dawg_node_descendant_count(target_node_offset);\n            if (pos < descendant_count) {\n                if (bufpos + size >= buflen) {\n                    return 0; // buffer overflow\n                }\n                for (unsigned int i = 0; i < size; i++) {\n                    buffer[bufpos++] = packed_name_dawg[label_offset++];\n                }\n                node_offset = target_node_offset;\n                break;\n            } else if (!last_edge) {\n                pos -= descendant_count;\n                edge_offset = label_offset + size;\n            } else {\n                return 0;\n            }\n        }\n    }\n}\n\n\nstatic int\n_getucname(PyObject *self,\n           Py_UCS4 code, char* buffer, int buflen, int with_alias_and_seq)\n{\n    /* Find the name associated with the given code point.\n     * If with_alias_and_seq is 1, check for names in the Private Use Area 15\n     * that we are using for aliases and named sequences. */\n    int offset;\n\n    if (code >= 0x110000)\n        return 0;\n\n    /* XXX should we just skip all the code points in the PUAs here? */\n    if (!with_alias_and_seq && (IS_ALIAS(code) || IS_NAMED_SEQ(code)))\n        return 0;\n\n    if (UCD_Check(self)) {\n        /* in 3.2.0 there are no aliases and named sequences */\n        const change_record *old;\n        if (IS_ALIAS(code) || IS_NAMED_SEQ(code))\n            return 0;\n        old = get_old_record(self, code);\n        if (old->category_changed == 0) {\n            /* unassigned */\n            return 0;\n        }\n    }\n\n    if (SBase <= code && code < SBase+SCount) {\n        /* Hangul syllable. */\n        int SIndex = code - SBase;\n        int L = SIndex / NCount;\n        int V = (SIndex % NCount) / TCount;\n        int T = SIndex % TCount;\n\n        if (buflen < 27)\n            /* Worst case: HANGUL SYLLABLE <10chars>. */\n            return 0;\n        strcpy(buffer, \"HANGUL SYLLABLE \");\n        buffer += 16;\n        strcpy(buffer, hangul_syllables[L][0]);\n        buffer += strlen(hangul_syllables[L][0]);\n        strcpy(buffer, hangul_syllables[V][1]);\n        buffer += strlen(hangul_syllables[V][1]);\n        strcpy(buffer, hangul_syllables[T][2]);\n        buffer += strlen(hangul_syllables[T][2]);\n        *buffer = '\\0';\n        return 1;\n    }\n\n    if (is_unified_ideograph(code)) {\n        if (buflen < 28)\n            /* Worst case: CJK UNIFIED IDEOGRAPH-20000 */\n            return 0;\n        sprintf(buffer, \"CJK UNIFIED IDEOGRAPH-%X\", code);\n        return 1;\n    }\n\n    /* get position of codepoint in order of names in the dawg */\n    offset = dawg_codepoint_to_pos_index1[(code>>DAWG_CODEPOINT_TO_POS_SHIFT)];\n    offset = dawg_codepoint_to_pos_index2[(offset<<DAWG_CODEPOINT_TO_POS_SHIFT) +\n                               (code&((1<<DAWG_CODEPOINT_TO_POS_SHIFT)-1))];\n    if (offset == DAWG_CODEPOINT_TO_POS_NOTFOUND)\n        return 0;\n\n    assert(buflen >= 0);\n    return _inverse_dawg_lookup(buffer, Py_SAFE_DOWNCAST(buflen, int, unsigned int), offset);\n}\n\nstatic int\ncapi_getucname(Py_UCS4 code,\n               char* buffer, int buflen,\n               int with_alias_and_seq)\n{\n    return _getucname(NULL, code, buffer, buflen, with_alias_and_seq);\n\n}\n\nstatic void\nfind_syllable(const char *str, int *len, int *pos, int count, int column)\n{\n    int i, len1;\n    *len = -1;\n    for (i = 0; i < count; i++) {\n        const char *s = hangul_syllables[i][column];\n        len1 = Py_SAFE_DOWNCAST(strlen(s), size_t, int);\n        if (len1 <= *len)\n            continue;\n        if (strncmp(str, s, len1) == 0) {\n            *len = len1;\n            *pos = i;\n        }\n    }\n    if (*len == -1) {\n        *len = 0;\n    }\n}\n\nstatic int\n_check_alias_and_seq(Py_UCS4* code, int with_named_seq)\n{\n    /* check if named sequences are allowed */\n    if (!with_named_seq && IS_NAMED_SEQ(*code))\n        return 0;\n    /* if the code point is in the PUA range that we use for aliases,\n     * convert it to obtain the right code point */\n    if (IS_ALIAS(*code))\n        *code = name_aliases[*code-aliases_start];\n    return 1;\n}\n\n\nstatic int\n_getcode(const char* name, int namelen, Py_UCS4* code)\n{\n    /* Return the code point associated with the given name.\n     * Named aliases are not resolved, they are returned as a code point in the\n     * PUA */\n\n    /* Check for hangul syllables. */\n    if (strncmp(name, \"HANGUL SYLLABLE \", 16) == 0) {\n        int len, L = -1, V = -1, T = -1;\n        const char *pos = name + 16;\n        find_syllable(pos, &len, &L, LCount, 0);\n        pos += len;\n        find_syllable(pos, &len, &V, VCount, 1);\n        pos += len;\n        find_syllable(pos, &len, &T, TCount, 2);\n        pos += len;\n        if (L != -1 && V != -1 && T != -1 && pos-name == namelen) {\n            *code = SBase + (L*VCount+V)*TCount + T;\n            return 1;\n        }\n        /* Otherwise, it's an illegal syllable name. */\n        return 0;\n    }\n\n    /* Check for unified ideographs. */\n    if (strncmp(name, \"CJK UNIFIED IDEOGRAPH-\", 22) == 0) {\n        /* Four or five hexdigits must follow. */\n        unsigned int v;\n        v = 0;\n        name += 22;\n        namelen -= 22;\n        if (namelen != 4 && namelen != 5)\n            return 0;\n        while (namelen--) {\n            v *= 16;\n            if (*name >= '0' && *name <= '9')\n                v += *name - '0';\n            else if (*name >= 'A' && *name <= 'F')\n                v += *name - 'A' + 10;\n            else\n                return 0;\n            name++;\n        }\n        if (!is_unified_ideograph(v))\n            return 0;\n        *code = v;\n        return 1;\n    }\n\n    assert(namelen >= 0);\n    int position = _lookup_dawg_packed(name, Py_SAFE_DOWNCAST(namelen, int, unsigned int));\n    if (position < 0) {\n        return 0;\n    }\n    *code = dawg_pos_to_codepoint[position];\n    return 1;\n}\n\n\nstatic int\ncapi_getcode(const char* name, int namelen, Py_UCS4* code,\n             int with_named_seq)\n{\n    if (!_getcode(name, namelen, code)) {\n        return 0;\n    }\n    return _check_alias_and_seq(code, with_named_seq);\n}\n\nstatic void\nunicodedata_destroy_capi(PyObject *capsule)\n{\n    void *capi = PyCapsule_GetPointer(capsule, PyUnicodeData_CAPSULE_NAME);\n    PyMem_Free(capi);\n}\n\nstatic PyObject *\nunicodedata_create_capi(void)\n{\n    _PyUnicode_Name_CAPI *capi = PyMem_Malloc(sizeof(_PyUnicode_Name_CAPI));\n    if (capi == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n    capi->getname = capi_getucname;\n    capi->getcode = capi_getcode;\n\n    PyObject *capsule = PyCapsule_New(capi,\n                                      PyUnicodeData_CAPSULE_NAME,\n                                      unicodedata_destroy_capi);\n    if (capsule == NULL) {\n        PyMem_Free(capi);\n    }\n    return capsule;\n};\n\n\n/* -------------------------------------------------------------------- */\n/* Python bindings */\n\n/*[clinic input]\nunicodedata.UCD.name\n\n    self: self\n    chr: int(accept={str})\n    default: object=NULL\n    /\n\nReturns the name assigned to the character chr as a string.\n\nIf no name is defined, default is returned, or, if not given,\nValueError is raised.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_name_impl(PyObject *self, int chr, PyObject *default_value)\n/*[clinic end generated code: output=6bbb37a326407707 input=3e0367f534de56d9]*/\n{\n    char name[NAME_MAXLEN+1];\n    Py_UCS4 c = (Py_UCS4)chr;\n\n    if (!_getucname(self, c, name, NAME_MAXLEN, 0)) {\n        if (default_value == NULL) {\n            PyErr_SetString(PyExc_ValueError, \"no such name\");\n            return NULL;\n        }\n        else {\n            return Py_NewRef(default_value);\n        }\n    }\n\n    return PyUnicode_FromString(name);\n}\n\n/*[clinic input]\nunicodedata.UCD.lookup\n\n    self: self\n    name: str(accept={str, robuffer}, zeroes=True)\n    /\n\nLook up character by name.\n\nIf a character with the given name is found, return the\ncorresponding character.  If not found, KeyError is raised.\n[clinic start generated code]*/\n\nstatic PyObject *\nunicodedata_UCD_lookup_impl(PyObject *self, const char *name,\n                            Py_ssize_t name_length)\n/*[clinic end generated code: output=7f03fc4959b242f6 input=a557be0f8607a0d6]*/\n{\n    Py_UCS4 code;\n    unsigned int index;\n    if (name_length > NAME_MAXLEN) {\n        PyErr_SetString(PyExc_KeyError, \"name too long\");\n        return NULL;\n    }\n\n    if (!_getcode(name, (int)name_length, &code)) {\n        PyErr_Format(PyExc_KeyError, \"undefined character name '%s'\", name);\n        return NULL;\n    }\n    if (UCD_Check(self)) {\n        /* in 3.2.0 there are no aliases and named sequences */\n        if (IS_ALIAS(code) || IS_NAMED_SEQ(code)) {\n            PyErr_Format(PyExc_KeyError, \"undefined character name '%s'\", name);\n            return 0;\n        }\n    }\n    /* check if code is in the PUA range that we use for named sequences\n       and convert it */\n    if (IS_NAMED_SEQ(code)) {\n        index = code-named_sequences_start;\n        return PyUnicode_FromKindAndData(PyUnicode_2BYTE_KIND,\n                                         named_sequences[index].seq,\n                                         named_sequences[index].seqlen);\n    }\n    if (IS_ALIAS(code)) {\n        code = name_aliases[code-aliases_start];\n    }\n    return PyUnicode_FromOrdinal(code);\n}\n\n// List of functions used to define module functions *AND* unicodedata.UCD\n// methods. For module functions, self is the module. For UCD methods, self\n// is an UCD instance. The UCD_Check() macro is used to check if self is\n// an UCD instance.\nstatic PyMethodDef unicodedata_functions[] = {\n    UNICODEDATA_UCD_DECIMAL_METHODDEF\n    UNICODEDATA_UCD_DIGIT_METHODDEF\n    UNICODEDATA_UCD_NUMERIC_METHODDEF\n    UNICODEDATA_UCD_CATEGORY_METHODDEF\n    UNICODEDATA_UCD_BIDIRECTIONAL_METHODDEF\n    UNICODEDATA_UCD_COMBINING_METHODDEF\n    UNICODEDATA_UCD_MIRRORED_METHODDEF\n    UNICODEDATA_UCD_EAST_ASIAN_WIDTH_METHODDEF\n    UNICODEDATA_UCD_DECOMPOSITION_METHODDEF\n    UNICODEDATA_UCD_NAME_METHODDEF\n    UNICODEDATA_UCD_LOOKUP_METHODDEF\n    UNICODEDATA_UCD_IS_NORMALIZED_METHODDEF\n    UNICODEDATA_UCD_NORMALIZE_METHODDEF\n    {NULL, NULL}                /* sentinel */\n};\n\nstatic int\nucd_traverse(PreviousDBVersion *self, visitproc visit, void *arg)\n{\n    Py_VISIT(Py_TYPE(self));\n    return 0;\n}\n\nstatic void\nucd_dealloc(PreviousDBVersion *self)\n{\n    PyTypeObject *tp = Py_TYPE(self);\n    PyObject_GC_UnTrack(self);\n    PyObject_GC_Del(self);\n    Py_DECREF(tp);\n}\n\nstatic PyType_Slot ucd_type_slots[] = {\n    {Py_tp_dealloc, ucd_dealloc},\n    {Py_tp_traverse, ucd_traverse},\n    {Py_tp_getattro, PyObject_GenericGetAttr},\n    {Py_tp_methods, unicodedata_functions},\n    {Py_tp_members, DB_members},\n    {0, 0}\n};\n\nstatic PyType_Spec ucd_type_spec = {\n    .name = \"unicodedata.UCD\",\n    .basicsize = sizeof(PreviousDBVersion),\n    .flags = (Py_TPFLAGS_DEFAULT | Py_TPFLAGS_DISALLOW_INSTANTIATION |\n              Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_IMMUTABLETYPE),\n    .slots = ucd_type_slots\n};\n\nPyDoc_STRVAR(unicodedata_docstring,\n\"This module provides access to the Unicode Character Database which\\n\\\ndefines character properties for all Unicode characters. The data in\\n\\\nthis database is based on the UnicodeData.txt file version\\n\\\n\" UNIDATA_VERSION \" which is publicly available from ftp://ftp.unicode.org/.\\n\\\n\\n\\\nThe module uses the same names and symbols as defined by the\\n\\\nUnicodeData File Format \" UNIDATA_VERSION \".\");\n\nstatic int\nunicodedata_exec(PyObject *module)\n{\n    if (PyModule_AddStringConstant(module, \"unidata_version\", UNIDATA_VERSION) < 0) {\n        return -1;\n    }\n\n    PyTypeObject *ucd_type = (PyTypeObject *)PyType_FromSpec(&ucd_type_spec);\n    if (ucd_type == NULL) {\n        return -1;\n    }\n\n    if (PyModule_AddType(module, ucd_type) < 0) {\n        Py_DECREF(ucd_type);\n        return -1;\n    }\n\n    // Unicode database version 3.2.0 used by the IDNA encoding\n    PyObject *v;\n    v = new_previous_version(ucd_type, \"3.2.0\",\n                             get_change_3_2_0, normalization_3_2_0);\n    Py_DECREF(ucd_type);\n    if (PyModule_Add(module, \"ucd_3_2_0\", v) < 0) {\n        return -1;\n    }\n\n    /* Export C API */\n    if (PyModule_Add(module, \"_ucnhash_CAPI\", unicodedata_create_capi()) < 0) {\n        return -1;\n    }\n    return 0;\n}\n\nstatic PyModuleDef_Slot unicodedata_slots[] = {\n    {Py_mod_exec, unicodedata_exec},\n    {Py_mod_multiple_interpreters, Py_MOD_PER_INTERPRETER_GIL_SUPPORTED},\n    {Py_mod_gil, Py_MOD_GIL_NOT_USED},\n    {0, NULL}\n};\n\nstatic struct PyModuleDef unicodedata_module = {\n    PyModuleDef_HEAD_INIT,\n    .m_name = \"unicodedata\",\n    .m_doc = unicodedata_docstring,\n    .m_size = 0,\n    .m_methods = unicodedata_functions,\n    .m_slots = unicodedata_slots,\n};\n\nPyMODINIT_FUNC\nPyInit_unicodedata(void)\n{\n    return PyModuleDef_Init(&unicodedata_module);\n}\n\n\n/*\nLocal variables:\nc-basic-offset: 4\nindent-tabs-mode: nil\nEnd:\n*/\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-infinite-loop",
                        "taxa": [{"id": "835",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/enode": 10676,
                                       "gcc/analyzer/saved_diagnostic/snode": 233,
                                       "gcc/analyzer/saved_diagnostic/idx": 55,
                                       "gcc/analyzer/infinite_loop_diagnostic/inf_loop": {"enode": 10676,
                                                                                          "eedges": [{"src_idx": 10676,
                                                                                                      "dst_idx": 10670},
                                                                                                     {"src_idx": 10670,
                                                                                                      "dst_idx": 10671},
                                                                                                     {"src_idx": 10671,
                                                                                                      "dst_idx": 10672},
                                                                                                     {"src_idx": 10672,
                                                                                                      "dst_idx": 10674,
                                                                                                      "sedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                "src_idx": 233,
                                                                                                                "dst_idx": 234,
                                                                                                                "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                                                     {"src_idx": 10674,
                                                                                                      "dst_idx": 10675},
                                                                                                     {"src_idx": 10675,
                                                                                                      "dst_idx": 10676,
                                                                                                      "sedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                "src_idx": 234,
                                                                                                                "dst_idx": 233,
                                                                                                                "desc": " (flags FALLTHRU | DFS_BACK)"}}]}},
                        "level": "warning",
                        "message": {"text": "infinite loop"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 1043,
                                                                       "startColumn": 23,
                                                                       "endColumn": 27},
                                                            "contextRegion": {"startLine": 1043,
                                                                              "snippet": {"text": "        unsigned char byte = packed_name_dawg[index];\n"}}},
                                       "logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                             "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                             "decoratedName": "_dawg_decode_varint_unsigned",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1176,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 1176,
                                                                                                                           "snippet": {"text": "_lookup_dawg_packed(const char* name, unsigned int namelen)\n"}}},
                                                                                    "logicalLocations": [{"name": "_lookup_dawg_packed",
                                                                                                          "fullyQualifiedName": "_lookup_dawg_packed",
                                                                                                          "decoratedName": "_lookup_dawg_packed",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_lookup_dawg_packed'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1096,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 20},
                                                                                                         "contextRegion": {"startLine": 1096,
                                                                                                                           "snippet": {"text": "_dawg_node_is_final(unsigned int node_offset)\n"}}},
                                                                                    "logicalLocations": [{"name": "_dawg_node_is_final",
                                                                                                          "fullyQualifiedName": "_dawg_node_is_final",
                                                                                                          "decoratedName": "_dawg_node_is_final",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_dawg_node_is_final'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1038,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 1038,
                                                                                                                           "snippet": {"text": "_dawg_decode_varint_unsigned(unsigned int index, unsigned int* result)\n"}}},
                                                                                    "logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                                                                          "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                                                                          "decoratedName": "_dawg_decode_varint_unsigned",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to '_dawg_decode_varint_unsigned'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1043,
                                                                                                                    "startColumn": 23,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 1043,
                                                                                                                           "snippet": {"text": "        unsigned char byte = packed_name_dawg[index];\n"}}},
                                                                                    "logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                                                                          "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                                                                          "decoratedName": "_dawg_decode_varint_unsigned",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "infinite loop here"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 233,
                                                                                                                                 "dst_idx": 234,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1047,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 1047,
                                                                                                                           "snippet": {"text": "        if (!(byte & 0x80)) {\n"}}},
                                                                                    "logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                                                                          "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                                                                          "decoratedName": "_dawg_decode_varint_unsigned",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "if it ever follows 'false' branch, it will always do so..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 233,
                                                                                                                                 "dst_idx": 234,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                                                                          "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                                                                          "decoratedName": "_dawg_decode_varint_unsigned",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CUSTOM"},
                                                                       "location": {"logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                                                                          "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                                                                          "decoratedName": "_dawg_decode_varint_unsigned",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "looping back..."}},
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 234,
                                                                                                                                 "dst_idx": 233,
                                                                                                                                 "desc": " (flags FALLTHRU | DFS_BACK)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/unicodedata.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 1043,
                                                                                                                    "startColumn": 23,
                                                                                                                    "endColumn": 27},
                                                                                                         "contextRegion": {"startLine": 1043,
                                                                                                                           "snippet": {"text": "        unsigned char byte = packed_name_dawg[index];\n"}}},
                                                                                    "logicalLocations": [{"name": "_dawg_decode_varint_unsigned",
                                                                                                          "fullyQualifiedName": "_dawg_decode_varint_unsigned",
                                                                                                          "decoratedName": "_dawg_decode_varint_unsigned",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 8}]}]}]}]}]}
