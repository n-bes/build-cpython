{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-deref-before-check",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-deref-before-check"}]}},
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "Python/perf_trampoline.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/*\n\nPerf trampoline instrumentation\n===============================\n\nThis file contains instrumentation to allow to associate\ncalls to the CPython eval loop back to the names of the Python\nfunctions and filename being executed.\n\nMany native performance profilers like the Linux perf tools are\nonly available to 'see' the C stack when sampling from the profiled\nprocess. This means that if we have the following python code:\n\n    import time\n    def foo(n):\n        # Some CPU intensive code\n\n    def bar(n):\n        foo(n)\n\n    def baz(n):\n        bar(n)\n\n    baz(10000000)\n\nA performance profiler that is only able to see native frames will\nproduce the following backtrace when sampling from foo():\n\n    _PyEval_EvalFrameDefault -----> Evaluation frame of foo()\n    _PyEval_Vector\n    _PyFunction_Vectorcall\n    PyObject_Vectorcall\n    call_function\n\n    _PyEval_EvalFrameDefault ------> Evaluation frame of bar()\n    _PyEval_EvalFrame\n    _PyEval_Vector\n    _PyFunction_Vectorcall\n    PyObject_Vectorcall\n    call_function\n\n    _PyEval_EvalFrameDefault -------> Evaluation frame of baz()\n    _PyEval_EvalFrame\n    _PyEval_Vector\n    _PyFunction_Vectorcall\n    PyObject_Vectorcall\n    call_function\n\n    ...\n\n    Py_RunMain\n\nBecause the profiler is only able to see the native frames and the native\nfunction that runs the evaluation loop is the same (_PyEval_EvalFrameDefault)\nthen the profiler and any reporter generated by it will not be able to\nassociate the names of the Python functions and the filenames associated with\nthose calls, rendering the results useless in the Python world.\n\nTo fix this problem, we introduce the concept of a trampoline frame. A\ntrampoline frame is a piece of code that is unique per Python code object that\nis executed before entering the CPython eval loop. This piece of code just\ncalls the original Python evaluation function (_PyEval_EvalFrameDefault) and\nforwards all the arguments received. In this way, when a profiler samples\nframes from the previous example it will see;\n\n    _PyEval_EvalFrameDefault -----> Evaluation frame of foo()\n    [Jit compiled code 3]\n    _PyEval_Vector\n    _PyFunction_Vectorcall\n    PyObject_Vectorcall\n    call_function\n\n    _PyEval_EvalFrameDefault ------> Evaluation frame of bar()\n    [Jit compiled code 2]\n    _PyEval_EvalFrame\n    _PyEval_Vector\n    _PyFunction_Vectorcall\n    PyObject_Vectorcall\n    call_function\n\n    _PyEval_EvalFrameDefault -------> Evaluation frame of baz()\n    [Jit compiled code 1]\n    _PyEval_EvalFrame\n    _PyEval_Vector\n    _PyFunction_Vectorcall\n    PyObject_Vectorcall\n    call_function\n\n    ...\n\n    Py_RunMain\n\nWhen we generate every unique copy of the trampoline (what here we called \"[Jit\ncompiled code N]\") we write the relationship between the compiled code and the\nPython function that is associated with it. Every profiler requires this\ninformation in a different format. For example, the Linux \"perf\" profiler\nrequires a file in \"/tmp/perf-PID.map\" (name and location not configurable)\nwith the following format:\n\n    <compiled code address> <compiled code size> <name of the compiled code>\n\nIf this file is available when \"perf\" generates reports, it will automatically\nassociate every trampoline with the Python function that it is associated with\nallowing it to generate reports that include Python information. These reports\nthen can also be filtered in a way that *only* Python information appears.\n\nNotice that for this to work, there must be a unique copied of the trampoline\nper Python code object even if the code in the trampoline is the same. To\nachieve this we have a assembly template in Objects/asm_trampiline.S that is\ncompiled into the Python executable/shared library. This template generates a\nsymbol that maps the start of the assembly code and another that marks the end\nof the assembly code for the trampoline.  Then, every time we need a unique\ntrampoline for a Python code object, we copy the assembly code into a mmaped\narea that has executable permissions and we return the start of that area as\nour trampoline function.\n\nAsking for a mmap-ed memory area for trampoline is very wasteful so we\nallocate big arenas of memory in a single mmap call, we populate the entire\narena with copies of the trampoline (this allows us to now have to invalidate\nthe icache for the instructions in the page) and then we return the next\navailable chunk every time someone asks for a new trampoline. We keep a linked\nlist of arenas in case the current memory arena is exhausted and another one is\nneeded.\n\nFor the best results, Python should be compiled with\nCFLAGS=\"-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer\" as this allows\nprofilers to unwind using only the frame pointer and not on DWARF debug\ninformation (note that as trampilines are dynamically generated there won't be\nany DWARF information available for them).\n*/\n\n#include \"Python.h\"\n#include \"pycore_ceval.h\"         // _PyPerf_Callbacks\n#include \"pycore_frame.h\"\n#include \"pycore_interp.h\"\n\n\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n\n#include <fcntl.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/mman.h>             // mmap()\n#include <sys/types.h>\n#include <unistd.h>               // sysconf()\n#include <sys/time.h>           // gettimeofday()\n\n\n#if defined(__arm__) || defined(__arm64__) || defined(__aarch64__)\n#define PY_HAVE_INVALIDATE_ICACHE\n\n#if defined(__clang__) || defined(__GNUC__)\nextern void __clear_cache(void *, void*);\n#endif\n\nstatic void invalidate_icache(char* begin, char*end) {\n#if defined(__clang__) || defined(__GNUC__)\n    return __clear_cache(begin, end);\n#else\n    return;\n#endif\n}\n#endif\n\n/* The function pointer is passed as last argument. The other three arguments\n * are passed in the same order as the function requires. This results in\n * shorter, more efficient ASM code for trampoline.\n */\ntypedef PyObject *(*py_evaluator)(PyThreadState *, _PyInterpreterFrame *,\n                                  int throwflag);\ntypedef PyObject *(*py_trampoline)(PyThreadState *, _PyInterpreterFrame *, int,\n                                   py_evaluator);\n\nextern void *_Py_trampoline_func_start;  // Start of the template of the\n                                         // assembly trampoline\nextern void *\n    _Py_trampoline_func_end;  // End of the template of the assembly trampoline\n\nstruct code_arena_st {\n    char *start_addr;    // Start of the memory arena\n    char *current_addr;  // Address of the current trampoline within the arena\n    size_t size;         // Size of the memory arena\n    size_t size_left;    // Remaining size of the memory arena\n    size_t code_size;    // Size of the code of every trampoline in the arena\n    struct code_arena_st\n        *prev;  // Pointer to the arena  or NULL if this is the first arena.\n};\n\ntypedef struct code_arena_st code_arena_t;\ntypedef struct trampoline_api_st trampoline_api_t;\n\nenum perf_trampoline_type {\n    PERF_TRAMPOLINE_UNSET = 0,\n    PERF_TRAMPOLINE_TYPE_MAP = 1,\n    PERF_TRAMPOLINE_TYPE_JITDUMP = 2,\n};\n\n#define perf_status _PyRuntime.ceval.perf.status\n#define extra_code_index _PyRuntime.ceval.perf.extra_code_index\n#define perf_code_arena _PyRuntime.ceval.perf.code_arena\n#define trampoline_api _PyRuntime.ceval.perf.trampoline_api\n#define perf_map_file _PyRuntime.ceval.perf.map_file\n#define persist_after_fork _PyRuntime.ceval.perf.persist_after_fork\n#define perf_trampoline_type _PyRuntime.ceval.perf.perf_trampoline_type\n\nstatic void\nperf_map_write_entry(void *state, const void *code_addr,\n                         unsigned int code_size, PyCodeObject *co)\n{\n    const char *entry = \"\";\n    if (co->co_qualname != NULL) {\n        entry = PyUnicode_AsUTF8(co->co_qualname);\n    }\n    const char *filename = \"\";\n    if (co->co_filename != NULL) {\n        filename = PyUnicode_AsUTF8(co->co_filename);\n    }\n    size_t perf_map_entry_size = snprintf(NULL, 0, \"py::%s:%s\", entry, filename) + 1;\n    char* perf_map_entry = (char*) PyMem_RawMalloc(perf_map_entry_size);\n    if (perf_map_entry == NULL) {\n        return;\n    }\n    snprintf(perf_map_entry, perf_map_entry_size, \"py::%s:%s\", entry, filename);\n    PyUnstable_WritePerfMapEntry(code_addr, code_size, perf_map_entry);\n    PyMem_RawFree(perf_map_entry);\n}\n\nstatic void*\nperf_map_init_state(void)\n{\n    PyUnstable_PerfMapState_Init();\n    trampoline_api.code_padding = 0;\n    perf_trampoline_type = PERF_TRAMPOLINE_TYPE_MAP;\n    return NULL;\n}\n\nstatic int\nperf_map_free_state(void *state)\n{\n    PyUnstable_PerfMapState_Fini();\n    return 0;\n}\n\n_PyPerf_Callbacks _Py_perfmap_callbacks = {\n    &perf_map_init_state,\n    &perf_map_write_entry,\n    &perf_map_free_state,\n};\n\n\nstatic size_t round_up(int64_t value, int64_t multiple) {\n    if (multiple == 0) {\n        // Avoid division by zero\n        return value;\n    }\n\n    int64_t remainder = value % multiple;\n    if (remainder == 0) {\n        // Value is already a multiple of 'multiple'\n        return value;\n    }\n\n    // Calculate the difference to the next multiple\n    int64_t difference = multiple - remainder;\n\n    // Add the difference to the value\n    int64_t rounded_up_value = value + difference;\n\n    return rounded_up_value;\n}\n\n// TRAMPOLINE MANAGEMENT API\n\nstatic int\nnew_code_arena(void)\n{\n    // non-trivial programs typically need 64 to 256 kiB.\n    size_t mem_size = 4096 * 16;\n    assert(mem_size % sysconf(_SC_PAGESIZE) == 0);\n    char *memory =\n        mmap(NULL,  // address\n             mem_size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS,\n             -1,  // fd (not used here)\n             0);  // offset (not used here)\n    if (memory == MAP_FAILED) {\n        PyErr_SetFromErrno(PyExc_OSError);\n        PyErr_FormatUnraisable(\"Failed to create new mmap for perf trampoline\");\n        perf_status = PERF_STATUS_FAILED;\n        return -1;\n    }\n    void *start = &_Py_trampoline_func_start;\n    void *end = &_Py_trampoline_func_end;\n    size_t code_size = end - start;\n    size_t chunk_size = round_up(code_size + trampoline_api.code_padding, 16);\n    // TODO: Check the effect of alignment of the code chunks. Initial investigation\n    // showed that this has no effect on performance in x86-64 or aarch64 and the current\n    // version has the advantage that the unwinder in GDB can unwind across JIT-ed code.\n    //\n    // We should check the values in the future and see if there is a\n    // measurable performance improvement by rounding trampolines up to 32-bit\n    // or 64-bit alignment.\n\n    size_t n_copies = mem_size / chunk_size;\n    for (size_t i = 0; i < n_copies; i++) {\n        memcpy(memory + i * chunk_size, start, code_size * sizeof(char));\n    }\n    // Some systems may prevent us from creating executable code on the fly.\n    int res = mprotect(memory, mem_size, PROT_READ | PROT_EXEC);\n    if (res == -1) {\n        PyErr_SetFromErrno(PyExc_OSError);\n        munmap(memory, mem_size);\n        PyErr_FormatUnraisable(\"Failed to set mmap for perf trampoline to \"\n                               \"PROT_READ | PROT_EXEC\");\n        return -1;\n    }\n\n#ifdef PY_HAVE_INVALIDATE_ICACHE\n    // Before the JIT can run a block of code that has been emitted it must invalidate\n    // the instruction cache on some platforms like arm and aarch64.\n    invalidate_icache(memory, memory + mem_size);\n#endif\n\n    code_arena_t *new_arena = PyMem_RawCalloc(1, sizeof(code_arena_t));\n    if (new_arena == NULL) {\n        PyErr_NoMemory();\n        munmap(memory, mem_size);\n        PyErr_FormatUnraisable(\"Failed to allocate new code arena struct for perf trampoline\");\n        return -1;\n    }\n\n    new_arena->start_addr = memory;\n    new_arena->current_addr = memory;\n    new_arena->size = mem_size;\n    new_arena->size_left = mem_size;\n    new_arena->code_size = code_size;\n    new_arena->prev = perf_code_arena;\n    perf_code_arena = new_arena;\n    return 0;\n}\n\nstatic void\nfree_code_arenas(void)\n{\n    code_arena_t *cur = perf_code_arena;\n    code_arena_t *prev;\n    perf_code_arena = NULL;  // invalid static pointer\n    while (cur) {\n        munmap(cur->start_addr, cur->size);\n        prev = cur->prev;\n        PyMem_RawFree(cur);\n        cur = prev;\n    }\n}\n\nstatic inline py_trampoline\ncode_arena_new_code(code_arena_t *code_arena)\n{\n    py_trampoline trampoline = (py_trampoline)code_arena->current_addr;\n    size_t total_code_size = round_up(code_arena->code_size + trampoline_api.code_padding, 16);\n    code_arena->size_left -= total_code_size;\n    code_arena->current_addr += total_code_size;\n    return trampoline;\n}\n\nstatic inline py_trampoline\ncompile_trampoline(void)\n{\n    size_t total_code_size = round_up(perf_code_arena->code_size + trampoline_api.code_padding, 16);\n    if ((perf_code_arena == NULL) ||\n        (perf_code_arena->size_left <= total_code_size)) {\n        if (new_code_arena() < 0) {\n            return NULL;\n        }\n    }\n    assert(perf_code_arena->size_left <= perf_code_arena->size);\n    return code_arena_new_code(perf_code_arena);\n}\n\nstatic PyObject *\npy_trampoline_evaluator(PyThreadState *ts, _PyInterpreterFrame *frame,\n                        int throw)\n{\n    if (perf_status == PERF_STATUS_FAILED ||\n        perf_status == PERF_STATUS_NO_INIT) {\n        goto default_eval;\n    }\n    PyCodeObject *co = _PyFrame_GetCode(frame);\n    py_trampoline f = NULL;\n    assert(extra_code_index != -1);\n    int ret = _PyCode_GetExtra((PyObject *)co, extra_code_index, (void **)&f);\n    if (ret != 0 || f == NULL) {\n        // This is the first time we see this code object so we need\n        // to compile a trampoline for it.\n        py_trampoline new_trampoline = compile_trampoline();\n        if (new_trampoline == NULL) {\n            goto default_eval;\n        }\n        trampoline_api.write_state(trampoline_api.state, new_trampoline,\n                                   perf_code_arena->code_size, co);\n        _PyCode_SetExtra((PyObject *)co, extra_code_index,\n                         (void *)new_trampoline);\n        f = new_trampoline;\n    }\n    assert(f != NULL);\n    return f(ts, frame, throw, _PyEval_EvalFrameDefault);\ndefault_eval:\n    // Something failed, fall back to the default evaluator.\n    return _PyEval_EvalFrameDefault(ts, frame, throw);\n}\n#endif  // PY_HAVE_PERF_TRAMPOLINE\n\nint PyUnstable_PerfTrampoline_CompileCode(PyCodeObject *co)\n{\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    py_trampoline f = NULL;\n    assert(extra_code_index != -1);\n    int ret = _PyCode_GetExtra((PyObject *)co, extra_code_index, (void **)&f);\n    if (ret != 0 || f == NULL) {\n        py_trampoline new_trampoline = compile_trampoline();\n        if (new_trampoline == NULL) {\n            return 0;\n        }\n        trampoline_api.write_state(trampoline_api.state, new_trampoline,\n                                   perf_code_arena->code_size, co);\n        return _PyCode_SetExtra((PyObject *)co, extra_code_index,\n                         (void *)new_trampoline);\n    }\n#endif // PY_HAVE_PERF_TRAMPOLINE\n    return 0;\n}\n\nint\n_PyIsPerfTrampolineActive(void)\n{\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    PyThreadState *tstate = _PyThreadState_GET();\n    return tstate->interp->eval_frame == py_trampoline_evaluator;\n#endif\n    return 0;\n}\n\nvoid\n_PyPerfTrampoline_GetCallbacks(_PyPerf_Callbacks *callbacks)\n{\n    if (callbacks == NULL) {\n        return;\n    }\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    callbacks->init_state = trampoline_api.init_state;\n    callbacks->write_state = trampoline_api.write_state;\n    callbacks->free_state = trampoline_api.free_state;\n#endif\n    return;\n}\n\nint\n_PyPerfTrampoline_SetCallbacks(_PyPerf_Callbacks *callbacks)\n{\n    if (callbacks == NULL) {\n        return -1;\n    }\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    if (trampoline_api.state) {\n        _PyPerfTrampoline_Fini();\n    }\n    trampoline_api.init_state = callbacks->init_state;\n    trampoline_api.write_state = callbacks->write_state;\n    trampoline_api.free_state = callbacks->free_state;\n    trampoline_api.state = NULL;\n#endif\n    return 0;\n}\n\nint\n_PyPerfTrampoline_Init(int activate)\n{\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    PyThreadState *tstate = _PyThreadState_GET();\n    if (tstate->interp->eval_frame &&\n        tstate->interp->eval_frame != py_trampoline_evaluator) {\n        PyErr_SetString(PyExc_RuntimeError,\n                        \"Trampoline cannot be initialized as a custom eval \"\n                        \"frame is already present\");\n        return -1;\n    }\n    if (!activate) {\n        tstate->interp->eval_frame = NULL;\n        perf_status = PERF_STATUS_NO_INIT;\n    }\n    else {\n        tstate->interp->eval_frame = py_trampoline_evaluator;\n        if (new_code_arena() < 0) {\n            return -1;\n        }\n        extra_code_index = _PyEval_RequestCodeExtraIndex(NULL);\n        if (extra_code_index == -1) {\n            return -1;\n        }\n        if (trampoline_api.state == NULL && trampoline_api.init_state != NULL) {\n            trampoline_api.state = trampoline_api.init_state();\n        }\n        perf_status = PERF_STATUS_OK;\n    }\n#endif\n    return 0;\n}\n\nint\n_PyPerfTrampoline_Fini(void)\n{\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    if (perf_status != PERF_STATUS_OK) {\n        return 0;\n    }\n    PyThreadState *tstate = _PyThreadState_GET();\n    if (tstate->interp->eval_frame == py_trampoline_evaluator) {\n        tstate->interp->eval_frame = NULL;\n    }\n    if (perf_status == PERF_STATUS_OK) {\n        trampoline_api.free_state(trampoline_api.state);\n        perf_trampoline_type = PERF_TRAMPOLINE_UNSET;\n    }\n    extra_code_index = -1;\n    perf_status = PERF_STATUS_NO_INIT;\n#endif\n    return 0;\n}\n\nvoid _PyPerfTrampoline_FreeArenas(void) {\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    free_code_arenas();\n#endif\n    return;\n}\n\nint\nPyUnstable_PerfTrampoline_SetPersistAfterFork(int enable){\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    persist_after_fork = enable;\n    return persist_after_fork;\n#endif\n    return 0;\n}\n\nPyStatus\n_PyPerfTrampoline_AfterFork_Child(void)\n{\n#ifdef PY_HAVE_PERF_TRAMPOLINE\n    if (persist_after_fork) {\n        if (perf_trampoline_type != PERF_TRAMPOLINE_TYPE_MAP) {\n            return PyStatus_Error(\"Failed to copy perf map file as perf trampoline type is not type map.\");\n        }\n        _PyPerfTrampoline_Fini();\n        char filename[256];\n        pid_t parent_pid = getppid();\n        snprintf(filename, sizeof(filename), \"/tmp/perf-%d.map\", parent_pid);\n        if (PyUnstable_CopyPerfMapFile(filename) != 0) {\n            return PyStatus_Error(\"Failed to copy perf map file.\");\n        }\n    } else {\n        // Restart trampoline in file in child.\n        int was_active = _PyIsPerfTrampolineActive();\n        _PyPerfTrampoline_Fini();\n        if (was_active) {\n            _PyPerfTrampoline_Init(1);\n        }\n    }\n#endif\n    return PyStatus_Ok();\n}\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-deref-before-check",
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 1195,
                                       "gcc/analyzer/saved_diagnostic/snode": 99,
                                       "gcc/analyzer/saved_diagnostic/sval": "INIT_VAL(_PyRuntime.ceval.perf.code_arena)",
                                       "gcc/analyzer/saved_diagnostic/state": "assumed-non-null (in frame: 'compile_trampoline'@1)",
                                       "gcc/analyzer/saved_diagnostic/idx": 0},
                        "level": "warning",
                        "message": {"text": "check of '_PyRuntime.ceval.perf.code_arena' for NULL after already dereferencing it"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 369,
                                                                       "startColumn": 8,
                                                                       "endColumn": 9},
                                                            "contextRegion": {"startLine": 369,
                                                                              "snippet": {"text": "    if ((perf_code_arena == NULL) ||\n"}}},
                                       "logicalLocations": [{"name": "compile_trampoline",
                                                             "fullyQualifiedName": "compile_trampoline",
                                                             "decoratedName": "compile_trampoline",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 366,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 366,
                                                                                                                           "snippet": {"text": "compile_trampoline(void)\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_trampoline",
                                                                                                          "fullyQualifiedName": "compile_trampoline",
                                                                                                          "decoratedName": "compile_trampoline",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'compile_trampoline'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_STATE_CHANGE"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 368,
                                                                                                                    "startColumn": 39,
                                                                                                                    "endColumn": 65},
                                                                                                         "contextRegion": {"startLine": 368,
                                                                                                                           "snippet": {"text": "    size_t total_code_size = round_up(perf_code_arena->code_size + trampoline_api.code_padding, 16);\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_trampoline",
                                                                                                          "fullyQualifiedName": "compile_trampoline",
                                                                                                          "decoratedName": "compile_trampoline",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "pointer '_PyRuntime.ceval.perf.code_arena' is dereferenced here"}},
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 98,
                                                                                                                                 "dst_idx": 135,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 368,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 100},
                                                                                                         "contextRegion": {"startLine": 368,
                                                                                                                           "snippet": {"text": "    size_t total_code_size = round_up(perf_code_arena->code_size + trampoline_api.code_padding, 16);\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_trampoline",
                                                                                                          "fullyQualifiedName": "compile_trampoline",
                                                                                                          "decoratedName": "compile_trampoline",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'round_up' from 'compile_trampoline'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 251,
                                                                                                                    "startColumn": 15,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 251,
                                                                                                                           "snippet": {"text": "static size_t round_up(int64_t value, int64_t multiple) {\n"}}},
                                                                                    "logicalLocations": [{"name": "round_up",
                                                                                                          "fullyQualifiedName": "round_up",
                                                                                                          "decoratedName": "round_up",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'round_up'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 136,
                                                                                                                                 "dst_idx": 138,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 252,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 252,
                                                                                                                           "snippet": {"text": "    if (multiple == 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "round_up",
                                                                                                          "fullyQualifiedName": "round_up",
                                                                                                          "decoratedName": "round_up",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'multiple != 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 136,
                                                                                                                                 "dst_idx": 138,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 257,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 257,
                                                                                                                           "snippet": {"text": "    int64_t remainder = value % multiple;\n"}}},
                                                                                    "logicalLocations": [{"name": "round_up",
                                                                                                          "fullyQualifiedName": "round_up",
                                                                                                          "decoratedName": "round_up",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 138,
                                                                                                                                 "dst_idx": 139,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 258,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 258,
                                                                                                                           "snippet": {"text": "    if (remainder == 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "round_up",
                                                                                                          "fullyQualifiedName": "round_up",
                                                                                                          "decoratedName": "round_up",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'remainder == 0')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 138,
                                                                                                                                 "dst_idx": 139,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 260,
                                                                                                                    "startColumn": 16,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 260,
                                                                                                                           "snippet": {"text": "        return value;\n"}}},
                                                                                    "logicalLocations": [{"name": "round_up",
                                                                                                          "fullyQualifiedName": "round_up",
                                                                                                          "decoratedName": "round_up",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 142,
                                                                                                                                 "dst_idx": 99,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 368,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 100},
                                                                                                         "contextRegion": {"startLine": 368,
                                                                                                                           "snippet": {"text": "    size_t total_code_size = round_up(perf_code_arena->code_size + trampoline_api.code_padding, 16);\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_trampoline",
                                                                                                          "fullyQualifiedName": "compile_trampoline",
                                                                                                          "decoratedName": "compile_trampoline",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'compile_trampoline' from 'round_up'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "Python/perf_trampoline.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 369,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 369,
                                                                                                                           "snippet": {"text": "    if ((perf_code_arena == NULL) ||\n"}}},
                                                                                    "logicalLocations": [{"name": "compile_trampoline",
                                                                                                          "fullyQualifiedName": "compile_trampoline",
                                                                                                          "decoratedName": "compile_trampoline",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "pointer '_PyRuntime.ceval.perf.code_arena' is checked for NULL here but it was already dereferenced at (2)"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 10}]}]}]}]}]}
