{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
 "version": "2.1.0",
 "runs": [{"tool": {"driver": {"name": "GNU C11",
                               "fullName": "GNU C11 (GCC) version 14.2.1 20240801 (Red Hat 14.2.1-1) (x86_64-redhat-linux)",
                               "version": "14.2.1 20240801 (Red Hat 14.2.1-1)",
                               "informationUri": "https://gcc.gnu.org/gcc-14/",
                               "rules": [{"id": "-Wanalyzer-null-argument",
                                          "helpUri": "https://gcc.gnu.org/onlinedocs/gcc-14.2.0/gcc/Static-Analyzer-Options.html#index-Wanalyzer-null-argument"}]}},
           "taxonomies": [{"name": "CWE",
                           "version": "4.7",
                           "organization": "MITRE",
                           "shortDescription": {"text": "The MITRE Common Weakness Enumeration"},
                           "taxa": [{"id": "476",
                                     "helpUri": "https://cwe.mitre.org/data/definitions/476.html"}]}],
           "invocations": [{"executionSuccessful": true,
                            "toolExecutionNotifications": []}],
           "originalUriBaseIds": {"PWD": {"uri": "file:///src/Python-3.13.0b4/"}},
           "artifacts": [{"location": {"uri": "./Modules/_testbuffer.c",
                                       "uriBaseId": "PWD"},
                          "contents": {"text": "/* C Extension module to test all aspects of PEP-3118.\n   Written by Stefan Krah. */\n\n#include \"Python.h\"\n\n\n/* struct module */\nstatic PyObject *structmodule = NULL;\nstatic PyObject *Struct = NULL;\nstatic PyObject *calcsize = NULL;\n\n/* cache simple format string */\nstatic const char *simple_fmt = \"B\";\nstatic PyObject *simple_format = NULL;\n#define SIMPLE_FORMAT(fmt) (fmt == NULL || strcmp(fmt, \"B\") == 0)\n#define FIX_FORMAT(fmt) (fmt == NULL ? \"B\" : fmt)\n\n\n/**************************************************************************/\n/*                             NDArray Object                             */\n/**************************************************************************/\n\nstatic PyTypeObject NDArray_Type;\n#define NDArray_Check(v) Py_IS_TYPE(v, &NDArray_Type)\n\n#define CHECK_LIST_OR_TUPLE(v) \\\n    if (!PyList_Check(v) && !PyTuple_Check(v)) { \\\n        PyErr_SetString(PyExc_TypeError,         \\\n            #v \" must be a list or a tuple\");    \\\n        return NULL;                             \\\n    }                                            \\\n\n#define PyMem_XFree(v) \\\n    do { if (v) PyMem_Free(v); } while (0)\n\n/* Maximum number of dimensions. */\n#define ND_MAX_NDIM (2 * PyBUF_MAX_NDIM)\n\n/* Check for the presence of suboffsets in the first dimension. */\n#define HAVE_PTR(suboffsets) (suboffsets && suboffsets[0] >= 0)\n/* Adjust ptr if suboffsets are present. */\n#define ADJUST_PTR(ptr, suboffsets) \\\n    (HAVE_PTR(suboffsets) ? *((char**)ptr) + suboffsets[0] : ptr)\n\n/* Default: NumPy style (strides), read-only, no var-export, C-style layout */\n#define ND_DEFAULT          0x000\n/* User configurable flags for the ndarray */\n#define ND_VAREXPORT        0x001   /* change layout while buffers are exported */\n/* User configurable flags for each base buffer */\n#define ND_WRITABLE         0x002   /* mark base buffer as writable */\n#define ND_FORTRAN          0x004   /* Fortran contiguous layout */\n#define ND_SCALAR           0x008   /* scalar: ndim = 0 */\n#define ND_PIL              0x010   /* convert to PIL-style array (suboffsets) */\n#define ND_REDIRECT         0x020   /* redirect buffer requests */\n#define ND_GETBUF_FAIL      0x040   /* trigger getbuffer failure */\n#define ND_GETBUF_UNDEFINED 0x080   /* undefined view.obj */\n/* Internal flags for the base buffer */\n#define ND_C                0x100   /* C contiguous layout (default) */\n#define ND_OWN_ARRAYS       0x200   /* consumer owns arrays */\n\n/* ndarray properties */\n#define ND_IS_CONSUMER(nd) \\\n    (((NDArrayObject *)nd)->head == &((NDArrayObject *)nd)->staticbuf)\n\n/* ndbuf->flags properties */\n#define ND_C_CONTIGUOUS(flags) (!!(flags&(ND_SCALAR|ND_C)))\n#define ND_FORTRAN_CONTIGUOUS(flags) (!!(flags&(ND_SCALAR|ND_FORTRAN)))\n#define ND_ANY_CONTIGUOUS(flags) (!!(flags&(ND_SCALAR|ND_C|ND_FORTRAN)))\n\n/* getbuffer() requests */\n#define REQ_INDIRECT(flags) ((flags&PyBUF_INDIRECT) == PyBUF_INDIRECT)\n#define REQ_C_CONTIGUOUS(flags) ((flags&PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS)\n#define REQ_F_CONTIGUOUS(flags) ((flags&PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS)\n#define REQ_ANY_CONTIGUOUS(flags) ((flags&PyBUF_ANY_CONTIGUOUS) == PyBUF_ANY_CONTIGUOUS)\n#define REQ_STRIDES(flags) ((flags&PyBUF_STRIDES) == PyBUF_STRIDES)\n#define REQ_SHAPE(flags) ((flags&PyBUF_ND) == PyBUF_ND)\n#define REQ_WRITABLE(flags) (flags&PyBUF_WRITABLE)\n#define REQ_FORMAT(flags) (flags&PyBUF_FORMAT)\n\n\n/* Single node of a list of base buffers. The list is needed to implement\n   changes in memory layout while exported buffers are active. */\nstatic PyTypeObject NDArray_Type;\n\nstruct ndbuf;\ntypedef struct ndbuf {\n    struct ndbuf *next;\n    struct ndbuf *prev;\n    Py_ssize_t len;     /* length of data */\n    Py_ssize_t offset;  /* start of the array relative to data */\n    char *data;         /* raw data */\n    int flags;          /* capabilities of the base buffer */\n    Py_ssize_t exports; /* number of exports */\n    Py_buffer base;     /* base buffer */\n} ndbuf_t;\n\ntypedef struct {\n    PyObject_HEAD\n    int flags;          /* ndarray flags */\n    ndbuf_t staticbuf;  /* static buffer for re-exporting mode */\n    ndbuf_t *head;      /* currently active base buffer */\n} NDArrayObject;\n\n\nstatic ndbuf_t *\nndbuf_new(Py_ssize_t nitems, Py_ssize_t itemsize, Py_ssize_t offset, int flags)\n{\n    ndbuf_t *ndbuf;\n    Py_buffer *base;\n    Py_ssize_t len;\n\n    len = nitems * itemsize;\n    if (offset % itemsize) {\n        PyErr_SetString(PyExc_ValueError,\n            \"offset must be a multiple of itemsize\");\n        return NULL;\n    }\n    if (offset < 0 || offset+itemsize > len) {\n        PyErr_SetString(PyExc_ValueError, \"offset out of bounds\");\n        return NULL;\n    }\n\n    ndbuf = PyMem_Malloc(sizeof *ndbuf);\n    if (ndbuf == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    ndbuf->next = NULL;\n    ndbuf->prev = NULL;\n    ndbuf->len = len;\n    ndbuf->offset= offset;\n\n    ndbuf->data = PyMem_Malloc(len);\n    if (ndbuf->data == NULL) {\n        PyErr_NoMemory();\n        PyMem_Free(ndbuf);\n        return NULL;\n    }\n\n    ndbuf->flags = flags;\n    ndbuf->exports = 0;\n\n    base = &ndbuf->base;\n    base->obj = NULL;\n    base->buf = ndbuf->data;\n    base->len = len;\n    base->itemsize = 1;\n    base->readonly = 0;\n    base->format = NULL;\n    base->ndim = 1;\n    base->shape = NULL;\n    base->strides = NULL;\n    base->suboffsets = NULL;\n    base->internal = ndbuf;\n\n    return ndbuf;\n}\n\nstatic void\nndbuf_free(ndbuf_t *ndbuf)\n{\n    Py_buffer *base = &ndbuf->base;\n\n    PyMem_XFree(ndbuf->data);\n    PyMem_XFree(base->format);\n    PyMem_XFree(base->shape);\n    PyMem_XFree(base->strides);\n    PyMem_XFree(base->suboffsets);\n\n    PyMem_Free(ndbuf);\n}\n\nstatic void\nndbuf_push(NDArrayObject *nd, ndbuf_t *elt)\n{\n    elt->next = nd->head;\n    if (nd->head) nd->head->prev = elt;\n    nd->head = elt;\n    elt->prev = NULL;\n}\n\nstatic void\nndbuf_delete(NDArrayObject *nd, ndbuf_t *elt)\n{\n    if (elt->prev)\n        elt->prev->next = elt->next;\n    else\n        nd->head = elt->next;\n\n    if (elt->next)\n        elt->next->prev = elt->prev;\n\n    ndbuf_free(elt);\n}\n\nstatic void\nndbuf_pop(NDArrayObject *nd)\n{\n    ndbuf_delete(nd, nd->head);\n}\n\n\nstatic PyObject *\nndarray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)\n{\n    NDArrayObject *nd;\n\n    nd = PyObject_New(NDArrayObject, &NDArray_Type);\n    if (nd == NULL)\n        return NULL;\n\n    nd->flags = 0;\n    nd->head = NULL;\n    return (PyObject *)nd;\n}\n\nstatic void\nndarray_dealloc(NDArrayObject *self)\n{\n    if (self->head) {\n        if (ND_IS_CONSUMER(self)) {\n            Py_buffer *base = &self->head->base;\n            if (self->head->flags & ND_OWN_ARRAYS) {\n                PyMem_XFree(base->shape);\n                PyMem_XFree(base->strides);\n                PyMem_XFree(base->suboffsets);\n            }\n            PyBuffer_Release(base);\n        }\n        else {\n            while (self->head)\n                ndbuf_pop(self);\n        }\n    }\n    PyObject_Free(self);\n}\n\nstatic int\nndarray_init_staticbuf(PyObject *exporter, NDArrayObject *nd, int flags)\n{\n    Py_buffer *base = &nd->staticbuf.base;\n\n    if (PyObject_GetBuffer(exporter, base, flags) < 0)\n        return -1;\n\n    nd->head = &nd->staticbuf;\n\n    nd->head->next = NULL;\n    nd->head->prev = NULL;\n    nd->head->len = -1;\n    nd->head->offset = -1;\n    nd->head->data = NULL;\n\n    nd->head->flags = base->readonly ? 0 : ND_WRITABLE;\n    nd->head->exports = 0;\n\n    return 0;\n}\n\nstatic void\ninit_flags(ndbuf_t *ndbuf)\n{\n    if (ndbuf->base.ndim == 0)\n        ndbuf->flags |= ND_SCALAR;\n    if (ndbuf->base.suboffsets)\n        ndbuf->flags |= ND_PIL;\n    if (PyBuffer_IsContiguous(&ndbuf->base, 'C'))\n        ndbuf->flags |= ND_C;\n    if (PyBuffer_IsContiguous(&ndbuf->base, 'F'))\n        ndbuf->flags |= ND_FORTRAN;\n}\n\n\n/****************************************************************************/\n/*                          Buffer/List conversions                         */\n/****************************************************************************/\n\nstatic Py_ssize_t *strides_from_shape(const ndbuf_t *, int flags);\n\n/* Get number of members in a struct: see issue #12740 */\ntypedef struct {\n    PyObject_HEAD\n    Py_ssize_t s_size;\n    Py_ssize_t s_len;\n} PyPartialStructObject;\n\nstatic Py_ssize_t\nget_nmemb(PyObject *s)\n{\n    return ((PyPartialStructObject *)s)->s_len;\n}\n\n/* Pack all items into the buffer of 'obj'. The 'format' parameter must be\n   in struct module syntax. For standard C types, a single item is an integer.\n   For compound types, a single item is a tuple of integers. */\nstatic int\npack_from_list(PyObject *obj, PyObject *items, PyObject *format,\n               Py_ssize_t itemsize)\n{\n    PyObject *structobj, *pack_into;\n    PyObject *args, *offset;\n    PyObject *item, *tmp;\n    Py_ssize_t nitems; /* number of items */\n    Py_ssize_t nmemb;  /* number of members in a single item */\n    Py_ssize_t i, j;\n    int ret = 0;\n\n    assert(PyObject_CheckBuffer(obj));\n    assert(PyList_Check(items) || PyTuple_Check(items));\n\n    structobj = PyObject_CallFunctionObjArgs(Struct, format, NULL);\n    if (structobj == NULL)\n        return -1;\n\n    nitems = PySequence_Fast_GET_SIZE(items);\n    nmemb = get_nmemb(structobj);\n    assert(nmemb >= 1);\n\n    pack_into = PyObject_GetAttrString(structobj, \"pack_into\");\n    if (pack_into == NULL) {\n        Py_DECREF(structobj);\n        return -1;\n    }\n\n    /* nmemb >= 1 */\n    args = PyTuple_New(2 + nmemb);\n    if (args == NULL) {\n        Py_DECREF(pack_into);\n        Py_DECREF(structobj);\n        return -1;\n    }\n\n    offset = NULL;\n    for (i = 0; i < nitems; i++) {\n        /* Loop invariant: args[j] are borrowed references or NULL. */\n        PyTuple_SET_ITEM(args, 0, obj);\n        for (j = 1; j < 2+nmemb; j++)\n            PyTuple_SET_ITEM(args, j, NULL);\n\n        Py_XDECREF(offset);\n        offset = PyLong_FromSsize_t(i*itemsize);\n        if (offset == NULL) {\n            ret = -1;\n            break;\n        }\n        PyTuple_SET_ITEM(args, 1, offset);\n\n        item = PySequence_Fast_GET_ITEM(items, i);\n        if ((PyBytes_Check(item) || PyLong_Check(item) ||\n             PyFloat_Check(item)) && nmemb == 1) {\n            PyTuple_SET_ITEM(args, 2, item);\n        }\n        else if ((PyList_Check(item) || PyTuple_Check(item)) &&\n                 PySequence_Length(item) == nmemb) {\n            for (j = 0; j < nmemb; j++) {\n                tmp = PySequence_Fast_GET_ITEM(item, j);\n                PyTuple_SET_ITEM(args, 2+j, tmp);\n            }\n        }\n        else {\n            PyErr_SetString(PyExc_ValueError,\n                \"mismatch between initializer element and format string\");\n            ret = -1;\n            break;\n        }\n\n        tmp = PyObject_CallObject(pack_into, args);\n        if (tmp == NULL) {\n            ret = -1;\n            break;\n        }\n        Py_DECREF(tmp);\n    }\n\n    Py_INCREF(obj); /* args[0] */\n    /* args[1]: offset is either NULL or should be dealloc'd */\n    for (i = 2; i < 2+nmemb; i++) {\n        tmp = PyTuple_GET_ITEM(args, i);\n        Py_XINCREF(tmp);\n    }\n    Py_DECREF(args);\n\n    Py_DECREF(pack_into);\n    Py_DECREF(structobj);\n    return ret;\n\n}\n\n/* Pack single element */\nstatic int\npack_single(char *ptr, PyObject *item, const char *fmt, Py_ssize_t itemsize)\n{\n    PyObject *structobj = NULL, *pack_into = NULL, *args = NULL;\n    PyObject *format = NULL, *mview = NULL, *zero = NULL;\n    Py_ssize_t i, nmemb;\n    int ret = -1;\n    PyObject *x;\n\n    if (fmt == NULL) fmt = \"B\";\n\n    format = PyUnicode_FromString(fmt);\n    if (format == NULL)\n        goto out;\n\n    structobj = PyObject_CallFunctionObjArgs(Struct, format, NULL);\n    if (structobj == NULL)\n        goto out;\n\n    nmemb = get_nmemb(structobj);\n    assert(nmemb >= 1);\n\n    mview = PyMemoryView_FromMemory(ptr, itemsize, PyBUF_WRITE);\n    if (mview == NULL)\n        goto out;\n\n    zero = PyLong_FromLong(0);\n    if (zero == NULL)\n        goto out;\n\n    pack_into = PyObject_GetAttrString(structobj, \"pack_into\");\n    if (pack_into == NULL)\n        goto out;\n\n    args = PyTuple_New(2+nmemb);\n    if (args == NULL)\n        goto out;\n\n    PyTuple_SET_ITEM(args, 0, mview);\n    PyTuple_SET_ITEM(args, 1, zero);\n\n    if ((PyBytes_Check(item) || PyLong_Check(item) ||\n         PyFloat_Check(item)) && nmemb == 1) {\n         PyTuple_SET_ITEM(args, 2, item);\n    }\n    else if ((PyList_Check(item) || PyTuple_Check(item)) &&\n             PySequence_Length(item) == nmemb) {\n        for (i = 0; i < nmemb; i++) {\n            x = PySequence_Fast_GET_ITEM(item, i);\n            PyTuple_SET_ITEM(args, 2+i, x);\n        }\n    }\n    else {\n        PyErr_SetString(PyExc_ValueError,\n            \"mismatch between initializer element and format string\");\n        goto args_out;\n    }\n\n    x = PyObject_CallObject(pack_into, args);\n    if (x != NULL) {\n        Py_DECREF(x);\n        ret = 0;\n    }\n\n\nargs_out:\n    for (i = 0; i < 2+nmemb; i++)\n        Py_XINCREF(PyTuple_GET_ITEM(args, i));\n    Py_XDECREF(args);\nout:\n    Py_XDECREF(pack_into);\n    Py_XDECREF(zero);\n    Py_XDECREF(mview);\n    Py_XDECREF(structobj);\n    Py_XDECREF(format);\n    return ret;\n}\n\nstatic void\ncopy_rec(const Py_ssize_t *shape, Py_ssize_t ndim, Py_ssize_t itemsize,\n         char *dptr, const Py_ssize_t *dstrides, const Py_ssize_t *dsuboffsets,\n         char *sptr, const Py_ssize_t *sstrides, const Py_ssize_t *ssuboffsets,\n         char *mem)\n{\n    Py_ssize_t i;\n\n    assert(ndim >= 1);\n\n    if (ndim == 1) {\n        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n            dstrides[0] == itemsize && sstrides[0] == itemsize) {\n            memmove(dptr, sptr, shape[0] * itemsize);\n        }\n        else {\n            char *p;\n            assert(mem != NULL);\n            for (i=0, p=mem; i<shape[0]; p+=itemsize, sptr+=sstrides[0], i++) {\n                char *xsptr = ADJUST_PTR(sptr, ssuboffsets);\n                memcpy(p, xsptr, itemsize);\n            }\n            for (i=0, p=mem; i<shape[0]; p+=itemsize, dptr+=dstrides[0], i++) {\n                char *xdptr = ADJUST_PTR(dptr, dsuboffsets);\n                memcpy(xdptr, p, itemsize);\n            }\n        }\n        return;\n    }\n\n    for (i = 0; i < shape[0]; dptr+=dstrides[0], sptr+=sstrides[0], i++) {\n        char *xdptr = ADJUST_PTR(dptr, dsuboffsets);\n        char *xsptr = ADJUST_PTR(sptr, ssuboffsets);\n\n        copy_rec(shape+1, ndim-1, itemsize,\n                 xdptr, dstrides+1, dsuboffsets ? dsuboffsets+1 : NULL,\n                 xsptr, sstrides+1, ssuboffsets ? ssuboffsets+1 : NULL,\n                 mem);\n    }\n}\n\nstatic int\ncmp_structure(Py_buffer *dest, Py_buffer *src)\n{\n    Py_ssize_t i;\n\n    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n        dest->itemsize != src->itemsize ||\n        dest->ndim != src->ndim)\n        return -1;\n\n    for (i = 0; i < dest->ndim; i++) {\n        if (dest->shape[i] != src->shape[i])\n            return -1;\n        if (dest->shape[i] == 0)\n            break;\n    }\n\n    return 0;\n}\n\n/* Copy src to dest. Both buffers must have the same format, itemsize,\n   ndim and shape. Copying is atomic, the function never fails with\n   a partial copy. */\nstatic int\ncopy_buffer(Py_buffer *dest, Py_buffer *src)\n{\n    char *mem = NULL;\n\n    assert(dest->ndim > 0);\n\n    if (cmp_structure(dest, src) < 0) {\n        PyErr_SetString(PyExc_ValueError,\n            \"ndarray assignment: lvalue and rvalue have different structures\");\n        return -1;\n    }\n\n    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n        (src->suboffsets && src->suboffsets[src->ndim-1] >= 0) ||\n        dest->strides[dest->ndim-1] != dest->itemsize ||\n        src->strides[src->ndim-1] != src->itemsize) {\n        mem = PyMem_Malloc(dest->shape[dest->ndim-1] * dest->itemsize);\n        if (mem == NULL) {\n            PyErr_NoMemory();\n            return -1;\n        }\n    }\n\n    copy_rec(dest->shape, dest->ndim, dest->itemsize,\n             dest->buf, dest->strides, dest->suboffsets,\n             src->buf, src->strides, src->suboffsets,\n             mem);\n\n    PyMem_XFree(mem);\n    return 0;\n}\n\n\n/* Unpack single element */\nstatic PyObject *\nunpack_single(char *ptr, const char *fmt, Py_ssize_t itemsize)\n{\n    PyObject *x, *unpack_from, *mview;\n\n    if (fmt == NULL) {\n        fmt = \"B\";\n        itemsize = 1;\n    }\n\n    unpack_from = PyObject_GetAttrString(structmodule, \"unpack_from\");\n    if (unpack_from == NULL)\n        return NULL;\n\n    mview = PyMemoryView_FromMemory(ptr, itemsize, PyBUF_READ);\n    if (mview == NULL) {\n        Py_DECREF(unpack_from);\n        return NULL;\n    }\n\n    x = PyObject_CallFunction(unpack_from, \"sO\", fmt, mview);\n    Py_DECREF(unpack_from);\n    Py_DECREF(mview);\n    if (x == NULL)\n        return NULL;\n\n    if (PyTuple_GET_SIZE(x) == 1) {\n        PyObject *tmp = PyTuple_GET_ITEM(x, 0);\n        Py_INCREF(tmp);\n        Py_DECREF(x);\n        return tmp;\n    }\n\n    return x;\n}\n\n/* Unpack a multi-dimensional matrix into a nested list. Return a scalar\n   for ndim = 0. */\nstatic PyObject *\nunpack_rec(PyObject *unpack_from, char *ptr, PyObject *mview, char *item,\n           const Py_ssize_t *shape, const Py_ssize_t *strides,\n           const Py_ssize_t *suboffsets, Py_ssize_t ndim, Py_ssize_t itemsize)\n{\n    PyObject *lst, *x;\n    Py_ssize_t i;\n\n    assert(ndim >= 0);\n    assert(shape != NULL);\n    assert(strides != NULL);\n\n    if (ndim == 0) {\n        memcpy(item, ptr, itemsize);\n        x = PyObject_CallFunctionObjArgs(unpack_from, mview, NULL);\n        if (x == NULL)\n            return NULL;\n        if (PyTuple_GET_SIZE(x) == 1) {\n            PyObject *tmp = PyTuple_GET_ITEM(x, 0);\n            Py_INCREF(tmp);\n            Py_DECREF(x);\n            return tmp;\n        }\n        return x;\n    }\n\n    lst = PyList_New(shape[0]);\n    if (lst == NULL)\n        return NULL;\n\n    for (i = 0; i < shape[0]; ptr+=strides[0], i++) {\n        char *nextptr = ADJUST_PTR(ptr, suboffsets);\n\n        x = unpack_rec(unpack_from, nextptr, mview, item,\n                       shape+1, strides+1, suboffsets ? suboffsets+1 : NULL,\n                       ndim-1, itemsize);\n        if (x == NULL) {\n            Py_DECREF(lst);\n            return NULL;\n        }\n\n        PyList_SET_ITEM(lst, i, x);\n    }\n\n    return lst;\n}\n\n\nstatic PyObject *\nndarray_as_list(NDArrayObject *nd)\n{\n    PyObject *structobj = NULL, *unpack_from = NULL;\n    PyObject *lst = NULL, *mview = NULL;\n    Py_buffer *base = &nd->head->base;\n    Py_ssize_t *shape = base->shape;\n    Py_ssize_t *strides = base->strides;\n    Py_ssize_t simple_shape[1];\n    Py_ssize_t simple_strides[1];\n    char *item = NULL;\n    PyObject *format;\n    char *fmt = base->format;\n\n    base = &nd->head->base;\n\n    if (fmt == NULL) {\n        PyErr_SetString(PyExc_ValueError,\n            \"ndarray: tolist() does not support format=NULL, use \"\n            \"tobytes()\");\n        return NULL;\n    }\n    if (shape == NULL) {\n        assert(ND_C_CONTIGUOUS(nd->head->flags));\n        assert(base->strides == NULL);\n        assert(base->ndim <= 1);\n        shape = simple_shape;\n        shape[0] = base->len;\n        strides = simple_strides;\n        strides[0] = base->itemsize;\n    }\n    else if (strides == NULL) {\n        assert(ND_C_CONTIGUOUS(nd->head->flags));\n        strides = strides_from_shape(nd->head, 0);\n        if (strides == NULL)\n            return NULL;\n    }\n\n    format = PyUnicode_FromString(fmt);\n    if (format == NULL)\n        goto out;\n\n    structobj = PyObject_CallFunctionObjArgs(Struct, format, NULL);\n    Py_DECREF(format);\n    if (structobj == NULL)\n        goto out;\n\n    unpack_from = PyObject_GetAttrString(structobj, \"unpack_from\");\n    if (unpack_from == NULL)\n        goto out;\n\n    item = PyMem_Malloc(base->itemsize);\n    if (item == NULL) {\n        PyErr_NoMemory();\n        goto out;\n    }\n\n    mview = PyMemoryView_FromMemory(item, base->itemsize, PyBUF_WRITE);\n    if (mview == NULL)\n        goto out;\n\n    lst = unpack_rec(unpack_from, base->buf, mview, item,\n                     shape, strides, base->suboffsets,\n                     base->ndim, base->itemsize);\n\nout:\n    Py_XDECREF(mview);\n    PyMem_XFree(item);\n    Py_XDECREF(unpack_from);\n    Py_XDECREF(structobj);\n    if (strides != base->strides && strides != simple_strides)\n        PyMem_XFree(strides);\n\n    return lst;\n}\n\n\n/****************************************************************************/\n/*                            Initialize ndbuf                              */\n/****************************************************************************/\n\n/*\n   State of a new ndbuf during initialization. 'OK' means that initialization\n   is complete. 'PTR' means that a pointer has been initialized, but the\n   state of the memory is still undefined and ndbuf->offset is disregarded.\n\n  +-----------------+-----------+-------------+----------------+\n  |                 | ndbuf_new | init_simple | init_structure |\n  +-----------------+-----------+-------------+----------------+\n  | next            | OK (NULL) |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | prev            | OK (NULL) |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | len             |    OK     |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | offset          |    OK     |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | data            |    PTR    |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | flags           |    user   |    user     |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | exports         |   OK (0)  |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.obj        | OK (NULL) |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.buf        |    PTR    |     PTR     |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.len        | len(data) |  len(data)  |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.itemsize   |     1     |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.readonly   |     0     |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.format     |    NULL   |     OK      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.ndim       |     1     |      1      |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.shape      |    NULL   |    NULL     |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.strides    |    NULL   |    NULL     |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.suboffsets |    NULL   |    NULL     |       OK       |\n  +-----------------+-----------+-------------+----------------+\n  | base.internal   |    OK     |    OK       |       OK       |\n  +-----------------+-----------+-------------+----------------+\n\n*/\n\nstatic Py_ssize_t\nget_itemsize(PyObject *format)\n{\n    PyObject *tmp;\n    Py_ssize_t itemsize;\n\n    tmp = PyObject_CallFunctionObjArgs(calcsize, format, NULL);\n    if (tmp == NULL)\n        return -1;\n    itemsize = PyLong_AsSsize_t(tmp);\n    Py_DECREF(tmp);\n\n    return itemsize;\n}\n\nstatic char *\nget_format(PyObject *format)\n{\n    PyObject *tmp;\n    char *fmt;\n\n    tmp = PyUnicode_AsASCIIString(format);\n    if (tmp == NULL)\n        return NULL;\n    fmt = PyMem_Malloc(PyBytes_GET_SIZE(tmp)+1);\n    if (fmt == NULL) {\n        PyErr_NoMemory();\n        Py_DECREF(tmp);\n        return NULL;\n    }\n    strcpy(fmt, PyBytes_AS_STRING(tmp));\n    Py_DECREF(tmp);\n\n    return fmt;\n}\n\nstatic int\ninit_simple(ndbuf_t *ndbuf, PyObject *items, PyObject *format,\n            Py_ssize_t itemsize)\n{\n    PyObject *mview;\n    Py_buffer *base = &ndbuf->base;\n    int ret;\n\n    mview = PyMemoryView_FromBuffer(base);\n    if (mview == NULL)\n        return -1;\n\n    ret = pack_from_list(mview, items, format, itemsize);\n    Py_DECREF(mview);\n    if (ret < 0)\n        return -1;\n\n    base->readonly = !(ndbuf->flags & ND_WRITABLE);\n    base->itemsize = itemsize;\n    base->format = get_format(format);\n    if (base->format == NULL)\n        return -1;\n\n    return 0;\n}\n\nstatic Py_ssize_t *\nseq_as_ssize_array(PyObject *seq, Py_ssize_t len, int is_shape)\n{\n    Py_ssize_t *dest;\n    Py_ssize_t x, i;\n\n    /* ndim = len <= ND_MAX_NDIM, so PyMem_New() is actually not needed. */\n    dest = PyMem_New(Py_ssize_t, len);\n    if (dest == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    for (i = 0; i < len; i++) {\n        PyObject *tmp = PySequence_Fast_GET_ITEM(seq, i);\n        if (!PyLong_Check(tmp)) {\n            PyErr_Format(PyExc_ValueError,\n                \"elements of %s must be integers\",\n                is_shape ? \"shape\" : \"strides\");\n            PyMem_Free(dest);\n            return NULL;\n        }\n        x = PyLong_AsSsize_t(tmp);\n        if (PyErr_Occurred()) {\n            PyMem_Free(dest);\n            return NULL;\n        }\n        if (is_shape && x < 0) {\n            PyErr_Format(PyExc_ValueError,\n                \"elements of shape must be integers >= 0\");\n            PyMem_Free(dest);\n            return NULL;\n        }\n        dest[i] = x;\n    }\n\n    return dest;\n}\n\nstatic Py_ssize_t *\nstrides_from_shape(const ndbuf_t *ndbuf, int flags)\n{\n    const Py_buffer *base = &ndbuf->base;\n    Py_ssize_t *s, i;\n\n    s = PyMem_Malloc(base->ndim * (sizeof *s));\n    if (s == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    if (flags & ND_FORTRAN) {\n        s[0] = base->itemsize;\n        for (i = 1; i < base->ndim; i++)\n            s[i] = s[i-1] * base->shape[i-1];\n    }\n    else {\n        s[base->ndim-1] = base->itemsize;\n        for (i = base->ndim-2; i >= 0; i--)\n            s[i] = s[i+1] * base->shape[i+1];\n    }\n\n    return s;\n}\n\n/* Bounds check:\n\n     len := complete length of allocated memory\n     offset := start of the array\n\n     A single array element is indexed by:\n\n       i = indices[0] * strides[0] + indices[1] * strides[1] + ...\n\n     imin is reached when all indices[n] combined with positive strides are 0\n     and all indices combined with negative strides are shape[n]-1, which is\n     the maximum index for the nth dimension.\n\n     imax is reached when all indices[n] combined with negative strides are 0\n     and all indices combined with positive strides are shape[n]-1.\n*/\nstatic int\nverify_structure(Py_ssize_t len, Py_ssize_t itemsize, Py_ssize_t offset,\n                 const Py_ssize_t *shape, const Py_ssize_t *strides,\n                 Py_ssize_t ndim)\n{\n    Py_ssize_t imin, imax;\n    Py_ssize_t n;\n\n    assert(ndim >= 0);\n\n    if (ndim == 0 && (offset < 0 || offset+itemsize > len))\n        goto invalid_combination;\n\n    for (n = 0; n < ndim; n++)\n        if (strides[n] % itemsize) {\n            PyErr_SetString(PyExc_ValueError,\n            \"strides must be a multiple of itemsize\");\n            return -1;\n        }\n\n    for (n = 0; n < ndim; n++)\n        if (shape[n] == 0)\n            return 0;\n\n    imin = imax = 0;\n    for (n = 0; n < ndim; n++)\n        if (strides[n] <= 0)\n            imin += (shape[n]-1) * strides[n];\n        else\n            imax += (shape[n]-1) * strides[n];\n\n    if (imin + offset < 0 || imax + offset + itemsize > len)\n        goto invalid_combination;\n\n    return 0;\n\n\ninvalid_combination:\n    PyErr_SetString(PyExc_ValueError,\n        \"invalid combination of buffer, shape and strides\");\n    return -1;\n}\n\n/*\n   Convert a NumPy-style array to an array using suboffsets to stride in\n   the first dimension. Requirements: ndim > 0.\n\n   Contiguous example\n   ==================\n\n     Input:\n     ------\n       shape      = {2, 2, 3};\n       strides    = {6, 3, 1};\n       suboffsets = NULL;\n       data       = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n       buf        = &data[0]\n\n     Output:\n     -------\n       shape      = {2, 2, 3};\n       strides    = {sizeof(char *), 3, 1};\n       suboffsets = {0, -1, -1};\n       data       = {p1, p2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n                     |   |   ^                 ^\n                     `---'---'                 |\n                         |                     |\n                         `---------------------'\n       buf        = &data[0]\n\n     So, in the example the input resembles the three-dimensional array\n     char v[2][2][3], while the output resembles an array of two pointers\n     to two-dimensional arrays: char (*v[2])[2][3].\n\n\n   Non-contiguous example:\n   =======================\n\n     Input (with offset and negative strides):\n     -----------------------------------------\n       shape      = {2, 2, 3};\n       strides    = {-6, 3, -1};\n       offset     = 8\n       suboffsets = NULL;\n       data       = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n\n     Output:\n     -------\n       shape      = {2, 2, 3};\n       strides    = {-sizeof(char *), 3, -1};\n       suboffsets = {2, -1, -1};\n       newdata    = {p1, p2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\n                     |   |   ^     ^           ^     ^\n                     `---'---'     |           |     `- p2+suboffsets[0]\n                         |         `-----------|--- p1+suboffsets[0]\n                         `---------------------'\n       buf        = &newdata[1]  # striding backwards over the pointers.\n\n     suboffsets[0] is the same as the offset that one would specify if\n     the two {2, 3} subarrays were created directly, hence the name.\n*/\nstatic int\ninit_suboffsets(ndbuf_t *ndbuf)\n{\n    Py_buffer *base = &ndbuf->base;\n    Py_ssize_t start, step;\n    Py_ssize_t imin, suboffset0;\n    Py_ssize_t addsize;\n    Py_ssize_t n;\n    char *data;\n\n    assert(base->ndim > 0);\n    assert(base->suboffsets == NULL);\n\n    /* Allocate new data with additional space for shape[0] pointers. */\n    addsize = base->shape[0] * (sizeof (char *));\n\n    /* Align array start to a multiple of 8. */\n    addsize = 8 * ((addsize + 7) / 8);\n\n    data = PyMem_Malloc(ndbuf->len + addsize);\n    if (data == NULL) {\n        PyErr_NoMemory();\n        return -1;\n    }\n\n    memcpy(data + addsize, ndbuf->data, ndbuf->len);\n\n    PyMem_Free(ndbuf->data);\n    ndbuf->data = data;\n    ndbuf->len += addsize;\n    base->buf = ndbuf->data;\n\n    /* imin: minimum index of the input array relative to ndbuf->offset.\n       suboffset0: offset for each sub-array of the output. This is the\n                   same as calculating -imin' for a sub-array of ndim-1. */\n    imin = suboffset0 = 0;\n    for (n = 0; n < base->ndim; n++) {\n        if (base->shape[n] == 0)\n            break;\n        if (base->strides[n] <= 0) {\n            Py_ssize_t x = (base->shape[n]-1) * base->strides[n];\n            imin += x;\n            suboffset0 += (n >= 1) ? -x : 0;\n        }\n    }\n\n    /* Initialize the array of pointers to the sub-arrays. */\n    start = addsize + ndbuf->offset + imin;\n    step = base->strides[0] < 0 ? -base->strides[0] : base->strides[0];\n\n    for (n = 0; n < base->shape[0]; n++)\n        ((char **)base->buf)[n] = (char *)base->buf + start + n*step;\n\n    /* Initialize suboffsets. */\n    base->suboffsets = PyMem_Malloc(base->ndim * (sizeof *base->suboffsets));\n    if (base->suboffsets == NULL) {\n        PyErr_NoMemory();\n        return -1;\n    }\n    base->suboffsets[0] = suboffset0;\n    for (n = 1; n < base->ndim; n++)\n        base->suboffsets[n] = -1;\n\n    /* Adjust strides for the first (zeroth) dimension. */\n    if (base->strides[0] >= 0) {\n        base->strides[0] = sizeof(char *);\n    }\n    else {\n        /* Striding backwards. */\n        base->strides[0] = -(Py_ssize_t)sizeof(char *);\n        if (base->shape[0] > 0)\n            base->buf = (char *)base->buf + (base->shape[0]-1) * sizeof(char *);\n    }\n\n    ndbuf->flags &= ~(ND_C|ND_FORTRAN);\n    ndbuf->offset = 0;\n    return 0;\n}\n\nstatic void\ninit_len(Py_buffer *base)\n{\n    Py_ssize_t i;\n\n    base->len = 1;\n    for (i = 0; i < base->ndim; i++)\n        base->len *= base->shape[i];\n    base->len *= base->itemsize;\n}\n\nstatic int\ninit_structure(ndbuf_t *ndbuf, PyObject *shape, PyObject *strides,\n               Py_ssize_t ndim)\n{\n    Py_buffer *base = &ndbuf->base;\n\n    base->ndim = (int)ndim;\n    if (ndim == 0) {\n        if (ndbuf->flags & ND_PIL) {\n            PyErr_SetString(PyExc_TypeError,\n                \"ndim = 0 cannot be used in conjunction with ND_PIL\");\n            return -1;\n        }\n        ndbuf->flags |= (ND_SCALAR|ND_C|ND_FORTRAN);\n        return 0;\n    }\n\n    /* shape */\n    base->shape = seq_as_ssize_array(shape, ndim, 1);\n    if (base->shape == NULL)\n        return -1;\n\n    /* strides */\n    if (strides) {\n        base->strides = seq_as_ssize_array(strides, ndim, 0);\n    }\n    else {\n        base->strides = strides_from_shape(ndbuf, ndbuf->flags);\n    }\n    if (base->strides == NULL)\n        return -1;\n    if (verify_structure(base->len, base->itemsize, ndbuf->offset,\n                         base->shape, base->strides, ndim) < 0)\n        return -1;\n\n    /* buf */\n    base->buf = ndbuf->data + ndbuf->offset;\n\n    /* len */\n    init_len(base);\n\n    /* ndbuf->flags */\n    if (PyBuffer_IsContiguous(base, 'C'))\n        ndbuf->flags |= ND_C;\n    if (PyBuffer_IsContiguous(base, 'F'))\n        ndbuf->flags |= ND_FORTRAN;\n\n\n    /* convert numpy array to suboffset representation */\n    if (ndbuf->flags & ND_PIL) {\n        /* modifies base->buf, base->strides and base->suboffsets **/\n        return init_suboffsets(ndbuf);\n    }\n\n    return 0;\n}\n\nstatic ndbuf_t *\ninit_ndbuf(PyObject *items, PyObject *shape, PyObject *strides,\n           Py_ssize_t offset, PyObject *format, int flags)\n{\n    ndbuf_t *ndbuf;\n    Py_ssize_t ndim;\n    Py_ssize_t nitems;\n    Py_ssize_t itemsize;\n\n    /* ndim = len(shape) */\n    CHECK_LIST_OR_TUPLE(shape)\n    ndim = PySequence_Fast_GET_SIZE(shape);\n    if (ndim > ND_MAX_NDIM) {\n        PyErr_Format(PyExc_ValueError,\n            \"ndim must not exceed %d\", ND_MAX_NDIM);\n        return NULL;\n    }\n\n    /* len(strides) = len(shape) */\n    if (strides) {\n        CHECK_LIST_OR_TUPLE(strides)\n        if (PySequence_Fast_GET_SIZE(strides) == 0)\n            strides = NULL;\n        else if (flags & ND_FORTRAN) {\n            PyErr_SetString(PyExc_TypeError,\n                \"ND_FORTRAN cannot be used together with strides\");\n            return NULL;\n        }\n        else if (PySequence_Fast_GET_SIZE(strides) != ndim) {\n            PyErr_SetString(PyExc_ValueError,\n                \"len(shape) != len(strides)\");\n            return NULL;\n        }\n    }\n\n    /* itemsize */\n    itemsize = get_itemsize(format);\n    if (itemsize <= 0) {\n        if (itemsize == 0) {\n            PyErr_SetString(PyExc_ValueError,\n                \"itemsize must not be zero\");\n        }\n        return NULL;\n    }\n\n    /* convert scalar to list */\n    if (ndim == 0) {\n        items = PyTuple_Pack(1, items);\n        if (items == NULL)\n            return NULL;\n    }\n    else {\n        CHECK_LIST_OR_TUPLE(items)\n        Py_INCREF(items);\n    }\n\n    /* number of items */\n    nitems = PySequence_Fast_GET_SIZE(items);\n    if (nitems == 0) {\n        PyErr_SetString(PyExc_ValueError,\n            \"initializer list or tuple must not be empty\");\n        Py_DECREF(items);\n        return NULL;\n    }\n\n    ndbuf = ndbuf_new(nitems, itemsize, offset, flags);\n    if (ndbuf == NULL) {\n        Py_DECREF(items);\n        return NULL;\n    }\n\n\n    if (init_simple(ndbuf, items, format, itemsize) < 0)\n        goto error;\n    if (init_structure(ndbuf, shape, strides, ndim) < 0)\n        goto error;\n\n    Py_DECREF(items);\n    return ndbuf;\n\nerror:\n    Py_DECREF(items);\n    ndbuf_free(ndbuf);\n    return NULL;\n}\n\n/* initialize and push a new base onto the linked list */\nstatic int\nndarray_push_base(NDArrayObject *nd, PyObject *items,\n                  PyObject *shape, PyObject *strides,\n                  Py_ssize_t offset, PyObject *format, int flags)\n{\n    ndbuf_t *ndbuf;\n\n    ndbuf = init_ndbuf(items, shape, strides, offset, format, flags);\n    if (ndbuf == NULL)\n        return -1;\n\n    ndbuf_push(nd, ndbuf);\n    return 0;\n}\n\n#define PyBUF_UNUSED 0x10000\nstatic int\nndarray_init(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    static char *kwlist[] = {\n        \"obj\", \"shape\", \"strides\", \"offset\", \"format\", \"flags\", \"getbuf\", NULL\n    };\n    PyObject *v = NULL;  /* initializer: scalar, list, tuple or base object */\n    PyObject *shape = NULL;   /* size of each dimension */\n    PyObject *strides = NULL; /* number of bytes to the next elt in each dim */\n    Py_ssize_t offset = 0;            /* buffer offset */\n    PyObject *format = simple_format; /* struct module specifier: \"B\" */\n    int flags = ND_DEFAULT;           /* base buffer and ndarray flags */\n\n    int getbuf = PyBUF_UNUSED; /* re-exporter: getbuffer request flags */\n\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"O|OOnOii\", kwlist,\n            &v, &shape, &strides, &offset, &format, &flags, &getbuf))\n        return -1;\n\n    /* NDArrayObject is re-exporter */\n    if (PyObject_CheckBuffer(v) && shape == NULL) {\n        if (strides || offset || format != simple_format ||\n            !(flags == ND_DEFAULT || flags == ND_REDIRECT)) {\n            PyErr_SetString(PyExc_TypeError,\n               \"construction from exporter object only takes 'obj', 'getbuf' \"\n               \"and 'flags' arguments\");\n            return -1;\n        }\n\n        getbuf = (getbuf == PyBUF_UNUSED) ? PyBUF_FULL_RO : getbuf;\n\n        if (ndarray_init_staticbuf(v, nd, getbuf) < 0)\n            return -1;\n\n        init_flags(nd->head);\n        nd->head->flags |= flags;\n\n        return 0;\n    }\n\n    /* NDArrayObject is the original base object. */\n    if (getbuf != PyBUF_UNUSED) {\n        PyErr_SetString(PyExc_TypeError,\n            \"getbuf argument only valid for construction from exporter \"\n            \"object\");\n        return -1;\n    }\n    if (shape == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n            \"shape is a required argument when constructing from \"\n            \"list, tuple or scalar\");\n        return -1;\n    }\n\n    if (flags & ND_VAREXPORT) {\n        nd->flags |= ND_VAREXPORT;\n        flags &= ~ND_VAREXPORT;\n    }\n\n    /* Initialize and push the first base buffer onto the linked list. */\n    return ndarray_push_base(nd, v, shape, strides, offset, format, flags);\n}\n\n/* Push an additional base onto the linked list. */\nstatic PyObject *\nndarray_push(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    static char *kwlist[] = {\n        \"items\", \"shape\", \"strides\", \"offset\", \"format\", \"flags\", NULL\n    };\n    PyObject *items = NULL;   /* initializer: scalar, list or tuple */\n    PyObject *shape = NULL;   /* size of each dimension */\n    PyObject *strides = NULL; /* number of bytes to the next elt in each dim */\n    PyObject *format = simple_format;  /* struct module specifier: \"B\" */\n    Py_ssize_t offset = 0;             /* buffer offset */\n    int flags = ND_DEFAULT;            /* base buffer flags */\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"OO|OnOi\", kwlist,\n            &items, &shape, &strides, &offset, &format, &flags))\n        return NULL;\n\n    if (flags & ND_VAREXPORT) {\n        PyErr_SetString(PyExc_ValueError,\n            \"ND_VAREXPORT flag can only be used during object creation\");\n        return NULL;\n    }\n    if (ND_IS_CONSUMER(nd)) {\n        PyErr_SetString(PyExc_BufferError,\n            \"structure of re-exporting object is immutable\");\n        return NULL;\n    }\n    if (!(nd->flags&ND_VAREXPORT) && nd->head->exports > 0) {\n        PyErr_Format(PyExc_BufferError,\n            \"cannot change structure: %zd exported buffer%s\",\n            nd->head->exports, nd->head->exports==1 ? \"\" : \"s\");\n        return NULL;\n    }\n\n    if (ndarray_push_base(nd, items, shape, strides,\n                          offset, format, flags) < 0)\n        return NULL;\n    Py_RETURN_NONE;\n}\n\n/* Pop a base from the linked list (if possible). */\nstatic PyObject *\nndarray_pop(PyObject *self, PyObject *dummy)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    if (ND_IS_CONSUMER(nd)) {\n        PyErr_SetString(PyExc_BufferError,\n            \"structure of re-exporting object is immutable\");\n        return NULL;\n    }\n    if (nd->head->exports > 0) {\n        PyErr_Format(PyExc_BufferError,\n            \"cannot change structure: %zd exported buffer%s\",\n            nd->head->exports, nd->head->exports==1 ? \"\" : \"s\");\n        return NULL;\n    }\n    if (nd->head->next == NULL) {\n        PyErr_SetString(PyExc_BufferError,\n            \"list only has a single base\");\n        return NULL;\n    }\n\n    ndbuf_pop(nd);\n    Py_RETURN_NONE;\n}\n\n/**************************************************************************/\n/*                               getbuffer                                */\n/**************************************************************************/\n\nstatic int\nndarray_getbuf(NDArrayObject *self, Py_buffer *view, int flags)\n{\n    ndbuf_t *ndbuf = self->head;\n    Py_buffer *base = &ndbuf->base;\n    int baseflags = ndbuf->flags;\n\n    /* redirect mode */\n    if (base->obj != NULL && (baseflags&ND_REDIRECT)) {\n        return PyObject_GetBuffer(base->obj, view, flags);\n    }\n\n    /* start with complete information */\n    *view = *base;\n    view->obj = NULL;\n\n    /* reconstruct format */\n    if (view->format == NULL)\n        view->format = \"B\";\n\n    if (base->ndim != 0 &&\n        ((REQ_SHAPE(flags) && base->shape == NULL) ||\n         (REQ_STRIDES(flags) && base->strides == NULL))) {\n        /* The ndarray is a re-exporter that has been created without full\n           information for testing purposes. In this particular case the\n           ndarray is not a PEP-3118 compliant buffer provider. */\n        PyErr_SetString(PyExc_BufferError,\n            \"re-exporter does not provide format, shape or strides\");\n        return -1;\n    }\n\n    if (baseflags & ND_GETBUF_FAIL) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ND_GETBUF_FAIL: forced test exception\");\n        if (baseflags & ND_GETBUF_UNDEFINED)\n            view->obj = (PyObject *)0x1; /* wrong but permitted in <= 3.2 */\n        return -1;\n    }\n\n    if (REQ_WRITABLE(flags) && base->readonly) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ndarray is not writable\");\n        return -1;\n    }\n    if (!REQ_FORMAT(flags)) {\n        /* NULL indicates that the buffer's data type has been cast to 'B'.\n           view->itemsize is the _previous_ itemsize. If shape is present,\n           the equality product(shape) * itemsize = len still holds at this\n           point. The equality calcsize(format) = itemsize does _not_ hold\n           from here on! */\n        view->format = NULL;\n    }\n\n    if (REQ_C_CONTIGUOUS(flags) && !ND_C_CONTIGUOUS(baseflags)) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ndarray is not C-contiguous\");\n        return -1;\n    }\n    if (REQ_F_CONTIGUOUS(flags) && !ND_FORTRAN_CONTIGUOUS(baseflags)) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ndarray is not Fortran contiguous\");\n        return -1;\n    }\n    if (REQ_ANY_CONTIGUOUS(flags) && !ND_ANY_CONTIGUOUS(baseflags)) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ndarray is not contiguous\");\n        return -1;\n    }\n    if (!REQ_INDIRECT(flags) && (baseflags & ND_PIL)) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ndarray cannot be represented without suboffsets\");\n        return -1;\n    }\n    if (!REQ_STRIDES(flags)) {\n        if (!ND_C_CONTIGUOUS(baseflags)) {\n            PyErr_SetString(PyExc_BufferError,\n                \"ndarray is not C-contiguous\");\n            return -1;\n        }\n        view->strides = NULL;\n    }\n    if (!REQ_SHAPE(flags)) {\n        /* PyBUF_SIMPLE or PyBUF_WRITABLE: at this point buf is C-contiguous,\n           so base->buf = ndbuf->data. */\n        if (view->format != NULL) {\n            /* PyBUF_SIMPLE|PyBUF_FORMAT and PyBUF_WRITABLE|PyBUF_FORMAT do\n               not make sense. */\n            PyErr_Format(PyExc_BufferError,\n                \"ndarray: cannot cast to unsigned bytes if the format flag \"\n                \"is present\");\n            return -1;\n        }\n        /* product(shape) * itemsize = len and calcsize(format) = itemsize\n           do _not_ hold from here on! */\n        view->ndim = 1;\n        view->shape = NULL;\n    }\n\n    /* Ascertain that the new buffer has the same contiguity as the exporter */\n    if (ND_C_CONTIGUOUS(baseflags) != PyBuffer_IsContiguous(view, 'C') ||\n        /* skip cast to 1-d */\n        (view->format != NULL && view->shape != NULL &&\n         ND_FORTRAN_CONTIGUOUS(baseflags) != PyBuffer_IsContiguous(view, 'F')) ||\n        /* cast to 1-d */\n        (view->format == NULL && view->shape == NULL &&\n         !PyBuffer_IsContiguous(view, 'F'))) {\n        PyErr_SetString(PyExc_BufferError,\n            \"ndarray: contiguity mismatch in getbuf()\");\n            return -1;\n    }\n\n    view->obj = Py_NewRef(self);\n    self->head->exports++;\n\n    return 0;\n}\n\nstatic void\nndarray_releasebuf(NDArrayObject *self, Py_buffer *view)\n{\n    if (!ND_IS_CONSUMER(self)) {\n        ndbuf_t *ndbuf = view->internal;\n        if (--ndbuf->exports == 0 && ndbuf != self->head)\n            ndbuf_delete(self, ndbuf);\n    }\n}\n\nstatic PyBufferProcs ndarray_as_buffer = {\n    (getbufferproc)ndarray_getbuf,        /* bf_getbuffer */\n    (releasebufferproc)ndarray_releasebuf /* bf_releasebuffer */\n};\n\n\n/**************************************************************************/\n/*                           indexing/slicing                             */\n/**************************************************************************/\n\nstatic char *\nptr_from_index(Py_buffer *base, Py_ssize_t index)\n{\n    char *ptr;\n    Py_ssize_t nitems; /* items in the first dimension */\n\n    if (base->shape)\n        nitems = base->shape[0];\n    else {\n        assert(base->ndim == 1 && SIMPLE_FORMAT(base->format));\n        nitems = base->len;\n    }\n\n    if (index < 0) {\n        index += nitems;\n    }\n    if (index < 0 || index >= nitems) {\n        PyErr_SetString(PyExc_IndexError, \"index out of bounds\");\n        return NULL;\n    }\n\n    ptr = (char *)base->buf;\n\n    if (base->strides == NULL)\n         ptr += base->itemsize * index;\n    else\n         ptr += base->strides[0] * index;\n\n    ptr = ADJUST_PTR(ptr, base->suboffsets);\n\n    return ptr;\n}\n\nstatic PyObject *\nndarray_item(NDArrayObject *self, Py_ssize_t index)\n{\n    ndbuf_t *ndbuf = self->head;\n    Py_buffer *base = &ndbuf->base;\n    char *ptr;\n\n    if (base->ndim == 0) {\n        PyErr_SetString(PyExc_TypeError, \"invalid indexing of scalar\");\n        return NULL;\n    }\n\n    ptr = ptr_from_index(base, index);\n    if (ptr == NULL)\n        return NULL;\n\n    if (base->ndim == 1) {\n        return unpack_single(ptr, base->format, base->itemsize);\n    }\n    else {\n        NDArrayObject *nd;\n        Py_buffer *subview;\n\n        nd = (NDArrayObject *)ndarray_new(&NDArray_Type, NULL, NULL);\n        if (nd == NULL)\n            return NULL;\n\n        if (ndarray_init_staticbuf((PyObject *)self, nd, PyBUF_FULL_RO) < 0) {\n            Py_DECREF(nd);\n            return NULL;\n        }\n\n        subview = &nd->staticbuf.base;\n\n        subview->buf = ptr;\n        subview->len /= subview->shape[0];\n\n        subview->ndim--;\n        subview->shape++;\n        if (subview->strides) subview->strides++;\n        if (subview->suboffsets) subview->suboffsets++;\n\n        init_flags(&nd->staticbuf);\n\n        return (PyObject *)nd;\n    }\n}\n\n/*\n  For each dimension, we get valid (start, stop, step, slicelength) quadruples\n  from PySlice_GetIndicesEx().\n\n  Slicing NumPy arrays\n  ====================\n\n    A pointer to an element in a NumPy array is defined by:\n\n      ptr = (char *)buf + indices[0] * strides[0] +\n                          ... +\n                          indices[ndim-1] * strides[ndim-1]\n\n    Adjust buf:\n    -----------\n      Adding start[n] for each dimension effectively adds the constant:\n\n        c = start[0] * strides[0] + ... + start[ndim-1] * strides[ndim-1]\n\n      Therefore init_slice() adds all start[n] directly to buf.\n\n    Adjust shape:\n    -------------\n      Obviously shape[n] = slicelength[n]\n\n    Adjust strides:\n    ---------------\n      In the original array, the next element in a dimension is reached\n      by adding strides[n] to the pointer. In the sliced array, elements\n      may be skipped, so the next element is reached by adding:\n\n        strides[n] * step[n]\n\n  Slicing PIL arrays\n  ==================\n\n    Layout:\n    -------\n      In the first (zeroth) dimension, PIL arrays have an array of pointers\n      to sub-arrays of ndim-1. Striding in the first dimension is done by\n      getting the index of the nth pointer, dereference it and then add a\n      suboffset to it. The arrays pointed to can best be seen a regular\n      NumPy arrays.\n\n    Adjust buf:\n    -----------\n      In the original array, buf points to a location (usually the start)\n      in the array of pointers. For the sliced array, start[0] can be\n      added to buf in the same manner as for NumPy arrays.\n\n    Adjust suboffsets:\n    ------------------\n      Due to the dereferencing step in the addressing scheme, it is not\n      possible to adjust buf for higher dimensions. Recall that the\n      sub-arrays pointed to are regular NumPy arrays, so for each of\n      those arrays adding start[n] effectively adds the constant:\n\n        c = start[1] * strides[1] + ... + start[ndim-1] * strides[ndim-1]\n\n      This constant is added to suboffsets[0]. suboffsets[0] in turn is\n      added to each pointer right after dereferencing.\n\n    Adjust shape and strides:\n    -------------------------\n      Shape and strides are not influenced by the dereferencing step, so\n      they are adjusted in the same manner as for NumPy arrays.\n\n  Multiple levels of suboffsets\n  =============================\n\n      For a construct like an array of pointers to array of pointers to\n      sub-arrays of ndim-2:\n\n        suboffsets[0] = start[1] * strides[1]\n        suboffsets[1] = start[2] * strides[2] + ...\n*/\nstatic int\ninit_slice(Py_buffer *base, PyObject *key, int dim)\n{\n    Py_ssize_t start, stop, step, slicelength;\n\n    if (PySlice_Unpack(key, &start, &stop, &step) < 0) {\n        return -1;\n    }\n    slicelength = PySlice_AdjustIndices(base->shape[dim], &start, &stop, step);\n\n\n    if (base->suboffsets == NULL || dim == 0) {\n    adjust_buf:\n        base->buf = (char *)base->buf + base->strides[dim] * start;\n    }\n    else {\n        Py_ssize_t n = dim-1;\n        while (n >= 0 && base->suboffsets[n] < 0)\n            n--;\n        if (n < 0)\n            goto adjust_buf; /* all suboffsets are negative */\n        base->suboffsets[n] = base->suboffsets[n] + base->strides[dim] * start;\n    }\n    base->shape[dim] = slicelength;\n    base->strides[dim] = base->strides[dim] * step;\n\n    return 0;\n}\n\nstatic int\ncopy_structure(Py_buffer *base)\n{\n    Py_ssize_t *shape = NULL, *strides = NULL, *suboffsets = NULL;\n    Py_ssize_t i;\n\n    shape = PyMem_Malloc(base->ndim * (sizeof *shape));\n    strides = PyMem_Malloc(base->ndim * (sizeof *strides));\n    if (shape == NULL || strides == NULL)\n        goto err_nomem;\n\n    suboffsets = NULL;\n    if (base->suboffsets) {\n        suboffsets = PyMem_Malloc(base->ndim * (sizeof *suboffsets));\n        if (suboffsets == NULL)\n            goto err_nomem;\n    }\n\n    for (i = 0; i < base->ndim; i++) {\n        shape[i] = base->shape[i];\n        strides[i] = base->strides[i];\n        if (suboffsets)\n            suboffsets[i] = base->suboffsets[i];\n    }\n\n    base->shape = shape;\n    base->strides = strides;\n    base->suboffsets = suboffsets;\n\n    return 0;\n\nerr_nomem:\n    PyErr_NoMemory();\n    PyMem_XFree(shape);\n    PyMem_XFree(strides);\n    PyMem_XFree(suboffsets);\n    return -1;\n}\n\nstatic PyObject *\nndarray_subscript(NDArrayObject *self, PyObject *key)\n{\n    NDArrayObject *nd;\n    ndbuf_t *ndbuf;\n    Py_buffer *base = &self->head->base;\n\n    if (base->ndim == 0) {\n        if (PyTuple_Check(key) && PyTuple_GET_SIZE(key) == 0) {\n            return unpack_single(base->buf, base->format, base->itemsize);\n        }\n        else if (key == Py_Ellipsis) {\n            return Py_NewRef(self);\n        }\n        else {\n            PyErr_SetString(PyExc_TypeError, \"invalid indexing of scalar\");\n            return NULL;\n        }\n    }\n    if (PyIndex_Check(key)) {\n        Py_ssize_t index = PyLong_AsSsize_t(key);\n        if (index == -1 && PyErr_Occurred())\n            return NULL;\n        return ndarray_item(self, index);\n    }\n\n    nd = (NDArrayObject *)ndarray_new(&NDArray_Type, NULL, NULL);\n    if (nd == NULL)\n        return NULL;\n\n    /* new ndarray is a consumer */\n    if (ndarray_init_staticbuf((PyObject *)self, nd, PyBUF_FULL_RO) < 0) {\n        Py_DECREF(nd);\n        return NULL;\n    }\n\n    /* copy shape, strides and suboffsets */\n    ndbuf = nd->head;\n    base = &ndbuf->base;\n    if (copy_structure(base) < 0) {\n        Py_DECREF(nd);\n        return NULL;\n    }\n    ndbuf->flags |= ND_OWN_ARRAYS;\n\n    if (PySlice_Check(key)) {\n        /* one-dimensional slice */\n        if (init_slice(base, key, 0) < 0)\n            goto err_occurred;\n    }\n    else if (PyTuple_Check(key)) {\n        /* multi-dimensional slice */\n        PyObject *tuple = key;\n        Py_ssize_t i, n;\n\n        n = PyTuple_GET_SIZE(tuple);\n        for (i = 0; i < n; i++) {\n            key = PyTuple_GET_ITEM(tuple, i);\n            if (!PySlice_Check(key))\n                goto type_error;\n            if (init_slice(base, key, (int)i) < 0)\n                goto err_occurred;\n        }\n    }\n    else {\n        goto type_error;\n    }\n\n    init_len(base);\n    init_flags(ndbuf);\n\n    return (PyObject *)nd;\n\n\ntype_error:\n    PyErr_Format(PyExc_TypeError,\n        \"cannot index memory using \\\"%.200s\\\"\",\n        Py_TYPE(key)->tp_name);\nerr_occurred:\n    Py_DECREF(nd);\n    return NULL;\n}\n\n\nstatic int\nndarray_ass_subscript(NDArrayObject *self, PyObject *key, PyObject *value)\n{\n    NDArrayObject *nd;\n    Py_buffer *dest = &self->head->base;\n    Py_buffer src;\n    char *ptr;\n    Py_ssize_t index;\n    int ret = -1;\n\n    if (dest->readonly) {\n        PyErr_SetString(PyExc_TypeError, \"ndarray is not writable\");\n        return -1;\n    }\n    if (value == NULL) {\n        PyErr_SetString(PyExc_TypeError, \"ndarray data cannot be deleted\");\n        return -1;\n    }\n    if (dest->ndim == 0) {\n        if (key == Py_Ellipsis ||\n            (PyTuple_Check(key) && PyTuple_GET_SIZE(key) == 0)) {\n            ptr = (char *)dest->buf;\n            return pack_single(ptr, value, dest->format, dest->itemsize);\n        }\n        else {\n            PyErr_SetString(PyExc_TypeError, \"invalid indexing of scalar\");\n            return -1;\n        }\n    }\n    if (dest->ndim == 1 && PyIndex_Check(key)) {\n        /* rvalue must be a single item */\n        index = PyLong_AsSsize_t(key);\n        if (index == -1 && PyErr_Occurred())\n            return -1;\n        else {\n            ptr = ptr_from_index(dest, index);\n            if (ptr == NULL)\n                return -1;\n        }\n        return pack_single(ptr, value, dest->format, dest->itemsize);\n    }\n\n    /* rvalue must be an exporter */\n    if (PyObject_GetBuffer(value, &src, PyBUF_FULL_RO) == -1)\n        return -1;\n\n    nd = (NDArrayObject *)ndarray_subscript(self, key);\n    if (nd != NULL) {\n        dest = &nd->head->base;\n        ret = copy_buffer(dest, &src);\n        Py_DECREF(nd);\n    }\n\n    PyBuffer_Release(&src);\n    return ret;\n}\n\nstatic PyObject *\nslice_indices(PyObject *self, PyObject *args)\n{\n    PyObject *ret, *key, *tmp;\n    Py_ssize_t s[4]; /* start, stop, step, slicelength */\n    Py_ssize_t i, len;\n\n    if (!PyArg_ParseTuple(args, \"On\", &key, &len)) {\n        return NULL;\n    }\n    if (!PySlice_Check(key)) {\n        PyErr_SetString(PyExc_TypeError,\n            \"first argument must be a slice object\");\n        return NULL;\n    }\n    if (PySlice_Unpack(key, &s[0], &s[1], &s[2]) < 0) {\n        return NULL;\n    }\n    s[3] = PySlice_AdjustIndices(len, &s[0], &s[1], s[2]);\n\n    ret = PyTuple_New(4);\n    if (ret == NULL)\n        return NULL;\n\n    for (i = 0; i < 4; i++) {\n        tmp = PyLong_FromSsize_t(s[i]);\n        if (tmp == NULL)\n            goto error;\n        PyTuple_SET_ITEM(ret, i, tmp);\n    }\n\n    return ret;\n\nerror:\n    Py_DECREF(ret);\n    return NULL;\n}\n\n\nstatic PyMappingMethods ndarray_as_mapping = {\n    NULL,                                 /* mp_length */\n    (binaryfunc)ndarray_subscript,        /* mp_subscript */\n    (objobjargproc)ndarray_ass_subscript  /* mp_ass_subscript */\n};\n\nstatic PySequenceMethods ndarray_as_sequence = {\n        0,                                /* sq_length */\n        0,                                /* sq_concat */\n        0,                                /* sq_repeat */\n        (ssizeargfunc)ndarray_item,       /* sq_item */\n};\n\n\n/**************************************************************************/\n/*                                 getters                                */\n/**************************************************************************/\n\nstatic PyObject *\nssize_array_as_tuple(Py_ssize_t *array, Py_ssize_t len)\n{\n    PyObject *tuple, *x;\n    Py_ssize_t i;\n\n    if (array == NULL)\n        return PyTuple_New(0);\n\n    tuple = PyTuple_New(len);\n    if (tuple == NULL)\n        return NULL;\n\n    for (i = 0; i < len; i++) {\n        x = PyLong_FromSsize_t(array[i]);\n        if (x == NULL) {\n            Py_DECREF(tuple);\n            return NULL;\n        }\n        PyTuple_SET_ITEM(tuple, i, x);\n    }\n\n    return tuple;\n}\n\nstatic PyObject *\nndarray_get_flags(NDArrayObject *self, void *closure)\n{\n    return PyLong_FromLong(self->head->flags);\n}\n\nstatic PyObject *\nndarray_get_offset(NDArrayObject *self, void *closure)\n{\n    ndbuf_t *ndbuf = self->head;\n    return PyLong_FromSsize_t(ndbuf->offset);\n}\n\nstatic PyObject *\nndarray_get_obj(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n\n    if (base->obj == NULL) {\n        Py_RETURN_NONE;\n    }\n    return Py_NewRef(base->obj);\n}\n\nstatic PyObject *\nndarray_get_nbytes(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return PyLong_FromSsize_t(base->len);\n}\n\nstatic PyObject *\nndarray_get_readonly(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return PyBool_FromLong(base->readonly);\n}\n\nstatic PyObject *\nndarray_get_itemsize(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return PyLong_FromSsize_t(base->itemsize);\n}\n\nstatic PyObject *\nndarray_get_format(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    const char *fmt = base->format ? base->format : \"\";\n    return PyUnicode_FromString(fmt);\n}\n\nstatic PyObject *\nndarray_get_ndim(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return PyLong_FromSsize_t(base->ndim);\n}\n\nstatic PyObject *\nndarray_get_shape(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return ssize_array_as_tuple(base->shape, base->ndim);\n}\n\nstatic PyObject *\nndarray_get_strides(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return ssize_array_as_tuple(base->strides, base->ndim);\n}\n\nstatic PyObject *\nndarray_get_suboffsets(NDArrayObject *self, void *closure)\n{\n    Py_buffer *base = &self->head->base;\n    return ssize_array_as_tuple(base->suboffsets, base->ndim);\n}\n\nstatic PyObject *\nndarray_c_contig(PyObject *self, PyObject *dummy)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    int ret = PyBuffer_IsContiguous(&nd->head->base, 'C');\n\n    if (ret != ND_C_CONTIGUOUS(nd->head->flags)) {\n        PyErr_SetString(PyExc_RuntimeError,\n            \"results from PyBuffer_IsContiguous() and flags differ\");\n        return NULL;\n    }\n    return PyBool_FromLong(ret);\n}\n\nstatic PyObject *\nndarray_fortran_contig(PyObject *self, PyObject *dummy)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    int ret = PyBuffer_IsContiguous(&nd->head->base, 'F');\n\n    if (ret != ND_FORTRAN_CONTIGUOUS(nd->head->flags)) {\n        PyErr_SetString(PyExc_RuntimeError,\n            \"results from PyBuffer_IsContiguous() and flags differ\");\n        return NULL;\n    }\n    return PyBool_FromLong(ret);\n}\n\nstatic PyObject *\nndarray_contig(PyObject *self, PyObject *dummy)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    int ret = PyBuffer_IsContiguous(&nd->head->base, 'A');\n\n    if (ret != ND_ANY_CONTIGUOUS(nd->head->flags)) {\n        PyErr_SetString(PyExc_RuntimeError,\n            \"results from PyBuffer_IsContiguous() and flags differ\");\n        return NULL;\n    }\n    return PyBool_FromLong(ret);\n}\n\n\nstatic PyGetSetDef ndarray_getset [] =\n{\n  /* ndbuf */\n  { \"flags\",        (getter)ndarray_get_flags,      NULL, NULL, NULL},\n  { \"offset\",       (getter)ndarray_get_offset,     NULL, NULL, NULL},\n  /* ndbuf.base */\n  { \"obj\",          (getter)ndarray_get_obj,        NULL, NULL, NULL},\n  { \"nbytes\",       (getter)ndarray_get_nbytes,     NULL, NULL, NULL},\n  { \"readonly\",     (getter)ndarray_get_readonly,   NULL, NULL, NULL},\n  { \"itemsize\",     (getter)ndarray_get_itemsize,   NULL, NULL, NULL},\n  { \"format\",       (getter)ndarray_get_format,     NULL, NULL, NULL},\n  { \"ndim\",         (getter)ndarray_get_ndim,       NULL, NULL, NULL},\n  { \"shape\",        (getter)ndarray_get_shape,      NULL, NULL, NULL},\n  { \"strides\",      (getter)ndarray_get_strides,    NULL, NULL, NULL},\n  { \"suboffsets\",   (getter)ndarray_get_suboffsets, NULL, NULL, NULL},\n  { \"c_contiguous\", (getter)ndarray_c_contig,       NULL, NULL, NULL},\n  { \"f_contiguous\", (getter)ndarray_fortran_contig, NULL, NULL, NULL},\n  { \"contiguous\",   (getter)ndarray_contig,         NULL, NULL, NULL},\n  {NULL}\n};\n\nstatic PyObject *\nndarray_tolist(PyObject *self, PyObject *dummy)\n{\n    return ndarray_as_list((NDArrayObject *)self);\n}\n\nstatic PyObject *\nndarray_tobytes(PyObject *self, PyObject *dummy)\n{\n    ndbuf_t *ndbuf = ((NDArrayObject *)self)->head;\n    Py_buffer *src = &ndbuf->base;\n    Py_buffer dest;\n    PyObject *ret = NULL;\n    char *mem;\n\n    if (ND_C_CONTIGUOUS(ndbuf->flags))\n        return PyBytes_FromStringAndSize(src->buf, src->len);\n\n    assert(src->shape != NULL);\n    assert(src->strides != NULL);\n    assert(src->ndim > 0);\n\n    mem = PyMem_Malloc(src->len);\n    if (mem == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    dest = *src;\n    dest.buf = mem;\n    dest.suboffsets = NULL;\n    dest.strides = strides_from_shape(ndbuf, 0);\n    if (dest.strides == NULL)\n        goto out;\n    if (copy_buffer(&dest, src) < 0)\n        goto out;\n\n    ret = PyBytes_FromStringAndSize(mem, src->len);\n\nout:\n    PyMem_XFree(dest.strides);\n    PyMem_Free(mem);\n    return ret;\n}\n\n/* add redundant (negative) suboffsets for testing */\nstatic PyObject *\nndarray_add_suboffsets(PyObject *self, PyObject *dummy)\n{\n    NDArrayObject *nd = (NDArrayObject *)self;\n    Py_buffer *base = &nd->head->base;\n    Py_ssize_t i;\n\n    if (base->suboffsets != NULL) {\n        PyErr_SetString(PyExc_TypeError,\n            \"cannot add suboffsets to PIL-style array\");\n            return NULL;\n    }\n    if (base->strides == NULL) {\n        PyErr_SetString(PyExc_TypeError,\n            \"cannot add suboffsets to array without strides\");\n            return NULL;\n    }\n\n    base->suboffsets = PyMem_Malloc(base->ndim * (sizeof *base->suboffsets));\n    if (base->suboffsets == NULL) {\n        PyErr_NoMemory();\n        return NULL;\n    }\n\n    for (i = 0; i < base->ndim; i++)\n        base->suboffsets[i] = -1;\n\n    nd->head->flags &= ~(ND_C|ND_FORTRAN);\n\n    Py_RETURN_NONE;\n}\n\n/* Test PyMemoryView_FromBuffer(): return a memoryview from a static buffer.\n   Obviously this is fragile and only one such view may be active at any\n   time. Never use anything like this in real code! */\nstatic char *infobuf = NULL;\nstatic PyObject *\nndarray_memoryview_from_buffer(PyObject *self, PyObject *dummy)\n{\n    const NDArrayObject *nd = (NDArrayObject *)self;\n    const Py_buffer *view = &nd->head->base;\n    const ndbuf_t *ndbuf;\n    static char format[ND_MAX_NDIM+1];\n    static Py_ssize_t shape[ND_MAX_NDIM];\n    static Py_ssize_t strides[ND_MAX_NDIM];\n    static Py_ssize_t suboffsets[ND_MAX_NDIM];\n    static Py_buffer info;\n    char *p;\n\n    if (!ND_IS_CONSUMER(nd))\n        ndbuf = nd->head; /* self is ndarray/original exporter */\n    else if (NDArray_Check(view->obj) && !ND_IS_CONSUMER(view->obj))\n        /* self is ndarray and consumer from ndarray/original exporter */\n        ndbuf = ((NDArrayObject *)view->obj)->head;\n    else {\n        PyErr_SetString(PyExc_TypeError,\n        \"memoryview_from_buffer(): ndarray must be original exporter or \"\n        \"consumer from ndarray/original exporter\");\n         return NULL;\n    }\n\n    info = *view;\n    p = PyMem_Realloc(infobuf, ndbuf->len);\n    if (p == NULL) {\n        PyMem_Free(infobuf);\n        PyErr_NoMemory();\n        infobuf = NULL;\n        return NULL;\n    }\n    else {\n        infobuf = p;\n    }\n    /* copy the complete raw data */\n    memcpy(infobuf, ndbuf->data, ndbuf->len);\n    info.buf = infobuf + ((char *)view->buf - ndbuf->data);\n\n    if (view->format) {\n        if (strlen(view->format) > ND_MAX_NDIM) {\n            PyErr_Format(PyExc_TypeError,\n                \"memoryview_from_buffer: format is limited to %d characters\",\n                ND_MAX_NDIM);\n                return NULL;\n        }\n        strcpy(format, view->format);\n        info.format = format;\n    }\n    if (view->ndim > ND_MAX_NDIM) {\n        PyErr_Format(PyExc_TypeError,\n            \"memoryview_from_buffer: ndim is limited to %d\", ND_MAX_NDIM);\n            return NULL;\n    }\n    if (view->shape) {\n        memcpy(shape, view->shape, view->ndim * sizeof(Py_ssize_t));\n        info.shape = shape;\n    }\n    if (view->strides) {\n        memcpy(strides, view->strides, view->ndim * sizeof(Py_ssize_t));\n        info.strides = strides;\n    }\n    if (view->suboffsets) {\n        memcpy(suboffsets, view->suboffsets, view->ndim * sizeof(Py_ssize_t));\n        info.suboffsets = suboffsets;\n    }\n\n    return PyMemoryView_FromBuffer(&info);\n}\n\n/* Get a single item from bufobj at the location specified by seq.\n   seq is a list or tuple of indices. The purpose of this function\n   is to check other functions against PyBuffer_GetPointer(). */\nstatic PyObject *\nget_pointer(PyObject *self, PyObject *args)\n{\n    PyObject *ret = NULL, *bufobj, *seq;\n    Py_buffer view;\n    Py_ssize_t indices[ND_MAX_NDIM];\n    Py_ssize_t i;\n    void *ptr;\n\n    if (!PyArg_ParseTuple(args, \"OO\", &bufobj, &seq)) {\n        return NULL;\n    }\n\n    CHECK_LIST_OR_TUPLE(seq);\n    if (PyObject_GetBuffer(bufobj, &view, PyBUF_FULL_RO) < 0)\n        return NULL;\n\n    if (view.ndim > ND_MAX_NDIM) {\n        PyErr_Format(PyExc_ValueError,\n            \"get_pointer(): ndim > %d\", ND_MAX_NDIM);\n        goto out;\n    }\n    if (PySequence_Fast_GET_SIZE(seq) != view.ndim) {\n        PyErr_SetString(PyExc_ValueError,\n            \"get_pointer(): len(indices) != ndim\");\n        goto out;\n    }\n\n    for (i = 0; i < view.ndim; i++) {\n        PyObject *x = PySequence_Fast_GET_ITEM(seq, i);\n        indices[i] = PyLong_AsSsize_t(x);\n        if (PyErr_Occurred())\n            goto out;\n        if (indices[i] < 0 || indices[i] >= view.shape[i]) {\n            PyErr_Format(PyExc_ValueError,\n                \"get_pointer(): invalid index %zd at position %zd\",\n                indices[i], i);\n            goto out;\n        }\n    }\n\n    ptr = PyBuffer_GetPointer(&view, indices);\n    ret = unpack_single(ptr, view.format, view.itemsize);\n\nout:\n    PyBuffer_Release(&view);\n    return ret;\n}\n\nstatic PyObject *\nget_sizeof_void_p(PyObject *self, PyObject *Py_UNUSED(ignored))\n{\n    return PyLong_FromSize_t(sizeof(void *));\n}\n\nstatic char\nget_ascii_order(PyObject *order)\n{\n    PyObject *ascii_order;\n    char ord;\n\n    if (!PyUnicode_Check(order)) {\n        PyErr_SetString(PyExc_TypeError,\n            \"order must be a string\");\n        return CHAR_MAX;\n    }\n\n    ascii_order = PyUnicode_AsASCIIString(order);\n    if (ascii_order == NULL) {\n        return CHAR_MAX;\n    }\n\n    ord = PyBytes_AS_STRING(ascii_order)[0];\n    Py_DECREF(ascii_order);\n\n    if (ord != 'C' && ord != 'F' && ord != 'A') {\n        PyErr_SetString(PyExc_ValueError,\n            \"invalid order, must be C, F or A\");\n        return CHAR_MAX;\n    }\n\n    return ord;\n}\n\n/* Get a contiguous memoryview. */\nstatic PyObject *\nget_contiguous(PyObject *self, PyObject *args)\n{\n    PyObject *obj;\n    PyObject *buffertype;\n    PyObject *order;\n    long type;\n    char ord;\n\n    if (!PyArg_ParseTuple(args, \"OOO\", &obj, &buffertype, &order)) {\n        return NULL;\n    }\n\n    if (!PyLong_Check(buffertype)) {\n        PyErr_SetString(PyExc_TypeError,\n            \"buffertype must be PyBUF_READ or PyBUF_WRITE\");\n        return NULL;\n    }\n\n    type = PyLong_AsLong(buffertype);\n    if (type == -1 && PyErr_Occurred()) {\n        return NULL;\n    }\n    if (type != PyBUF_READ && type != PyBUF_WRITE) {\n        PyErr_SetString(PyExc_ValueError,\n            \"invalid buffer type\");\n        return NULL;\n    }\n\n    ord = get_ascii_order(order);\n    if (ord == CHAR_MAX)\n        return NULL;\n\n    return PyMemoryView_GetContiguous(obj, (int)type, ord);\n}\n\n/* PyBuffer_ToContiguous() */\nstatic PyObject *\npy_buffer_to_contiguous(PyObject *self, PyObject *args)\n{\n    PyObject *obj;\n    PyObject *order;\n    PyObject *ret = NULL;\n    int flags;\n    char ord;\n    Py_buffer view;\n    char *buf = NULL;\n\n    if (!PyArg_ParseTuple(args, \"OOi\", &obj, &order, &flags)) {\n        return NULL;\n    }\n\n    if (PyObject_GetBuffer(obj, &view, flags) < 0) {\n        return NULL;\n    }\n\n    ord = get_ascii_order(order);\n    if (ord == CHAR_MAX) {\n        goto out;\n    }\n\n    buf = PyMem_Malloc(view.len);\n    if (buf == NULL) {\n        PyErr_NoMemory();\n        goto out;\n    }\n\n    if (PyBuffer_ToContiguous(buf, &view, view.len, ord) < 0) {\n        goto out;\n    }\n\n    ret = PyBytes_FromStringAndSize(buf, view.len);\n\nout:\n    PyBuffer_Release(&view);\n    PyMem_XFree(buf);\n    return ret;\n}\n\nstatic int\nfmtcmp(const char *fmt1, const char *fmt2)\n{\n    if (fmt1 == NULL) {\n        return fmt2 == NULL || strcmp(fmt2, \"B\") == 0;\n    }\n    if (fmt2 == NULL) {\n        return fmt1 == NULL || strcmp(fmt1, \"B\") == 0;\n    }\n    return strcmp(fmt1, fmt2) == 0;\n}\n\nstatic int\narraycmp(const Py_ssize_t *a1, const Py_ssize_t *a2, const Py_ssize_t *shape,\n         Py_ssize_t ndim)\n{\n    Py_ssize_t i;\n\n\n    for (i = 0; i < ndim; i++) {\n        if (shape && shape[i] <= 1) {\n            /* strides can differ if the dimension is less than 2 */\n            continue;\n        }\n        if (a1[i] != a2[i]) {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\n/* Compare two contiguous buffers for physical equality. */\nstatic PyObject *\ncmp_contig(PyObject *self, PyObject *args)\n{\n    PyObject *b1, *b2; /* buffer objects */\n    Py_buffer v1, v2;\n    PyObject *ret;\n    int equal = 0;\n\n    if (!PyArg_ParseTuple(args, \"OO\", &b1, &b2)) {\n        return NULL;\n    }\n\n    if (PyObject_GetBuffer(b1, &v1, PyBUF_FULL_RO) < 0) {\n        PyErr_SetString(PyExc_TypeError,\n            \"cmp_contig: first argument does not implement the buffer \"\n            \"protocol\");\n        return NULL;\n    }\n    if (PyObject_GetBuffer(b2, &v2, PyBUF_FULL_RO) < 0) {\n        PyErr_SetString(PyExc_TypeError,\n            \"cmp_contig: second argument does not implement the buffer \"\n            \"protocol\");\n        PyBuffer_Release(&v1);\n        return NULL;\n    }\n\n    if (!(PyBuffer_IsContiguous(&v1, 'C')&&PyBuffer_IsContiguous(&v2, 'C')) &&\n        !(PyBuffer_IsContiguous(&v1, 'F')&&PyBuffer_IsContiguous(&v2, 'F'))) {\n        goto result;\n    }\n\n    /* readonly may differ if created from non-contiguous */\n    if (v1.len != v2.len ||\n        v1.itemsize != v2.itemsize ||\n        v1.ndim != v2.ndim ||\n        !fmtcmp(v1.format, v2.format) ||\n        !!v1.shape != !!v2.shape ||\n        !!v1.strides != !!v2.strides ||\n        !!v1.suboffsets != !!v2.suboffsets) {\n        goto result;\n    }\n\n    if ((v1.shape && !arraycmp(v1.shape, v2.shape, NULL, v1.ndim)) ||\n        (v1.strides && !arraycmp(v1.strides, v2.strides, v1.shape, v1.ndim)) ||\n        (v1.suboffsets && !arraycmp(v1.suboffsets, v2.suboffsets, NULL,\n                                    v1.ndim))) {\n        goto result;\n    }\n\n    if (memcmp((char *)v1.buf, (char *)v2.buf, v1.len) != 0) {\n        goto result;\n    }\n\n    equal = 1;\n\nresult:\n    PyBuffer_Release(&v1);\n    PyBuffer_Release(&v2);\n\n    ret = equal ? Py_True : Py_False;\n    return Py_NewRef(ret);\n}\n\nstatic PyObject *\nis_contiguous(PyObject *self, PyObject *args)\n{\n    PyObject *obj;\n    PyObject *order;\n    PyObject *ret = NULL;\n    Py_buffer view, *base;\n    char ord;\n\n    if (!PyArg_ParseTuple(args, \"OO\", &obj, &order)) {\n        return NULL;\n    }\n\n    ord = get_ascii_order(order);\n    if (ord == CHAR_MAX) {\n        return NULL;\n    }\n\n    if (NDArray_Check(obj)) {\n        /* Skip the buffer protocol to check simple etc. buffers directly. */\n        base = &((NDArrayObject *)obj)->head->base;\n        ret = PyBuffer_IsContiguous(base, ord) ? Py_True : Py_False;\n    }\n    else {\n        if (PyObject_GetBuffer(obj, &view, PyBUF_FULL_RO) < 0) {\n            PyErr_SetString(PyExc_TypeError,\n                \"is_contiguous: object does not implement the buffer \"\n                \"protocol\");\n            return NULL;\n        }\n        ret = PyBuffer_IsContiguous(&view, ord) ? Py_True : Py_False;\n        PyBuffer_Release(&view);\n    }\n\n    return Py_NewRef(ret);\n}\n\nstatic Py_hash_t\nndarray_hash(PyObject *self)\n{\n    const NDArrayObject *nd = (NDArrayObject *)self;\n    const Py_buffer *view = &nd->head->base;\n    PyObject *bytes;\n    Py_hash_t hash;\n\n    if (!view->readonly) {\n         PyErr_SetString(PyExc_ValueError,\n             \"cannot hash writable ndarray object\");\n         return -1;\n    }\n    if (view->obj != NULL && PyObject_Hash(view->obj) == -1) {\n         return -1;\n    }\n\n    bytes = ndarray_tobytes(self, NULL);\n    if (bytes == NULL) {\n        return -1;\n    }\n\n    hash = PyObject_Hash(bytes);\n    Py_DECREF(bytes);\n    return hash;\n}\n\n\nstatic PyMethodDef ndarray_methods [] =\n{\n    { \"tolist\", ndarray_tolist, METH_NOARGS, NULL },\n    { \"tobytes\", ndarray_tobytes, METH_NOARGS, NULL },\n    { \"push\", _PyCFunction_CAST(ndarray_push), METH_VARARGS|METH_KEYWORDS, NULL },\n    { \"pop\", ndarray_pop, METH_NOARGS, NULL },\n    { \"add_suboffsets\", ndarray_add_suboffsets, METH_NOARGS, NULL },\n    { \"memoryview_from_buffer\", ndarray_memoryview_from_buffer, METH_NOARGS, NULL },\n    {NULL}\n};\n\nstatic PyTypeObject NDArray_Type = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"ndarray\",                   /* Name of this type */\n    sizeof(NDArrayObject),       /* Basic object size */\n    0,                           /* Item size for varobject */\n    (destructor)ndarray_dealloc, /* tp_dealloc */\n    0,                           /* tp_vectorcall_offset */\n    0,                           /* tp_getattr */\n    0,                           /* tp_setattr */\n    0,                           /* tp_as_async */\n    0,                           /* tp_repr */\n    0,                           /* tp_as_number */\n    &ndarray_as_sequence,        /* tp_as_sequence */\n    &ndarray_as_mapping,         /* tp_as_mapping */\n    (hashfunc)ndarray_hash,      /* tp_hash */\n    0,                           /* tp_call */\n    0,                           /* tp_str */\n    PyObject_GenericGetAttr,     /* tp_getattro */\n    0,                           /* tp_setattro */\n    &ndarray_as_buffer,          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT,          /* tp_flags */\n    0,                           /* tp_doc */\n    0,                           /* tp_traverse */\n    0,                           /* tp_clear */\n    0,                           /* tp_richcompare */\n    0,                           /* tp_weaklistoffset */\n    0,                           /* tp_iter */\n    0,                           /* tp_iternext */\n    ndarray_methods,             /* tp_methods */\n    0,                           /* tp_members */\n    ndarray_getset,              /* tp_getset */\n    0,                           /* tp_base */\n    0,                           /* tp_dict */\n    0,                           /* tp_descr_get */\n    0,                           /* tp_descr_set */\n    0,                           /* tp_dictoffset */\n    ndarray_init,                /* tp_init */\n    0,                           /* tp_alloc */\n    ndarray_new,                 /* tp_new */\n};\n\n/**************************************************************************/\n/*                          StaticArray Object                            */\n/**************************************************************************/\n\nstatic PyTypeObject StaticArray_Type;\n\ntypedef struct {\n    PyObject_HEAD\n    int legacy_mode; /* if true, use the view.obj==NULL hack */\n} StaticArrayObject;\n\nstatic char static_mem[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\nstatic Py_ssize_t static_shape[1] = {12};\nstatic Py_ssize_t static_strides[1] = {1};\nstatic Py_buffer static_buffer = {\n    static_mem,     /* buf */\n    NULL,           /* obj */\n    12,             /* len */\n    1,              /* itemsize */\n    1,              /* readonly */\n    1,              /* ndim */\n    \"B\",            /* format */\n    static_shape,   /* shape */\n    static_strides, /* strides */\n    NULL,           /* suboffsets */\n    NULL            /* internal */\n};\n\nstatic PyObject *\nstaticarray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)\n{\n    return (PyObject *)PyObject_New(StaticArrayObject, &StaticArray_Type);\n}\n\nstatic int\nstaticarray_init(PyObject *self, PyObject *args, PyObject *kwds)\n{\n    StaticArrayObject *a = (StaticArrayObject *)self;\n    static char *kwlist[] = {\n        \"legacy_mode\", NULL\n    };\n    PyObject *legacy_mode = Py_False;\n\n    if (!PyArg_ParseTupleAndKeywords(args, kwds, \"|O\", kwlist, &legacy_mode))\n        return -1;\n\n    a->legacy_mode = (legacy_mode != Py_False);\n    return 0;\n}\n\nstatic void\nstaticarray_dealloc(StaticArrayObject *self)\n{\n    PyObject_Free(self);\n}\n\n/* Return a buffer for a PyBUF_FULL_RO request. Flags are not checked,\n   which makes this object a non-compliant exporter! */\nstatic int\nstaticarray_getbuf(StaticArrayObject *self, Py_buffer *view, int flags)\n{\n    *view = static_buffer;\n\n    if (self->legacy_mode) {\n        view->obj = NULL; /* Don't use this in new code. */\n    }\n    else {\n        view->obj = Py_NewRef(self);\n    }\n\n    return 0;\n}\n\nstatic PyBufferProcs staticarray_as_buffer = {\n    (getbufferproc)staticarray_getbuf, /* bf_getbuffer */\n    NULL,                              /* bf_releasebuffer */\n};\n\nstatic PyTypeObject StaticArray_Type = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    \"staticarray\",                   /* Name of this type */\n    sizeof(StaticArrayObject),       /* Basic object size */\n    0,                               /* Item size for varobject */\n    (destructor)staticarray_dealloc, /* tp_dealloc */\n    0,                               /* tp_vectorcall_offset */\n    0,                               /* tp_getattr */\n    0,                               /* tp_setattr */\n    0,                               /* tp_as_async */\n    0,                               /* tp_repr */\n    0,                               /* tp_as_number */\n    0,                               /* tp_as_sequence */\n    0,                               /* tp_as_mapping */\n    0,                               /* tp_hash */\n    0,                               /* tp_call */\n    0,                               /* tp_str */\n    0,                               /* tp_getattro */\n    0,                               /* tp_setattro */\n    &staticarray_as_buffer,          /* tp_as_buffer */\n    Py_TPFLAGS_DEFAULT,              /* tp_flags */\n    0,                               /* tp_doc */\n    0,                               /* tp_traverse */\n    0,                               /* tp_clear */\n    0,                               /* tp_richcompare */\n    0,                               /* tp_weaklistoffset */\n    0,                               /* tp_iter */\n    0,                               /* tp_iternext */\n    0,                               /* tp_methods */\n    0,                               /* tp_members */\n    0,                               /* tp_getset */\n    0,                               /* tp_base */\n    0,                               /* tp_dict */\n    0,                               /* tp_descr_get */\n    0,                               /* tp_descr_set */\n    0,                               /* tp_dictoffset */\n    staticarray_init,                /* tp_init */\n    0,                               /* tp_alloc */\n    staticarray_new,                 /* tp_new */\n};\n\n\nstatic struct PyMethodDef _testbuffer_functions[] = {\n    {\"slice_indices\", slice_indices, METH_VARARGS, NULL},\n    {\"get_pointer\", get_pointer, METH_VARARGS, NULL},\n    {\"get_sizeof_void_p\", get_sizeof_void_p, METH_NOARGS, NULL},\n    {\"get_contiguous\", get_contiguous, METH_VARARGS, NULL},\n    {\"py_buffer_to_contiguous\", py_buffer_to_contiguous, METH_VARARGS, NULL},\n    {\"is_contiguous\", is_contiguous, METH_VARARGS, NULL},\n    {\"cmp_contig\", cmp_contig, METH_VARARGS, NULL},\n    {NULL, NULL}\n};\n\nstatic struct PyModuleDef _testbuffermodule = {\n    PyModuleDef_HEAD_INIT,\n    \"_testbuffer\",\n    NULL,\n    -1,\n    _testbuffer_functions,\n    NULL,\n    NULL,\n    NULL,\n    NULL\n};\n\nstatic int\n_testbuffer_exec(PyObject *mod)\n{\n    Py_SET_TYPE(&NDArray_Type, &PyType_Type);\n    if (PyType_Ready(&NDArray_Type)) {\n        return -1;\n    }\n    if (PyModule_AddType(mod, &NDArray_Type) < 0) {\n        return -1;\n    }\n\n    Py_SET_TYPE(&StaticArray_Type, &PyType_Type);\n    if (PyModule_AddType(mod, &StaticArray_Type) < 0) {\n        return -1;\n    }\n\n    structmodule = PyImport_ImportModule(\"struct\");\n    if (structmodule == NULL) {\n        return -1;\n    }\n\n    Struct = PyObject_GetAttrString(structmodule, \"Struct\");\n    if (Struct == NULL) {\n        return -1;\n    }\n    calcsize = PyObject_GetAttrString(structmodule, \"calcsize\");\n    if (calcsize == NULL) {\n        return -1;\n    }\n\n    simple_format = PyUnicode_FromString(simple_fmt);\n    if (simple_format == NULL) {\n        return -1;\n    }\n\n#define ADD_INT_MACRO(mod, macro)                                             \\\n    do {                                                                    \\\n        if (PyModule_AddIntConstant(mod, #macro, macro) < 0) {                \\\n            return -1;                                                      \\\n        }                                                                   \\\n    } while (0)\n\n    ADD_INT_MACRO(mod, ND_MAX_NDIM);\n    ADD_INT_MACRO(mod, ND_VAREXPORT);\n    ADD_INT_MACRO(mod, ND_WRITABLE);\n    ADD_INT_MACRO(mod, ND_FORTRAN);\n    ADD_INT_MACRO(mod, ND_SCALAR);\n    ADD_INT_MACRO(mod, ND_PIL);\n    ADD_INT_MACRO(mod, ND_GETBUF_FAIL);\n    ADD_INT_MACRO(mod, ND_GETBUF_UNDEFINED);\n    ADD_INT_MACRO(mod, ND_REDIRECT);\n\n    ADD_INT_MACRO(mod, PyBUF_SIMPLE);\n    ADD_INT_MACRO(mod, PyBUF_WRITABLE);\n    ADD_INT_MACRO(mod, PyBUF_FORMAT);\n    ADD_INT_MACRO(mod, PyBUF_ND);\n    ADD_INT_MACRO(mod, PyBUF_STRIDES);\n    ADD_INT_MACRO(mod, PyBUF_INDIRECT);\n    ADD_INT_MACRO(mod, PyBUF_C_CONTIGUOUS);\n    ADD_INT_MACRO(mod, PyBUF_F_CONTIGUOUS);\n    ADD_INT_MACRO(mod, PyBUF_ANY_CONTIGUOUS);\n    ADD_INT_MACRO(mod, PyBUF_FULL);\n    ADD_INT_MACRO(mod, PyBUF_FULL_RO);\n    ADD_INT_MACRO(mod, PyBUF_RECORDS);\n    ADD_INT_MACRO(mod, PyBUF_RECORDS_RO);\n    ADD_INT_MACRO(mod, PyBUF_STRIDED);\n    ADD_INT_MACRO(mod, PyBUF_STRIDED_RO);\n    ADD_INT_MACRO(mod, PyBUF_CONTIG);\n    ADD_INT_MACRO(mod, PyBUF_CONTIG_RO);\n\n    ADD_INT_MACRO(mod, PyBUF_READ);\n    ADD_INT_MACRO(mod, PyBUF_WRITE);\n\n#undef ADD_INT_MACRO\n\n    return 0;\n}\n\nPyMODINIT_FUNC\nPyInit__testbuffer(void)\n{\n    PyObject *mod = PyModule_Create(&_testbuffermodule);\n    if (mod == NULL) {\n        return NULL;\n    }\n#ifdef Py_GIL_DISABLED\n    PyUnstable_Module_SetGIL(mod, Py_MOD_GIL_NOT_USED);\n#endif\n    if (_testbuffer_exec(mod) < 0) {\n        Py_DECREF(mod);\n        return NULL;\n    }\n    return mod;\n}\n"},
                          "sourceLanguage": "c"}],
           "results": [{"ruleId": "-Wanalyzer-null-argument",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 4156,
                                       "gcc/analyzer/saved_diagnostic/snode": 1081,
                                       "gcc/analyzer/saved_diagnostic/sval": "(char *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 30},
                        "level": "warning",
                        "message": {"text": "use of NULL 'p' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 489,
                                                                       "startColumn": 17,
                                                                       "endColumn": 43},
                                                            "contextRegion": {"startLine": 489,
                                                                              "snippet": {"text": "                memcpy(p, xsptr, itemsize);\n"}}},
                                       "logicalLocations": [{"name": "copy_rec",
                                                             "fullyQualifiedName": "copy_rec",
                                                             "decoratedName": "copy_rec",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2150,
                                                                                                                           "snippet": {"text": "ndarray_tobytes(PyObject *self, PyObject *dummy)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'ndarray_tobytes'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 320,
                                                                                                                                 "dst_idx": 322,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2158,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2158,
                                                                                                                           "snippet": {"text": "    if (ND_C_CONTIGUOUS(ndbuf->flags))\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 320,
                                                                                                                                 "dst_idx": 322,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2165,
                                                                                                                    "startColumn": 24,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 2165,
                                                                                                                           "snippet": {"text": "    mem = PyMem_Malloc(src->len);\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 322,
                                                                                                                                 "dst_idx": 324,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2166,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2166,
                                                                                                                           "snippet": {"text": "    if (mem == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mem' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 322,
                                                                                                                                 "dst_idx": 324,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2171,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2171,
                                                                                                                           "snippet": {"text": "    dest = *src;\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 324,
                                                                                                                                 "dst_idx": 875,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2174,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 48},
                                                                                                         "contextRegion": {"startLine": 2174,
                                                                                                                           "snippet": {"text": "    dest.strides = strides_from_shape(ndbuf, 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'strides_from_shape' from 'ndarray_tobytes'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 884,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 884,
                                                                                                                           "snippet": {"text": "strides_from_shape(const ndbuf_t *ndbuf, int flags)\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'strides_from_shape'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 876,
                                                                                                                                 "dst_idx": 878,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 890,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 890,
                                                                                                                           "snippet": {"text": "    if (s == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 's' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 876,
                                                                                                                                 "dst_idx": 878,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 895,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 895,
                                                                                                                           "snippet": {"text": "    if (flags & ND_FORTRAN) {\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 878,
                                                                                                                                 "dst_idx": 882,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 895,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 895,
                                                                                                                           "snippet": {"text": "    if (flags & ND_FORTRAN) {\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 878,
                                                                                                                                 "dst_idx": 882,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 901,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 901,
                                                                                                                           "snippet": {"text": "        s[base->ndim-1] = base->itemsize;\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 886,
                                                                                                                                 "dst_idx": 325,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2174,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 48},
                                                                                                         "contextRegion": {"startLine": 2174,
                                                                                                                           "snippet": {"text": "    dest.strides = strides_from_shape(ndbuf, 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'ndarray_tobytes' from 'strides_from_shape'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 325,
                                                                                                                                 "dst_idx": 328,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2175,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2175,
                                                                                                                           "snippet": {"text": "    if (dest.strides == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 325,
                                                                                                                                 "dst_idx": 328,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2177,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 2177,
                                                                                                                           "snippet": {"text": "    if (copy_buffer(&dest, src) < 0)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 328,
                                                                                                                                 "dst_idx": 1033,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2177,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 2177,
                                                                                                                           "snippet": {"text": "    if (copy_buffer(&dest, src) < 0)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'copy_buffer' from 'ndarray_tobytes'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 534,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 534,
                                                                                                                           "snippet": {"text": "copy_buffer(Py_buffer *dest, Py_buffer *src)\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'copy_buffer'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1034,
                                                                                                                                 "dst_idx": 1052,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 540,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 33},
                                                                                                         "contextRegion": {"startLine": 540,
                                                                                                                           "snippet": {"text": "    if (cmp_structure(dest, src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'cmp_structure' from 'copy_buffer'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 511,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 511,
                                                                                                                           "snippet": {"text": "cmp_structure(Py_buffer *dest, Py_buffer *src)\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'cmp_structure'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1057,
                                                                                                                                 "dst_idx": 1058,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 515,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 515,
                                                                                                                           "snippet": {"text": "    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when the strings are equal)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1057,
                                                                                                                                 "dst_idx": 1058,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 516,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 516,
                                                                                                                           "snippet": {"text": "        dest->itemsize != src->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1058,
                                                                                                                                 "dst_idx": 1059,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 515,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 516,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 515,
                                                                                                                           "endLine": 516,
                                                                                                                           "snippet": {"text": "    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n        dest->itemsize != src->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1058,
                                                                                                                                 "dst_idx": 1059,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 517,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 517,
                                                                                                                           "snippet": {"text": "        dest->ndim != src->ndim)\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1059,
                                                                                                                                 "dst_idx": 1060,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 515,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 517,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 515,
                                                                                                                           "endLine": 517,
                                                                                                                           "snippet": {"text": "    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n        dest->itemsize != src->itemsize ||\n        dest->ndim != src->ndim)\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1059,
                                                                                                                                 "dst_idx": 1060,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1066,
                                                                                                                                 "dst_idx": 1035,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 540,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 33},
                                                                                                         "contextRegion": {"startLine": 540,
                                                                                                                           "snippet": {"text": "    if (cmp_structure(dest, src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'copy_buffer' from 'cmp_structure'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1035,
                                                                                                                                 "dst_idx": 1038,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 540,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 540,
                                                                                                                           "snippet": {"text": "    if (cmp_structure(dest, src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1035,
                                                                                                                                 "dst_idx": 1038,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 546,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 26},
                                                                                                         "contextRegion": {"startLine": 546,
                                                                                                                           "snippet": {"text": "    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1042,
                                                                                                                                 "dst_idx": 1043,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 546,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 548,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 546,
                                                                                                                           "endLine": 548,
                                                                                                                           "snippet": {"text": "    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n        (src->suboffsets && src->suboffsets[src->ndim-1] >= 0) ||\n        dest->strides[dest->ndim-1] != dest->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1042,
                                                                                                                                 "dst_idx": 1043,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 549,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 549,
                                                                                                                           "snippet": {"text": "        src->strides[src->ndim-1] != src->itemsize) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1043,
                                                                                                                                 "dst_idx": 1046,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 546,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 549,
                                                                                                                    "endColumn": 51},
                                                                                                         "contextRegion": {"startLine": 546,
                                                                                                                           "endLine": 549,
                                                                                                                           "snippet": {"text": "    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n        (src->suboffsets && src->suboffsets[src->ndim-1] >= 0) ||\n        dest->strides[dest->ndim-1] != dest->itemsize ||\n        src->strides[src->ndim-1] != src->itemsize) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1043,
                                                                                                                                 "dst_idx": 1046,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 559,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 53},
                                                                                                         "contextRegion": {"startLine": 559,
                                                                                                                           "snippet": {"text": "             src->buf, src->strides, src->suboffsets,\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1046,
                                                                                                                                 "dst_idx": 1067,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 557,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endLine": 560,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 557,
                                                                                                                           "endLine": 560,
                                                                                                                           "snippet": {"text": "    copy_rec(dest->shape, dest->ndim, dest->itemsize,\n             dest->buf, dest->strides, dest->suboffsets,\n             src->buf, src->strides, src->suboffsets,\n             mem);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'copy_rec' from 'copy_buffer'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 470,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 470,
                                                                                                                           "snippet": {"text": "copy_rec(const Py_ssize_t *shape, Py_ssize_t ndim, Py_ssize_t itemsize,\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'copy_rec'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1068,
                                                                                                                                 "dst_idx": 1070,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    if (ndim == 1) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'ndim == 1')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1068,
                                                                                                                                 "dst_idx": 1070,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1082,
                                                                                                                                 "dst_idx": 1078,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 487,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 487,
                                                                                                                           "snippet": {"text": "            for (i=0, p=mem; i<shape[0]; p+=itemsize, sptr+=sstrides[0], i++) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1082,
                                                                                                                                 "dst_idx": 1078,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 488,
                                                                                                                    "startColumn": 31,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 488,
                                                                                                                           "snippet": {"text": "                char *xsptr = ADJUST_PTR(sptr, ssuboffsets);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 489,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 43},
                                                                                                         "contextRegion": {"startLine": 489,
                                                                                                                           "snippet": {"text": "                memcpy(p, xsptr, itemsize);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 1 ('p') NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 38}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 1 of '__builtin_memcpy' must be non-null"}}]},
                       {"ruleId": "-Wanalyzer-null-argument",
                        "taxa": [{"id": "476",
                                  "toolComponent": {"name": "cwe"}}],
                        "properties": {"gcc/analyzer/saved_diagnostic/sm": "malloc",
                                       "gcc/analyzer/saved_diagnostic/enode": 4288,
                                       "gcc/analyzer/saved_diagnostic/snode": 1087,
                                       "gcc/analyzer/saved_diagnostic/sval": "(char *)0B",
                                       "gcc/analyzer/saved_diagnostic/state": "null",
                                       "gcc/analyzer/saved_diagnostic/idx": 33},
                        "level": "warning",
                        "message": {"text": "use of NULL 'p' where non-null expected"},
                        "locations": [{"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                 "uriBaseId": "PWD"},
                                                            "region": {"startLine": 493,
                                                                       "startColumn": 17,
                                                                       "endColumn": 43},
                                                            "contextRegion": {"startLine": 493,
                                                                              "snippet": {"text": "                memcpy(xdptr, p, itemsize);\n"}}},
                                       "logicalLocations": [{"name": "copy_rec",
                                                             "fullyQualifiedName": "copy_rec",
                                                             "decoratedName": "copy_rec",
                                                             "kind": "function"}]}],
                        "codeFlows": [{"threadFlows": [{"id": "main",
                                                        "locations": [{"properties": {"gcc/analyzer/checker_event/emission_id": "(1)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2150,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2150,
                                                                                                                           "snippet": {"text": "ndarray_tobytes(PyObject *self, PyObject *dummy)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'ndarray_tobytes'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 1},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(2)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 320,
                                                                                                                                 "dst_idx": 322,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2158,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2158,
                                                                                                                           "snippet": {"text": "    if (ND_C_CONTIGUOUS(ndbuf->flags))\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 2},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(3)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 320,
                                                                                                                                 "dst_idx": 322,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2165,
                                                                                                                    "startColumn": 24,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 2165,
                                                                                                                           "snippet": {"text": "    mem = PyMem_Malloc(src->len);\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 3},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(4)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 322,
                                                                                                                                 "dst_idx": 324,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2166,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2166,
                                                                                                                           "snippet": {"text": "    if (mem == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'mem' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 4},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(5)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 322,
                                                                                                                                 "dst_idx": 324,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2171,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endColumn": 16},
                                                                                                         "contextRegion": {"startLine": 2171,
                                                                                                                           "snippet": {"text": "    dest = *src;\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 5},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(6)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 324,
                                                                                                                                 "dst_idx": 875,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2174,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 48},
                                                                                                         "contextRegion": {"startLine": 2174,
                                                                                                                           "snippet": {"text": "    dest.strides = strides_from_shape(ndbuf, 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'strides_from_shape' from 'ndarray_tobytes'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 6},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(7)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 884,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 884,
                                                                                                                           "snippet": {"text": "strides_from_shape(const ndbuf_t *ndbuf, int flags)\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'strides_from_shape'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 7},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(8)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 876,
                                                                                                                                 "dst_idx": 878,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 890,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 890,
                                                                                                                           "snippet": {"text": "    if (s == NULL) {\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 's' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 8},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(9)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 876,
                                                                                                                                 "dst_idx": 878,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 895,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 895,
                                                                                                                           "snippet": {"text": "    if (flags & ND_FORTRAN) {\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 9},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(10)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 878,
                                                                                                                                 "dst_idx": 882,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 895,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 895,
                                                                                                                           "snippet": {"text": "    if (flags & ND_FORTRAN) {\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 10},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(11)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 878,
                                                                                                                                 "dst_idx": 882,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 901,
                                                                                                                    "startColumn": 11,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 901,
                                                                                                                           "snippet": {"text": "        s[base->ndim-1] = base->itemsize;\n"}}},
                                                                                    "logicalLocations": [{"name": "strides_from_shape",
                                                                                                          "fullyQualifiedName": "strides_from_shape",
                                                                                                          "decoratedName": "strides_from_shape",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 11},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(12)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 886,
                                                                                                                                 "dst_idx": 325,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2174,
                                                                                                                    "startColumn": 20,
                                                                                                                    "endColumn": 48},
                                                                                                         "contextRegion": {"startLine": 2174,
                                                                                                                           "snippet": {"text": "    dest.strides = strides_from_shape(ndbuf, 0);\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'ndarray_tobytes' from 'strides_from_shape'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 12},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(13)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 325,
                                                                                                                                 "dst_idx": 328,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2175,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 2175,
                                                                                                                           "snippet": {"text": "    if (dest.strides == NULL)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 13},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(14)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 325,
                                                                                                                                 "dst_idx": 328,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2177,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 2177,
                                                                                                                           "snippet": {"text": "    if (copy_buffer(&dest, src) < 0)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 14},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(15)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 328,
                                                                                                                                 "dst_idx": 1033,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 2177,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 2177,
                                                                                                                           "snippet": {"text": "    if (copy_buffer(&dest, src) < 0)\n"}}},
                                                                                    "logicalLocations": [{"name": "ndarray_tobytes",
                                                                                                          "fullyQualifiedName": "ndarray_tobytes",
                                                                                                          "decoratedName": "ndarray_tobytes",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'copy_buffer' from 'ndarray_tobytes'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 1,
                                                                       "executionOrder": 15},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(16)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 534,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 12},
                                                                                                         "contextRegion": {"startLine": 534,
                                                                                                                           "snippet": {"text": "copy_buffer(Py_buffer *dest, Py_buffer *src)\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'copy_buffer'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 16},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(17)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1034,
                                                                                                                                 "dst_idx": 1052,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 540,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 33},
                                                                                                         "contextRegion": {"startLine": 540,
                                                                                                                           "snippet": {"text": "    if (cmp_structure(dest, src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'cmp_structure' from 'copy_buffer'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 17},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(18)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 511,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 14},
                                                                                                         "contextRegion": {"startLine": 511,
                                                                                                                           "snippet": {"text": "cmp_structure(Py_buffer *dest, Py_buffer *src)\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'cmp_structure'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 18},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(19)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1057,
                                                                                                                                 "dst_idx": 1058,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 515,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 515,
                                                                                                                           "snippet": {"text": "    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when the strings are equal)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 19},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(20)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1057,
                                                                                                                                 "dst_idx": 1058,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 516,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 23},
                                                                                                         "contextRegion": {"startLine": 516,
                                                                                                                           "snippet": {"text": "        dest->itemsize != src->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 20},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(21)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1058,
                                                                                                                                 "dst_idx": 1059,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 515,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 516,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 515,
                                                                                                                           "endLine": 516,
                                                                                                                           "snippet": {"text": "    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n        dest->itemsize != src->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 21},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(22)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1058,
                                                                                                                                 "dst_idx": 1059,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 517,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 19},
                                                                                                         "contextRegion": {"startLine": 517,
                                                                                                                           "snippet": {"text": "        dest->ndim != src->ndim)\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 22},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(23)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1059,
                                                                                                                                 "dst_idx": 1060,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 515,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 517,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 515,
                                                                                                                           "endLine": 517,
                                                                                                                           "snippet": {"text": "    if (strcmp(FIX_FORMAT(dest->format), FIX_FORMAT(src->format)) != 0 ||\n        dest->itemsize != src->itemsize ||\n        dest->ndim != src->ndim)\n"}}},
                                                                                    "logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 23},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(24)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1059,
                                                                                                                                 "dst_idx": 1060,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "cmp_structure",
                                                                                                          "fullyQualifiedName": "cmp_structure",
                                                                                                          "decoratedName": "cmp_structure",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 24},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(25)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_RETURN_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_RETURN",
                                                                                                                                 "src_idx": 1066,
                                                                                                                                 "dst_idx": 1035,
                                                                                                                                 "desc": "return"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 540,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 33},
                                                                                                         "contextRegion": {"startLine": 540,
                                                                                                                           "snippet": {"text": "    if (cmp_structure(dest, src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "returning to 'copy_buffer' from 'cmp_structure'"}},
                                                                       "kinds": ["return",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 25},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(26)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1035,
                                                                                                                                 "dst_idx": 1038,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 540,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 540,
                                                                                                                           "snippet": {"text": "    if (cmp_structure(dest, src) < 0) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 26},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(27)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1035,
                                                                                                                                 "dst_idx": 1038,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 546,
                                                                                                                    "startColumn": 10,
                                                                                                                    "endColumn": 26},
                                                                                                         "contextRegion": {"startLine": 546,
                                                                                                                           "snippet": {"text": "    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 27},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(28)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1041,
                                                                                                                                 "dst_idx": 1042,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 547,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 63},
                                                                                                         "contextRegion": {"startLine": 547,
                                                                                                                           "snippet": {"text": "        (src->suboffsets && src->suboffsets[src->ndim-1] >= 0) ||\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 28},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(29)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1041,
                                                                                                                                 "dst_idx": 1042,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 548,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 548,
                                                                                                                           "snippet": {"text": "        dest->strides[dest->ndim-1] != dest->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 29},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(30)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1042,
                                                                                                                                 "dst_idx": 1043,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 546,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 548,
                                                                                                                    "endColumn": 54},
                                                                                                         "contextRegion": {"startLine": 546,
                                                                                                                           "endLine": 548,
                                                                                                                           "snippet": {"text": "    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n        (src->suboffsets && src->suboffsets[src->ndim-1] >= 0) ||\n        dest->strides[dest->ndim-1] != dest->itemsize ||\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 30},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(31)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1042,
                                                                                                                                 "dst_idx": 1043,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 549,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endColumn": 21},
                                                                                                         "contextRegion": {"startLine": 549,
                                                                                                                           "snippet": {"text": "        src->strides[src->ndim-1] != src->itemsize) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 31},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(32)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1043,
                                                                                                                                 "dst_idx": 1046,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 546,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 549,
                                                                                                                    "endColumn": 51},
                                                                                                         "contextRegion": {"startLine": 546,
                                                                                                                           "endLine": 549,
                                                                                                                           "snippet": {"text": "    if ((dest->suboffsets && dest->suboffsets[dest->ndim-1] >= 0) ||\n        (src->suboffsets && src->suboffsets[src->ndim-1] >= 0) ||\n        dest->strides[dest->ndim-1] != dest->itemsize ||\n        src->strides[src->ndim-1] != src->itemsize) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 32},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(33)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1043,
                                                                                                                                 "dst_idx": 1046,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 559,
                                                                                                                    "startColumn": 38,
                                                                                                                    "endColumn": 53},
                                                                                                         "contextRegion": {"startLine": 559,
                                                                                                                           "snippet": {"text": "             src->buf, src->strides, src->suboffsets,\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 33},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(34)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1046,
                                                                                                                                 "dst_idx": 1067,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 557,
                                                                                                                    "startColumn": 5,
                                                                                                                    "endLine": 560,
                                                                                                                    "endColumn": 18},
                                                                                                         "contextRegion": {"startLine": 557,
                                                                                                                           "endLine": 560,
                                                                                                                           "snippet": {"text": "    copy_rec(dest->shape, dest->ndim, dest->itemsize,\n             dest->buf, dest->strides, dest->suboffsets,\n             src->buf, src->strides, src->suboffsets,\n             mem);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_buffer",
                                                                                                          "fullyQualifiedName": "copy_buffer",
                                                                                                          "decoratedName": "copy_buffer",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'copy_rec' from 'copy_buffer'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 2,
                                                                       "executionOrder": 34},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(35)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 470,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 470,
                                                                                                                           "snippet": {"text": "copy_rec(const Py_ssize_t *shape, Py_ssize_t ndim, Py_ssize_t itemsize,\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'copy_rec'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 35},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(36)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1068,
                                                                                                                                 "dst_idx": 1069,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    if (ndim == 1) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'ndim != 1')..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 36},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(37)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1068,
                                                                                                                                 "dst_idx": 1069,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 37},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(38)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1101,
                                                                                                                                 "dst_idx": 1090,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 499,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 29},
                                                                                                         "contextRegion": {"startLine": 499,
                                                                                                                           "snippet": {"text": "    for (i = 0; i < shape[0]; dptr+=dstrides[0], sptr+=sstrides[0], i++) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 38},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(39)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1101,
                                                                                                                                 "dst_idx": 1090,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 500,
                                                                                                                    "startColumn": 23,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 500,
                                                                                                                           "snippet": {"text": "        char *xdptr = ADJUST_PTR(dptr, dsuboffsets);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 39},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(40)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1093,
                                                                                                                                 "dst_idx": 1094,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 501,
                                                                                                                    "startColumn": 23,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 501,
                                                                                                                           "snippet": {"text": "        char *xsptr = ADJUST_PTR(sptr, ssuboffsets);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'ssuboffsets' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 40},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(41)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1093,
                                                                                                                                 "dst_idx": 1094,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 501,
                                                                                                                    "startColumn": 23,
                                                                                                                    "endColumn": 24},
                                                                                                         "contextRegion": {"startLine": 501,
                                                                                                                           "snippet": {"text": "        char *xsptr = ADJUST_PTR(sptr, ssuboffsets);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 41},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(42)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1097,
                                                                                                                                 "dst_idx": 1099,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 503,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 506,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 503,
                                                                                                                           "endLine": 506,
                                                                                                                           "snippet": {"text": "        copy_rec(shape+1, ndim-1, itemsize,\n                 xdptr, dstrides+1, dsuboffsets ? dsuboffsets+1 : NULL,\n                 xsptr, sstrides+1, ssuboffsets ? ssuboffsets+1 : NULL,\n                 mem);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'dsuboffsets' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 42},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(43)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1097,
                                                                                                                                 "dst_idx": 1099,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 503,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 506,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 503,
                                                                                                                           "endLine": 506,
                                                                                                                           "snippet": {"text": "        copy_rec(shape+1, ndim-1, itemsize,\n                 xdptr, dstrides+1, dsuboffsets ? dsuboffsets+1 : NULL,\n                 xsptr, sstrides+1, ssuboffsets ? ssuboffsets+1 : NULL,\n                 mem);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 43},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(44)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_CALL_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CALL",
                                                                                                                                 "src_idx": 1099,
                                                                                                                                 "dst_idx": 1067,
                                                                                                                                 "desc": "call"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 503,
                                                                                                                    "startColumn": 9,
                                                                                                                    "endLine": 506,
                                                                                                                    "endColumn": 22},
                                                                                                         "contextRegion": {"startLine": 503,
                                                                                                                           "endLine": 506,
                                                                                                                           "snippet": {"text": "        copy_rec(shape+1, ndim-1, itemsize,\n                 xdptr, dstrides+1, dsuboffsets ? dsuboffsets+1 : NULL,\n                 xsptr, sstrides+1, ssuboffsets ? ssuboffsets+1 : NULL,\n                 mem);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "calling 'copy_rec' from 'copy_rec'"}},
                                                                       "kinds": ["call",
                                                                                 "function"],
                                                                       "nestingLevel": 3,
                                                                       "executionOrder": 44},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(45)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_FUNCTION_ENTRY"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 470,
                                                                                                                    "startColumn": 1,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 470,
                                                                                                                           "snippet": {"text": "copy_rec(const Py_ssize_t *shape, Py_ssize_t ndim, Py_ssize_t itemsize,\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "entry to 'copy_rec'"}},
                                                                       "kinds": ["enter",
                                                                                 "function"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 45},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(46)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1068,
                                                                                                                                 "dst_idx": 1070,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 479,
                                                                                                                    "startColumn": 8,
                                                                                                                    "endColumn": 9},
                                                                                                         "contextRegion": {"startLine": 479,
                                                                                                                           "snippet": {"text": "    if (ndim == 1) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'ndim == 1')..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 46},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(47)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1068,
                                                                                                                                 "dst_idx": 1070,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 47},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(48)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1070,
                                                                                                                                 "dst_idx": 1073,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 12,
                                                                                                                    "endColumn": 13},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch (when 'dsuboffsets' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 48},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(49)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1070,
                                                                                                                                 "dst_idx": 1073,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 41},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 49},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(50)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1073,
                                                                                                                                 "dst_idx": 1074,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 13,
                                                                                                                    "endColumn": 41},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'ssuboffsets' is non-NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 50},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(51)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1073,
                                                                                                                                 "dst_idx": 1074,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 480,
                                                                                                                    "startColumn": 40,
                                                                                                                    "endColumn": 41},
                                                                                                         "contextRegion": {"startLine": 480,
                                                                                                                           "snippet": {"text": "        if (!HAVE_PTR(dsuboffsets) && !HAVE_PTR(ssuboffsets) &&\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 51},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(52)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1082,
                                                                                                                                 "dst_idx": 1083,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 487,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 487,
                                                                                                                           "snippet": {"text": "            for (i=0, p=mem; i<shape[0]; p+=itemsize, sptr+=sstrides[0], i++) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 52},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(53)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1082,
                                                                                                                                 "dst_idx": 1083,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 53},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(54)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1088,
                                                                                                                                 "dst_idx": 1084,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 491,
                                                                                                                    "startColumn": 30,
                                                                                                                    "endColumn": 40},
                                                                                                         "contextRegion": {"startLine": 491,
                                                                                                                           "snippet": {"text": "            for (i=0, p=mem; i<shape[0]; p+=itemsize, dptr+=dstrides[0], i++) {\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'true' branch..."}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 54},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(55)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1088,
                                                                                                                                 "dst_idx": 1084,
                                                                                                                                 "desc": "true (flags TRUE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 492,
                                                                                                                    "startColumn": 31,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 492,
                                                                                                                           "snippet": {"text": "                char *xdptr = ADJUST_PTR(dptr, dsuboffsets);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "true"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 55},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(56)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_START_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1084,
                                                                                                                                 "dst_idx": 1087,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 492,
                                                                                                                    "startColumn": 31,
                                                                                                                    "endColumn": 32},
                                                                                                         "contextRegion": {"startLine": 492,
                                                                                                                           "snippet": {"text": "                char *xdptr = ADJUST_PTR(dptr, dsuboffsets);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "following 'false' branch (when 'dsuboffsets' is NULL)..."}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 56},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(57)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_END_CFG_EDGE",
                                                                                      "gcc/analyzer/superedge_event/superedge": {"kind": "SUPEREDGE_CFG_EDGE",
                                                                                                                                 "src_idx": 1084,
                                                                                                                                 "dst_idx": 1087,
                                                                                                                                 "desc": "false (flags FALSE_VALUE | EXECUTABLE) (has goto_locus)"}},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 493,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 43},
                                                                                                         "contextRegion": {"startLine": 493,
                                                                                                                           "snippet": {"text": "                memcpy(xdptr, p, itemsize);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "...to here"}},
                                                                       "kinds": ["branch",
                                                                                 "false"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 57},
                                                                      {"properties": {"gcc/analyzer/checker_event/emission_id": "(58)",
                                                                                      "gcc/analyzer/checker_event/kind": "EK_WARNING"},
                                                                       "location": {"physicalLocation": {"artifactLocation": {"uri": "./Modules/_testbuffer.c",
                                                                                                                              "uriBaseId": "PWD"},
                                                                                                         "region": {"startLine": 493,
                                                                                                                    "startColumn": 17,
                                                                                                                    "endColumn": 43},
                                                                                                         "contextRegion": {"startLine": 493,
                                                                                                                           "snippet": {"text": "                memcpy(xdptr, p, itemsize);\n"}}},
                                                                                    "logicalLocations": [{"name": "copy_rec",
                                                                                                          "fullyQualifiedName": "copy_rec",
                                                                                                          "decoratedName": "copy_rec",
                                                                                                          "kind": "function"}],
                                                                                    "message": {"text": "argument 2 ('p') NULL where non-null expected"}},
                                                                       "kinds": ["danger"],
                                                                       "nestingLevel": 4,
                                                                       "executionOrder": 58}]}]}],
                        "relatedLocations": [{"message": {"text": "argument 2 of '__builtin_memcpy' must be non-null"}}]}]}]}
